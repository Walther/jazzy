{"version":3,"sources":["../static/js/main.8dc854d1.js","../webpack/bootstrap 053834910aed94109eba","../node_modules/teoria/lib/knowledge.js","../node_modules/teoria/lib/interval.js","../node_modules/object-assign/index.js","../node_modules/react/index.js","../node_modules/fbjs/lib/emptyFunction.js","../node_modules/lodash/_baseGetTag.js","../node_modules/lodash/isObjectLike.js","../node_modules/promise/lib/core.js","../node_modules/webpack/buildin/global.js","../node_modules/fbjs/lib/emptyObject.js","../node_modules/fbjs/lib/invariant.js","../node_modules/teoria/lib/note.js","../node_modules/notecoord/index.js","../node_modules/accidental-value/index.js","../node_modules/teoria/lib/vector.js","../node_modules/lodash/_arraySample.js","../node_modules/lodash/_Symbol.js","../node_modules/lodash/_root.js","../node_modules/lodash/_freeGlobal.js","../node_modules/lodash/isArray.js","../node_modules/webpack/buildin/module.js","../node_modules/lodash/isLength.js","../node_modules/tone/build/Tone.js","../node_modules/react-scripts/config/polyfills.js","../node_modules/promise/lib/rejection-tracking.js","../node_modules/asap/browser-raw.js","../node_modules/promise/lib/es6-extensions.js","../node_modules/whatwg-fetch/fetch.js","index.js","../node_modules/react/cjs/react.production.min.js","../node_modules/react-dom/index.js","../node_modules/react-dom/cjs/react-dom.production.min.js","../node_modules/fbjs/lib/ExecutionEnvironment.js","../node_modules/fbjs/lib/EventListener.js","../node_modules/fbjs/lib/shallowEqual.js","../node_modules/fbjs/lib/containsNode.js","../node_modules/fbjs/lib/isTextNode.js","../node_modules/fbjs/lib/isNode.js","../node_modules/fbjs/lib/focusNode.js","../node_modules/fbjs/lib/getActiveElement.js","App.js","Jazz.js","../node_modules/teoria/index.js","../node_modules/scientific-notation/index.js","../node_modules/helmholtz/index.js","../node_modules/pitch-fq/index.js","../node_modules/interval-coords/index.js","../node_modules/teoria/lib/chord.js","../node_modules/daccord/index.js","../node_modules/teoria/lib/scale.js","../node_modules/teoria/lib/sugar.js","../node_modules/lodash/sample.js","../node_modules/lodash/_baseRandom.js","../node_modules/lodash/_baseSample.js","../node_modules/lodash/values.js","../node_modules/lodash/_baseValues.js","../node_modules/lodash/_arrayMap.js","../node_modules/lodash/keys.js","../node_modules/lodash/_arrayLikeKeys.js","../node_modules/lodash/_baseTimes.js","../node_modules/lodash/isArguments.js","../node_modules/lodash/_baseIsArguments.js","../node_modules/lodash/_getRawTag.js","../node_modules/lodash/_objectToString.js","../node_modules/lodash/isBuffer.js","../node_modules/lodash/stubFalse.js","../node_modules/lodash/_isIndex.js","../node_modules/lodash/isTypedArray.js","../node_modules/lodash/_baseIsTypedArray.js","../node_modules/lodash/_baseUnary.js","../node_modules/lodash/_nodeUtil.js","../node_modules/lodash/_baseKeys.js","../node_modules/lodash/_isPrototype.js","../node_modules/lodash/_nativeKeys.js","../node_modules/lodash/_overArg.js","../node_modules/lodash/isArrayLike.js","../node_modules/lodash/isFunction.js","../node_modules/lodash/isObject.js","progressions.js","registerServiceWorker.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","notes","e","f","g","a","b","h","intervals","unison","second","third","fourth","fifth","sixth","seventh","octave","intervalFromFifth","intervalsIndex","fifths","accidentals","sharp","A4","durations","0.25","0.5","1","2","4","8","16","32","64","128","qualityLong","P","M","A","AA","dd","alterations","perfect","minor","symbols","min","-","","+","aug","dim","maj","dom","Ã¸","5","chordShort","major","augmented","diminished","half-diminished","power","dominant","stepNumber","first","ninth","eleventh","thirteenth","intervalSolfege","dd1","d1","P1","A1","AA1","d2","m2","M2","A2","AA2","d3","m3","M3","A3","dd4","d4","P4","AA4","dd5","d5","P5","A5","AA5","d6","m6","M6","A6","AA6","d7","m7","M7","A7","dd8","d8","P8","A8","AA8","Interval","coord","this","knowledge","vector","toCoord","number","semitones","sum","mul","Math","abs","value","toMultiply","floor","product","without","sub","diff","val","type","base","qualityValue","length","direction","dir","simple","ignore","toAdd","add","isCompound","octaves","toSubtract","invert","qual","acc","idx","quality","lng","equal","interval","greater","semi","isemi","smaller","toString","Error","from","to","between","sInterval","toObject","undefined","TypeError","getOwnPropertySymbols","propIsEnumerable","propertyIsEnumerable","assign","test1","String","getOwnPropertyNames","test2","fromCharCode","map","join","test3","split","forEach","letter","keys","err","target","source","arguments","key","makeEmptyFunction","arg","emptyFunction","thatReturns","thatReturnsFalse","thatReturnsTrue","thatReturnsNull","thatReturnsThis","thatReturnsArgument","baseGetTag","undefinedTag","nullTag","symToStringTag","getRawTag","objectToString","Symbol","toStringTag","isObjectLike","noop","getThen","obj","then","ex","LAST_ERROR","IS_ERROR","tryCallOne","fn","tryCallTwo","Promise","_75","_83","_18","_38","doResolve","safeThen","self","onFulfilled","onRejected","constructor","resolve","reject","res","handle","Handler","deferred","_47","push","handleResolved","asap","cb","promise","ret","newValue","finale","bind","_71","done","reason","_44","Function","eval","window","emptyObject","invariant","condition","format","validateFormat","error","args","argIndex","replace","framesToPop","pad","str","ch","len","Note","duration","dots","scientific","helmholtz","pitchFq","accidentalValue","round","accidental","white","midi","fq","concertPitch","chroma","transpose","toUpperCase","toLowerCase","padchar","padcount","enharmonics","oneaccidental","limit","filter","note","solfege","scale","showOctaves","stroke","count","tonic","ceil","scaleDegree","inter","reduce","index","current","durationName","durationInSeconds","bpm","beatUnit","secs","pow","dont","fromString","dur","fromKey","distance","subDiff","fromFrequency","cents","originalFq","log","fromMIDI","accidentalValues","bb","#","x","arraySample","array","baseRandom","root","freeGlobal","freeSelf","global","isArray","Array","webpackPolyfill","deprecate","paths","children","isLength","MAX_SAFE_INTEGER","__WEBPACK_AMD_DEFINE_RESULT__","factory","Module","func","Tone","className","isLetter","match","sameConstructor","isFunction","dispose","set","params","rampTime","isObject","isString","tmpObj","paramLoop","attr","parent","indexOf","attrSplit","splice","innerParam","param","isUndef","Signal","Param","rampTo","AudioParam","_collectDefaults","subRet","j","subAttr","constr","defaults","_super","superDefs","values","options","defaultArg","given","fallback","givenProp","fallbackProp","connectSeries","currentUnit","toUnit","connect","isNumber","isBoolean","isNote","test","noOp","_readOnly","writable","_writable","State","Started","Stopped","Paused","equalPowerScale","percent","piFactor","PI","sin","dbToGain","db","gainToDb","gain","LN10","intervalToFrequencyRatio","now","context","isPast","time","currentTime","console","warn","extend","child","TempConstructor","audioContext","Context","emit","setContext","ctx","sampleRate","hasAudioContext","hasPromises","hasWorkers","getContext","initialized","resCallback","off","on","version","TONE_SILENCE_VERSION_LOGGING","Emitter","_events","event","callback","events","eventName","ev","eventList","apply","slice","mixin","functions","emitterFunc","Timeline","_timeline","_toRemove","_toAdd","_iterating","memory","Infinity","_search","remove","comparator","peek","shift","getAfter","getBefore","cancel","after","cancelBefore","previousEvent","beginning","end","midPoint","nextEvent","_iterate","lowerBound","upperBound","forEachBefore","forEachAfter","forEachFrom","forEachAtTime","AudioContext","webkitAudioContext","_context","prop","_defineProperty","_latencyHint","latencyHint","_constants","lookAhead","_computedUpdateInterval","_ticker","Ticker","clockSource","updateInterval","_timeouts","_timeoutIds","_timeoutLoop","getConstant","buffer","createBuffer","arr","getChannelData","constant","createBufferSource","channelCount","channelCountMode","loop","start","setTimeout","timeout","id","clearTimeout","hint","con","disconnect","close","_type","_updateInterval","_callback","_createClock","Type","Worker","Timeout","Offline","_createWorker","URL","webkitURL","blob","Blob","toFixed","blobUrl","createObjectURL","worker","onmessage","_worker","_createTimeout","_timeout","max","postMessage","_disposeClock","terminate","toneConnect","B","outNum","inNum","input","AudioNode","nativeConnect","toneDisconnect","nativeDisconnect","supported","createInsOuts","inputs","outputs","createGain","output","unit","outputNum","inputNum","destination","chain","fan","SignalBase","node","outputNumber","inputNumber","TimelineSignal","_param","cancelScheduledValues","overridden","WaveShaper","mapping","bufferLen","_shaper","createWaveShaper","_curve","curve","isFinite","Float32Array","setMap","normalized","oversample","oversampling","RangeError","TimeBase","units","_expr","_noOp","copy","_defaultUnits","method","_primaryExpressions","_defaultExpr","exprString","_parseExprString","clone","instance","regexp","parseInt","_beatsToUnits","_timeSignature","t","_ticksToUnits","hz","_frequencyToUnits","parseFloat","tr","q","total","_secondsToUnits","samples","default","_binaryExpressions","precedence","lh","rh","*","/","_unaryExpressions","neg","_syntaxGlue","(",")","_tokenize","expr","position","tokens","trim","token","expressions","group","opName","op","reg","SyntaxError","substr","next","_matchGroup","prec","_parseBinary","lexer","_parseUnary","_parsePrimary","matching","freq","beats","Transport","seconds","ticks","PPQ","timeSignature","_pushExpr","mult","div","valueOf","Time","_plusNow","create","quantize","nextSubdivision","subdiv","subdivision","toSeconds","addNow","toNotation","testNotations","retNotation","_toNotationHelper","testTripletNotations","retTripletNotation","threshold","_notationToUnits","notationTime","multiple","notation","primaryExprs","notationExprs","toBarsBeatsSixteenths","quarterTime","quarters","measures","sixteenths","toTicks","toSamples","toFrequency","toMilliseconds","Frequency","midiToFrequency","pitch","noteToScaleIndex","noteNumber","harmonize","toMidi","frequencyToMidi","toNote","LN2","scaleIndexToNote","cbb","c#","cx","dbb","d#","dx","ebb","eb","e#","fbb","fb","f#","fx","gbb","gb","g#","gx","abb","ab","a#","ax","bbb","b#","bx","frequency","TransportTime","_secondsToTicks","Default","Ticks","NormalRange","AudioRange","Decibels","BPM","Positive","Gain","Cents","Degrees","MIDI","BarsBeatsSixteenths","Samples","Hertz","Milliseconds","Seconds","Notation","convert","_toUnits","convertedVal","_fromUnits","_minOutput","setValueAtTime","setRampPoint","cancelAndHoldAtTime","currentVal","linearRampToValueAtTime","endTime","exponentialRampToValueAtTime","exponentialRampTo","startTime","linearRampTo","getTimeConstant","targetRampTo","setTargetAtTime","timeConstant","setValueCurveAtTime","segTime","cancelTime","sampleTime","GainNode","createGainNode","_gainNode","gainNode","_initial","Linear","Exponential","Target","Set","getValueAtTime","beforeEvent","_searchBefore","setValue","scaling","before","_searchAfter","linearRampToValueBetween","finish","exponentialRampToValueBetween","previousVal","previous","_exponentialApproach","_linearInterpolate","_exponentialInterpolate","t0","v0","v1","exp","t1","Pow","_exp","_expScaler","_expFunc","Envelope","attack","decay","sustain","release","_attackCurve","_releaseCurve","_sig","attackCurve","releaseCurve","In","curveDef","Out","triggerAttack","velocity","originalAttack","currentValue","percentComplete","sliceIndex","triggerRelease","triggerAttackRelease","invertCurve","out","k","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","sineCurve","cos","bounceCurve","linear","exponential","bounce","cosine","reverse","step","ripple","sine","AmplitudeEnvelope","AnalyserNode","getFloatTimeDomainData","uint8","Uint8Array","getByteTimeDomainData","Analyser","_analyser","createAnalyser","_buffer","size","smoothing","Waveform","FFT","getValue","getFloatFrequencyData","frequencyBinCount","fftSize","smoothingTimeConstant","Compressor","_compressor","createDynamicsCompressor","knee","ratio","Add","_sum","Multiply","_mult","Negate","_multiply","Subtract","_neg","GreaterThanZero","_thresh","_scale","GreaterThan","_gtz","Abs","_abs","Modulo","modulus","_subtract","_modSignal","_setWaveShaper","mod","AudioToGain","_norm","applyBinary","Constructor","_eval","applyUnary","getNumber","literalNumber","Expr","_replacements","inputCount","_parseInputs","_nodes","result","tree","_parseTree","_disposeNodes","_Expressions","signal","glue",",","a2g","binary","unary","!","NOT","inputArray","inputMax","matchSyntax","syn","matchGroup","groupName","parseExpression","parseUnary","operator","parsePrimary","parseFunctionCall","parseArgumentList","EqualPowerGain","_eqPower","CrossFade","initialFade","fade","_equalPowerA","_equalPowerB","_invert","Filter","_filters","detune","Q","_rolloff","rolloff","possibilities","cascadingCount","createBiquadFilter","connectionChain","concat","MultibandSplit","low","_lowMidFilter","mid","high","lowFrequency","highFrequency","EQ3","_multibandSplit","_lowGain","_midGain","_highGain","Scale","outputMin","outputMax","_outputMin","_outputMax","_add","_setRange","ScaleExp","exponent","DelayNode","createDelay","createDelayNode","Delay","_delayNode","maxDelay","delayTime","FeedbackCombFilter","_delay","_feedback","resonance","Follower","_filter","_frequencyValues","_sub","blockTime","_attack","_release","_setAttackRelease","minTime","ScaledEnvelope","FrequencyEnvelope","_octaves","baseFrequency","Gate","_follower","_gt","thresh","attackTime","releaseTime","_wrapScheduleMethods","ticksUntilTime","_getTickUntilEvent","TickSignal","prevEvent","rampVal","segmentDur","val0","val1","getTickAtTime","getDurationOfTicks","currentTick","getTimeOfTick","tick","delta","sqrt","sol1","sol2","TimelineState","initial","state","setStateAtTime","Clock","_nextTick","_lastState","_state","_boundLoop","_loop","offset","stop","pause","tickTime","getStateAtTime","IntervalTimeline","_root","_length","IntervalNode","insert","updateHeight","updateMax","_rebalance","results","search","_removeNode","_setRoot","_replaceNodeInParent","replacement","isLeftChild","left","right","temp","balance","getBalance","_rotateLeft","pivotNode","_rotateRight","allNodes","traverse","searchAfter","_left","_right","height","point","TransportEvent","_eventId","_once","once","invoke","clear","TransportRepeatEvent","_interval","_currentId","_nextId","_boundRestart","_restart","_createEvents","scheduleOnce","_boundCreateEvents","_loopStart","_loopEnd","_ppq","TransportConstructor","_clock","_processTick","_bindClockEvents","_scheduledEvents","_repeatedEvents","_syncedSignals","_swingTicks","_swingAmount","swing","swingSubdivision","loopStart","loopEnd","progress","amount","schedule","_addEvent","scheduleRepeat","eventId","item","timeline","toggle","timeSig","startPosition","endPosition","setLoopPoints","ppq","transportPos","remainingTime","syncSignal","ratioSignal","unsyncSignal","syncedSignal","Volume","volume","_unmutedVolume","mute","Master","_volume","toMaster","MasterConstructor","Source","_synced","_scheduled","_start","_stop","retrigger","sched","sync","_syncedStart","stateEvent","startOffset","_syncedStop","unsync","OscillatorNode","noteOn","noteOff","setPeriodicWave","setWaveTable","createPeriodicWave","createWaveTable","Oscillator","_oscillator","_wave","_partials","partials","_phase","phase","Sine","Triangle","Sawtooth","Square","Custom","createOscillator","syncFrequency","unsyncFrequency","coefs","_getRealImaginary","periodicWave","periodicWaveSize","real","imag","partialCount","partial","exec","_inverseFFT","_getInitialValue","maxValue","twoPi","Zero","_gain","LFO","amplitude","_stoppedSignal","_zeros","_stoppedValue","_a2g","_scaler","_units","currentMin","currentMax","Limiter","LowpassCombFilter","_lowpass","dampening","Merge","_merger","createChannelMerger","Meter","getLevel","Split","_splitter","createChannelSplitter","MidSideSplit","_split","side","SQRT1_2","MidSideMerge","_merge","MidSideCompressor","_midSideSplit","_midSideMerge","Mono","MultibandCompressor","Panner","initialPan","hasStereoPanner","_panner","createStereoPanner","pan","_crossFade","_zero","Panner3D","createPanner","panningModel","maxDistance","distanceModel","coneOuterGain","coneOuterAngle","coneInnerAngle","refDistance","rolloffFactor","_orientation","orientationX","orientationY","orientationZ","_position","positionX","positionY","positionZ","_rampTimeConstant","setPosition","y","z","setOrientation","pos","_aliasProperty","PanVol","Solo","_soloBind","_soloed","solo","_isSoloed","_addSolo","_removeSolo","_currentSolo","_noSolos","CtrlInterpolate","lowerPosition","lower","upper","_interpolate","retArray","retObj","_toNumber","CtrlMarkov","distribution","_getProbDistribution","rand","random","dist","chosen","needsNormalizing","option","probability","CtrlPattern","_shuffled","_direction","Up","Down","UpDown","DownUp","AlternateUp","AlternateDown","Random","RandomWalk","RandomOnce","_shuffleValues","randVal","CtrlRandom","integer","AudioBuffer","copyToChannel","src","chanNum","channel","copyFromChannel","dest","Buffer","_reversed","_xhr","url","onload","load","onerror","buff","_removeFromDownloadQueue","abort","numberOfChannels","fromArray","isMultidimensional","channels","toMono","toArray","outputArray","numChannels","channelArray","sample","startSamples","endSamples","_reverse","loaded","rev","_downloadQueue","baseUrl","request","onError","onProgress","totalProgress","matches","extensions","extension","supportsType","XMLHttpRequest","open","responseType","addEventListener","status","decodeAudioData","response","lengthComputable","send","cancelDownloads","document","createElement","canPlayType","removeEvents","success","fail","catch","Buffers","urls","_buffers","_loadingCount","_bufferLoaded","has","isLoaded","buffName","Buses","channelName","sendKnob","receive","Draw","expiration","anticipation","_boundDrawLoop","_drawLoop","requestAnimationFrame","Listener","ListenerConstructor","forwardX","forwardY","forwardZ","upX","upY","upZ","listener","OfflineAudioContext","webkitOfflineAudioContext","OfflineContext","offlineContext","_duration","_currentTime","render","oncomplete","renderedBuffer","startRendering","originalContext","rendered","Effect","_dryWet","wet","effectSend","effectReturn","connectEffect","effect","AutoFilter","_lfo","depth","delay","oct","AutoPanner","AutoWah","follower","_sweepRange","_baseFrequency","_inputBoost","_bandpass","_peaking","_setSweepRange","sensitivity","baseFreq","sensitivy","BitCrusher","invStepSize","bits","_modulo","_bits","Chebyshev","_order","order","_getCoefficient","degree","memo","StereoEffect","effectSendL","effectSendR","effectReturnL","effectReturnR","FeedbackEffect","_feedbackGain","feedback","StereoXFeedbackEffect","_feedbackLR","_feedbackRL","Chorus","_depth","_delayTime","_lfoL","_lfoR","_delayNodeL","_delayNodeR","spread","deviation","Convolver","_convolver","createConvolver","Distortion","_distortion","distortion","deg","FeedbackDelay","combFilterTunings","allpassFilterFrequencies","Freeverb","roomSize","_combFilters","_allpassFiltersL","_allpassFiltersR","allpassL","r","allpassR","lfpf","al","ar","cf","combFilterDelayTimes","combFilterResonances","allpassFilterFreqs","JCReverb","_scaleRoomSize","_allpassFilters","_feedbackCombFilters","af","allpass","fbcf","apf","MidSideEffect","midSend","sideSend","midReturn","sideReturn","Phaser","_filtersL","_makeFilters","stages","_filtersR","connectToFreq","filters","PingPongDelay","_leftDelay","maxDelayTime","_rightDelay","_rightPreDelay","PitchShift","_frequency","_delayA","_lfoA","_delayB","_lfoB","_crossFadeLFO","_feedbackDelay","_pitch","_windowSize","windowSize","factor","StereoFeedbackEffect","_feedbackL","_feedbackR","StereoWidener","width","_midMult","_sideMult","_two","Tremolo","_amplitudeL","_amplitudeR","Vibrato","Event","_playbackRate","_startOffset","_probability","_humanize","humanize","playbackRate","_rescheduleEvents","startTick","_getLoopDuration","_tick","prob","variation","reschedulTime","rate","lastEvent","loopDuration","Loop","_event","iterations","iters","Part","_forEach","_startNote","at","_restartEvent","removeAll","_setAll","_testLoopBoundries","Pattern","_pattern","pattern","vals","Sequence","_subdivision","_indexTime","subSubdivision","PulseOscillator","_widthGate","_sawtooth","PWMOscillator","_pulse","modulationFrequency","_modulator","FMOscillator","_carrier","modulationIndex","modulationType","harmonicity","_modulationNode","AMOscillator","_modulationScale","FatOscillator","_oscillators","_spread","osc","iterator","OmniOscillator","_sourceType","OmniOscType","Pulse","PWM","Osc","FM","AM","Fat","prefix","_createNewOscillator","oscType","OscillatorConstructor","oldOsc","mType","Instrument","Monophonic","portamento","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","currentNote","portTime","Synth","oscillator","envelope","AMSynth","modulation","modulationEnvelope","MonoSynth","filterEnvelope","DuoSynth","voice0","voice1","_vibrato","vibratoRate","_vibratoGain","vibratoAmount","FMSynth","carrier","modulator","MembraneSynth","pitchDecay","maxNote","inharmRatios","MetalSynth","_freqMultipliers","_amplitue","_highpass","_filterFreqScaler","vel","octs","AudioBufferSourceNode","noteGrainOn","BufferSource","onended","_startTime","_stopTime","_source","fadeIn","fadeOut","_onendedTimeout","fadeInTime","computedDur","fadeOutTime","heldDuration","startFade","_onended","createBuffers","_noiseArrays","_noiseBuffers","Noise","pink","channelNum","b0","b1","b2","b3","b4","b5","b6","brown","lastOut","NoiseSynth","noise","PluckSynth","_noise","attackNoise","_lfcf","delayAmount","PolySynth","polyphony","MAX_POLYPHONY","voices","_triggers","v","voice","oldest","JSON","stringify","stringified","desc","releaseAll","Sampler","urlMap","isNaN","_activeSources","_findClosest","difference","closestNote","GainToAudio","Normalize","inputMin","_inputMin","_inputMax","_div","TransportTimelineSignal","_outputSig","_lastVal","_onTick","_bindAnchorValue","_anchorValue","_syncedCallback","GrainPlayer","grainSize","_grainSize","_overlap","overlap","_onstop","_offset","seek","Player","autostart","_onload","Players","_players","_fadeIn","_fadeOut","player","playing","playerName","stopAll","UserMedia","_mediaStream","_stream","_device","labelOrId","enumerateDevices","devices","device","find","label","deviceId","constraints","audio","echoCancellation","navigator","mediaDevices","getUserMedia","stream","createMediaStreamSource","getAudioTracks","track","kind","active","groupId","enable","disable","enabled","onUnhandled","allRejections","matchWhitelist","rejections","whitelist","DEFAULT_WHITELIST","displayId","logged","logError","onHandled","_56","stack","line","list","some","cls","ReferenceError","rawAsap","task","queue","requestFlush","flushing","flush","currentIndex","capacity","scan","newLength","makeRequestCallFromTimer","handleTimer","timeoutHandle","clearInterval","intervalHandle","setInterval","scope","BrowserMutationObserver","MutationObserver","WebKitMutationObserver","observer","createTextNode","observe","characterData","data","valuePromise","TRUE","FALSE","NULL","UNDEFINED","ZERO","EMPTYSTRING","all","remaining","race","normalizeName","normalizeValue","iteratorFor","items","support","iterable","Headers","headers","append","header","consumed","body","bodyUsed","fileReaderReady","reader","readBlobAsArrayBuffer","FileReader","readAsArrayBuffer","readBlobAsText","readAsText","readArrayBufferAsText","buf","view","chars","bufferClone","byteLength","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","formData","FormData","_bodyFormData","searchParams","URLSearchParams","arrayBuffer","isDataView","_bodyArrayBuffer","ArrayBuffer","isArrayBufferView","rejected","text","decode","json","parse","normalizeMethod","upcased","methods","Request","credentials","mode","referrer","form","bytes","decodeURIComponent","parseHeaders","rawHeaders","parts","Response","bodyInit","ok","statusText","fetch","viewClasses","DataView","isView","oldValue","thisArg","entries","redirectStatuses","redirect","location","init","xhr","getAllResponseHeaders","responseURL","responseText","ontimeout","withCredentials","setRequestHeader","polyfill","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_0_react__","__WEBPACK_IMPORTED_MODULE_0_react___default","__WEBPACK_IMPORTED_MODULE_1_react_dom__","__WEBPACK_IMPORTED_MODULE_1_react_dom___default","__WEBPACK_IMPORTED_MODULE_2__index_css__","__WEBPACK_IMPORTED_MODULE_3__App__","__WEBPACK_IMPORTED_MODULE_4__registerServiceWorker__","getElementById","encodeURIComponent","props","refs","updater","u","w","G","$$typeof","E","ref","_owner","escape","=",":","L","K","pop","keyPrefix","N","I","O","H","R","isValidElement","cloneAndReplaceKey","J","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","isReactComponent","setState","forceUpdate","isPureReactComponent","unstable_isAsyncReactComponent","Component","PureComponent","AsyncComponent","C","D","F","__self","__source","defaultProps","createFactory","_self","cloneElement","S","Children","only","unstable_AsyncComponent","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","checkDCE","__REACT_DEVTOOLS_GLOBAL_HOOK__","ja","pa","la","oa","qa","plugins","extractEvents","eventTypes","eventNameDispatchConfigs","phasedRegistrationNames","ra","registrationName","registrationNameModules","registrationNameDependencies","dependencies","ua","La","_renderedComponent","Ma","_hostNode","Ha","Na","_flags","Fa","hasCachedChildNodes","_renderedChildren","firstChild","_domID","nextSibling","nodeType","Aa","getAttribute","Ea","Ba","nodeValue","Oa","parentNode","tag","ya","za","Ra","getName","displayName","Za","alternate","effectTag","Xa","Wa","Ta","$a","sibling","stateNode","_hasCaughtError","_caughtError","_hasRethrowError","_rethrowError","currentTarget","hb","getNodeFromInstance","invokeGuardedCallbackAndCatchFirstError","mb","ib","getInstanceFromNode","jb","restoreControlledState","getFiberCurrentPropsFromNode","ob","pb","qb","ub","srcElement","correspondingUseElement","tb","xb","targetInst","ancestors","vb","containerInfo","_hostParent","getClosestInstanceFromNode","yb","_handleTopLevel","topLevelType","nativeEvent","Cb","Db","Fb","executeDispatchesInOrder","isPersistent","Gb","Hb","Ib","disabled","Lb","canUseDOM","setAttribute","Kb","implementation","hasFeature","Mb","Qb","Ob","Nb","Pb","Vb","Ub","Tb","Sb","fc","ec","dc","cc","jc","rc","aa","tc","selected","yc","xc","dangerouslySetInnerHTML","style","zc","nodeName","Ac","getOwnPropertyDescriptor","stopTracking","_valueTracker","Cc","is","Ic","lastChild","Hc","textContent","Rc","Nc","Lc","Mc","ownerDocument","od","hd","gd","pd","last","hasForceUpdate","callbackList","qd","rd","priorityLevel","sd","updateQueue","md","nd","partialState","isReplace","isForced","isTopLevelUnmount","td","Md","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","Nd","zd","childContextTypes","Od","getChildContext","be","memoizedState","memoizedProps","pendingProps","internalContextTag","ae","lastEffect","firstEffect","nextEffect","pendingWorkPriority","Zd","ce","Rd","Qd","Td","Le","Je","Me","Ae","getPublicInstance","_stringRef","da","Ne","Oe","Ie","Map","re","Ge","He","Be","ue","se","De","ve","Ee","we","Ce","xe","Fe","te","Ke","oe","pe","qe","ye","Ca","V","ze","ef","Pa","df","Ze","$e","adoptClassInstance","constructClassInstance","Xe","Ye","We","Ve","mountClassInstance","ed","enableAsyncSubtreeAPI","Ue","componentWillMount","bf","componentDidMount","Te","updateClassInstance","componentWillReceiveProps","componentDidUpdate","shouldComponentUpdate","ea","componentWillUpdate","Lf","ff","gf","hf","Jf","qf","Kf","Ff","pendingContext","pf","jf","uf","tf","of","yf","shouldSetTextContent","useSyncScheduling","shouldDeprioritizeSubtree","pushHostContext","pushHostContainer","enterHydrationState","resetHydrationState","tryToClaimNextHydratableInstance","ld","beginWork","Df","rf","mf","lf","sf","nf","kf","element","Gf","wf","Hf","Ef","xf","Af","zf","Bf","Cf","beginFailedWork","If","eg","createInstance","createTextInstance","appendInitialChild","finalizeInitialChildren","prepareUpdate","getRootHostContainer","popHostContext","getHostContext","popHostContainer","prepareToHydrateHostInstance","prepareToHydrateHostTextInstance","popHydrationState","completeWork","dg","Qf","Rf","Nf","Sf","Of","ag","Tf","cg","bg","Uf","Vf","Wf","Xf","Yf","handler","Mf","Zf","Pf","hg","vg","lg","kg","ng","mg","qg","jg","componentWillUnmount","og","commitMount","commitUpdate","resetTextContent","commitTextUpdate","appendChild","appendChildToContainer","insertBefore","insertInContainerBefore","removeChild","removeChildFromContainer","commitPlacement","ug","rg","commitDeletion","commitWork","commitLifeCycles","sg","tg","pg","commitAttachRef","commitDetachRef","Ag","zg","getChildHostContext","getRootHostContext","wg","xg","yg","resetHostContainer","Hg","Gg","Eg","Bg","Cg","Dg","canHydrateInstance","canHydrateTextInstance","getNextHydratableSibling","getFirstHydratableChild","hydrateInstance","hydrateTextInstance","didNotHydrateInstance","didNotFindHydratableInstance","didNotFindHydratableTextInstance","Fg","hh","ma","T","isScheduled","nextScheduledRoot","zb","Jg","gh","Lg","nc","oc","Hd","na","Og","U","Kg","Tg","Ui","Yg","ah","Ph","Zg","$g","Ug","Wg","vf","Vg","Xg","Id","Mh","Jd","Vi","Gd","Nh","Oh","eh","componentDidCatch","componentStack","bh","Ja","Ng","va","Lh","fh","Mg","Rg","Ab","timeRemaining","Pg","Qg","Da","Kd","Ya","Ig","dh","Bb","$f","Ka","fe","ge","he","ie","_debugOwner","_debugSource","fileName","lineNumber","componentName","errorBoundary","errorBoundaryFound","errorBoundaryName","willRetry","Wi","Xi","pc","W","Yi","Sg","scheduleDeferredCallback","prepareForCommit","resetAfterCommit","scheduleUpdate","getPriorityContext","batchedUpdates","unbatchedUpdates","flushSync","deferredUpdates","ih","jh","_processChildContext","sh","th","vh","uh","documentElement","Bh","Ch","Dh","Ah","Fh","Eh","Gh","Jh","Ih","dispatchConfig","_dispatchListeners","_dispatchInstances","Kh","Hh","traverseTwoPhase","_targetInst","Qh","getParentInstance","Rh","Sh","Y","Interface","isDefaultPrevented","defaultPrevented","returnValue","ca","isPropagationStopped","Zh","eventPool","$h","destructor","Yh","getPooled","ai","bi","mi","ci","keyCode","ni","detail","pi","which","li","ji","qi","oi","di","Vh","getData","reset","ctrlKey","altKey","metaKey","char","ii","ti","si","vi","ui","change","nb","enqueueStateRestore","Th","accumulateTwoPhaseDispatches","yi","Jb","enqueueEvents","processEventQueue","zi","Bc","updateValueIfChanged","Ai","Ci","wi","detachEvent","Di","xi","propertyName","sb","Ei","attachEvent","Fi","Gi","Hi","Ji","Li","getModifierState","Ki","Mi","Ni","cj","aj","Ti","ia","zh","hasSelectionCapabilities","selectionStart","selectionEnd","getSelection","anchorNode","anchorOffset","focusNode","focusOffset","$i","Si","select","Zi","ej","fj","gj","hj","charCode","kj","lj","mj","nj","oj","Bj","ak","Dj","Gj","Hj","Fj","bk","hasAttribute","Ij","ck","_reactRootContainer","Xj","updateContainer","createContainer","getPublicRootInstance","dk","ne","createPortal","ba","fa","ha","ka","Namespaces","html","mathml","svg","getIntrinsicNamespace","getChildNamespace","possibleRegistrationNames","injectEventPluginOrder","injectEventPluginsByName","sa","ta","autoFocus","defaultValue","defaultChecked","innerHTML","suppressContentEditableWarning","wa","MUST_USE_PROPERTY","HAS_BOOLEAN_VALUE","HAS_NUMERIC_VALUE","HAS_POSITIVE_NUMERIC_VALUE","HAS_OVERLOADED_BOOLEAN_VALUE","HAS_STRING_BOOLEAN_VALUE","injectDOMPropertyConfig","Properties","DOMAttributeNamespaces","DOMAttributeNames","DOMMutationMethods","xa","properties","attributeName","attributeNamespace","mutationMethod","mustUseProperty","hasBooleanValue","hasNumericValue","hasPositiveNumericValue","hasOverloadedBooleanValue","hasStringBooleanValue","ID_ATTRIBUTE_NAME","ROOT_ATTRIBUTE_NAME","ATTRIBUTE_NAME_START_CHAR","ATTRIBUTE_NAME_CHAR","shouldSetAttribute","isReservedProp","shouldAttributeAcceptBooleanValue","getPropertyInfo","injection","IndeterminateComponent","FunctionalComponent","ClassComponent","HostRoot","HostPortal","HostComponent","HostText","CoroutineComponent","CoroutineHandlerPhase","YieldComponent","Fragment","ELEMENT_NODE","TEXT_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_FRAGMENT_NODE","Ga","Ia","precacheChildNodes","precacheNode","uncacheNode","precacheFiberNode","updateFiberProps","_reactInternalFiber","Qa","NoEffect","PerformedWork","Placement","Update","PlacementAndUpdate","Deletion","ContentReset","Callback","Err","Ref","Sa","Ua","Va","isFiberMounted","findCurrentFiberUsingSlowPath","findCurrentHostFiber","findCurrentHostFiberWithNoPortals","injectErrorUtils","invokeGuardedCallback","hasCaughtError","clearCaughtError","rethrowCaughtError","isEndish","isMoveish","isStartish","executeDirectDispatch","executeDispatchesInOrderStopAtTrue","hasDispatches","injectComponentTree","kb","lb","injectFiberControlledHostComponent","restoreStateIfNeeded","rb","injectStackBatchedUpdates","injectFiberBatchedUpdates","wb","_enabled","setHandleTopLevel","setEnabled","isEnabled","trapBubbledEvent","listen","dispatchEvent","trapCapturedEvent","capture","Eb","getListener","_currentElement","_rootNodeID","animationend","animationiteration","animationstart","transitionend","animation","transition","Rb","topAbort","topAnimationEnd","topAnimationIteration","topAnimationStart","topBlur","topCancel","topCanPlay","topCanPlayThrough","topChange","topClick","topClose","topCompositionEnd","topCompositionStart","topCompositionUpdate","topContextMenu","topCopy","topCut","topDoubleClick","topDrag","topDragEnd","topDragEnter","topDragExit","topDragLeave","topDragOver","topDragStart","topDrop","topDurationChange","topEmptied","topEncrypted","topEnded","topError","topFocus","topInput","topKeyDown","topKeyPress","topKeyUp","topLoadedData","topLoad","topLoadedMetadata","topLoadStart","topMouseDown","topMouseMove","topMouseOut","topMouseOver","topMouseUp","topPaste","topPause","topPlay","topPlaying","topProgress","topRateChange","topScroll","topSeeked","topSeeking","topSelectionChange","topStalled","topSuspend","topTextInput","topTimeUpdate","topToggle","topTouchCancel","topTouchEnd","topTouchMove","topTouchStart","topTransitionEnd","topVolumeChange","topWaiting","topWheel","handleTopLevel","listenTo","isListeningToAllDependencies","Wb","animationIterationCount","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","opacity","orphans","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","Xb","charAt","substring","Yb","isUnitlessNumber","shorthandPropertyExpansions","background","backgroundAttachment","backgroundColor","backgroundImage","backgroundPositionX","backgroundPositionY","backgroundRepeat","backgroundPosition","border","borderWidth","borderStyle","borderColor","borderBottom","borderBottomWidth","borderBottomStyle","borderBottomColor","borderLeft","borderLeftWidth","borderLeftStyle","borderLeftColor","borderRight","borderRightWidth","borderRightStyle","borderRightColor","borderTop","borderTopWidth","borderTopStyle","borderTopColor","font","fontStyle","fontVariant","fontSize","fontFamily","outline","outlineWidth","outlineStyle","outlineColor","Zb","$b","ac","Ec","bc","createDangerousStringForStyles","setValueForStyles","setProperty","RegExp","gc","setAttributeForID","setAttributeForRoot","getValueForProperty","getValueForAttribute","setValueForProperty","deleteValueForProperty","setAttributeNS","setValueForAttribute","removeAttribute","deleteValueForAttribute","hc","ic","ReactDebugCurrentFrame","kc","resetCurrentFiber","getCurrentStack","setCurrentFiber","getCurrentFiberOwnerName","getCurrentFiberStackAddendum","lc","mc","getHostProps","checked","_wrapperState","initialValue","initialChecked","initWrapperState","controlled","updateWrapper","postMountWrapper","querySelectorAll","qc","sc","validateProps","uc","wasMultiple","postUpdateWrapper","vc","wc","menuitem","area","br","col","embed","hr","img","keygen","link","meta","wbr","_getTrackerFromNode","Dc","Fc","MSApp","execUnsafeLocalFunction","namespaceURI","Gc","charCodeAt","Jc","Oc","Pc","Qc","Sc","createElementNS","setInitialProperties","__html","onClick","onclick","diffProperties","updateProperties","diffHydratedProperties","diffHydratedText","warnForDeletedHydratableElement","warnForDeletedHydratableText","warnForInsertedHydratedElement","warnForInsertedHydratedText","Tc","requestIdleCallback","Uc","Vc","Wc","Xc","Yc","Zc","$c","ad","performance","Date","bd","cd","je","ke","rIC","NoWork","SynchronousPriority","TaskPriority","HighPriority","LowPriority","OffscreenPriority","fd","jd","kd","ud","addUpdate","addReplaceUpdate","addForceUpdate","getUpdatePriority","addTopLevelUpdate","beginUpdateQueue","commitCallbacks","vd","wd","xd","createCursor","isEmpty","yd","Ad","Bd","Cd","Dd","Ed","Fd","Ld","getUnmaskedContext","cacheContext","getMaskedContext","contextTypes","hasContextChanged","isContextConsumer","isContextProvider","popContextProvider","popTopLevelContextObject","pushTopLevelContextObject","cursor","processChildContext","pushContextProvider","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","resetContext","findCurrentUnmaskedContext","Pd","NoContext","AsyncUpdates","Sd","Ud","Vd","Wd","Xd","Yd","$d","de","createWorkInProgress","createHostRootFiber","createFiberFromElement","createFiberFromFragment","createFiberFromText","createFiberFromElementType","createFiberFromHostInstanceForDeletion","createFiberFromCoroutine","createFiberFromYield","createFiberFromPortal","largerPriority","ee","le","createCoroutine","createYield","isCoroutine","isYield","REACT_YIELD_TYPE","REACT_COROUTINE_TYPE","me","isPortal","REACT_PORTAL_TYPE","Pe","Qe","Re","Se","reconcileChildFibers","reconcileChildFibersInPlace","mountChildFibersInPlace","cloneChildFibers","fg","gg","ig","injectInternals","supportsFiber","inject","onCommitFiberRoot","onCommitFiberUnmount","onCommitRoot","onCommitUnmount","_injectFiber","kh","mh","nh","oh","ph","qh","wh","getOffsets","rangeCount","getRangeAt","startContainer","endContainer","cloneRange","selectNodeContents","setEnd","endOffset","createRange","setStart","collapsed","setOffsets","removeAllRanges","addRange","xh","yh","contentEditable","getSelectionInformation","focusedElem","selectionRange","restoreSelection","setSelection","scrollLeft","top","scrollTop","_injectStack","isAncestor","getLowestCommonAncestor","traverseEnterLeave","accumulateTwoPhaseDispatchesSkipTarget","accumulateDirectDispatches","accumulateEnterLeaveDispatches","X","_startText","_fallbackText","Uh","initialize","getText","Wh","Xh","eventPhase","bubbles","cancelable","timeStamp","isTrusted","preventDefault","stopPropagation","cancelBubble","persist","augmentClass","ei","documentMode","fi","gi","opera","hi","ki","beforeInput","bubbled","captured","compositionEnd","compositionStart","compositionUpdate","ri","color","date","datetime","datetime-local","email","month","password","range","tel","week","Bi","Ii","_isInputEventSupported","defaultView","parentWindow","Alt","Control","Meta","Shift","screenX","screenY","clientX","clientY","pageX","pageY","shiftKey","button","buttons","relatedTarget","fromElement","toElement","Oi","mouseEnter","mouseLeave","Pi","Qi","Ri","bj","dj","animationName","elapsedTime","pseudoElement","clipboardData","ij","Esc","Spacebar","Left","Right","Del","Win","Menu","Apps","Scroll","MozPrintableKey","jj","9","12","13","17","18","19","20","27","33","34","35","36","37","38","39","40","45","46","112","113","114","115","116","117","118","119","120","121","122","123","144","145","224","repeat","locale","dataTransfer","touches","targetTouches","changedTouches","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","pj","qj","rj","SimpleEventPlugin","EnterLeaveEventPlugin","ChangeEventPlugin","SelectEventPlugin","BeforeInputEventPlugin","sj","Z","tj","uj","vj","wj","allowFullScreen","allowTransparency","async","autoPlay","cols","controls","defer","download","draggable","formNoValidate","hidden","muted","noValidate","playsInline","readOnly","required","reversed","rows","rowSpan","scoped","seamless","span","spellCheck","itemScope","acceptCharset","htmlFor","httpEquiv","validity","badInput","activeElement","xj","yj","xlink","xml","zj","autoReverse","externalResourcesRequired","preserveAlpha","xlinkActuate","xlinkArcrole","xlinkHref","xlinkRole","xlinkShow","xlinkTitle","xlinkType","xmlBase","xmlLang","xmlSpace","Aj","Cj","Ej","Jj","Kj","Lj","Mj","Nj","Oj","Pj","Qj","Rj","Sj","Tj","Uj","Vj","Wj","findHostInstance","Yj","Zj","findHostInstanceWithNoPortals","tagName","focus","ek","hydrate","unstable_renderSubtreeIntoContainer","unmountComponentAtNode","findDOMNode","unstable_createPortal","unstable_batchedUpdates","unstable_deferredUpdates","EventPluginHub","EventPluginRegistry","EventPropagators","ReactControlledComponent","ReactDOMComponentTree","ReactDOMEventListener","findFiberByHostInstance","findHostInstanceByFiber","bundleType","rendererPackageName","ExecutionEnvironment","canUseWorkers","canUseEventListeners","canUseViewport","screen","isInWorker","EventListener","eventType","removeEventListener","registerDefault","shallowEqual","objA","objB","keysA","keysB","containsNode","outerNode","innerNode","isTextNode","contains","compareDocumentPosition","isNode","doc","Node","getActiveElement","_classCallCheck","_possibleConstructorReturn","_inherits","subClass","superClass","setPrototypeOf","__proto__","__WEBPACK_IMPORTED_MODULE_1__App_css__","__WEBPACK_IMPORTED_MODULE_2__Jazz__","__WEBPACK_IMPORTED_MODULE_2__Jazz___default","_createClass","defineProperties","descriptor","protoProps","staticProps","polySynth","App","_Component","_this","getPrototypeOf","sheet","getJazz","preparePlaybackForSheet","togglePlayback","chords","chord","_this2","reload","_this3","newSheet","prettyPrint","symbol","teoria","progressions","getRoot","getScale","scaleType","getProgression","getAll","getChords","progression","_ref","prepareSheet","absoluteRoot","intervalConstructor","noteConstructor","chordConstructor","Chord","scaleConstructor","coords","accval","parser","noteName","octaveFirst","octaveLast","stdPitch","pAlts","mAlts","baseIntervals","sign","alts","alt","_voicing","bass","daccord","bassInterval","voicing","resetVoicing","additional","subdominant","parallel","chordType","SYMBOLS","6/9","parsing","additionals","chordLength","explicitMajor","sub3","sub2","flat","intPos","scaleName","scales","aeolian","blues","chromatic","dorian","doubleharmonic","harmonicminor","ionian","locrian","lydian","majorpentatonic","melodicminor","minorpentatonic","mixolydian","phrygian","wholetone","harmonicchromatic","flamenco","KNOWN_SCALES","collection","baseSample","nativeFloor","nativeRandom","baseValues","arrayMap","iteratee","isArrayLike","arrayLikeKeys","baseKeys","inherited","isArr","isArg","isArguments","isBuff","isBuffer","isType","isTypedArray","skipIndexes","baseTimes","isIndex","objectProto","baseIsArguments","argsTag","isOwn","unmasked","nativeObjectToString","stubFalse","freeExports","freeModule","moduleExports","nativeIsBuffer","reIsUint","baseIsTypedArray","baseUnary","nodeUtil","nodeIsTypedArray","typedArrayTags","freeProcess","process","binding","isPrototype","nativeKeys","Ctor","overArg","transform","funcTag","genTag","asyncTag","proxyTag","register","origin","swUrl","isLocalhost","checkValidServiceWorker","registerValidSW","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ready","unregister","Boolean","hostname"],"mappings":"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","file":"static/js/main.8dc854d1.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/jazzy/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 23);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n// Note coordinates [octave, fifth] relative to C\nmodule.exports = {\n  notes: {\n    c: [0, 0],\n    d: [-1, 2],\n    e: [-2, 4],\n    f: [1, -1],\n    g: [0, 1],\n    a: [-1, 3],\n    b: [-2, 5],\n    h: [-2, 5]\n  },\n\n  intervals: {\n    unison: [0, 0],\n    second: [3, -5],\n    third: [2, -3],\n    fourth: [1, -1],\n    fifth: [0, 1],\n    sixth: [3, -4],\n    seventh: [2, -2],\n    octave: [1, 0]\n  },\n\n  intervalFromFifth: ['second', 'sixth', 'third', 'seventh', 'fourth',\n                         'unison', 'fifth'],\n\n  intervalsIndex: ['unison', 'second', 'third', 'fourth', 'fifth',\n                      'sixth', 'seventh', 'octave', 'ninth', 'tenth',\n                      'eleventh', 'twelfth', 'thirteenth', 'fourteenth',\n                      'fifteenth'],\n\n// linear index to fifth = (2 * index + 1) % 7\n  fifths: ['f', 'c', 'g', 'd', 'a', 'e', 'b'],\n  accidentals: ['bb', 'b', '', '#', 'x'],\n\n  sharp: [-4, 7],\n  A4: [3, 3],\n\n  durations: {\n    '0.25': 'longa',\n    '0.5': 'breve',\n    '1': 'whole',\n    '2': 'half',\n    '4': 'quarter',\n    '8': 'eighth',\n    '16': 'sixteenth',\n    '32': 'thirty-second',\n    '64': 'sixty-fourth',\n    '128': 'hundred-twenty-eighth'\n  },\n\n  qualityLong: {\n    P: 'perfect',\n    M: 'major',\n    m: 'minor',\n    A: 'augmented',\n    AA: 'doubly augmented',\n    d: 'diminished',\n    dd: 'doubly diminished'\n  },\n\n  alterations: {\n    perfect: ['dd', 'd', 'P', 'A', 'AA'],\n    minor: ['dd', 'd', 'm', 'M', 'A', 'AA']\n  },\n\n  symbols: {\n    'min': ['m3', 'P5'],\n    'm': ['m3', 'P5'],\n    '-': ['m3', 'P5'],\n\n    'M': ['M3', 'P5'],\n    '': ['M3', 'P5'],\n\n    '+': ['M3', 'A5'],\n    'aug': ['M3', 'A5'],\n\n    'dim': ['m3', 'd5'],\n    'o': ['m3', 'd5'],\n\n    'maj': ['M3', 'P5', 'M7'],\n    'dom': ['M3', 'P5', 'm7'],\n    'Ã¸': ['m3', 'd5', 'm7'],\n\n    '5': ['P5']\n  },\n\n  chordShort: {\n    'major': 'M',\n    'minor': 'm',\n    'augmented': 'aug',\n    'diminished': 'dim',\n    'half-diminished': '7b5',\n    'power': '5',\n    'dominant': '7'\n  },\n\n  stepNumber: {\n    'unison': 1,\n    'first': 1,\n    'second': 2,\n    'third': 3,\n    'fourth': 4,\n    'fifth': 5,\n    'sixth': 6,\n    'seventh': 7,\n    'octave': 8,\n    'ninth': 9,\n    'eleventh': 11,\n    'thirteenth': 13\n  },\n\n  // Adjusted Shearer syllables - Chromatic solfege system\n  // Some intervals are not provided for. These include:\n  // dd2 - Doubly diminished second\n  // dd3 - Doubly diminished third\n  // AA3 - Doubly augmented third\n  // dd6 - Doubly diminished sixth\n  // dd7 - Doubly diminished seventh\n  // AA7 - Doubly augmented seventh\n  intervalSolfege: {\n    'dd1': 'daw',\n    'd1': 'de',\n    'P1': 'do',\n    'A1': 'di',\n    'AA1': 'dai',\n    'd2': 'raw',\n    'm2': 'ra',\n    'M2': 're',\n    'A2': 'ri',\n    'AA2': 'rai',\n    'd3': 'maw',\n    'm3': 'me',\n    'M3': 'mi',\n    'A3': 'mai',\n    'dd4': 'faw',\n    'd4': 'fe',\n    'P4': 'fa',\n    'A4': 'fi',\n    'AA4': 'fai',\n    'dd5': 'saw',\n    'd5': 'se',\n    'P5': 'so',\n    'A5': 'si',\n    'AA5': 'sai',\n    'd6': 'law',\n    'm6': 'le',\n    'M6': 'la',\n    'A6': 'li',\n    'AA6': 'lai',\n    'd7': 'taw',\n    'm7': 'te',\n    'M7': 'ti',\n    'A7': 'tai',\n    'dd8': 'daw',\n    'd8': 'de',\n    'P8': 'do',\n    'A8': 'di',\n    'AA8': 'dai'\n  }\n};\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar knowledge = __webpack_require__(0);\nvar vector = __webpack_require__(14);\nvar toCoord = __webpack_require__(49);\n\nfunction Interval(coord) {\n  if (!(this instanceof Interval)) return new Interval(coord);\n  this.coord = coord;\n}\n\nInterval.prototype = {\n  name: function() {\n    return knowledge.intervalsIndex[this.number() - 1];\n  },\n\n  semitones: function() {\n    return vector.sum(vector.mul(this.coord, [12, 7]));\n  },\n\n  number: function() {\n    return Math.abs(this.value());\n  },\n\n  value: function() {\n    var toMultiply = Math.floor((this.coord[1] - 2) / 7) + 1;\n    var product = vector.mul(knowledge.sharp, toMultiply);\n    var without = vector.sub(this.coord, product);\n    var i = knowledge.intervalFromFifth[without[1] + 5];\n    var diff = without[0] - knowledge.intervals[i][0];\n    var val = knowledge.stepNumber[i] + diff * 7;\n\n    return (val > 0) ? val : val - 2;\n  },\n\n  type: function() {\n    return knowledge.intervals[this.base()][0] <= 1 ? 'perfect' : 'minor';\n  },\n\n  base: function() {\n    var product = vector.mul(knowledge.sharp, this.qualityValue());\n    var fifth = vector.sub(this.coord, product)[1];\n    fifth = this.value() > 0 ? fifth + 5 : -(fifth - 5) % 7;\n    fifth = fifth < 0 ? knowledge.intervalFromFifth.length + fifth : fifth;\n\n    var name = knowledge.intervalFromFifth[fifth];\n    if (name === 'unison' && this.number() >= 8)\n      name = 'octave';\n\n    return name;\n  },\n\n  direction: function(dir) {\n    if (dir) {\n      var is = this.value() >= 1 ? 'up' : 'down';\n      if (is !== dir)\n        this.coord = vector.mul(this.coord, -1);\n\n      return this;\n    }\n    else\n      return this.value() >= 1 ? 'up' : 'down';\n  },\n\n  simple: function(ignore) {\n    // Get the (upwards) base interval (with quality)\n    var simple = knowledge.intervals[this.base()];\n    var toAdd = vector.mul(knowledge.sharp, this.qualityValue());\n    simple = vector.add(simple, toAdd);\n\n    // Turn it around if necessary\n    if (!ignore)\n      simple = this.direction() === 'down' ? vector.mul(simple, -1) : simple;\n\n    return new Interval(simple);\n  },\n\n  isCompound: function() {\n    return this.number() > 8;\n  },\n\n  octaves: function() {\n    var toSubtract, without, octaves;\n\n    if (this.direction() === 'up') {\n      toSubtract = vector.mul(knowledge.sharp, this.qualityValue());\n      without = vector.sub(this.coord, toSubtract);\n      octaves = without[0] - knowledge.intervals[this.base()][0];\n    } else {\n      toSubtract = vector.mul(knowledge.sharp, -this.qualityValue());\n      without = vector.sub(this.coord, toSubtract);\n      octaves = -(without[0] + knowledge.intervals[this.base()][0]);\n    }\n\n    return octaves;\n  },\n\n  invert: function() {\n    var i = this.base();\n    var qual = this.qualityValue();\n    var acc = this.type() === 'minor' ? -(qual - 1) : -qual;\n    var idx = 9 - knowledge.stepNumber[i] - 1;\n    var coord = knowledge.intervals[knowledge.intervalsIndex[idx]];\n    coord = vector.add(coord, vector.mul(knowledge.sharp, acc));\n\n    return new Interval(coord);\n  },\n\n  quality: function(lng) {\n    var quality = knowledge.alterations[this.type()][this.qualityValue() + 2];\n\n    return lng ? knowledge.qualityLong[quality] : quality;\n  },\n\n  qualityValue: function() {\n    if (this.direction() === 'down')\n      return Math.floor((-this.coord[1] - 2) / 7) + 1;\n    else\n      return Math.floor((this.coord[1] - 2) / 7) + 1;\n  },\n\n  equal: function(interval) {\n      return this.coord[0] === interval.coord[0] &&\n          this.coord[1] === interval.coord[1];\n  },\n\n  greater: function(interval) {\n    var semi = this.semitones();\n    var isemi = interval.semitones();\n\n    // If equal in absolute size, measure which interval is bigger\n    // For example P4 is bigger than A3\n    return (semi === isemi) ?\n      (this.number() > interval.number()) : (semi > isemi);\n  },\n\n  smaller: function(interval) {\n    return !this.equal(interval) && !this.greater(interval);\n  },\n\n  add: function(interval) {\n    return new Interval(vector.add(this.coord, interval.coord));\n  },\n\n  toString: function(ignore) {\n    // If given true, return the positive value\n    var number = ignore ? this.number() : this.value();\n\n    return this.quality() + number;\n  }\n};\n\nInterval.toCoord = function(simple) {\n  var coord = toCoord(simple);\n  if (!coord)\n    throw new Error('Invalid simple format interval');\n\n  return new Interval(coord);\n};\n\nInterval.from = function(from, to) {\n  return from.interval(to);\n};\n\nInterval.between = function(from, to) {\n  return new Interval(vector.sub(to.coord, from.coord));\n};\n\nInterval.invert = function(sInterval) {\n  return Interval.toCoord(sInterval).invert().toString();\n};\n\nmodule.exports = Interval;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nif (true) {\n  module.exports = __webpack_require__(30);\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nvar emptyFunction = function emptyFunction() {};\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function () {\n  return this;\n};\nemptyFunction.thatReturnsArgument = function (arg) {\n  return arg;\n};\n\nmodule.exports = emptyFunction;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Symbol = __webpack_require__(16),\n    getRawTag = __webpack_require__(65),\n    objectToString = __webpack_require__(66);\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar asap = __webpack_require__(26);\n\nfunction noop() {}\n\n// States:\n//\n// 0 - pending\n// 1 - fulfilled with _value\n// 2 - rejected with _value\n// 3 - adopted the state of another promise, _value\n//\n// once the state is no longer pending (0) it is immutable\n\n// All `_` prefixed properties will be reduced to `_{random number}`\n// at build time to obfuscate them and discourage their use.\n// We don't use symbols or Object.defineProperty to fully hide them\n// because the performance isn't good enough.\n\n\n// to avoid using try/catch inside critical functions, we\n// extract them to here.\nvar LAST_ERROR = null;\nvar IS_ERROR = {};\nfunction getThen(obj) {\n  try {\n    return obj.then;\n  } catch (ex) {\n    LAST_ERROR = ex;\n    return IS_ERROR;\n  }\n}\n\nfunction tryCallOne(fn, a) {\n  try {\n    return fn(a);\n  } catch (ex) {\n    LAST_ERROR = ex;\n    return IS_ERROR;\n  }\n}\nfunction tryCallTwo(fn, a, b) {\n  try {\n    fn(a, b);\n  } catch (ex) {\n    LAST_ERROR = ex;\n    return IS_ERROR;\n  }\n}\n\nmodule.exports = Promise;\n\nfunction Promise(fn) {\n  if (typeof this !== 'object') {\n    throw new TypeError('Promises must be constructed via new');\n  }\n  if (typeof fn !== 'function') {\n    throw new TypeError('Promise constructor\\'s argument is not a function');\n  }\n  this._75 = 0;\n  this._83 = 0;\n  this._18 = null;\n  this._38 = null;\n  if (fn === noop) return;\n  doResolve(fn, this);\n}\nPromise._47 = null;\nPromise._71 = null;\nPromise._44 = noop;\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  if (this.constructor !== Promise) {\n    return safeThen(this, onFulfilled, onRejected);\n  }\n  var res = new Promise(noop);\n  handle(this, new Handler(onFulfilled, onRejected, res));\n  return res;\n};\n\nfunction safeThen(self, onFulfilled, onRejected) {\n  return new self.constructor(function (resolve, reject) {\n    var res = new Promise(noop);\n    res.then(resolve, reject);\n    handle(self, new Handler(onFulfilled, onRejected, res));\n  });\n}\nfunction handle(self, deferred) {\n  while (self._83 === 3) {\n    self = self._18;\n  }\n  if (Promise._47) {\n    Promise._47(self);\n  }\n  if (self._83 === 0) {\n    if (self._75 === 0) {\n      self._75 = 1;\n      self._38 = deferred;\n      return;\n    }\n    if (self._75 === 1) {\n      self._75 = 2;\n      self._38 = [self._38, deferred];\n      return;\n    }\n    self._38.push(deferred);\n    return;\n  }\n  handleResolved(self, deferred);\n}\n\nfunction handleResolved(self, deferred) {\n  asap(function() {\n    var cb = self._83 === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      if (self._83 === 1) {\n        resolve(deferred.promise, self._18);\n      } else {\n        reject(deferred.promise, self._18);\n      }\n      return;\n    }\n    var ret = tryCallOne(cb, self._18);\n    if (ret === IS_ERROR) {\n      reject(deferred.promise, LAST_ERROR);\n    } else {\n      resolve(deferred.promise, ret);\n    }\n  });\n}\nfunction resolve(self, newValue) {\n  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n  if (newValue === self) {\n    return reject(\n      self,\n      new TypeError('A promise cannot be resolved with itself.')\n    );\n  }\n  if (\n    newValue &&\n    (typeof newValue === 'object' || typeof newValue === 'function')\n  ) {\n    var then = getThen(newValue);\n    if (then === IS_ERROR) {\n      return reject(self, LAST_ERROR);\n    }\n    if (\n      then === self.then &&\n      newValue instanceof Promise\n    ) {\n      self._83 = 3;\n      self._18 = newValue;\n      finale(self);\n      return;\n    } else if (typeof then === 'function') {\n      doResolve(then.bind(newValue), self);\n      return;\n    }\n  }\n  self._83 = 1;\n  self._18 = newValue;\n  finale(self);\n}\n\nfunction reject(self, newValue) {\n  self._83 = 2;\n  self._18 = newValue;\n  if (Promise._71) {\n    Promise._71(self, newValue);\n  }\n  finale(self);\n}\nfunction finale(self) {\n  if (self._75 === 1) {\n    handle(self, self._38);\n    self._38 = null;\n  }\n  if (self._75 === 2) {\n    for (var i = 0; i < self._38.length; i++) {\n      handle(self, self._38[i]);\n    }\n    self._38 = null;\n  }\n}\n\nfunction Handler(onFulfilled, onRejected, promise){\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, promise) {\n  var done = false;\n  var res = tryCallTwo(fn, function (value) {\n    if (done) return;\n    done = true;\n    resolve(promise, value);\n  }, function (reason) {\n    if (done) return;\n    done = true;\n    reject(promise, reason);\n  });\n  if (!done && res === IS_ERROR) {\n    done = true;\n    reject(promise, LAST_ERROR);\n  }\n}\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\nvar emptyObject = {};\n\nif (false) {\n  Object.freeze(emptyObject);\n}\n\nmodule.exports = emptyObject;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (false) {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar scientific = __webpack_require__(46);\nvar helmholtz = __webpack_require__(47);\nvar pitchFq = __webpack_require__(48);\nvar knowledge = __webpack_require__(0);\nvar vector = __webpack_require__(14);\nvar Interval = __webpack_require__(1);\n\nfunction pad(str, ch, len) {\n  for (; len > 0; len--) {\n    str += ch;\n  }\n\n  return str;\n}\n\n\nfunction Note(coord, duration) {\n  if (!(this instanceof Note)) return new Note(coord, duration);\n  duration = duration || {};\n\n  this.duration = { value: duration.value || 4, dots: duration.dots || 0 };\n  this.coord = coord;\n}\n\nNote.prototype = {\n  octave: function() {\n    return this.coord[0] + knowledge.A4[0] - knowledge.notes[this.name()][0] +\n      this.accidentalValue() * 4;\n  },\n\n  name: function() {\n    var value = this.accidentalValue();\n    var idx = this.coord[1] + knowledge.A4[1] - value * 7 + 1;\n    return knowledge.fifths[idx];\n  },\n\n  accidentalValue: function() {\n    return Math.round((this.coord[1] + knowledge.A4[1] - 2) / 7);\n  },\n\n  accidental: function() {\n    return knowledge.accidentals[this.accidentalValue() + 2];\n  },\n\n  /**\n   * Returns the key number of the note\n   */\n  key: function(white) {\n    if (white)\n      return this.coord[0] * 7 + this.coord[1] * 4 + 29;\n    else\n      return this.coord[0] * 12 + this.coord[1] * 7 + 49;\n  },\n\n  /**\n  * Returns a number ranging from 0-127 representing a MIDI note value\n  */\n  midi: function() {\n    return this.key() + 20;\n  },\n\n  /**\n   * Calculates and returns the frequency of the note.\n   * Optional concert pitch (def. 440)\n   */\n  fq: function(concertPitch) {\n    return pitchFq(this.coord, concertPitch);\n  },\n\n  /**\n   * Returns the pitch class index (chroma) of the note\n   */\n  chroma: function() {\n    var value = (vector.sum(vector.mul(this.coord, [12, 7])) - 3) % 12;\n\n    return (value < 0) ? value + 12 : value;\n  },\n\n  interval: function(interval) {\n    if (typeof interval === 'string') interval = Interval.toCoord(interval);\n\n    if (interval instanceof Interval)\n      return new Note(vector.add(this.coord, interval.coord), this.duration);\n    else if (interval instanceof Note)\n      return new Interval(vector.sub(interval.coord, this.coord));\n  },\n\n  transpose: function(interval) {\n    this.coord = vector.add(this.coord, interval.coord);\n    return this;\n  },\n\n  /**\n   * Returns the Helmholtz notation form of the note (fx C,, d' F# g#'')\n   */\n  helmholtz: function() {\n    var octave = this.octave();\n    var name = this.name();\n    name = octave < 3 ? name.toUpperCase() : name.toLowerCase();\n    var padchar = octave < 3 ? ',' : '\\'';\n    var padcount = octave < 2 ? 2 - octave : octave - 3;\n\n    return pad(name + this.accidental(), padchar, padcount);\n  },\n\n  /**\n   * Returns the scientific notation form of the note (fx E4, Bb3, C#7 etc.)\n   */\n  scientific: function() {\n    return this.name().toUpperCase() + this.accidental() + this.octave();\n  },\n\n  /**\n   * Returns notes that are enharmonic with this note.\n   */\n  enharmonics: function(oneaccidental) {\n    var key = this.key(), limit = oneaccidental ? 2 : 3;\n\n    return ['m3', 'm2', 'm-2', 'm-3']\n      .map(this.interval.bind(this))\n      .filter(function(note) {\n      var acc = note.accidentalValue();\n      var diff = key - (note.key() - acc);\n\n      if (diff < limit && diff > -limit) {\n        var product = vector.mul(knowledge.sharp, diff - acc);\n        note.coord = vector.add(note.coord, product);\n        return true;\n      }\n    });\n  },\n\n  solfege: function(scale, showOctaves) {\n    var interval = scale.tonic.interval(this), solfege, stroke, count;\n    if (interval.direction() === 'down')\n      interval = interval.invert();\n\n    if (showOctaves) {\n      count = (this.key(true) - scale.tonic.key(true)) / 7;\n      count = (count >= 0) ? Math.floor(count) : -(Math.ceil(-count));\n      stroke = (count >= 0) ? '\\'' : ',';\n    }\n\n    solfege = knowledge.intervalSolfege[interval.simple(true).toString()];\n    return (showOctaves) ? pad(solfege, stroke, Math.abs(count)) : solfege;\n  },\n\n  scaleDegree: function(scale) {\n    var inter = scale.tonic.interval(this);\n\n    // If the direction is down, or we're dealing with an octave - invert it\n    if (inter.direction() === 'down' ||\n       (inter.coord[1] === 0 && inter.coord[0] !== 0)) {\n      inter = inter.invert();\n    }\n\n    inter = inter.simple(true).coord;\n\n    return scale.scale.reduce(function(index, current, i) {\n      var coord = Interval.toCoord(current).coord;\n      return coord[0] === inter[0] && coord[1] === inter[1] ? i + 1 : index;\n    }, 0);\n  },\n\n  /**\n   * Returns the name of the duration value,\n   * such as 'whole', 'quarter', 'sixteenth' etc.\n   */\n  durationName: function() {\n    return knowledge.durations[this.duration.value];\n  },\n\n  /**\n   * Returns the duration of the note (including dots)\n   * in seconds. The first argument is the tempo in beats\n   * per minute, the second is the beat unit (i.e. the\n   * lower numeral in a time signature).\n   */\n  durationInSeconds: function(bpm, beatUnit) {\n    var secs = (60 / bpm) / (this.duration.value / 4) / (beatUnit / 4);\n    return secs * 2 - secs / Math.pow(2, this.duration.dots);\n  },\n\n  /**\n   * Returns the name of the note, with an optional display of octave number\n   */\n  toString: function(dont) {\n    return this.name() + this.accidental() + (dont ? '' : this.octave());\n  }\n};\n\nNote.fromString = function(name, dur) {\n  var coord = scientific(name);\n  if (!coord) coord = helmholtz(name);\n  return new Note(coord, dur);\n};\n\nNote.fromKey = function(key) {\n  var octave = Math.floor((key - 4) / 12);\n  var distance = key - (octave * 12) - 4;\n  var name = knowledge.fifths[(2 * Math.round(distance / 2) + 1) % 7];\n  var subDiff = vector.sub(knowledge.notes[name], knowledge.A4);\n  var note = vector.add(subDiff, [octave + 1, 0]);\n  var diff = (key - 49) - vector.sum(vector.mul(note, [12, 7]));\n\n  var arg = diff ? vector.add(note, vector.mul(knowledge.sharp, diff)) : note;\n  return new Note(arg);\n};\n\nNote.fromFrequency = function(fq, concertPitch) {\n  var key, cents, originalFq;\n  concertPitch = concertPitch || 440;\n\n  key = 49 + 12 * ((Math.log(fq) - Math.log(concertPitch)) / Math.log(2));\n  key = Math.round(key);\n  originalFq = concertPitch * Math.pow(2, (key - 49) / 12);\n  cents = 1200 * (Math.log(fq / originalFq) / Math.log(2));\n\n  return { note: Note.fromKey(key), cents: cents };\n};\n\nNote.fromMIDI = function(note) {\n  return Note.fromKey(note - 20);\n};\n\nmodule.exports = Note;\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\n// First coord is octaves, second is fifths. Distances are relative to c\nvar notes = {\n  c: [0, 0],\n  d: [-1, 2],\n  e: [-2, 4],\n  f: [1, -1],\n  g: [0, 1],\n  a: [-1, 3],\n  b: [-2, 5],\n  h: [-2, 5]\n};\n\nmodule.exports = function(name) {\n  return name in notes ? [notes[name][0], notes[name][1]] : null;\n};\n\nmodule.exports.notes = notes;\nmodule.exports.A4 = [3, 3]; // Relative to C0 (scientic notation, ~16.35Hz)\nmodule.exports.sharp = [-4, 7];\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\nvar accidentalValues = {\n  'bb': -2,\n  'b': -1,\n  '': 0,\n  '#': 1,\n  'x': 2\n};\n\nmodule.exports = function accidentalNumber(acc) {\n  return accidentalValues[acc];\n}\n\nmodule.exports.interval = function accidentalInterval(acc) {\n  var val = accidentalValues[acc];\n  return [-4 * val, 7 * val];\n}\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\nmodule.exports = {\n  add: function(note, interval) {\n    return [note[0] + interval[0], note[1] + interval[1]];\n  },\n\n  sub: function(note, interval) {\n    return [note[0] - interval[0], note[1] - interval[1]];\n  },\n\n  mul: function(note, interval) {\n    if (typeof interval === 'number')\n      return [note[0] * interval, note[1] * interval];\n    else\n      return [note[0] * interval[0], note[1] * interval[1]];\n  },\n\n  sum: function(coord) {\n    return coord[0] + coord[1];\n  }\n};\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseRandom = __webpack_require__(55);\n\n/**\n * A specialized version of `_.sample` for arrays.\n *\n * @private\n * @param {Array} array The array to sample.\n * @returns {*} Returns the random element.\n */\nfunction arraySample(array) {\n  var length = array.length;\n  return length ? array[baseRandom(0, length - 1)] : undefined;\n}\n\nmodule.exports = arraySample;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar root = __webpack_require__(17);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar freeGlobal = __webpack_require__(18);\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports) {\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory){\n\n\t//UMD\n\tif ( true ) {\n\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\t\treturn factory();\n\t\t}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if (typeof module === \"object\") {\n\t\tmodule.exports = factory();\n \t} else {\n\t\troot.Tone = factory();\n\t}\n\n}(this, function(){\n\n\t\"use strict\";\n\t\n\tvar Tone;\n\t//constructs the main Tone object\n\tfunction Main(func){\n\t\tTone = func();\n\t}\n\t//invokes each of the modules with the main Tone object as the argument\n\tfunction Module(func){\n\t\tfunc(Tone);\n\t}\t/**\n\t *  Tone.js\n\t *  @author Yotam Mann\n\t *  @license http://opensource.org/licenses/MIT MIT License\n\t *  @copyright 2014-2017 Yotam Mann\n\t */\n\tMain(function () {\n\t    \n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTONE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  @class  Tone is the base class of all other classes.\n\t\t *  @constructor\n\t\t */\n\t    var Tone = function () {\n\t    };\n\t    /**\n\t\t *  @memberOf Tone#\n\t\t *  @returns {string} returns the name of the class as a string\n\t\t */\n\t    Tone.prototype.toString = function () {\n\t        for (var className in Tone) {\n\t            var isLetter = className[0].match(/^[A-Z]$/);\n\t            var sameConstructor = Tone[className] === this.constructor;\n\t            if (Tone.isFunction(Tone[className]) && isLetter && sameConstructor) {\n\t                return className;\n\t            }\n\t        }\n\t        return 'Tone';\n\t    };\n\t    /**\n\t\t *  @memberOf Tone#\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.dispose = function () {\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tGET/SET\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Set the parameters at once. Either pass in an\n\t\t *  object mapping parameters to values, or to set a\n\t\t *  single parameter, by passing in a string and value.\n\t\t *  The last argument is an optional ramp time which\n\t\t *  will ramp any signal values to their destination value\n\t\t *  over the duration of the rampTime.\n\t\t *  @param {Object|string} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone} this\n\t\t *  @memberOf Tone#\n\t\t *  @example\n\t\t * //set values using an object\n\t\t * filter.set({\n\t\t * \t\"frequency\" : 300,\n\t\t * \t\"type\" : highpass\n\t\t * });\n\t\t *  @example\n\t\t * filter.set(\"type\", \"highpass\");\n\t\t *  @example\n\t\t * //ramp to the value 220 over 3 seconds.\n\t\t * oscillator.set({\n\t\t * \t\"frequency\" : 220\n\t\t * }, 3);\n\t\t */\n\t    Tone.prototype.set = function (params, value, rampTime) {\n\t        if (Tone.isObject(params)) {\n\t            rampTime = value;\n\t        } else if (Tone.isString(params)) {\n\t            var tmpObj = {};\n\t            tmpObj[params] = value;\n\t            params = tmpObj;\n\t        }\n\t        paramLoop:\n\t            for (var attr in params) {\n\t                value = params[attr];\n\t                var parent = this;\n\t                if (attr.indexOf('.') !== -1) {\n\t                    var attrSplit = attr.split('.');\n\t                    for (var i = 0; i < attrSplit.length - 1; i++) {\n\t                        parent = parent[attrSplit[i]];\n\t                        if (parent instanceof Tone) {\n\t                            attrSplit.splice(0, i + 1);\n\t                            var innerParam = attrSplit.join('.');\n\t                            parent.set(innerParam, value);\n\t                            continue paramLoop;\n\t                        }\n\t                    }\n\t                    attr = attrSplit[attrSplit.length - 1];\n\t                }\n\t                var param = parent[attr];\n\t                if (Tone.isUndef(param)) {\n\t                    continue;\n\t                }\n\t                if (Tone.Signal && param instanceof Tone.Signal || Tone.Param && param instanceof Tone.Param) {\n\t                    if (param.value !== value) {\n\t                        if (Tone.isUndef(rampTime)) {\n\t                            param.value = value;\n\t                        } else {\n\t                            param.rampTo(value, rampTime);\n\t                        }\n\t                    }\n\t                } else if (param instanceof AudioParam) {\n\t                    if (param.value !== value) {\n\t                        param.value = value;\n\t                    }\n\t                } else if (param instanceof Tone) {\n\t                    param.set(value);\n\t                } else if (param !== value) {\n\t                    parent[attr] = value;\n\t                }\n\t            }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the object's attributes. Given no arguments get\n\t\t *  will return all available object properties and their corresponding\n\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t *  to access deeper properties.\n\t\t *  @memberOf Tone#\n\t\t *  @example\n\t\t * osc.get();\n\t\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t\t *  @example\n\t\t * osc.get(\"type\");\n\t\t * //returns { \"type\" : \"sine\"}\n\t\t * @example\n\t\t * //use dot notation to access deep properties\n\t\t * synth.get([\"envelope.attack\", \"envelope.release\"]);\n\t\t * //returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n\t\t *  @param {Array=|string|undefined} params the parameters to get, otherwise will return\n\t\t *  \t\t\t\t\t                  all available.\n\t\t *  @returns {Object}\n\t\t */\n\t    Tone.prototype.get = function (params) {\n\t        if (Tone.isUndef(params)) {\n\t            params = this._collectDefaults(this.constructor);\n\t        } else if (Tone.isString(params)) {\n\t            params = [params];\n\t        }\n\t        var ret = {};\n\t        for (var i = 0; i < params.length; i++) {\n\t            var attr = params[i];\n\t            var parent = this;\n\t            var subRet = ret;\n\t            if (attr.indexOf('.') !== -1) {\n\t                var attrSplit = attr.split('.');\n\t                for (var j = 0; j < attrSplit.length - 1; j++) {\n\t                    var subAttr = attrSplit[j];\n\t                    subRet[subAttr] = subRet[subAttr] || {};\n\t                    subRet = subRet[subAttr];\n\t                    parent = parent[subAttr];\n\t                }\n\t                attr = attrSplit[attrSplit.length - 1];\n\t            }\n\t            var param = parent[attr];\n\t            if (Tone.isObject(params[attr])) {\n\t                subRet[attr] = param.get();\n\t            } else if (Tone.Signal && param instanceof Tone.Signal) {\n\t                subRet[attr] = param.value;\n\t            } else if (Tone.Param && param instanceof Tone.Param) {\n\t                subRet[attr] = param.value;\n\t            } else if (param instanceof AudioParam) {\n\t                subRet[attr] = param.value;\n\t            } else if (param instanceof Tone) {\n\t                subRet[attr] = param.get();\n\t            } else if (!Tone.isFunction(param) && !Tone.isUndef(param)) {\n\t                subRet[attr] = param;\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  collect all of the default attributes in one\n\t\t *  @private\n\t\t *  @param {function} constr the constructor to find the defaults from\n\t\t *  @return {Array} all of the attributes which belong to the class\n\t\t */\n\t    Tone.prototype._collectDefaults = function (constr) {\n\t        var ret = [];\n\t        if (!Tone.isUndef(constr.defaults)) {\n\t            ret = Object.keys(constr.defaults);\n\t        }\n\t        if (!Tone.isUndef(constr._super)) {\n\t            var superDefs = this._collectDefaults(constr._super);\n\t            //filter out repeats\n\t            for (var i = 0; i < superDefs.length; i++) {\n\t                if (ret.indexOf(superDefs[i]) === -1) {\n\t                    ret.push(superDefs[i]);\n\t                }\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tDEFAULTS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  @memberOf Tone\n\t\t *  @param  {Array}  values  The arguments array\n\t\t *  @param  {Array}  keys    The names of the arguments\n\t\t *  @param {Function|Object} constr The class constructor\n\t\t *  @return  {Object}  An object composed of the  defaults between the class' defaults\n\t\t *                        and the passed in arguments.\n\t\t */\n\t    Tone.defaults = function (values, keys, constr) {\n\t        var options = {};\n\t        if (values.length === 1 && Tone.isObject(values[0])) {\n\t            options = values[0];\n\t        } else {\n\t            for (var i = 0; i < keys.length; i++) {\n\t                options[keys[i]] = values[i];\n\t            }\n\t        }\n\t        if (!Tone.isUndef(constr.defaults)) {\n\t            return Tone.defaultArg(options, constr.defaults);\n\t        } else if (Tone.isObject(constr)) {\n\t            return Tone.defaultArg(options, constr);\n\t        } else {\n\t            return options;\n\t        }\n\t    };\n\t    /**\n\t\t *  If the `given` parameter is undefined, use the `fallback`.\n\t\t *  If both `given` and `fallback` are object literals, it will\n\t\t *  return a deep copy which includes all of the parameters from both\n\t\t *  objects. If a parameter is undefined in given, it will return\n\t\t *  the fallback property.\n\t\t *  <br><br>\n\t\t *  WARNING: if object is self referential, it will go into an an\n\t\t *  infinite recursive loop.\n\t\t *  @memberOf Tone\n\t\t *  @param  {*} given\n\t\t *  @param  {*} fallback\n\t\t *  @return {*}\n\t\t */\n\t    Tone.defaultArg = function (given, fallback) {\n\t        if (Tone.isObject(given) && Tone.isObject(fallback)) {\n\t            var ret = {};\n\t            //make a deep copy of the given object\n\t            for (var givenProp in given) {\n\t                ret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);\n\t            }\n\t            for (var fallbackProp in fallback) {\n\t                ret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t            }\n\t            return ret;\n\t        } else {\n\t            return Tone.isUndef(given) ? fallback : given;\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCONNECTIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  connect together all of the arguments in series\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone}\n\t\t *  @memberOf Tone\n\t\t *  @static\n\t\t */\n\t    Tone.connectSeries = function () {\n\t        var currentUnit = arguments[0];\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            var toUnit = arguments[i];\n\t            currentUnit.connect(toUnit);\n\t            currentUnit = toUnit;\n\t        }\n\t        return Tone;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // TYPE CHECKING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  test if the arg is undefined\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is undefined\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isUndef = function (val) {\n\t        return typeof val === 'undefined';\n\t    };\n\t    /**\n\t\t *  test if the arg is a function\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a function\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isFunction = function (val) {\n\t        return typeof val === 'function';\n\t    };\n\t    /**\n\t\t *  Test if the argument is a number.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a number\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isNumber = function (arg) {\n\t        return typeof arg === 'number';\n\t    };\n\t    /**\n\t\t *  Test if the given argument is an object literal (i.e. `{}`);\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is an object literal.\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isObject = function (arg) {\n\t        return Object.prototype.toString.call(arg) === '[object Object]' && arg.constructor === Object;\n\t    };\n\t    /**\n\t\t *  Test if the argument is a boolean.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a boolean\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isBoolean = function (arg) {\n\t        return typeof arg === 'boolean';\n\t    };\n\t    /**\n\t\t *  Test if the argument is an Array\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is an array\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isArray = function (arg) {\n\t        return Array.isArray(arg);\n\t    };\n\t    /**\n\t\t *  Test if the argument is a string.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a string\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isString = function (arg) {\n\t        return typeof arg === 'string';\n\t    };\n\t    /**\n\t\t *  Test if the argument is in the form of a note in scientific pitch notation.\n\t\t *  e.g. \"C4\"\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a string\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isNote = function (arg) {\n\t        return Tone.isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n\t    };\n\t    /**\n\t\t *  An empty function.\n\t\t *  @static\n\t\t */\n\t    Tone.noOp = function () {\n\t    };\n\t    /**\n\t\t *  Make the property not writable. Internal use only.\n\t\t *  @private\n\t\t *  @param  {string}  property  the property to make not writable\n\t\t */\n\t    Tone.prototype._readOnly = function (property) {\n\t        if (Array.isArray(property)) {\n\t            for (var i = 0; i < property.length; i++) {\n\t                this._readOnly(property[i]);\n\t            }\n\t        } else {\n\t            Object.defineProperty(this, property, {\n\t                writable: false,\n\t                enumerable: true\n\t            });\n\t        }\n\t    };\n\t    /**\n\t\t *  Make an attribute writeable. Interal use only.\n\t\t *  @private\n\t\t *  @param  {string}  property  the property to make writable\n\t\t */\n\t    Tone.prototype._writable = function (property) {\n\t        if (Array.isArray(property)) {\n\t            for (var i = 0; i < property.length; i++) {\n\t                this._writable(property[i]);\n\t            }\n\t        } else {\n\t            Object.defineProperty(this, property, { writable: true });\n\t        }\n\t    };\n\t    /**\n\t\t * Possible play states.\n\t\t * @enum {string}\n\t\t */\n\t    Tone.State = {\n\t        Started: 'started',\n\t        Stopped: 'stopped',\n\t        Paused: 'paused'\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Equal power gain scale. Good for cross-fading.\n\t\t *  @param  {NormalRange} percent (0-1)\n\t\t *  @return {Number}         output gain (0-1)\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.equalPowerScale = function (percent) {\n\t        var piFactor = 0.5 * Math.PI;\n\t        return Math.sin(percent * piFactor);\n\t    };\n\t    /**\n\t\t *  Convert decibels into gain.\n\t\t *  @param  {Decibels} db\n\t\t *  @return {Number}\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.dbToGain = function (db) {\n\t        return Math.pow(2, db / 6);\n\t    };\n\t    /**\n\t\t *  Convert gain to decibels.\n\t\t *  @param  {Number} gain (0-1)\n\t\t *  @return {Decibels}\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.gainToDb = function (gain) {\n\t        return 20 * (Math.log(gain) / Math.LN10);\n\t    };\n\t    /**\n\t\t *  Convert an interval (in semitones) to a frequency ratio.\n\t\t *  @param  {Interval} interval the number of semitones above the base note\n\t\t *  @return {number}          the frequency ratio\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t *  @example\n\t\t * tone.intervalToFrequencyRatio(0); // 1\n\t\t * tone.intervalToFrequencyRatio(12); // 2\n\t\t * tone.intervalToFrequencyRatio(-12); // 0.5\n\t\t */\n\t    Tone.intervalToFrequencyRatio = function (interval) {\n\t        return Math.pow(2, interval / 12);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTIMING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Return the current time of the AudioContext clock.\n\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t *  @memberOf Tone#\n\t\t */\n\t    Tone.prototype.now = function () {\n\t        return Tone.context.now();\n\t    };\n\t    /**\n\t\t *  Return the current time of the AudioContext clock.\n\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.now = function () {\n\t        return Tone.context.now();\n\t    };\n\t    /**\n\t\t * Adds warning in the console if the scheduled time has passed.\n\t\t * @type {Time}\n\t\t */\n\t    Tone.isPast = function (time) {\n\t        if (time < Tone.context.currentTime) {\n\t            console.warn('Time \\'' + time + '\\' is in the past. Scheduled time must be \\u2265 AudioContext.currentTime');\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tINHERITANCE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  have a child inherit all of Tone's (or a parent's) prototype\n\t\t *  to inherit the parent's properties, make sure to call\n\t\t *  Parent.call(this) in the child's constructor\n\t\t *\n\t\t *  based on closure library's inherit function\n\t\t *\n\t\t *  @memberOf Tone\n\t\t *  @static\n\t\t *  @param  {function} \tchild\n\t\t *  @param  {function=} parent (optional) parent to inherit from\n\t\t *                             if no parent is supplied, the child\n\t\t *                             will inherit from Tone\n\t\t */\n\t    Tone.extend = function (child, parent) {\n\t        if (Tone.isUndef(parent)) {\n\t            parent = Tone;\n\t        }\n\t        function TempConstructor() {\n\t        }\n\t        TempConstructor.prototype = parent.prototype;\n\t        child.prototype = new TempConstructor();\n\t        /** @override */\n\t        child.prototype.constructor = child;\n\t        child._super = parent;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCONTEXT\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The private audio context shared by all Tone Nodes.\n\t\t *  @private\n\t\t *  @type {Tone.Context}\n\t\t */\n\t    var audioContext = null;\n\t    /**\n\t\t *  A static pointer to the audio context accessible as Tone.context.\n\t\t *  @type {Tone.Context}\n\t\t *  @name context\n\t\t *  @memberOf Tone\n\t\t */\n\t    Object.defineProperty(Tone, 'context', {\n\t        get: function () {\n\t            return audioContext;\n\t        },\n\t        set: function (context) {\n\t            if (Tone.Context && context instanceof Tone.Context) {\n\t                audioContext = context;\n\t            } else {\n\t                audioContext = new Tone.Context(context);\n\t            }\n\t            //initialize the new audio context\n\t            Tone.Context.emit('init', audioContext);\n\t        }\n\t    });\n\t    /**\n\t\t *  The AudioContext\n\t\t *  @type {Tone.Context}\n\t\t *  @name context\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'context', {\n\t        get: function () {\n\t            return Tone.context;\n\t        }\n\t    });\n\t    /**\n\t\t *  Tone automatically creates a context on init, but if you are working\n\t\t *  with other libraries which also create an AudioContext, it can be\n\t\t *  useful to set your own. If you are going to set your own context,\n\t\t *  be sure to do it at the start of your code, before creating any objects.\n\t\t *  @static\n\t\t *  @param {AudioContext} ctx The new audio context to set\n\t\t */\n\t    Tone.setContext = function (ctx) {\n\t        Tone.context = ctx;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tATTRIBUTES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The number of seconds of 1 processing block (128 samples)\n\t\t *  @type {Number}\n\t\t *  @name blockTime\n\t\t *  @memberOf Tone\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'blockTime', {\n\t        get: function () {\n\t            return 128 / this.context.sampleRate;\n\t        }\n\t    });\n\t    /**\n\t\t *  The duration in seconds of one sample.\n\t\t *  @type {Number}\n\t\t *  @name sampleTime\n\t\t *  @memberOf Tone\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'sampleTime', {\n\t        get: function () {\n\t            return 1 / this.context.sampleRate;\n\t        }\n\t    });\n\t    /**\n\t\t *  Whether or not all the technologies that Tone.js relies on are supported by the current browser.\n\t\t *  @type {Boolean}\n\t\t *  @name supported\n\t\t *  @memberOf Tone\n\t\t *  @readOnly\n\t\t *  @static\n\t\t */\n\t    Object.defineProperty(Tone, 'supported', {\n\t        get: function () {\n\t            var hasAudioContext = window.hasOwnProperty('AudioContext') || window.hasOwnProperty('webkitAudioContext');\n\t            var hasPromises = window.hasOwnProperty('Promise');\n\t            var hasWorkers = window.hasOwnProperty('Worker');\n\t            return hasAudioContext && hasPromises && hasWorkers;\n\t        }\n\t    });\n\t    /**\n\t\t *  Boolean value if the audio context has been initialized.\n\t\t *  @type {Boolean}\n\t\t *  @memberOf Tone\n\t\t *  @static\n\t\t *  @name initialized\n\t\t */\n\t    Object.defineProperty(Tone, 'initialized', {\n\t        get: function () {\n\t            return audioContext !== null;\n\t        }\n\t    });\n\t    /**\n\t\t *  Get the context when it becomes available\n\t\t *  @param  {Function}  resolve  Callback when the context is initialized\n\t\t *  @return  {Tone}\n\t\t */\n\t    Tone.getContext = function (resolve) {\n\t        if (Tone.initialized) {\n\t            resolve(Tone.context);\n\t        } else {\n\t            var resCallback = function () {\n\t                resolve(Tone.context);\n\t                Tone.Context.off('init', resCallback);\n\t            };\n\t            Tone.Context.on('init', resCallback);\n\t        }\n\t        return Tone;\n\t    };\n\t    /**\n\t\t * The version number\n\t\t * @type {String}\n\t\t * @static\n\t\t */\n\t    Tone.version = 'r12-dev';\n\t    // allow optional silencing of this log\n\t    if (!window.TONE_SILENCE_VERSION_LOGGING) {\n\t        console.log('%c * Tone.js ' + Tone.version + ' * ', 'background: #000; color: #fff');\n\t    }\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Emitter gives classes which extend it\n\t\t *         the ability to listen for and emit events. \n\t\t *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n\t\t *         MIT (c) 2011 Jerome Etienne.\n\t\t *         \n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Emitter = function () {\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  Contains all of the events.\n\t\t\t *  @private\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t        this._events = {};\n\t    };\n\t    Tone.extend(Tone.Emitter);\n\t    /**\n\t\t *  Bind a callback to a specific event.\n\t\t *  @param  {String}    event     The name of the event to listen for.\n\t\t *  @param  {Function}  callback  The callback to invoke when the\n\t\t *                                event is emitted\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.on = function (event, callback) {\n\t        //split the event\n\t        var events = event.split(/\\W+/);\n\t        for (var i = 0; i < events.length; i++) {\n\t            var eventName = events[i];\n\t            if (!this._events.hasOwnProperty(eventName)) {\n\t                this._events[eventName] = [];\n\t            }\n\t            this._events[eventName].push(callback);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove the event listener.\n\t\t *  @param  {String}    event     The event to stop listening to.\n\t\t *  @param  {Function=}  callback  The callback which was bound to \n\t\t *                                the event with Tone.Emitter.on.\n\t\t *                                If no callback is given, all callbacks\n\t\t *                                events are removed.\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.off = function (event, callback) {\n\t        var events = event.split(/\\W+/);\n\t        for (var ev = 0; ev < events.length; ev++) {\n\t            event = events[ev];\n\t            if (this._events.hasOwnProperty(event)) {\n\t                if (Tone.isUndef(callback)) {\n\t                    this._events[event] = [];\n\t                } else {\n\t                    var eventList = this._events[event];\n\t                    for (var i = 0; i < eventList.length; i++) {\n\t                        if (eventList[i] === callback) {\n\t                            eventList.splice(i, 1);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Invoke all of the callbacks bound to the event\n\t\t *  with any arguments passed in. \n\t\t *  @param  {String}  event  The name of the event.\n\t\t *  @param {*} args... The arguments to pass to the functions listening.\n\t\t *  @return  {Tone.Emitter}  this\n\t\t */\n\t    Tone.Emitter.prototype.emit = function (event) {\n\t        if (this._events) {\n\t            var args = Array.apply(null, arguments).slice(1);\n\t            if (this._events.hasOwnProperty(event)) {\n\t                var eventList = this._events[event];\n\t                for (var i = 0, len = eventList.length; i < len; i++) {\n\t                    eventList[i].apply(this, args);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add Emitter functions (on/off/emit) to the object\n\t\t *  @param  {Object|Function}  object  The object or class to extend.\n\t\t *  @returns {Tone.Emitter}\n\t\t */\n\t    Tone.Emitter.mixin = function (object) {\n\t        var functions = [\n\t            'on',\n\t            'off',\n\t            'emit'\n\t        ];\n\t        object._events = {};\n\t        for (var i = 0; i < functions.length; i++) {\n\t            var func = functions[i];\n\t            var emitterFunc = Tone.Emitter.prototype[func];\n\t            object[func] = emitterFunc;\n\t        }\n\t        return Tone.Emitter;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Emitter}  this\n\t\t */\n\t    Tone.Emitter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Emitter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A Timeline class for scheduling and maintaining state\n\t\t *         along a timeline. All events must have a \"time\" property.\n\t\t *         Internally, events are stored in time order for fast\n\t\t *         retrieval.\n\t\t *  @extends {Tone}\n\t\t *  @param {Positive} [memory=Infinity] The number of previous events that are retained.\n\t\t */\n\t    Tone.Timeline = function () {\n\t        var options = Tone.defaults(arguments, ['memory'], Tone.Timeline);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The array of scheduled timeline events\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeline = [];\n\t        /**\n\t\t\t *  An array of items to remove from the list.\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._toRemove = [];\n\t        /**\n\t\t\t *  An array of items to add from the list (once it's done iterating)\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._toAdd = [];\n\t        /**\n\t\t\t *  Flag if the timeline is mid iteration\n\t\t\t *  @private\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this._iterating = false;\n\t        /**\n\t\t\t *  The memory of the timeline, i.e.\n\t\t\t *  how many events in the past it will retain\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this.memory = options.memory;\n\t    };\n\t    Tone.extend(Tone.Timeline);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Timeline.defaults = { 'memory': Infinity };\n\t    /**\n\t\t *  The number of items in the timeline.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Timeline#\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Timeline.prototype, 'length', {\n\t        get: function () {\n\t            return this._timeline.length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t\t *  @param  {Object}  event  The event object to insert into the\n\t\t *                           timeline.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.add = function (event) {\n\t        //the event needs to have a time attribute\n\t        if (Tone.isUndef(event.time)) {\n\t            throw new Error('Tone.Timeline: events must have a time attribute');\n\t        }\n\t        if (this._iterating) {\n\t            this._toAdd.push(event);\n\t        } else {\n\t            var index = this._search(event.time);\n\t            this._timeline.splice(index + 1, 0, event);\n\t            //if the length is more than the memory, remove the previous ones\n\t            if (this.length > this.memory) {\n\t                var diff = this.length - this.memory;\n\t                this._timeline.splice(0, diff);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove an event from the timeline.\n\t\t *  @param  {Object}  event  The event object to remove from the list.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.remove = function (event) {\n\t        if (this._iterating) {\n\t            this._toRemove.push(event);\n\t        } else {\n\t            var index = this._timeline.indexOf(event);\n\t            if (index !== -1) {\n\t                this._timeline.splice(index, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the nearest event whose time is less than or equal to the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @param  {String}  comparator Which value in the object to compare\n\t\t *  @returns {Object} The event object set after that time.\n\t\t */\n\t    Tone.Timeline.prototype.get = function (time, comparator) {\n\t        comparator = Tone.defaultArg(comparator, 'time');\n\t        var index = this._search(time, comparator);\n\t        if (index !== -1) {\n\t            return this._timeline[index];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the first event in the timeline without removing it\n\t\t *  @returns {Object} The first event object\n\t\t */\n\t    Tone.Timeline.prototype.peek = function () {\n\t        return this._timeline[0];\n\t    };\n\t    /**\n\t\t *  Return the first event in the timeline and remove it\n\t\t *  @returns {Object} The first event object\n\t\t */\n\t    Tone.Timeline.prototype.shift = function () {\n\t        return this._timeline.shift();\n\t    };\n\t    /**\n\t\t *  Get the event which is scheduled after the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @param  {String}  comparator Which value in the object to compare\n\t\t *  @returns {Object} The event object after the given time\n\t\t */\n\t    Tone.Timeline.prototype.getAfter = function (time, comparator) {\n\t        comparator = Tone.defaultArg(comparator, 'time');\n\t        var index = this._search(time, comparator);\n\t        if (index + 1 < this._timeline.length) {\n\t            return this._timeline[index + 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Get the event before the event at the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @param  {String}  comparator Which value in the object to compare\n\t\t *  @returns {Object} The event object before the given time\n\t\t */\n\t    Tone.Timeline.prototype.getBefore = function (time, comparator) {\n\t        comparator = Tone.defaultArg(comparator, 'time');\n\t        var len = this._timeline.length;\n\t        //if it's after the last item, return the last item\n\t        if (len > 0 && this._timeline[len - 1][comparator] < time) {\n\t            return this._timeline[len - 1];\n\t        }\n\t        var index = this._search(time, comparator);\n\t        if (index - 1 >= 0) {\n\t            return this._timeline[index - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Cancel events after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.cancel = function (after) {\n\t        if (this._timeline.length > 1) {\n\t            var index = this._search(after);\n\t            if (index >= 0) {\n\t                if (this._timeline[index].time === after) {\n\t                    //get the first item with that time\n\t                    for (var i = index; i >= 0; i--) {\n\t                        if (this._timeline[i].time === after) {\n\t                            index = i;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    }\n\t                    this._timeline = this._timeline.slice(0, index);\n\t                } else {\n\t                    this._timeline = this._timeline.slice(0, index + 1);\n\t                }\n\t            } else {\n\t                this._timeline = [];\n\t            }\n\t        } else if (this._timeline.length === 1) {\n\t            //the first item's time\n\t            if (this._timeline[0].time >= after) {\n\t                this._timeline = [];\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel events before or equal to the given time.\n\t\t *  @param  {Number}  time  The time to cancel before.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.cancelBefore = function (time) {\n\t        var index = this._search(time);\n\t        if (index >= 0) {\n\t            this._timeline = this._timeline.slice(index + 1);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Returns the previous event if there is one. null otherwise\n\t\t * @param  {Object} event The event to find the previous one of\n\t\t * @return {Object}       The event right before the given event\n\t\t */\n\t    Tone.Timeline.prototype.previousEvent = function (event) {\n\t        var index = this._timeline.indexOf(event);\n\t        if (index > 0) {\n\t            return this._timeline[index - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Does a binary search on the timeline array and returns the\n\t\t *  nearest event index whose time is after or equal to the given time.\n\t\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t\t *  If the time is after the end, the index of the last item is returned.\n\t\t *  @param  {Number}  time\n\t\t *  @param  {String}  comparator Which value in the object to compare\n\t\t *  @return  {Number} the index in the timeline array\n\t\t *  @private\n\t\t */\n\t    Tone.Timeline.prototype._search = function (time, comparator) {\n\t        if (this._timeline.length === 0) {\n\t            return -1;\n\t        }\n\t        comparator = Tone.defaultArg(comparator, 'time');\n\t        var beginning = 0;\n\t        var len = this._timeline.length;\n\t        var end = len;\n\t        if (len > 0 && this._timeline[len - 1][comparator] <= time) {\n\t            return len - 1;\n\t        }\n\t        while (beginning < end) {\n\t            // calculate the midpoint for roughly equal partition\n\t            var midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t            var event = this._timeline[midPoint];\n\t            var nextEvent = this._timeline[midPoint + 1];\n\t            if (event[comparator] === time) {\n\t                //choose the last one that has the same time\n\t                for (var i = midPoint; i < this._timeline.length; i++) {\n\t                    var testEvent = this._timeline[i];\n\t                    if (testEvent[comparator] === time) {\n\t                        midPoint = i;\n\t                    }\n\t                }\n\t                return midPoint;\n\t            } else if (event[comparator] < time && nextEvent[comparator] > time) {\n\t                return midPoint;\n\t            } else if (event[comparator] > time) {\n\t                //search lower\n\t                end = midPoint;\n\t            } else {\n\t                //search upper\n\t                beginning = midPoint + 1;\n\t            }\n\t        }\n\t        return -1;\n\t    };\n\t    /**\n\t\t *  Internal iterator. Applies extra safety checks for\n\t\t *  removing items from the array.\n\t\t *  @param  {Function}  callback\n\t\t *  @param  {Number=}    lowerBound\n\t\t *  @param  {Number=}    upperBound\n\t\t *  @private\n\t\t */\n\t    Tone.Timeline.prototype._iterate = function (callback, lowerBound, upperBound) {\n\t        this._iterating = true;\n\t        lowerBound = Tone.defaultArg(lowerBound, 0);\n\t        upperBound = Tone.defaultArg(upperBound, this._timeline.length - 1);\n\t        for (var i = lowerBound; i <= upperBound; i++) {\n\t            callback.call(this, this._timeline[i]);\n\t        }\n\t        this._iterating = false;\n\t        this._toRemove.forEach(function (event) {\n\t            this.remove(event);\n\t        }.bind(this));\n\t        this._toRemove = [];\n\t        this._toAdd.forEach(function (event) {\n\t            this.add(event);\n\t        }.bind(this));\n\t        this._toAdd = [];\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEach = function (callback) {\n\t        this._iterate(callback);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at or before the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachBefore = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var upperBound = this._search(time);\n\t        if (upperBound !== -1) {\n\t            this._iterate(callback, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array after the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachAfter = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var lowerBound = this._search(time);\n\t        this._iterate(callback, lowerBound + 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at or after the given time. Similar to\n\t\t *  forEachAfter, but includes the item(s) at the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachFrom = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var lowerBound = this._search(time);\n\t        //work backwards until the event time is less than time\n\t        while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t            lowerBound--;\n\t        }\n\t        this._iterate(callback, lowerBound + 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at the given time\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachAtTime = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var upperBound = this._search(time);\n\t        if (upperBound !== -1) {\n\t            this._iterate(function (event) {\n\t                if (event.time === time) {\n\t                    callback.call(this, event);\n\t                }\n\t            }, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Timeline}  this\n\t\t */\n\t    Tone.Timeline.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._timeline = null;\n\t        this._toRemove = null;\n\t        this._toAdd = null;\n\t        return this;\n\t    };\n\t    return Tone.Timeline;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  shim\n\t\t *  @private\n\t\t */\n\t    if (!window.hasOwnProperty('AudioContext') && window.hasOwnProperty('webkitAudioContext')) {\n\t        window.AudioContext = window.webkitAudioContext;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the native AudioContext.\n\t\t *  @extends {Tone.Emitter}\n\t\t *  @param {AudioContext=} context optionally pass in a context\n\t\t */\n\t    Tone.Context = function () {\n\t        Tone.Emitter.call(this);\n\t        var options = Tone.defaults(arguments, ['context'], Tone.Context);\n\t        if (!options.context) {\n\t            options.context = new window.AudioContext();\n\t        }\n\t        this._context = options.context;\n\t        // extend all of the methods\n\t        for (var prop in this._context) {\n\t            this._defineProperty(this._context, prop);\n\t        }\n\t        /**\n\t\t\t *  The default latency hint\n\t\t\t *  @type  {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._latencyHint = options.latencyHint;\n\t        /**\n\t\t\t *  An object containing all of the constants AudioBufferSourceNodes\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._constants = {};\n\t        ///////////////////////////////////////////////////////////////////////\n\t        // WORKER\n\t        ///////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  The amount of time events are scheduled\n\t\t\t *  into the future\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this.lookAhead = options.lookAhead;\n\t        /**\n\t\t\t *  A reference to the actual computed update interval\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._computedUpdateInterval = 0;\n\t        /**\n\t\t\t *  A reliable callback method\n\t\t\t *  @private\n\t\t\t *  @type  {Ticker}\n\t\t\t */\n\t        this._ticker = new Ticker(this.emit.bind(this, 'tick'), options.clockSource, options.updateInterval);\n\t        ///////////////////////////////////////////////////////////////////////\n\t        // TIMEOUTS\n\t        ///////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  All of the setTimeout events.\n\t\t\t *  @type  {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeouts = new Tone.Timeline();\n\t        /**\n\t\t\t *  The timeout id counter\n\t\t\t *  @private\n\t\t\t *  @type {Number}\n\t\t\t */\n\t        this._timeoutIds = 0;\n\t        this.on('tick', this._timeoutLoop.bind(this));\n\t    };\n\t    Tone.extend(Tone.Context, Tone.Emitter);\n\t    Tone.Emitter.mixin(Tone.Context);\n\t    /**\n\t\t * defaults\n\t\t * @static\n\t\t * @type {Object}\n\t\t */\n\t    Tone.Context.defaults = {\n\t        'clockSource': 'worker',\n\t        'latencyHint': 'interactive',\n\t        'lookAhead': 0.1,\n\t        'updateInterval': 0.03\n\t    };\n\t    /**\n\t\t *  Define a property on this Tone.Context. \n\t\t *  This is used to extend the native AudioContext\n\t\t *  @param  {AudioContext}  context\n\t\t *  @param  {String}  prop \n\t\t *  @private\n\t\t */\n\t    Tone.Context.prototype._defineProperty = function (context, prop) {\n\t        if (Tone.isUndef(this[prop])) {\n\t            Object.defineProperty(this, prop, {\n\t                get: function () {\n\t                    if (typeof context[prop] === 'function') {\n\t                        return context[prop].bind(context);\n\t                    } else {\n\t                        return context[prop];\n\t                    }\n\t                },\n\t                set: function (val) {\n\t                    context[prop] = val;\n\t                }\n\t            });\n\t        }\n\t    };\n\t    /**\n\t\t *  The current audio context time\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.Context.prototype.now = function () {\n\t        return this._context.currentTime + this.lookAhead;\n\t    };\n\t    /**\n\t\t *  Generate a looped buffer at some constant value.\n\t\t *  @param  {Number}  val\n\t\t *  @return  {BufferSourceNode}\n\t\t */\n\t    Tone.Context.prototype.getConstant = function (val) {\n\t        if (this._constants[val]) {\n\t            return this._constants[val];\n\t        } else {\n\t            var buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t            var arr = buffer.getChannelData(0);\n\t            for (var i = 0; i < arr.length; i++) {\n\t                arr[i] = val;\n\t            }\n\t            var constant = this._context.createBufferSource();\n\t            constant.channelCount = 1;\n\t            constant.channelCountMode = 'explicit';\n\t            constant.buffer = buffer;\n\t            constant.loop = true;\n\t            constant.start(0);\n\t            this._constants[val] = constant;\n\t            return constant;\n\t        }\n\t    };\n\t    /**\n\t\t *  The private loop which keeps track of the context scheduled timeouts\n\t\t *  Is invoked from the clock source\n\t\t *  @private\n\t\t */\n\t    Tone.Context.prototype._timeoutLoop = function () {\n\t        var now = this.now();\n\t        while (this._timeouts && this._timeouts.length && this._timeouts.peek().time <= now) {\n\t            this._timeouts.shift().callback();\n\t        }\n\t    };\n\t    /**\n\t\t *  A setTimeout which is gaurenteed by the clock source. \n\t\t *  Also runs in the offline context.\n\t\t *  @param  {Function}  fn       The callback to invoke\n\t\t *  @param  {Seconds}    timeout  The timeout in seconds\n\t\t *  @returns {Number} ID to use when invoking Tone.Context.clearTimeout\n\t\t */\n\t    Tone.Context.prototype.setTimeout = function (fn, timeout) {\n\t        this._timeoutIds++;\n\t        var now = this.now();\n\t        this._timeouts.add({\n\t            callback: fn,\n\t            time: now + timeout,\n\t            id: this._timeoutIds\n\t        });\n\t        return this._timeoutIds;\n\t    };\n\t    /**\n\t\t *  Clears a previously scheduled timeout with Tone.context.setTimeout\n\t\t *  @param  {Number}  id  The ID returned from setTimeout\n\t\t *  @return  {Tone.Context}  this\n\t\t */\n\t    Tone.Context.prototype.clearTimeout = function (id) {\n\t        this._timeouts.forEach(function (event) {\n\t            if (event.id === id) {\n\t                this.remove(event);\n\t            }\n\t        });\n\t        return this;\n\t    };\n\t    /**\n\t\t *  How often the Web Worker callback is invoked.\n\t\t *  This number corresponds to how responsive the scheduling\n\t\t *  can be. Context.updateInterval + Context.lookAhead gives you the\n\t\t *  total latency between scheduling an event and hearing it.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context#\n\t\t *  @name updateInterval\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'updateInterval', {\n\t        get: function () {\n\t            return this._ticker.updateInterval;\n\t        },\n\t        set: function (interval) {\n\t            this._ticker.updateInterval = interval;\n\t        }\n\t    });\n\t    /**\n\t\t *  What the source of the clock is, either \"worker\" (Web Worker [default]), \n\t\t *  \"timeout\" (setTimeout), or \"offline\" (none). \n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Context#\n\t\t *  @name clockSource\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'clockSource', {\n\t        get: function () {\n\t            return this._ticker.type;\n\t        },\n\t        set: function (type) {\n\t            this._ticker.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  The type of playback, which affects tradeoffs between audio \n\t\t *  output latency and responsiveness. \n\t\t *  \n\t\t *  In addition to setting the value in seconds, the latencyHint also\n\t\t *  accepts the strings \"interactive\" (prioritizes low latency), \n\t\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often). \n\t\t *  @type {String|Seconds}\n\t\t *  @memberOf Tone.Context#\n\t\t *  @name latencyHint\n\t\t *  @example\n\t\t * //set the lookAhead to 0.3 seconds\n\t\t * Tone.context.latencyHint = 0.3;\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'latencyHint', {\n\t        get: function () {\n\t            return this._latencyHint;\n\t        },\n\t        set: function (hint) {\n\t            var lookAhead = hint;\n\t            this._latencyHint = hint;\n\t            if (Tone.isString(hint)) {\n\t                switch (hint) {\n\t                case 'interactive':\n\t                    lookAhead = 0.1;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'playback':\n\t                    lookAhead = 0.8;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'balanced':\n\t                    lookAhead = 0.25;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'fastest':\n\t                    this._context.latencyHint = 'interactive';\n\t                    lookAhead = 0.01;\n\t                    break;\n\t                }\n\t            }\n\t            this.lookAhead = lookAhead;\n\t            this.updateInterval = lookAhead / 3;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Context} this\n\t\t */\n\t    Tone.Context.prototype.dispose = function () {\n\t        Tone.Context.emit('close', this);\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this._ticker.dispose();\n\t        this._ticker = null;\n\t        this._timeouts.dispose();\n\t        this._timeouts = null;\n\t        for (var con in this._constants) {\n\t            this._constants[con].disconnect();\n\t        }\n\t        this._constants = null;\n\t        this.close();\n\t        return this;\n\t    };\n\t    /**\n\t\t * @class A class which provides a reliable callback using either\n\t\t *        a Web Worker, or if that isn't supported, falls back to setTimeout.\n\t\t * @private\n\t\t */\n\t    var Ticker = function (callback, type, updateInterval) {\n\t        /**\n\t\t\t * Either \"worker\" or \"timeout\"\n\t\t\t * @type {String}\n\t\t\t * @private\n\t\t\t */\n\t        this._type = type;\n\t        /**\n\t\t\t * The update interval of the worker\n\t\t\t * @private\n\t\t\t * @type {Number}\n\t\t\t */\n\t        this._updateInterval = updateInterval;\n\t        /**\n\t\t\t * The callback to invoke at regular intervals\n\t\t\t * @type {Function}\n\t\t\t * @private\n\t\t\t */\n\t        this._callback = Tone.defaultArg(callback, Tone.noOp);\n\t        //create the clock source for the first time\n\t        this._createClock();\n\t    };\n\t    /**\n\t\t * The possible ticker types\n\t\t * @private\n\t\t * @type {Object}\n\t\t */\n\t    Ticker.Type = {\n\t        Worker: 'worker',\n\t        Timeout: 'timeout',\n\t        Offline: 'offline'\n\t    };\n\t    /**\n\t\t *  Generate a web worker\n\t\t *  @return  {WebWorker}\n\t\t *  @private\n\t\t */\n\t    Ticker.prototype._createWorker = function () {\n\t        //URL Shim\n\t        window.URL = window.URL || window.webkitURL;\n\t        var blob = new Blob([//the initial timeout time\n\t            'var timeoutTime = ' + (this._updateInterval * 1000).toFixed(1) + ';' + //onmessage callback\n\t            'self.onmessage = function(msg){' + '\\ttimeoutTime = parseInt(msg.data);' + '};' + //the tick function which posts a message\n\t            //and schedules a new tick\n\t            'function tick(){' + '\\tsetTimeout(tick, timeoutTime);' + '\\tself.postMessage(\\'tick\\');' + '}' + //call tick initially\n\t            'tick();']);\n\t        var blobUrl = URL.createObjectURL(blob);\n\t        var worker = new Worker(blobUrl);\n\t        worker.onmessage = this._callback.bind(this);\n\t        this._worker = worker;\n\t    };\n\t    /**\n\t\t * Create a timeout loop\n\t\t * @private\n\t\t */\n\t    Ticker.prototype._createTimeout = function () {\n\t        this._timeout = setTimeout(function () {\n\t            this._createTimeout();\n\t            this._callback();\n\t        }.bind(this), this._updateInterval * 1000);\n\t    };\n\t    /**\n\t\t * Create the clock source.\n\t\t * @private\n\t\t */\n\t    Ticker.prototype._createClock = function () {\n\t        if (this._type === Ticker.Type.Worker) {\n\t            try {\n\t                this._createWorker();\n\t            } catch (e) {\n\t                // workers not supported, fallback to timeout\n\t                this._type = Ticker.Type.Timeout;\n\t                this._createClock();\n\t            }\n\t        } else if (this._type === Ticker.Type.Timeout) {\n\t            this._createTimeout();\n\t        }\n\t    };\n\t    /**\n\t\t * @memberOf Ticker#\n\t\t * @type {Number}\n\t\t * @name updateInterval\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Ticker.prototype, 'updateInterval', {\n\t        get: function () {\n\t            return this._updateInterval;\n\t        },\n\t        set: function (interval) {\n\t            this._updateInterval = Math.max(interval, 128 / 44100);\n\t            if (this._type === Ticker.Type.Worker) {\n\t                this._worker.postMessage(Math.max(interval * 1000, 1));\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the ticker, either a worker or a timeout\n\t\t * @memberOf Ticker#\n\t\t * @type {Number}\n\t\t * @name type\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Ticker.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._disposeClock();\n\t            this._type = type;\n\t            this._createClock();\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up the current clock source\n\t\t * @private\n\t\t */\n\t    Ticker.prototype._disposeClock = function () {\n\t        if (this._timeout) {\n\t            clearTimeout(this._timeout);\n\t            this._timeout = null;\n\t        }\n\t        if (this._worker) {\n\t            this._worker.terminate();\n\t            this._worker.onmessage = null;\n\t            this._worker = null;\n\t        }\n\t    };\n\t    /**\n\t\t * Clean up\n\t\t * @private\n\t\t */\n\t    Ticker.prototype.dispose = function () {\n\t        this._disposeClock();\n\t        this._callback = null;\n\t    };\n\t    /**\n\t\t *  Shim all connect/disconnect and some deprecated methods which are still in\n\t\t *  some older implementations.\n\t\t *  @private\n\t\t */\n\t    Tone.getContext(function () {\n\t        var nativeConnect = AudioNode.prototype.connect;\n\t        var nativeDisconnect = AudioNode.prototype.disconnect;\n\t        //replace the old connect method\n\t        function toneConnect(B, outNum, inNum) {\n\t            if (B.input) {\n\t                inNum = Tone.defaultArg(inNum, 0);\n\t                if (Tone.isArray(B.input)) {\n\t                    this.connect(B.input[inNum]);\n\t                } else {\n\t                    this.connect(B.input, outNum, inNum);\n\t                }\n\t            } else {\n\t                try {\n\t                    if (B instanceof AudioNode) {\n\t                        nativeConnect.call(this, B, outNum, inNum);\n\t                    } else {\n\t                        nativeConnect.call(this, B, outNum);\n\t                    }\n\t                } catch (e) {\n\t                    throw new Error('error connecting to node: ' + B + '\\n' + e);\n\t                }\n\t            }\n\t        }\n\t        //replace the old disconnect method\n\t        function toneDisconnect(B, outNum, inNum) {\n\t            if (B && B.input && Tone.isArray(B.input)) {\n\t                inNum = Tone.defaultArg(inNum, 0);\n\t                this.disconnect(B.input[inNum], outNum, 0);\n\t            } else if (B && B.input) {\n\t                this.disconnect(B.input, outNum, inNum);\n\t            } else {\n\t                try {\n\t                    nativeDisconnect.apply(this, arguments);\n\t                } catch (e) {\n\t                    throw new Error('error disconnecting node: ' + B + '\\n' + e);\n\t                }\n\t            }\n\t        }\n\t        if (AudioNode.prototype.connect !== toneConnect) {\n\t            AudioNode.prototype.connect = toneConnect;\n\t            AudioNode.prototype.disconnect = toneDisconnect;\n\t        }\n\t    });\n\t    // set the audio context initially\n\t    if (Tone.supported) {\n\t        Tone.context = new Tone.Context();\n\t    } else {\n\t        console.warn('This browser does not support Tone.js');\n\t    }\n\t    return Tone.Context;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.AudioNode is the base class for classes which process audio.\n\t\t *         AudioNodes have inputs and outputs.\n\t\t *  @param\t{AudioContext=} context\tThe audio context to use with the class\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.AudioNode = function () {\n\t        Tone.call(this);\n\t        //use the default context if one is not passed in\n\t        var options = Tone.defaults(arguments, ['context'], { 'context': Tone.context });\n\t        /**\n\t\t\t * The AudioContext of this instance\n\t\t\t * @private\n\t\t\t * @type {AudioContext}\n\t\t\t */\n\t        this._context = options.context;\n\t    };\n\t    Tone.extend(Tone.AudioNode);\n\t    /**\n\t\t * Get the audio context belonging to this instance.\n\t\t * @type {Tone.Context}\n\t\t * @memberOf Tone.AudioNode#\n\t\t * @name context\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.AudioNode.prototype, 'context', {\n\t        get: function () {\n\t            return this._context;\n\t        }\n\t    });\n\t    /**\n\t\t *  Create input and outputs for this object.\n\t\t *  @param  {Number}  [input=0]   The number of inputs\n\t\t *  @param  {Number}  [outputs=0]  The number of outputs\n\t\t *  @return  {Tone.AudioNode}  this\n\t\t *  @private\n\t\t */\n\t    Tone.AudioNode.prototype.createInsOuts = function (inputs, outputs) {\n\t        if (inputs === 1) {\n\t            this.input = this.context.createGain();\n\t        } else if (inputs > 1) {\n\t            this.input = new Array(inputs);\n\t        }\n\t        if (outputs === 1) {\n\t            this.output = this.context.createGain();\n\t        } else if (outputs > 1) {\n\t            this.output = new Array(outputs);\n\t        }\n\t    };\n\t    /**\n\t\t *  The number of inputs feeding into the AudioNode.\n\t\t *  For source nodes, this will be 0.\n\t\t *  @type {Number}\n\t\t *  @name numberOfInputs\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.AudioNode.prototype, 'numberOfInputs', {\n\t        get: function () {\n\t            if (this.input) {\n\t                if (Tone.isArray(this.input)) {\n\t                    return this.input.length;\n\t                } else {\n\t                    return 1;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of outputs coming out of the AudioNode.\n\t\t *  @type {Number}\n\t\t *  @name numberOfOutputs\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.AudioNode.prototype, 'numberOfOutputs', {\n\t        get: function () {\n\t            if (this.output) {\n\t                if (Tone.isArray(this.output)) {\n\t                    return this.output.length;\n\t                } else {\n\t                    return 1;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode\n\t\t *  @param  {Tone | AudioParam | AudioNode} unit\n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone.AudioNode} this\n\t\t */\n\t    Tone.AudioNode.prototype.connect = function (unit, outputNum, inputNum) {\n\t        if (Tone.isArray(this.output)) {\n\t            outputNum = Tone.defaultArg(outputNum, 0);\n\t            this.output[outputNum].connect(unit, 0, inputNum);\n\t        } else {\n\t            this.output.connect(unit, outputNum, inputNum);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  disconnect the output\n\t\t *  @param {Number|AudioNode} output Either the output index to disconnect\n\t\t *                                   if the output is an array, or the\n\t\t *                                   node to disconnect from.\n\t\t *  @returns {Tone.AudioNode} this\n\t\t */\n\t    Tone.AudioNode.prototype.disconnect = function (destination, outputNum, inputNum) {\n\t        if (Tone.isArray(this.output)) {\n\t            if (Tone.isNumber(destination)) {\n\t                this.output[destination].disconnect();\n\t            } else {\n\t                outputNum = Tone.defaultArg(outputNum, 0);\n\t                this.output[outputNum].disconnect(destination, 0, inputNum);\n\t            }\n\t        } else {\n\t            this.output.disconnect.apply(this.output, arguments);\n\t        }\n\t    };\n\t    /**\n\t\t *  Connect the output of this node to the rest of the nodes in series.\n\t\t *  @example\n\t\t *  //connect a node to an effect, panVol and then to the master output\n\t\t *  node.chain(effect, panVol, Tone.Master);\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone.AudioNode} this\n\t\t *  @private\n\t\t */\n\t    Tone.AudioNode.prototype.chain = function () {\n\t        var currentUnit = this;\n\t        for (var i = 0; i < arguments.length; i++) {\n\t            var toUnit = arguments[i];\n\t            currentUnit.connect(toUnit);\n\t            currentUnit = toUnit;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the output of this node to the rest of the nodes in parallel.\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone.AudioNode} this\n\t\t *  @private\n\t\t */\n\t    Tone.AudioNode.prototype.fan = function () {\n\t        for (var i = 0; i < arguments.length; i++) {\n\t            this.connect(arguments[i]);\n\t        }\n\t        return this;\n\t    };\n\t    if (window.AudioNode) {\n\t        //give native nodes chain and fan methods\n\t        AudioNode.prototype.chain = Tone.AudioNode.prototype.chain;\n\t        AudioNode.prototype.fan = Tone.AudioNode.prototype.fan;\n\t    }\n\t    /**\n\t\t * Dispose and disconnect\n\t\t * @return {Tone.AudioNode} this\n\t\t */\n\t    Tone.AudioNode.prototype.dispose = function () {\n\t        if (!Tone.isUndef(this.input)) {\n\t            if (this.input instanceof AudioNode) {\n\t                this.input.disconnect();\n\t            }\n\t            this.input = null;\n\t        }\n\t        if (!Tone.isUndef(this.output)) {\n\t            if (this.output instanceof AudioNode) {\n\t                this.output.disconnect();\n\t            }\n\t            this.output = null;\n\t        }\n\t        this._context = null;\n\t        return this;\n\t    };\n\t    return Tone.AudioNode;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base class for all Signals. Used Internally.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.SignalBase = function () {\n\t        Tone.AudioNode.call(this);\n\t    };\n\t    Tone.extend(Tone.SignalBase, Tone.AudioNode);\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams,\n\t\t *  they take over the output value of that signal or AudioParam.\n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>.\n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node\n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t */\n\t    Tone.SignalBase.prototype.connect = function (node, outputNumber, inputNumber) {\n\t        //zero it out so that the signal can have full control\n\t        if (Tone.Signal && Tone.Signal === node.constructor || Tone.Param && Tone.Param === node.constructor || Tone.TimelineSignal && Tone.TimelineSignal === node.constructor) {\n\t            //cancel changes\n\t            node._param.cancelScheduledValues(0);\n\t            //reset the value\n\t            node._param.value = 0;\n\t            //mark the value as overridden\n\t            node.overridden = true;\n\t        } else if (node instanceof AudioParam) {\n\t            node.cancelScheduledValues(0);\n\t            node.value = 0;\n\t        }\n\t        Tone.AudioNode.prototype.connect.call(this, node, outputNumber, inputNumber);\n\t        return this;\n\t    };\n\t    return Tone.SignalBase;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Wraps the native Web Audio API \n\t\t *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {function|Array|Number} mapping The function used to define the values. \n\t\t *                                    The mapping function should take two arguments: \n\t\t *                                    the first is the value at the current position \n\t\t *                                    and the second is the array position. \n\t\t *                                    If the argument is an array, that array will be\n\t\t *                                    set as the wave shaping function. The input\n\t\t *                                    signal is an AudioRange [-1, 1] value and the output\n\t\t *                                    signal can take on any numerical values. \n\t\t *                                    \n\t\t *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.\n\t\t *  @example\n\t\t * var timesTwo = new Tone.WaveShaper(function(val){\n\t\t * \treturn val * 2;\n\t\t * }, 2048);\n\t\t *  @example\n\t\t * //a waveshaper can also be constructed with an array of values\n\t\t * var invert = new Tone.WaveShaper([1, -1]);\n\t\t */\n\t    Tone.WaveShaper = function (mapping, bufferLen) {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  the waveshaper\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = this.input = this.output = this.context.createWaveShaper();\n\t        /**\n\t\t\t *  the waveshapers curve\n\t\t\t *  @type {Float32Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._curve = null;\n\t        if (Array.isArray(mapping)) {\n\t            this.curve = mapping;\n\t        } else if (isFinite(mapping) || Tone.isUndef(mapping)) {\n\t            this._curve = new Float32Array(Tone.defaultArg(mapping, 1024));\n\t        } else if (Tone.isFunction(mapping)) {\n\t            this._curve = new Float32Array(Tone.defaultArg(bufferLen, 1024));\n\t            this.setMap(mapping);\n\t        }\n\t    };\n\t    Tone.extend(Tone.WaveShaper, Tone.SignalBase);\n\t    /**\n\t\t *  Uses a mapping function to set the value of the curve. \n\t\t *  @param {function} mapping The function used to define the values. \n\t\t *                            The mapping function take two arguments: \n\t\t *                            the first is the value at the current position \n\t\t *                            which goes from -1 to 1 over the number of elements\n\t\t *                            in the curve array. The second argument is the array position. \n\t\t *  @returns {Tone.WaveShaper} this\n\t\t *  @example\n\t\t * //map the input signal from [-1, 1] to [0, 10]\n\t\t * shaper.setMap(function(val, index){\n\t\t * \treturn (val + 1) * 5;\n\t\t * })\n\t\t */\n\t    Tone.WaveShaper.prototype.setMap = function (mapping) {\n\t        for (var i = 0, len = this._curve.length; i < len; i++) {\n\t            var normalized = i / (len - 1) * 2 - 1;\n\t            this._curve[i] = mapping(normalized, i);\n\t        }\n\t        this._shaper.curve = this._curve;\n\t        return this;\n\t    };\n\t    /**\n\t\t * The array to set as the waveshaper curve. For linear curves\n\t\t * array length does not make much difference, but for complex curves\n\t\t * longer arrays will provide smoother interpolation. \n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {Array}\n\t\t * @name curve\n\t\t */\n\t    Object.defineProperty(Tone.WaveShaper.prototype, 'curve', {\n\t        get: function () {\n\t            return this._shaper.curve;\n\t        },\n\t        set: function (mapping) {\n\t            this._curve = new Float32Array(mapping);\n\t            this._shaper.curve = this._curve;\n\t        }\n\t    });\n\t    /**\n\t\t * Specifies what type of oversampling (if any) should be used when \n\t\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\". \n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.WaveShaper.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            if ([\n\t                    'none',\n\t                    '2x',\n\t                    '4x'\n\t                ].indexOf(oversampling) !== -1) {\n\t                this._shaper.oversample = oversampling;\n\t            } else {\n\t                throw new RangeError('Tone.WaveShaper: oversampling must be either \\'none\\', \\'2x\\', or \\'4x\\'');\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.WaveShaper} this\n\t\t */\n\t    Tone.WaveShaper.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._shaper.disconnect();\n\t        this._shaper = null;\n\t        this._curve = null;\n\t        return this;\n\t    };\n\t    return Tone.WaveShaper;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TimeBase is a flexible encoding of time\n\t\t *         which can be evaluated to and from a string.\n\t\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t *  @extends {Tone}\n\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t *  @param  {String=}  units  Unit values\n\t\t *  @example\n\t\t * Tone.TimeBase(4, \"n\")\n\t\t * Tone.TimeBase(2, \"t\")\n\t\t * Tone.TimeBase(\"2t\").add(\"1m\")\n\t\t * Tone.TimeBase(\"2t + 1m\");\n\t\t */\n\t    Tone.TimeBase = function (val, units) {\n\t        //allows it to be constructed with or without 'new'\n\t        if (this instanceof Tone.TimeBase) {\n\t            /**\n\t\t\t\t *  Any expressions parsed from the Time\n\t\t\t\t *  @type  {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._expr = this._noOp;\n\t            if (val instanceof Tone.TimeBase) {\n\t                this.copy(val);\n\t            } else if (!Tone.isUndef(units) || Tone.isNumber(val)) {\n\t                //default units\n\t                units = Tone.defaultArg(units, this._defaultUnits);\n\t                var method = this._primaryExpressions[units].method;\n\t                this._expr = method.bind(this, val);\n\t            } else if (Tone.isString(val)) {\n\t                this.set(val);\n\t            } else if (Tone.isUndef(val)) {\n\t                //default expression\n\t                this._expr = this._defaultExpr();\n\t            }\n\t        } else {\n\t            return new Tone.TimeBase(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.TimeBase);\n\t    /**\n\t\t *  Repalce the current time value with the value\n\t\t *  given by the expression string.\n\t\t *  @param  {String}  exprString\n\t\t *  @return {Tone.TimeBase} this\n\t\t */\n\t    Tone.TimeBase.prototype.set = function (exprString) {\n\t        this._expr = this._parseExprString(exprString);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Return a clone of the TimeBase object.\n\t\t *  @return  {Tone.TimeBase} The new cloned Tone.TimeBase\n\t\t */\n\t    Tone.TimeBase.prototype.clone = function () {\n\t        var instance = new this.constructor();\n\t        instance.copy(this);\n\t        return instance;\n\t    };\n\t    /**\n\t\t *  Copies the value of time to this Time\n\t\t *  @param {Tone.TimeBase} time\n\t\t *  @return  {TimeBase}\n\t\t */\n\t    Tone.TimeBase.prototype.copy = function (time) {\n\t        var val = time._expr();\n\t        return this.set(val);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tABSTRACT SYNTAX TREE PARSER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  All the primary expressions.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._primaryExpressions = {\n\t        'n': {\n\t            regexp: /^(\\d+)n/i,\n\t            method: function (value) {\n\t                value = parseInt(value);\n\t                if (value === 1) {\n\t                    return this._beatsToUnits(this._timeSignature());\n\t                } else {\n\t                    return this._beatsToUnits(4 / value);\n\t                }\n\t            }\n\t        },\n\t        't': {\n\t            regexp: /^(\\d+)t/i,\n\t            method: function (value) {\n\t                value = parseInt(value);\n\t                return this._beatsToUnits(8 / (parseInt(value) * 3));\n\t            }\n\t        },\n\t        'm': {\n\t            regexp: /^(\\d+)m/i,\n\t            method: function (value) {\n\t                return this._beatsToUnits(parseInt(value) * this._timeSignature());\n\t            }\n\t        },\n\t        'i': {\n\t            regexp: /^(\\d+)i/i,\n\t            method: function (value) {\n\t                return this._ticksToUnits(parseInt(value));\n\t            }\n\t        },\n\t        'hz': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)hz/i,\n\t            method: function (value) {\n\t                return this._frequencyToUnits(parseFloat(value));\n\t            }\n\t        },\n\t        'tr': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t            method: function (m, q, s) {\n\t                var total = 0;\n\t                if (m && m !== '0') {\n\t                    total += this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t                }\n\t                if (q && q !== '0') {\n\t                    total += this._beatsToUnits(parseFloat(q));\n\t                }\n\t                if (s && s !== '0') {\n\t                    total += this._beatsToUnits(parseFloat(s) / 4);\n\t                }\n\t                return total;\n\t            }\n\t        },\n\t        's': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?s)/,\n\t            method: function (value) {\n\t                return this._secondsToUnits(parseFloat(value));\n\t            }\n\t        },\n\t        'samples': {\n\t            regexp: /^(\\d+)samples/,\n\t            method: function (value) {\n\t                return parseInt(value) / this.context.sampleRate;\n\t            }\n\t        },\n\t        'default': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)/,\n\t            method: function (value) {\n\t                return this._primaryExpressions[this._defaultUnits].method.call(this, value);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  All the binary expressions that TimeBase can accept.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._binaryExpressions = {\n\t        '+': {\n\t            regexp: /^\\+/,\n\t            precedence: 2,\n\t            method: function (lh, rh) {\n\t                return lh() + rh();\n\t            }\n\t        },\n\t        '-': {\n\t            regexp: /^\\-/,\n\t            precedence: 2,\n\t            method: function (lh, rh) {\n\t                return lh() - rh();\n\t            }\n\t        },\n\t        '*': {\n\t            regexp: /^\\*/,\n\t            precedence: 1,\n\t            method: function (lh, rh) {\n\t                return lh() * rh();\n\t            }\n\t        },\n\t        '/': {\n\t            regexp: /^\\//,\n\t            precedence: 1,\n\t            method: function (lh, rh) {\n\t                return lh() / rh();\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  All the unary expressions.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._unaryExpressions = {\n\t        'neg': {\n\t            regexp: /^\\-/,\n\t            method: function (lh) {\n\t                return -lh();\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Syntactic glue which holds expressions together\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._syntaxGlue = {\n\t        '(': { regexp: /^\\(/ },\n\t        ')': { regexp: /^\\)/ }\n\t    };\n\t    /**\n\t\t *  tokenize the expression based on the Expressions object\n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._tokenize = function (expr) {\n\t        var position = -1;\n\t        var tokens = [];\n\t        while (expr.length > 0) {\n\t            expr = expr.trim();\n\t            var token = getNextToken(expr, this);\n\t            tokens.push(token);\n\t            expr = expr.substr(token.value.length);\n\t        }\n\t        function getNextToken(expr, context) {\n\t            var expressions = [\n\t                '_binaryExpressions',\n\t                '_unaryExpressions',\n\t                '_primaryExpressions',\n\t                '_syntaxGlue'\n\t            ];\n\t            for (var i = 0; i < expressions.length; i++) {\n\t                var group = context[expressions[i]];\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    var reg = op.regexp;\n\t                    var match = expr.match(reg);\n\t                    if (match !== null) {\n\t                        return {\n\t                            method: op.method,\n\t                            precedence: op.precedence,\n\t                            regexp: op.regexp,\n\t                            value: match[0]\n\t                        };\n\t                    }\n\t                }\n\t            }\n\t            throw new SyntaxError('Tone.TimeBase: Unexpected token ' + expr);\n\t        }\n\t        return {\n\t            next: function () {\n\t                return tokens[++position];\n\t            },\n\t            peek: function () {\n\t                return tokens[position + 1];\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  Given a token, find the value within the groupName\n\t\t *  @param {Object} token\n\t\t *  @param {String} groupName\n\t\t *  @param {Number} precedence\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._matchGroup = function (token, group, prec) {\n\t        var ret = false;\n\t        if (!Tone.isUndef(token)) {\n\t            for (var opName in group) {\n\t                var op = group[opName];\n\t                if (op.regexp.test(token.value)) {\n\t                    if (!Tone.isUndef(prec)) {\n\t                        if (op.precedence === prec) {\n\t                            return op;\n\t                        }\n\t                    } else {\n\t                        return op;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  Match a binary expression given the token and the precedence\n\t\t *  @param {Lexer} lexer\n\t\t *  @param {Number} precedence\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseBinary = function (lexer, precedence) {\n\t        if (Tone.isUndef(precedence)) {\n\t            precedence = 2;\n\t        }\n\t        var expr;\n\t        if (precedence < 0) {\n\t            expr = this._parseUnary(lexer);\n\t        } else {\n\t            expr = this._parseBinary(lexer, precedence - 1);\n\t        }\n\t        var token = lexer.peek();\n\t        while (token && this._matchGroup(token, this._binaryExpressions, precedence)) {\n\t            token = lexer.next();\n\t            expr = token.method.bind(this, expr, this._parseBinary(lexer, precedence - 1));\n\t            token = lexer.peek();\n\t        }\n\t        return expr;\n\t    };\n\t    /**\n\t\t *  Match a unary expression.\n\t\t *  @param {Lexer} lexer\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseUnary = function (lexer) {\n\t        var token, expr;\n\t        token = lexer.peek();\n\t        var op = this._matchGroup(token, this._unaryExpressions);\n\t        if (op) {\n\t            token = lexer.next();\n\t            expr = this._parseUnary(lexer);\n\t            return op.method.bind(this, expr);\n\t        }\n\t        return this._parsePrimary(lexer);\n\t    };\n\t    /**\n\t\t *  Match a primary expression (a value).\n\t\t *  @param {Lexer} lexer\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parsePrimary = function (lexer) {\n\t        var token, expr;\n\t        token = lexer.peek();\n\t        if (Tone.isUndef(token)) {\n\t            throw new SyntaxError('Tone.TimeBase: Unexpected end of expression');\n\t        }\n\t        if (this._matchGroup(token, this._primaryExpressions)) {\n\t            token = lexer.next();\n\t            var matching = token.value.match(token.regexp);\n\t            return token.method.bind(this, matching[1], matching[2], matching[3]);\n\t        }\n\t        if (token && token.value === '(') {\n\t            lexer.next();\n\t            expr = this._parseBinary(lexer);\n\t            token = lexer.next();\n\t            if (!(token && token.value === ')')) {\n\t                throw new SyntaxError('Expected )');\n\t            }\n\t            return expr;\n\t        }\n\t        throw new SyntaxError('Tone.TimeBase: Cannot process token ' + token.value);\n\t    };\n\t    /**\n\t\t *  Recursively parse the string expression into a syntax tree.\n\t\t *  @param   {string} expr \n\t\t *  @return  {Function} the bound method to be evaluated later\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseExprString = function (exprString) {\n\t        if (!Tone.isString(exprString)) {\n\t            exprString = exprString.toString();\n\t        }\n\t        var lexer = this._tokenize(exprString);\n\t        var tree = this._parseBinary(lexer);\n\t        return tree;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tDEFAULTS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The initial expression value\n\t\t *  @return  {Number}  The initial value 0\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._noOp = function () {\n\t        return 0;\n\t    };\n\t    /**\n\t\t *  The default expression value if no arguments are given\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._defaultExpr = function () {\n\t        return this._noOp;\n\t    };\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._defaultUnits = 's';\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._frequencyToUnits = function (freq) {\n\t        return 1 / freq;\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._beatsToUnits = function (beats) {\n\t        return 60 / Tone.Transport.bpm.value * beats;\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._secondsToUnits = function (seconds) {\n\t        return seconds;\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._ticksToUnits = function (ticks) {\n\t        return ticks * (this._beatsToUnits(1) / Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Return the time signature.\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._timeSignature = function () {\n\t        return Tone.Transport.timeSignature;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Push an expression onto the expression list\n\t\t *  @param  {Time}  val\n\t\t *  @param  {String}  type\n\t\t *  @param  {String}  units\n\t\t *  @return  {Tone.TimeBase} \n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._pushExpr = function (val, name, units) {\n\t        //create the expression\n\t        if (!(val instanceof Tone.TimeBase)) {\n\t            val = new this.constructor(val, units);\n\t        }\n\t        this._expr = this._binaryExpressions[name].method.bind(this, this._expr, val._expr);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add to the current value.\n\t\t *  @param  {Time}  val    The value to add\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\"\n\t\t */\n\t    Tone.TimeBase.prototype.add = function (val, units) {\n\t        return this._pushExpr(val, '+', units);\n\t    };\n\t    /**\n\t\t *  Subtract the value from the current time.\n\t\t *  @param  {Time}  val    The value to subtract\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\"\n\t\t */\n\t    Tone.TimeBase.prototype.sub = function (val, units) {\n\t        return this._pushExpr(val, '-', units);\n\t    };\n\t    /**\n\t\t *  Multiply the current value by the given time.\n\t\t *  @param  {Time}  val    The value to multiply\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\"\n\t\t */\n\t    Tone.TimeBase.prototype.mult = function (val, units) {\n\t        return this._pushExpr(val, '*', units);\n\t    };\n\t    /**\n\t\t *  Divide the current value by the given time.\n\t\t *  @param  {Time}  val    The value to divide by\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").div(2); //\"1m\"\n\t\t */\n\t    Tone.TimeBase.prototype.div = function (val, units) {\n\t        return this._pushExpr(val, '/', units);\n\t    };\n\t    /**\n\t\t *  Evaluate the time value. Returns the time\n\t\t *  in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.TimeBase.prototype.valueOf = function () {\n\t        return this._expr();\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return {Tone.TimeBase} this\n\t\t */\n\t    Tone.TimeBase.prototype.dispose = function () {\n\t        this._expr = null;\n\t    };\n\t    return Tone.TimeBase;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Time is a primitive type for encoding Time values. \n\t\t *         Eventually all time values are evaluated to seconds\n\t\t *         using the `eval` method. Tone.Time can be constructed\n\t\t *         with or without the `new` keyword. Tone.Time can be passed\n\t\t *         into the parameter of any method which takes time as an argument. \n\t\t *  @constructor\n\t\t *  @extends {Tone.TimeBase}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * var t = Tone.Time(\"4n\");//encodes a quarter note\n\t\t * t.mult(4); // multiply that value by 4\n\t\t * t.toNotation(); //returns \"1m\"\n\t\t */\n\t    Tone.Time = function (val, units) {\n\t        if (this instanceof Tone.Time) {\n\t            /**\n\t\t\t\t *  If the current clock time should\n\t\t\t\t *  be added to the output\n\t\t\t\t *  @type  {Boolean}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._plusNow = false;\n\t            Tone.TimeBase.call(this, val, units);\n\t        } else {\n\t            return new Tone.Time(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Time, Tone.TimeBase);\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.Time.prototype._unaryExpressions = Object.create(Tone.TimeBase.prototype._unaryExpressions);\n\t    /*\n\t\t *  Adds an additional unary expression\n\t\t *  which quantizes values to the next subdivision\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._unaryExpressions.quantize = {\n\t        regexp: /^@/,\n\t        method: function (rh) {\n\t            return Tone.Transport.nextSubdivision(rh());\n\t        }\n\t    };\n\t    /*\n\t\t *  Adds an additional unary expression\n\t\t *  which adds the current clock time.\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._unaryExpressions.now = {\n\t        regexp: /^\\+/,\n\t        method: function (lh) {\n\t            this._plusNow = true;\n\t            return lh();\n\t        }\n\t    };\n\t    /**\n\t\t *  Quantize the time by the given subdivision. Optionally add a\n\t\t *  percentage which will move the time value towards the ideal\n\t\t *  quantized value by that percentage. \n\t\t *  @param  {Number|Time}  val    The subdivision to quantize to\n\t\t *  @param  {NormalRange}  [percent=1]  Move the time value\n\t\t *                                   towards the quantized value by\n\t\t *                                   a percentage.\n\t\t *  @return  {Tone.Time}  this\n\t\t *  @example\n\t\t * Tone.Time(21).quantize(2) //returns 22\n\t\t * Tone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t\t */\n\t    Tone.Time.prototype.quantize = function (subdiv, percent) {\n\t        percent = Tone.defaultArg(percent, 1);\n\t        this._expr = function (expr, subdivision, percent) {\n\t            expr = expr();\n\t            subdivision = subdivision.toSeconds();\n\t            var multiple = Math.round(expr / subdivision);\n\t            var ideal = multiple * subdivision;\n\t            var diff = ideal - expr;\n\t            return expr + diff * percent;\n\t        }.bind(this, this._expr, new this.constructor(subdiv), percent);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Adds the clock time to the time expression at the \n\t\t *  moment of evaluation. \n\t\t *  @return  {Tone.Time}  this\n\t\t */\n\t    Tone.Time.prototype.addNow = function () {\n\t        this._plusNow = true;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Override the default value return when no arguments are passed in.\n\t\t *  The default value is 'now'\n\t\t *  @override\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._defaultExpr = function () {\n\t        this._plusNow = true;\n\t        return this._noOp;\n\t    };\n\t    /**\n\t\t *  Copies the value of time to this Time\n\t\t *  @param {Tone.Time} time\n\t\t *  @return  {Time}\n\t\t */\n\t    Tone.Time.prototype.copy = function (time) {\n\t        Tone.TimeBase.prototype.copy.call(this, time);\n\t        this._plusNow = time._plusNow;\n\t        return this;\n\t    };\n\t    //CONVERSIONS//////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Convert a Time to Notation. Values will be thresholded to the nearest 128th note. \n\t\t *  @return {Notation} \n\t\t *  @example\n\t\t * //if the Transport is at 120bpm:\n\t\t * Tone.Time(2).toNotation();//returns \"1m\"\n\t\t */\n\t    Tone.Time.prototype.toNotation = function () {\n\t        var time = this.toSeconds();\n\t        var testNotations = [\n\t            '1m',\n\t            '2n',\n\t            '4n',\n\t            '8n',\n\t            '16n',\n\t            '32n',\n\t            '64n',\n\t            '128n'\n\t        ];\n\t        var retNotation = this._toNotationHelper(time, testNotations);\n\t        //try the same thing but with tripelets\n\t        var testTripletNotations = [\n\t            '1m',\n\t            '2n',\n\t            '2t',\n\t            '4n',\n\t            '4t',\n\t            '8n',\n\t            '8t',\n\t            '16n',\n\t            '16t',\n\t            '32n',\n\t            '32t',\n\t            '64n',\n\t            '64t',\n\t            '128n'\n\t        ];\n\t        var retTripletNotation = this._toNotationHelper(time, testTripletNotations);\n\t        //choose the simpler expression of the two\n\t        if (retTripletNotation.split('+').length < retNotation.split('+').length) {\n\t            return retTripletNotation;\n\t        } else {\n\t            return retNotation;\n\t        }\n\t    };\n\t    /**\n\t\t *  Helper method for Tone.toNotation\n\t\t *  @param {Number} units \n\t\t *  @param {Array} testNotations\n\t\t *  @return {String}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._toNotationHelper = function (units, testNotations) {\n\t        //the threshold is the last value in the array\n\t        var threshold = this._notationToUnits(testNotations[testNotations.length - 1]);\n\t        var retNotation = '';\n\t        for (var i = 0; i < testNotations.length; i++) {\n\t            var notationTime = this._notationToUnits(testNotations[i]);\n\t            //account for floating point errors (i.e. round up if the value is 0.999999)\n\t            var multiple = units / notationTime;\n\t            var floatingPointError = 0.000001;\n\t            if (1 - multiple % 1 < floatingPointError) {\n\t                multiple += floatingPointError;\n\t            }\n\t            multiple = Math.floor(multiple);\n\t            if (multiple > 0) {\n\t                if (multiple === 1) {\n\t                    retNotation += testNotations[i];\n\t                } else {\n\t                    retNotation += multiple.toString() + '*' + testNotations[i];\n\t                }\n\t                units -= multiple * notationTime;\n\t                if (units < threshold) {\n\t                    break;\n\t                } else {\n\t                    retNotation += ' + ';\n\t                }\n\t            }\n\t        }\n\t        if (retNotation === '') {\n\t            retNotation = '0';\n\t        }\n\t        return retNotation;\n\t    };\n\t    /**\n\t\t *  Convert a notation value to the current units\n\t\t *  @param  {Notation}  notation \n\t\t *  @return  {Number} \n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._notationToUnits = function (notation) {\n\t        var primaryExprs = this._primaryExpressions;\n\t        var notationExprs = [\n\t            primaryExprs.n,\n\t            primaryExprs.t,\n\t            primaryExprs.m\n\t        ];\n\t        for (var i = 0; i < notationExprs.length; i++) {\n\t            var expr = notationExprs[i];\n\t            var match = notation.match(expr.regexp);\n\t            if (match) {\n\t                return expr.method.call(this, match[1]);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t\t *  @return  {BarsBeatsSixteenths}\n\t\t */\n\t    Tone.Time.prototype.toBarsBeatsSixteenths = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.toSeconds() / quarterTime;\n\t        var measures = Math.floor(quarters / this._timeSignature());\n\t        var sixteenths = quarters % 1 * 4;\n\t        quarters = Math.floor(quarters) % this._timeSignature();\n\t        sixteenths = sixteenths.toString();\n\t        if (sixteenths.length > 3) {\n\t            // the additional parseFloat removes insignificant trailing zeroes\n\t            sixteenths = parseFloat(parseFloat(sixteenths).toFixed(3));\n\t        }\n\t        var progress = [\n\t            measures,\n\t            quarters,\n\t            sixteenths\n\t        ];\n\t        return progress.join(':');\n\t    };\n\t    /**\n\t\t *  Return the time in ticks.\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Time.prototype.toTicks = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        return Math.round(quarters * Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Return the time in samples\n\t\t *  @return  {Samples}  \n\t\t */\n\t    Tone.Time.prototype.toSamples = function () {\n\t        return this.toSeconds() * this.context.sampleRate;\n\t    };\n\t    /**\n\t\t *  Return the time as a frequency value\n\t\t *  @return  {Frequency} \n\t\t *  @example\n\t\t * Tone.Time(2).toFrequency(); //0.5\n\t\t */\n\t    Tone.Time.prototype.toFrequency = function () {\n\t        return 1 / this.toSeconds();\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.Time.prototype.toSeconds = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the time in milliseconds.\n\t\t *  @return  {Milliseconds} \n\t\t */\n\t    Tone.Time.prototype.toMilliseconds = function () {\n\t        return this.toSeconds() * 1000;\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.Time.prototype.valueOf = function () {\n\t        var val = this._expr();\n\t        return val + (this._plusNow ? this.now() : 0);\n\t    };\n\t    return Tone.Time;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Frequency is a primitive type for encoding Frequency values.\n\t\t *         Eventually all time values are evaluated to hertz\n\t\t *         using the `eval` method.\n\t\t *  @constructor\n\t\t *  @extends {Tone.TimeBase}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * Tone.Frequency(\"C3\") // 261\n\t\t * Tone.Frequency(38, \"midi\") //\n\t\t * Tone.Frequency(\"C3\").transpose(4);\n\t\t */\n\t    Tone.Frequency = function (val, units) {\n\t        if (this instanceof Tone.Frequency) {\n\t            Tone.TimeBase.call(this, val, units);\n\t        } else {\n\t            return new Tone.Frequency(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Frequency, Tone.TimeBase);\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUGMENT BASE EXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //clone the expressions so that\n\t    //we can add more without modifying the original\n\t    Tone.Frequency.prototype._primaryExpressions = Object.create(Tone.TimeBase.prototype._primaryExpressions);\n\t    /*\n\t\t *  midi type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.midi = {\n\t        regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\t        method: function (value) {\n\t            return this.midiToFrequency(value);\n\t        }\n\t    };\n\t    /*\n\t\t *  note type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.note = {\n\t        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t        method: function (pitch, octave) {\n\t            var index = noteToScaleIndex[pitch.toLowerCase()];\n\t            var noteNumber = index + (parseInt(octave) + 1) * 12;\n\t            return this.midiToFrequency(noteNumber);\n\t        }\n\t    };\n\t    /*\n\t\t *  BeatsBarsSixteenths type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.tr = {\n\t        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t        method: function (m, q, s) {\n\t            var total = 1;\n\t            if (m && m !== '0') {\n\t                total *= this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t            }\n\t            if (q && q !== '0') {\n\t                total *= this._beatsToUnits(parseFloat(q));\n\t            }\n\t            if (s && s !== '0') {\n\t                total *= this._beatsToUnits(parseFloat(s) / 4);\n\t            }\n\t            return total;\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Transposes the frequency by the given number of semitones.\n\t\t *  @param  {Interval}  interval\n\t\t *  @return  {Tone.Frequency} this\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").transpose(3); //\"C5\"\n\t\t */\n\t    Tone.Frequency.prototype.transpose = function (interval) {\n\t        this._expr = function (expr, interval) {\n\t            var val = expr();\n\t            return val * Tone.intervalToFrequencyRatio(interval);\n\t        }.bind(this, this._expr, interval);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Takes an array of semitone intervals and returns\n\t\t *  an array of frequencies transposed by those intervals.\n\t\t *  @param  {Array}  intervals\n\t\t *  @return  {Tone.Frequency} this\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t\t */\n\t    Tone.Frequency.prototype.harmonize = function (intervals) {\n\t        this._expr = function (expr, intervals) {\n\t            var val = expr();\n\t            var ret = [];\n\t            for (var i = 0; i < intervals.length; i++) {\n\t                ret[i] = val * Tone.intervalToFrequencyRatio(intervals[i]);\n\t            }\n\t            return ret;\n\t        }.bind(this, this._expr, intervals);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Return the value of the frequency as a MIDI note\n\t\t *  @return  {MIDI}\n\t\t *  @example\n\t\t * Tone.Frequency(\"C4\").toMidi(); //60\n\t\t */\n\t    Tone.Frequency.prototype.toMidi = function () {\n\t        return this.frequencyToMidi(this.valueOf());\n\t    };\n\t    /**\n\t\t *  Return the value of the frequency in Scientific Pitch Notation\n\t\t *  @return  {Note}\n\t\t *  @example\n\t\t * Tone.Frequency(69, \"midi\").toNote(); //\"A4\"\n\t\t */\n\t    Tone.Frequency.prototype.toNote = function () {\n\t        var freq = this.valueOf();\n\t        var log = Math.log(freq / Tone.Frequency.A4) / Math.LN2;\n\t        var noteNumber = Math.round(12 * log) + 57;\n\t        var octave = Math.floor(noteNumber / 12);\n\t        if (octave < 0) {\n\t            noteNumber += -12 * octave;\n\t        }\n\t        var noteName = scaleIndexToNote[noteNumber % 12];\n\t        return noteName + octave.toString();\n\t    };\n\t    /**\n\t\t *  Return the duration of one cycle in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.Frequency.prototype.toSeconds = function () {\n\t        return 1 / this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the value in Hertz\n\t\t *  @return  {Frequency}\n\t\t */\n\t    Tone.Frequency.prototype.toFrequency = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the duration of one cycle in ticks\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Frequency.prototype.toTicks = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        return Math.floor(quarters * Tone.Transport.PPQ);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS HELPERS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._frequencyToUnits = function (freq) {\n\t        return freq;\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._ticksToUnits = function (ticks) {\n\t        return 1 / (ticks * 60 / (Tone.Transport.bpm.value * Tone.Transport.PPQ));\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._beatsToUnits = function (beats) {\n\t        return 1 / Tone.TimeBase.prototype._beatsToUnits.call(this, beats);\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._secondsToUnits = function (seconds) {\n\t        return 1 / seconds;\n\t    };\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._defaultUnits = 'hz';\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tFREQUENCY CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Note to scale index\n\t\t *  @type  {Object}\n\t\t */\n\t    var noteToScaleIndex = {\n\t        'cbb': -2,\n\t        'cb': -1,\n\t        'c': 0,\n\t        'c#': 1,\n\t        'cx': 2,\n\t        'dbb': 0,\n\t        'db': 1,\n\t        'd': 2,\n\t        'd#': 3,\n\t        'dx': 4,\n\t        'ebb': 2,\n\t        'eb': 3,\n\t        'e': 4,\n\t        'e#': 5,\n\t        'ex': 6,\n\t        'fbb': 3,\n\t        'fb': 4,\n\t        'f': 5,\n\t        'f#': 6,\n\t        'fx': 7,\n\t        'gbb': 5,\n\t        'gb': 6,\n\t        'g': 7,\n\t        'g#': 8,\n\t        'gx': 9,\n\t        'abb': 7,\n\t        'ab': 8,\n\t        'a': 9,\n\t        'a#': 10,\n\t        'ax': 11,\n\t        'bbb': 9,\n\t        'bb': 10,\n\t        'b': 11,\n\t        'b#': 12,\n\t        'bx': 13\n\t    };\n\t    /**\n\t\t *  scale index to note (sharps)\n\t\t *  @type  {Array}\n\t\t */\n\t    var scaleIndexToNote = [\n\t        'C',\n\t        'C#',\n\t        'D',\n\t        'D#',\n\t        'E',\n\t        'F',\n\t        'F#',\n\t        'G',\n\t        'G#',\n\t        'A',\n\t        'A#',\n\t        'B'\n\t    ];\n\t    /**\n\t\t *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)\n\t\t *  A4's values in Hertz.\n\t\t *  @type {Frequency}\n\t\t *  @static\n\t\t */\n\t    Tone.Frequency.A4 = 440;\n\t    /**\n\t\t *  Convert a MIDI note to frequency value.\n\t\t *  @param  {MIDI} midi The midi number to convert.\n\t\t *  @return {Frequency} the corresponding frequency value\n\t\t *  @example\n\t\t * tone.midiToFrequency(69); // returns 440\n\t\t */\n\t    Tone.Frequency.prototype.midiToFrequency = function (midi) {\n\t        return Tone.Frequency.A4 * Math.pow(2, (midi - 69) / 12);\n\t    };\n\t    /**\n\t\t *  Convert a frequency value to a MIDI note.\n\t\t *  @param {Frequency} frequency The value to frequency value to convert.\n\t\t *  @returns  {MIDI}\n\t\t *  @example\n\t\t * tone.midiToFrequency(440); // returns 69\n\t\t */\n\t    Tone.Frequency.prototype.frequencyToMidi = function (frequency) {\n\t        return 69 + Math.round(12 * Math.log(frequency / Tone.Frequency.A4) / Math.LN2);\n\t    };\n\t    return Tone.Frequency;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TransportTime is a the time along the Transport's\n\t\t *         timeline. It is similar to Tone.Time, but instead of evaluating\n\t\t *         against the AudioContext's clock, it is evaluated against\n\t\t *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n\t\t *  @constructor\n\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t *  @param  {String=}  units  Unit values\n\t\t *  @extends {Tone.Time}\n\t\t */\n\t    Tone.TransportTime = function (val, units) {\n\t        if (this instanceof Tone.TransportTime) {\n\t            Tone.Time.call(this, val, units);\n\t        } else {\n\t            return new Tone.TransportTime(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.TransportTime, Tone.Time);\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.TransportTime.prototype._unaryExpressions = Object.create(Tone.Time.prototype._unaryExpressions);\n\t    /**\n\t\t *  Adds an additional unary expression\n\t\t *  which quantizes values to the next subdivision\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.TransportTime.prototype._unaryExpressions.quantize = {\n\t        regexp: /^@/,\n\t        method: function (rh) {\n\t            var subdivision = this._secondsToTicks(rh());\n\t            var multiple = Math.ceil(Tone.Transport.ticks / subdivision);\n\t            return this._ticksToUnits(multiple * subdivision);\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert seconds into ticks\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Ticks}\n\t\t *  @private\n\t\t */\n\t    Tone.TransportTime.prototype._secondsToTicks = function (seconds) {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = seconds / quarterTime;\n\t        return Math.round(quarters * Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Evaluate the time expression. Returns values in ticks\n\t\t *  @return {Ticks}\n\t\t */\n\t    Tone.TransportTime.prototype.valueOf = function () {\n\t        var val = this._secondsToTicks(this._expr());\n\t        return val + (this._plusNow ? Tone.Transport.ticks : 0);\n\t    };\n\t    /**\n\t\t *  Return the time in ticks.\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.TransportTime.prototype.toTicks = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.TransportTime.prototype.toSeconds = function () {\n\t        var val = this._expr();\n\t        return val + (this._plusNow ? Tone.Transport.seconds : 0);\n\t    };\n\t    /**\n\t\t *  Return the time as a frequency value\n\t\t *  @return  {Frequency} \n\t\t */\n\t    Tone.TransportTime.prototype.toFrequency = function () {\n\t        return 1 / this.toSeconds();\n\t    };\n\t    return Tone.TransportTime;\n\t});\n\tModule(function (Tone) {\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTYPES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t * Units which a value can take on.\n\t\t * @enum {String}\n\t\t */\n\t    Tone.Type = {\n\t        /**\n\t\t\t *  Default units\n\t\t\t *  @typedef {Default}\n\t\t\t */\n\t        Default: 'number',\n\t        /**\n\t\t\t *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n\t\t\t *\n\t\t\t *  * Numbers, which will be taken literally as the time (in seconds).\n\t\t\t *  * Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.\n\t\t\t *  * TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times\n\t\t\t *  in the form BARS:QUARTERS:SIXTEENTHS.\n\t\t\t *  * Frequency, (\"8hz\") is converted to the length of the cycle in seconds.\n\t\t\t *  * Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as\n\t\t\t *  \"the current time plus whatever expression follows\".\n\t\t\t *  * Expressions, (\"3:0 + 2 - (1m / 7)\") any of the above can also be combined\n\t\t\t *  into a mathematical expression which will be evaluated to compute the desired time.\n\t\t\t *  * No Argument, for methods which accept time, no argument will be interpreted as\n\t\t\t *  \"now\" (i.e. the currentTime).\n\t\t\t *\n\t\t\t *  @typedef {Time}\n\t\t\t */\n\t        Time: 'time',\n\t        /**\n\t\t\t *  Frequency can be described similar to time, except ultimately the\n\t\t\t *  values are converted to frequency instead of seconds. A number\n\t\t\t *  is taken literally as the value in hertz. Additionally any of the\n\t\t\t *  Time encodings can be used. Note names in the form\n\t\t\t *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n\t\t\t *  frequency value.\n\t\t\t *  @typedef {Frequency}\n\t\t\t */\n\t        Frequency: 'frequency',\n\t        /**\n\t\t\t *  TransportTime describes a position along the Transport's timeline. It is\n\t\t\t *  similar to Time in that it uses all the same encodings, but TransportTime specifically\n\t\t\t *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable.\n\t\t\t *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\n\t\t\t *  @typedef {TransportTime}\n\t\t\t */\n\t        TransportTime: 'transportTime',\n\t        /**\n\t\t\t *  Ticks are the basic subunit of the Transport. They are\n\t\t\t *  the smallest unit of time that the Transport supports.\n\t\t\t *  @typedef {Ticks}\n\t\t\t */\n\t        Ticks: 'ticks',\n\t        /**\n\t\t\t *  Normal values are within the range [0, 1].\n\t\t\t *  @typedef {NormalRange}\n\t\t\t */\n\t        NormalRange: 'normalRange',\n\t        /**\n\t\t\t *  AudioRange values are between [-1, 1].\n\t\t\t *  @typedef {AudioRange}\n\t\t\t */\n\t        AudioRange: 'audioRange',\n\t        /**\n\t\t\t *  Decibels are a logarithmic unit of measurement which is useful for volume\n\t\t\t *  because of the logarithmic way that we perceive loudness. 0 decibels\n\t\t\t *  means no change in volume. -10db is approximately half as loud and 10db\n\t\t\t *  is twice is loud.\n\t\t\t *  @typedef {Decibels}\n\t\t\t */\n\t        Decibels: 'db',\n\t        /**\n\t\t\t *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\n\t\t\t *  @typedef {Interval}\n\t\t\t */\n\t        Interval: 'interval',\n\t        /**\n\t\t\t *  Beats per minute.\n\t\t\t *  @typedef {BPM}\n\t\t\t */\n\t        BPM: 'bpm',\n\t        /**\n\t\t\t *  The value must be greater than or equal to 0.\n\t\t\t *  @typedef {Positive}\n\t\t\t */\n\t        Positive: 'positive',\n\t        /**\n\t\t\t *  Gain is the ratio between input and output of a signal.\n\t\t\t *  A gain of 0 is the same as silencing the signal. A gain of\n\t\t\t *  1, causes no change to the incoming signal.\n\t\t\t *  @typedef {Gain}\n\t\t\t */\n\t        Gain: 'gain',\n\t        /**\n\t\t\t *  A cent is a hundredth of a semitone.\n\t\t\t *  @typedef {Cents}\n\t\t\t */\n\t        Cents: 'cents',\n\t        /**\n\t\t\t *  Angle between 0 and 360.\n\t\t\t *  @typedef {Degrees}\n\t\t\t */\n\t        Degrees: 'degrees',\n\t        /**\n\t\t\t *  A number representing a midi note.\n\t\t\t *  @typedef {MIDI}\n\t\t\t */\n\t        MIDI: 'midi',\n\t        /**\n\t\t\t *  A colon-separated representation of time in the form of\n\t\t\t *  Bars:Beats:Sixteenths.\n\t\t\t *  @typedef {BarsBeatsSixteenths}\n\t\t\t */\n\t        BarsBeatsSixteenths: 'barsBeatsSixteenths',\n\t        /**\n\t\t\t *  Sampling is the reduction of a continuous signal to a discrete signal.\n\t\t\t *  Audio is typically sampled 44100 times per second.\n\t\t\t *  @typedef {Samples}\n\t\t\t */\n\t        Samples: 'samples',\n\t        /**\n\t\t\t *  Hertz are a frequency representation defined as one cycle per second.\n\t\t\t *  @typedef {Hertz}\n\t\t\t */\n\t        Hertz: 'hertz',\n\t        /**\n\t\t\t *  A frequency represented by a letter name,\n\t\t\t *  accidental and octave. This system is known as\n\t\t\t *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).\n\t\t\t *  @typedef {Note}\n\t\t\t */\n\t        Note: 'note',\n\t        /**\n\t\t\t *  One millisecond is a thousandth of a second.\n\t\t\t *  @typedef {Milliseconds}\n\t\t\t */\n\t        Milliseconds: 'milliseconds',\n\t        /**\n\t\t\t *  Seconds are the time unit of the AudioContext. In the end,\n\t\t\t *  all values need to be evaluated to seconds.\n\t\t\t *  @typedef {Seconds}\n\t\t\t */\n\t        Seconds: 'seconds',\n\t        /**\n\t\t\t *  A string representing a duration relative to a measure.\n\t\t\t *  * \"4n\" = quarter note\n\t\t\t *  * \"2m\" = two measures\n\t\t\t *  * \"8t\" = eighth-note triplet\n\t\t\t *  @typedef {Notation}\n\t\t\t */\n\t        Notation: 'notation'\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // AUGMENT TONE's PROTOTYPE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Convert Time into seconds.\n\t\t *\n\t\t *  Unlike the method which it overrides, this takes into account\n\t\t *  transporttime and musical notation.\n\t\t *\n\t\t *  Time : 1.40\n\t\t *  Notation: 4n or 1m or 2t\n\t\t *  Now Relative: +3n\n\t\t *  Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)\n\t\t *\n\t\t *  @param  {Time} time\n\t\t *  @return {Seconds}\n\t\t */\n\t    Tone.prototype.toSeconds = function (time) {\n\t        if (Tone.isNumber(time)) {\n\t            return time;\n\t        } else if (Tone.isUndef(time)) {\n\t            return this.now();\n\t        } else if (Tone.isString(time)) {\n\t            return new Tone.Time(time).toSeconds();\n\t        } else if (time instanceof Tone.TimeBase) {\n\t            return time.toSeconds();\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert a frequency representation into a number.\n\t\t *  @param  {Frequency} freq\n\t\t *  @return {Hertz}      the frequency in hertz\n\t\t */\n\t    Tone.prototype.toFrequency = function (freq) {\n\t        if (Tone.isNumber(freq)) {\n\t            return freq;\n\t        } else if (Tone.isString(freq) || Tone.isUndef(freq)) {\n\t            return new Tone.Frequency(freq).valueOf();\n\t        } else if (freq instanceof Tone.TimeBase) {\n\t            return freq.toFrequency();\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert a time representation into ticks.\n\t\t *  @param  {Time} time\n\t\t *  @return {Ticks}  the time in ticks\n\t\t */\n\t    Tone.prototype.toTicks = function (time) {\n\t        if (Tone.isNumber(time) || Tone.isString(time)) {\n\t            return new Tone.TransportTime(time).toTicks();\n\t        } else if (Tone.isUndef(time)) {\n\t            return Tone.Transport.ticks;\n\t        } else if (time instanceof Tone.TimeBase) {\n\t            return time.toTicks();\n\t        }\n\t    };\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Param wraps the native Web Audio's AudioParam to provide\n\t\t *         additional unit conversion functionality. It also\n\t\t *         serves as a base-class for classes which have a single,\n\t\t *         automatable parameter.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param  {AudioParam}  param  The parameter to wrap.\n\t\t *  @param  {Tone.Type} units The units of the audio param.\n\t\t *  @param  {Boolean} convert If the param should be converted.\n\t\t */\n\t    Tone.Param = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'param',\n\t            'units',\n\t            'convert'\n\t        ], Tone.Param);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The native parameter to control\n\t\t\t *  @type  {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input = options.param;\n\t        /**\n\t\t\t *  The units of the parameter\n\t\t\t *  @type {Tone.Type}\n\t\t\t */\n\t        this.units = options.units;\n\t        /**\n\t\t\t *  If the value should be converted or not\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.convert = options.convert;\n\t        /**\n\t\t\t *  True if the signal value is being overridden by\n\t\t\t *  a connected signal.\n\t\t\t *  @readOnly\n\t\t\t *  @type  {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this.overridden = false;\n\t        if (!Tone.isUndef(options.value)) {\n\t            this.value = options.value;\n\t        }\n\t    };\n\t    Tone.extend(Tone.Param, Tone.AudioNode);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Param.defaults = {\n\t        'units': Tone.Type.Default,\n\t        'convert': true,\n\t        'param': undefined\n\t    };\n\t    /**\n\t\t * The current value of the parameter.\n\t\t * @memberOf Tone.Param#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Param.prototype, 'value', {\n\t        get: function () {\n\t            return this._toUnits(this._param.value);\n\t        },\n\t        set: function (value) {\n\t            var convertedVal = this._fromUnits(value);\n\t            this._param.cancelScheduledValues(0);\n\t            this._param.value = convertedVal;\n\t        }\n\t    });\n\t    /**\n\t\t *  Convert the given value from the type specified by Tone.Param.units\n\t\t *  into the destination value (such as Gain or Frequency).\n\t\t *  @private\n\t\t *  @param  {*} val the value to convert\n\t\t *  @return {number}     the number which the value should be set to\n\t\t */\n\t    Tone.Param.prototype._fromUnits = function (val) {\n\t        if (this.convert || Tone.isUndef(this.convert)) {\n\t            switch (this.units) {\n\t            case Tone.Type.Time:\n\t                return this.toSeconds(val);\n\t            case Tone.Type.Frequency:\n\t                return this.toFrequency(val);\n\t            case Tone.Type.Decibels:\n\t                return Tone.dbToGain(val);\n\t            case Tone.Type.NormalRange:\n\t                return Math.min(Math.max(val, 0), 1);\n\t            case Tone.Type.AudioRange:\n\t                return Math.min(Math.max(val, -1), 1);\n\t            case Tone.Type.Positive:\n\t                return Math.max(val, 0);\n\t            default:\n\t                return val;\n\t            }\n\t        } else {\n\t            return val;\n\t        }\n\t    };\n\t    /**\n\t\t * Convert the parameters value into the units specified by Tone.Param.units.\n\t\t * @private\n\t\t * @param  {number} val the value to convert\n\t\t * @return {number}\n\t\t */\n\t    Tone.Param.prototype._toUnits = function (val) {\n\t        if (this.convert || Tone.isUndef(this.convert)) {\n\t            switch (this.units) {\n\t            case Tone.Type.Decibels:\n\t                return Tone.gainToDb(val);\n\t            default:\n\t                return val;\n\t            }\n\t        } else {\n\t            return val;\n\t        }\n\t    };\n\t    /**\n\t\t *  the minimum output value\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Param.prototype._minOutput = 0.00001;\n\t    /**\n\t\t *  Schedules a parameter value change at the given time.\n\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t *  @param {Time}  time The time when the change should occur.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //set the frequency to \"G4\" in exactly 1 second from now.\n\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t */\n\t    Tone.Param.prototype.setValueAtTime = function (value, time) {\n\t        time = this.toSeconds(time);\n\t        Tone.isPast(time);\n\t        this._param.setValueAtTime(this._fromUnits(value), time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Creates a schedule point with the current value at the current time.\n\t\t *  This is useful for creating an automation anchor point in order to\n\t\t *  schedule changes from the current value.\n\t\t *\n\t\t *  @param {number=} now (Optionally) pass the now value in.\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setRampPoint = function (now) {\n\t        now = Tone.defaultArg(now, this.now());\n\t        this.cancelAndHoldAtTime(this.context.currentTime);\n\t        var currentVal = this._param.value;\n\t        if (currentVal === 0) {\n\t            currentVal = this._minOutput;\n\t        }\n\t        // cancel and hold at the given time\n\t        this._param.setValueAtTime(currentVal, now);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules a linear continuous change in parameter value from the\n\t\t *  previous scheduled parameter value to the given value.\n\t\t *\n\t\t *  @param  {number} value\n\t\t *  @param  {Time} endTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        endTime = this.toSeconds(endTime);\n\t        Tone.isPast(endTime);\n\t        this._param.linearRampToValueAtTime(value, endTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from\n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *\n\t\t *  @param  {number} value\n\t\t *  @param  {Time} endTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        value = Math.max(this._minOutput, value);\n\t        endTime = this.toSeconds(endTime);\n\t        Tone.isPast(endTime);\n\t        this._param.exponentialRampToValueAtTime(value, endTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from\n\t\t *  the current time and current value to the given value over the\n\t\t *  duration of the rampTime.\n\t\t *\n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the\n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //exponentially ramp to the value 2 over 4 seconds.\n\t\t * signal.exponentialRampTo(2, 4);\n\t\t */\n\t    Tone.Param.prototype.exponentialRampTo = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an linear continuous change in parameter value from\n\t\t *  the current time and current value to the given value over the\n\t\t *  duration of the rampTime.\n\t\t *\n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the\n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //linearly ramp to the value 4 over 3 seconds.\n\t\t * signal.linearRampTo(4, 3);\n\t\t */\n\t    Tone.Param.prototype.linearRampTo = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t * Convert between Time and time constant. The time\n\t\t * constant returned can be used in setTargetAtTime.\n\t\t * @param  {Time} time The time to convert\n\t\t * @return {Number}      The time constant to get an exponentially approaching\n\t\t *                           curve to over 99% of towards the target value.\n\t\t */\n\t    Tone.Param.prototype.getTimeConstant = function (time) {\n\t        return Math.log(this.toSeconds(time) + 1) / Math.log(200);\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time. Since it\n\t\t *  is an exponential approach it will continue approaching after the ramp duration. The\n\t\t *  rampTime is the time that it takes to reach over 99% of the way towards the value.\n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the\n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //exponentially ramp to the value 2 over 4 seconds.\n\t\t * signal.exponentialRampTo(2, 4);\n\t\t */\n\t    Tone.Param.prototype.targetRampTo = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.setTargetAtTime(value, startTime, this.getTimeConstant(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value\n\t\t *  @param {Time} startTime\n\t\t *  @param {number} timeConstant\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        value = this._fromUnits(value);\n\t        // The value will never be able to approach without timeConstant > 0.\n\t        // http://www.w3.org/TR/webaudio/#dfn-setTargetAtTime, where the equation\n\t        // is described. 0 results in a division by 0.\n\t        value = Math.max(this._minOutput, value);\n\t        timeConstant = Math.max(this._minOutput, timeConstant);\n\t        this._param.setTargetAtTime(value, this.toSeconds(startTime), timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets an array of arbitrary parameter values starting at the given time\n\t\t *  for the given duration.\n\t\t *\n\t\t *  @param {Array} values\n\t\t *  @param {Time} startTime\n\t\t *  @param {Time} duration\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setValueCurveAtTime = function (values, startTime, duration) {\n\t        duration = this.toSeconds(duration);\n\t        startTime = this.toSeconds(startTime);\n\t        this.setValueAtTime(values[0], startTime);\n\t        var segTime = duration / (values.length - 1);\n\t        for (var i = 1; i < values.length; i++) {\n\t            this._param.linearRampToValueAtTime(this._fromUnits(values[i]), startTime + i * segTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or\n\t\t *  equal to startTime.\n\t\t *\n\t\t *  @param  {Time} startTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.cancelScheduledValues = function (startTime) {\n\t        this._param.cancelScheduledValues(this.toSeconds(startTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  This is similar to [cancelScheduledValues](#cancelScheduledValues) except\n\t\t *  it holds the automated value at cancelTime until the next automated event.\n\t\t *  @param  {Time} cancelTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.cancelAndHoldAtTime = function (cancelTime) {\n\t        cancelTime = this.toSeconds(cancelTime);\n\t        if (this._param.cancelAndHoldAtTime) {\n\t            this._param.cancelAndHoldAtTime(cancelTime);\n\t        } else {\n\t            //fallback for unsupported browsers\n\t            //can't cancel and hold at any time in the future\n\t            //just do it immediately for gapless automation curves\n\t            var now = this.context.currentTime;\n\t            this._param.cancelScheduledValues(now);\n\t            var currentVal = this._param.value;\n\t            if (currentVal === 0) {\n\t                currentVal = this._minOutput;\n\t            }\n\t            this._param.setValueAtTime(currentVal, now + this.sampleTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Ramps to the given value over the duration of the rampTime.\n\t\t *  Automatically selects the best ramp type (exponential or linear)\n\t\t *  depending on the `units` of the signal\n\t\t *\n\t\t *  @param  {number} value\n\t\t *  @param  {Time} rampTime \tThe time that it takes the\n\t\t *                              value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //ramp to the value either linearly or exponentially\n\t\t * //depending on the \"units\" value of the signal\n\t\t * signal.rampTo(0, 10);\n\t\t *  @example\n\t\t * //schedule it to ramp starting at a specific time\n\t\t * signal.rampTo(0, 10, 5)\n\t\t */\n\t    Tone.Param.prototype.rampTo = function (value, rampTime, startTime) {\n\t        rampTime = Tone.defaultArg(rampTime, 0.1);\n\t        if (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM || this.units === Tone.Type.Decibels) {\n\t            this.exponentialRampTo(value, rampTime, startTime);\n\t        } else {\n\t            this.linearRampTo(value, rampTime, startTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Param;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  createGain shim\n\t\t *  @private\n\t\t */\n\t    if (window.GainNode && !AudioContext.prototype.createGain) {\n\t        AudioContext.prototype.createGain = AudioContext.prototype.createGainNode;\n\t    }\n\t    /**\n\t\t *  @class A thin wrapper around the Native Web Audio GainNode.\n\t\t *         The GainNode is a basic building block of the Web Audio\n\t\t *         API and is useful for routing audio and adjusting gains.\n\t\t *  @extends {Tone}\n\t\t *  @param  {Number=}  gain  The initial gain of the GainNode\n\t\t *  @param {Tone.Type=} units The units of the gain parameter.\n\t\t */\n\t    Tone.Gain = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'gain',\n\t            'units'\n\t        ], Tone.Gain);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The GainNode\n\t\t\t *  @type  {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = this.output = this._gainNode = this.context.createGain();\n\t        /**\n\t\t\t *  The gain parameter of the gain node.\n\t\t\t *  @type {Gain}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.gain = new Tone.Param({\n\t            'param': this._gainNode.gain,\n\t            'units': options.units,\n\t            'value': options.gain,\n\t            'convert': options.convert\n\t        });\n\t        this._readOnly('gain');\n\t    };\n\t    Tone.extend(Tone.Gain, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Gain.defaults = {\n\t        'gain': 1,\n\t        'convert': true\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Gain}  this\n\t\t */\n\t    Tone.Gain.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._gainNode.disconnect();\n\t        this._gainNode = null;\n\t        this._writable('gain');\n\t        this.gain.dispose();\n\t        this.gain = null;\n\t    };\n\t    return Tone.Gain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.\n\t\t *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n\t\t *          has all of the methods available to native Web Audio \n\t\t *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n\t\t *          as well as additional conveniences. Read more about working with signals \n\t\t *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Param}\n\t\t *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam\n\t\t *                                     is passed in, that parameter will be wrapped\n\t\t *                                     and controlled by the Signal. \n\t\t *  @param {string} [units=Number] unit The units the signal is in. \n\t\t *  @example\n\t\t * var signal = new Tone.Signal(10);\n\t\t */\n\t    Tone.Signal = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'value',\n\t            'units'\n\t        ], Tone.Signal);\n\t        var gainNode = Tone.context.createGain();\n\t        options.param = gainNode.gain;\n\t        Tone.Param.call(this, options);\n\t        /**\n\t\t\t * The node where the constant signal value is scaled.\n\t\t\t * @type {GainNode}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = gainNode;\n\t        /**\n\t\t\t * The node where the value is set.\n\t\t\t * @type {Tone.Param}\n\t\t\t * @private\n\t\t\t */\n\t        this.input = this._param = this.output.gain;\n\t        //connect the const output to the node output\n\t        this.context.getConstant(1).connect(this.output);\n\t    };\n\t    Tone.extend(Tone.Signal, Tone.Param);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Signal.defaults = {\n\t        'value': 0,\n\t        'units': Tone.Type.Default,\n\t        'convert': true\n\t    };\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t *  @method\n\t\t */\n\t    Tone.Signal.prototype.connect = Tone.SignalBase.prototype.connect;\n\t    /**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Signal} this\n\t\t */\n\t    Tone.Signal.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.Signal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A signal which adds the method getValueAtTime.\n\t\t *         Code and inspiration from https://github.com/jsantell/web-audio-automation-timeline\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {Number=} value The initial value of the signal\n\t\t *  @param {String=} units The conversion units of the signal.\n\t\t */\n\t    Tone.TimelineSignal = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'value',\n\t            'units'\n\t        ], Tone.Signal);\n\t        Tone.Signal.call(this, options);\n\t        /**\n\t\t\t *  The scheduled events\n\t\t\t *  @type {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = new Tone.Timeline(100);\n\t        /**\n\t\t\t *  The initial scheduled value\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._initial = this._fromUnits(this._param.value);\n\t        this.value = options.value;\n\t        //delete the input node so that nothing can overwrite the signal value\n\t        delete this.input;\n\t    };\n\t    Tone.extend(Tone.TimelineSignal, Tone.Signal);\n\t    /**\n\t\t *  The event types of a schedulable signal.\n\t\t *  @enum {String}\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.Type = {\n\t        Linear: 'linear',\n\t        Exponential: 'exponential',\n\t        Target: 'target',\n\t        Set: 'set'\n\t    };\n\t    /**\n\t\t * The current value of the signal.\n\t\t * @memberOf Tone.TimelineSignal#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.TimelineSignal.prototype, 'value', {\n\t        get: function () {\n\t            var now = this.now();\n\t            var val = this.getValueAtTime(now);\n\t            return this._toUnits(val);\n\t        },\n\t        set: function (value) {\n\t            if (this._events) {\n\t                var convertedVal = this._fromUnits(value);\n\t                this._initial = convertedVal;\n\t                this.cancelScheduledValues();\n\t                this._param.value = convertedVal;\n\t            }\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tSCHEDULING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Schedules a parameter value change at the given time.\n\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t *  @param {Time}  time The time when the change should occur.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t *  @example\n\t\t * //set the frequency to \"G4\" in exactly 1 second from now.\n\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t */\n\t    Tone.TimelineSignal.prototype.setValueAtTime = function (value, startTime) {\n\t        value = this._fromUnits(value);\n\t        startTime = this.toSeconds(startTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Set,\n\t            'value': value,\n\t            'time': startTime\n\t        });\n\t        //invoke the original event\n\t        this._param.setValueAtTime(value, startTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules a linear continuous change in parameter value from the\n\t\t *  previous scheduled parameter value to the given value.\n\t\t *\n\t\t *  @param  {number} value\n\t\t *  @param  {Time} endTime\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        endTime = this.toSeconds(endTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Linear,\n\t            'value': value,\n\t            'time': endTime\n\t        });\n\t        this._param.linearRampToValueAtTime(value, endTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from\n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *\n\t\t *  @param  {number} value\n\t\t *  @param  {Time} endTime\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t        //get the previous event and make sure it's not starting from 0\n\t        endTime = this.toSeconds(endTime);\n\t        var beforeEvent = this._searchBefore(endTime);\n\t        if (beforeEvent && beforeEvent.value === 0) {\n\t            //reschedule that event\n\t            this.setValueAtTime(this._minOutput, beforeEvent.time);\n\t        }\n\t        value = this._fromUnits(value);\n\t        var setValue = Math.max(value, this._minOutput);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Exponential,\n\t            'value': setValue,\n\t            'time': endTime\n\t        });\n\t        //if the ramped to value is 0, make it go to the min output, and then set to 0.\n\t        if (value < this._minOutput) {\n\t            this._param.exponentialRampToValueAtTime(this._minOutput, endTime - this.sampleTime);\n\t            this.setValueAtTime(0, endTime);\n\t        } else {\n\t            this._param.exponentialRampToValueAtTime(value, endTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value\n\t\t *  @param {Time} startTime\n\t\t *  @param {number} timeConstant\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        value = this._fromUnits(value);\n\t        value = Math.max(this._minOutput, value);\n\t        timeConstant = Math.max(this._minOutput, timeConstant);\n\t        startTime = this.toSeconds(startTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Target,\n\t            'value': value,\n\t            'time': startTime,\n\t            'constant': timeConstant\n\t        });\n\t        this._param.setTargetAtTime(value, startTime, timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set an array of arbitrary values starting at the given time for the given duration.\n\t\t *  @param {Float32Array} values\n\t\t *  @param {Time} startTime\n\t\t *  @param {Time} duration\n\t\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {\n\t        scaling = Tone.defaultArg(scaling, 1);\n\t        duration = this.toSeconds(duration);\n\t        startTime = this.toSeconds(startTime);\n\t        var segTime = duration / (values.length - 1);\n\t        this.setValueAtTime(values[0] * scaling, startTime);\n\t        for (var i = 1; i < values.length; i++) {\n\t            this.linearRampToValueAtTime(values[i] * scaling, startTime + i * segTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or\n\t\t *  equal to startTime.\n\t\t *  @param  {Time} startTime\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.cancelScheduledValues = function (after) {\n\t        after = this.toSeconds(after);\n\t        this._events.cancel(after);\n\t        this._param.cancelScheduledValues(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or\n\t\t *  equal to cancelTime and sets the output of the signal to be the value\n\t\t *  at cancelTime. Similar to (cancelScheduledValues)[#cancelscheduledvalues].\n\t\t *  @param  {Time} cancelTime\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.cancelAndHoldAtTime = function (cancelTime) {\n\t        this.setRampPoint(this.toSeconds(cancelTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the computed value at the given time. This provides\n\t\t *  a point from which a linear or exponential curve\n\t\t *  can be scheduled after. Will cancel events after\n\t\t *  the given time and shorten the currently scheduled\n\t\t *  linear or exponential ramp so that it ends at `time` .\n\t\t *  This is to avoid discontinuities and clicks in envelopes.\n\t\t *  @param {Time} time When to set the ramp point\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.setRampPoint = function (time) {\n\t        time = this.toSeconds(time);\n\t        //get the value at the given time\n\t        var val = this._toUnits(this.getValueAtTime(time));\n\t        //if there is an event at the given time\n\t        //and that even is not a \"set\"\n\t        var before = this._searchBefore(time);\n\t        if (before && before.time === time) {\n\t            //remove everything after\n\t            this.cancelScheduledValues(time + this.sampleTime);\n\t        } else {\n\t            //reschedule the next event to end at the given time\n\t            var after = this._searchAfter(time);\n\t            if (after) {\n\t                //cancel the next event(s)\n\t                this.cancelScheduledValues(time);\n\t                if (after.type === Tone.TimelineSignal.Type.Linear) {\n\t                    this.linearRampToValueAtTime(val, time);\n\t                } else if (after.type === Tone.TimelineSignal.Type.Exponential) {\n\t                    this.exponentialRampToValueAtTime(val, time);\n\t                }\n\t            }\n\t        }\n\t        this.setValueAtTime(val, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Do a linear ramp to the given value between the start and finish times.\n\t\t *  @param {Number} value The value to ramp to.\n\t\t *  @param {Time} start The beginning anchor point to do the linear ramp\n\t\t *  @param {Time} finish The ending anchor point by which the value of\n\t\t *                       the signal will equal the given value.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.linearRampToValueBetween = function (value, start, finish) {\n\t        this.setRampPoint(start);\n\t        this.linearRampToValueAtTime(value, finish);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Do a exponential ramp to the given value between the start and finish times.\n\t\t *  @param {Number} value The value to ramp to.\n\t\t *  @param {Time} start The beginning anchor point to do the exponential ramp\n\t\t *  @param {Time} finish The ending anchor point by which the value of\n\t\t *                       the signal will equal the given value.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.exponentialRampToValueBetween = function (value, start, finish) {\n\t        this.setRampPoint(start);\n\t        this.exponentialRampToValueAtTime(value, finish);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tGETTING SCHEDULED VALUES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value before or equal to the given time\n\t\t *  @param  {Number}  time  The time to query\n\t\t *  @return  {Object}  The event at or before the given time.\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._searchBefore = function (time) {\n\t        return this._events.get(time);\n\t    };\n\t    /**\n\t\t *  The event after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @return  {Object}  The next event after the given time\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._searchAfter = function (time) {\n\t        return this._events.getAfter(time);\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {Number}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.TimelineSignal.prototype.getValueAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        var after = this._searchAfter(time);\n\t        var before = this._searchBefore(time);\n\t        var value = this._initial;\n\t        //if it was set by\n\t        if (before === null) {\n\t            value = this._initial;\n\t        } else if (before.type === Tone.TimelineSignal.Type.Target) {\n\t            var previous = this._events.getBefore(before.time);\n\t            var previousVal;\n\t            if (previous === null) {\n\t                previousVal = this._initial;\n\t            } else {\n\t                previousVal = previous.value;\n\t            }\n\t            value = this._exponentialApproach(before.time, previousVal, before.value, before.constant, time);\n\t        } else if (after === null) {\n\t            value = before.value;\n\t        } else if (after.type === Tone.TimelineSignal.Type.Linear) {\n\t            value = this._linearInterpolate(before.time, before.value, after.time, after.value, time);\n\t        } else if (after.type === Tone.TimelineSignal.Type.Exponential) {\n\t            value = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);\n\t        } else {\n\t            value = before.value;\n\t        }\n\t        return value;\n\t    };\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams,\n\t\t *  they take over the output value of that signal or AudioParam.\n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>.\n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node\n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t *  @method\n\t\t */\n\t    Tone.TimelineSignal.prototype.connect = Tone.SignalBase.prototype.connect;\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUTOMATION CURVE CALCULATIONS\n\t    //\tMIT License, copyright (c) 2014 Jordan Santell\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Calculates the the value along the curve produced by setTargetAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._exponentialApproach = function (t0, v0, v1, timeConstant, t) {\n\t        return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by linearRampToValueAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._linearInterpolate = function (t0, v0, t1, v1, t) {\n\t        return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._exponentialInterpolate = function (t0, v0, t1, v1, t) {\n\t        v0 = Math.max(this._minOutput, v0);\n\t        return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        this._events.dispose();\n\t        this._events = null;\n\t    };\n\t    return Tone.TimelineSignal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Pow applies an exponent to the incoming signal. The incoming signal\n\t\t *         must be AudioRange.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {Positive} exp The exponent to apply to the incoming signal, must be at least 2. \n\t\t *  @example\n\t\t * var pow = new Tone.Pow(2);\n\t\t * var sig = new Tone.Signal(0.5).connect(pow);\n\t\t * //output of pow is 0.25. \n\t\t */\n\t    Tone.Pow = function (exp) {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t * the exponent\n\t\t\t * @private\n\t\t\t * @type {number}\n\t\t\t */\n\t        this._exp = Tone.defaultArg(exp, 1);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._expScaler = this.input = this.output = new Tone.WaveShaper(this._expFunc(this._exp), 8192);\n\t    };\n\t    Tone.extend(Tone.Pow, Tone.SignalBase);\n\t    /**\n\t\t * The value of the exponent.\n\t\t * @memberOf Tone.Pow#\n\t\t * @type {number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Pow.prototype, 'value', {\n\t        get: function () {\n\t            return this._exp;\n\t        },\n\t        set: function (exp) {\n\t            this._exp = exp;\n\t            this._expScaler.setMap(this._expFunc(this._exp));\n\t        }\n\t    });\n\t    /**\n\t\t *  the function which maps the waveshaper\n\t\t *  @param   {number} exp\n\t\t *  @return {function}\n\t\t *  @private\n\t\t */\n\t    Tone.Pow.prototype._expFunc = function (exp) {\n\t        return function (val) {\n\t            return Math.pow(Math.abs(val), exp);\n\t        };\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Pow} this\n\t\t */\n\t    Tone.Pow.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._expScaler.dispose();\n\t        this._expScaler = null;\n\t        return this;\n\t    };\n\t    return Tone.Pow;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n\t\t *          envelope generator. Tone.Envelope outputs a signal which\n\t\t *          can be connected to an AudioParam or Tone.Signal.\n\t\t *          <img src=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Time} [attack] The amount of time it takes for the envelope to go from\n\t\t *                         0 to it's maximum value.\n\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t *                       \tto fall to the sustain value.\n\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t *                                \tthe release is triggered.\n\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0.\n\t\t *  @example\n\t\t * //an amplitude envelope\n\t\t * var gainNode = Tone.context.createGain();\n\t\t * var env = new Tone.Envelope({\n\t\t * \t\"attack\" : 0.1,\n\t\t * \t\"decay\" : 0.2,\n\t\t * \t\"sustain\" : 1,\n\t\t * \t\"release\" : 0.8,\n\t\t * });\n\t\t * env.connect(gainNode.gain);\n\t\t */\n\t    Tone.Envelope = function () {\n\t        //get all of the defaults\n\t        var options = Tone.defaults(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  When triggerAttack is called, the attack time is the amount of\n\t\t\t *  time it takes for the envelope to reach it's maximum value.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.attack = options.attack;\n\t        /**\n\t\t\t *  After the attack portion of the envelope, the value will fall\n\t\t\t *  over the duration of the decay time to it's sustain value.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.decay = options.decay;\n\t        /**\n\t\t\t * \tThe sustain value is the value\n\t\t\t * \twhich the envelope rests at after triggerAttack is\n\t\t\t * \tcalled, but before triggerRelease is invoked.\n\t\t\t *  @type {NormalRange}\n\t\t\t */\n\t        this.sustain = options.sustain;\n\t        /**\n\t\t\t *  After triggerRelease is called, the envelope's\n\t\t\t *  value will fall to it's miminum value over the\n\t\t\t *  duration of the release time.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.release = options.release;\n\t        /**\n\t\t\t *  the next time the envelope is at standby\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._attackCurve = 'linear';\n\t        /**\n\t\t\t *  the next time the envelope is at standby\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._releaseCurve = 'exponential';\n\t        /**\n\t\t\t *  the signal\n\t\t\t *  @type {Tone.TimelineSignal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sig = this.output = new Tone.TimelineSignal();\n\t        this._sig.setValueAtTime(0, 0);\n\t        //set the attackCurve initially\n\t        this.attackCurve = options.attackCurve;\n\t        this.releaseCurve = options.releaseCurve;\n\t    };\n\t    Tone.extend(Tone.Envelope, Tone.AudioNode);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Envelope.defaults = {\n\t        'attack': 0.01,\n\t        'decay': 0.1,\n\t        'sustain': 0.5,\n\t        'release': 1,\n\t        'attackCurve': 'linear',\n\t        'releaseCurve': 'exponential'\n\t    };\n\t    /**\n\t\t * Read the current value of the envelope. Useful for\n\t\t * syncronizing visual output to the envelope.\n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'value', {\n\t        get: function () {\n\t            return this.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t * The shape of the attack.\n\t\t * Can be any of these strings:\n\t\t * <ul>\n\t\t *   <li>linear</li>\n\t\t *   <li>exponential</li>\n\t\t *   <li>sine</li>\n\t\t *   <li>cosine</li>\n\t\t *   <li>bounce</li>\n\t\t *   <li>ripple</li>\n\t\t *   <li>step</li>\n\t\t * </ul>\n\t\t * Can also be an array which describes the curve. Values\n\t\t * in the array are evenly subdivided and linearly\n\t\t * interpolated over the duration of the attack.\n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {String|Array}\n\t\t * @name attackCurve\n\t\t * @example\n\t\t * env.attackCurve = \"linear\";\n\t\t * @example\n\t\t * //can also be an array\n\t\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'attackCurve', {\n\t        get: function () {\n\t            if (Tone.isString(this._attackCurve)) {\n\t                return this._attackCurve;\n\t            } else if (Tone.isArray(this._attackCurve)) {\n\t                //look up the name in the curves array\n\t                for (var type in Tone.Envelope.Type) {\n\t                    if (Tone.Envelope.Type[type].In === this._attackCurve) {\n\t                        return type;\n\t                    }\n\t                }\n\t                //otherwise just return the array\n\t                return this._attackCurve;\n\t            }\n\t        },\n\t        set: function (curve) {\n\t            //check if it's a valid type\n\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t                var curveDef = Tone.Envelope.Type[curve];\n\t                if (Tone.isObject(curveDef)) {\n\t                    this._attackCurve = curveDef.In;\n\t                } else {\n\t                    this._attackCurve = curveDef;\n\t                }\n\t            } else if (Tone.isArray(curve)) {\n\t                this._attackCurve = curve;\n\t            } else {\n\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The shape of the release. See the attack curve types.\n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {String|Array}\n\t\t * @name releaseCurve\n\t\t * @example\n\t\t * env.releaseCurve = \"linear\";\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'releaseCurve', {\n\t        get: function () {\n\t            if (Tone.isString(this._releaseCurve)) {\n\t                return this._releaseCurve;\n\t            } else if (Tone.isArray(this._releaseCurve)) {\n\t                //look up the name in the curves array\n\t                for (var type in Tone.Envelope.Type) {\n\t                    if (Tone.Envelope.Type[type].Out === this._releaseCurve) {\n\t                        return type;\n\t                    }\n\t                }\n\t                //otherwise just return the array\n\t                return this._releaseCurve;\n\t            }\n\t        },\n\t        set: function (curve) {\n\t            //check if it's a valid type\n\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t                var curveDef = Tone.Envelope.Type[curve];\n\t                if (Tone.isObject(curveDef)) {\n\t                    this._releaseCurve = curveDef.Out;\n\t                } else {\n\t                    this._releaseCurve = curveDef;\n\t                }\n\t            } else if (Tone.isArray(curve)) {\n\t                this._releaseCurve = curve;\n\t            } else {\n\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Trigger the attack/decay portion of the ADSR envelope.\n\t\t *  @param  {Time} [time=now] When the attack should start.\n\t\t *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.\n\t\t *                               number between 0-1\n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t *  //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t\t *  env.triggerAttack(\"+0.5\", 0.2);\n\t\t */\n\t    Tone.Envelope.prototype.triggerAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        var originalAttack = this.toSeconds(this.attack);\n\t        var attack = originalAttack;\n\t        var decay = this.toSeconds(this.decay);\n\t        velocity = Tone.defaultArg(velocity, 1);\n\t        //check if it's not a complete attack\n\t        var currentValue = this.getValueAtTime(time);\n\t        if (currentValue > 0) {\n\t            //subtract the current value from the attack time\n\t            var attackRate = 1 / attack;\n\t            var remainingDistance = 1 - currentValue;\n\t            //the attack is now the remaining time\n\t            attack = remainingDistance / attackRate;\n\t        }\n\t        //attack\n\t        if (this._attackCurve === 'linear') {\n\t            this._sig.linearRampTo(velocity, attack, time);\n\t        } else if (this._attackCurve === 'exponential') {\n\t            this._sig.targetRampTo(velocity, attack, time);\n\t        } else if (attack > 0) {\n\t            this._sig.setRampPoint(time);\n\t            var curve = this._attackCurve;\n\t            //take only a portion of the curve\n\t            if (attack < originalAttack) {\n\t                var percentComplete = 1 - attack / originalAttack;\n\t                var sliceIndex = Math.floor(percentComplete * this._attackCurve.length);\n\t                curve = this._attackCurve.slice(sliceIndex);\n\t                //the first index is the current value\n\t                curve[0] = currentValue;\n\t            }\n\t            this._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t        }\n\t        //decay\n\t        this._sig.targetRampTo(velocity * this.sustain, decay, attack + time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Triggers the release of the envelope.\n\t\t *  @param  {Time} [time=now] When the release portion of the envelope should start.\n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t *  //trigger release immediately\n\t\t *  env.triggerRelease();\n\t\t */\n\t    Tone.Envelope.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        var currentValue = this.getValueAtTime(time);\n\t        if (currentValue > 0) {\n\t            var release = this.toSeconds(this.release);\n\t            if (this._releaseCurve === 'linear') {\n\t                this._sig.linearRampTo(0, release, time);\n\t            } else if (this._releaseCurve === 'exponential') {\n\t                this._sig.targetRampTo(0, release, time);\n\t            } else {\n\t                var curve = this._releaseCurve;\n\t                if (Tone.isArray(curve)) {\n\t                    this._sig.setRampPoint(time);\n\t                    this._sig.setValueCurveAtTime(curve, time, release, currentValue);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {Number}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.Envelope.prototype.getValueAtTime = function (time) {\n\t        return this._sig.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t\t *  some duration, then triggerRelease.\n\t\t *  @param {Time} duration The duration of the sustain.\n\t\t *  @param {Time} [time=now] When the attack should be triggered.\n\t\t *  @param {number} [velocity=1] The velocity of the envelope.\n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t * //trigger the attack and then the release after 0.6 seconds.\n\t\t * env.triggerAttackRelease(0.6);\n\t\t */\n\t    Tone.Envelope.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + this.toSeconds(duration));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled envelope changes after the given time.\n\t\t *  @param  {Time} after\n\t\t *  @returns {Tone.Envelope} this\n\t\t */\n\t    Tone.Envelope.prototype.cancel = function (after) {\n\t        this._sig.cancelScheduledValues(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Borrows the connect method from Tone.Signal.\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.Envelope.prototype.connect = Tone.Signal.prototype.connect;\n\t    /**\n\t \t *  Generate some complex envelope curves.\n\t \t */\n\t    (function _createCurves() {\n\t        var curveLen = 128;\n\t        var i, k;\n\t        //cosine curve\n\t        var cosineCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));\n\t        }\n\t        //ripple curve\n\t        var rippleCurve = [];\n\t        var rippleCurveFreq = 6.4;\n\t        for (i = 0; i < curveLen - 1; i++) {\n\t            k = i / (curveLen - 1);\n\t            var sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t            rippleCurve[i] = sineWave / 10 + k * 0.83;\n\t        }\n\t        rippleCurve[curveLen - 1] = 1;\n\t        //stairs curve\n\t        var stairsCurve = [];\n\t        var steps = 5;\n\t        for (i = 0; i < curveLen; i++) {\n\t            stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;\n\t        }\n\t        //in-out easing curve\n\t        var sineCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            k = i / (curveLen - 1);\n\t            sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t        }\n\t        //a bounce curve\n\t        var bounceCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            k = i / (curveLen - 1);\n\t            var freq = Math.pow(k, 3) * 4 + 0.2;\n\t            var val = Math.cos(freq * Math.PI * 2 * k);\n\t            bounceCurve[i] = Math.abs(val * (1 - k));\n\t        }\n\t        /**\n\t\t\t *  Invert a value curve to make it work for the release\n\t\t\t *  @private\n\t\t\t */\n\t        function invertCurve(curve) {\n\t            var out = new Array(curve.length);\n\t            for (var j = 0; j < curve.length; j++) {\n\t                out[j] = 1 - curve[j];\n\t            }\n\t            return out;\n\t        }\n\t        /**\n\t\t\t *  reverse the curve\n\t\t\t *  @private\n\t\t\t */\n\t        function reverseCurve(curve) {\n\t            return curve.slice(0).reverse();\n\t        }\n\t        /**\n\t\t\t *  attack and release curve arrays\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        Tone.Envelope.Type = {\n\t            'linear': 'linear',\n\t            'exponential': 'exponential',\n\t            'bounce': {\n\t                In: invertCurve(bounceCurve),\n\t                Out: bounceCurve\n\t            },\n\t            'cosine': {\n\t                In: cosineCurve,\n\t                Out: reverseCurve(cosineCurve)\n\t            },\n\t            'step': {\n\t                In: stairsCurve,\n\t                Out: invertCurve(stairsCurve)\n\t            },\n\t            'ripple': {\n\t                In: rippleCurve,\n\t                Out: invertCurve(rippleCurve)\n\t            },\n\t            'sine': {\n\t                In: sineCurve,\n\t                Out: invertCurve(sineCurve)\n\t            }\n\t        };\n\t    }());\n\t    /**\n\t\t *  Disconnect and dispose.\n\t\t *  @returns {Tone.Envelope} this\n\t\t */\n\t    Tone.Envelope.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._sig.dispose();\n\t        this._sig = null;\n\t        this._attackCurve = null;\n\t        this._releaseCurve = null;\n\t        return this;\n\t    };\n\t    return Tone.Envelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n\t\t *          Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts\n\t\t *          an audio signal as the input and will apply the envelope to the amplitude\n\t\t *          of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @param {Time|Object} [attack] The amount of time it takes for the envelope to go from\n\t\t *                               0 to it's maximum value.\n\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t *                       \tto fall to the sustain value.\n\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t *                                \tthe release is triggered.\n\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0.\n\t\t *  @example\n\t\t * var ampEnv = new Tone.AmplitudeEnvelope({\n\t\t * \t\"attack\": 0.1,\n\t\t * \t\"decay\": 0.2,\n\t\t * \t\"sustain\": 1.0,\n\t\t * \t\"release\": 0.8\n\t\t * }).toMaster();\n\t\t * //create an oscillator and connect it\n\t\t * var osc = new Tone.Oscillator().connect(ampEnv).start();\n\t\t * //trigger the envelopes attack and release \"8t\" apart\n\t\t * ampEnv.triggerAttackRelease(\"8t\");\n\t\t */\n\t    Tone.AmplitudeEnvelope = function () {\n\t        Tone.Envelope.apply(this, arguments);\n\t        /**\n\t\t\t *  the input node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = this.output = new Tone.Gain();\n\t        this._sig.connect(this.output.gain);\n\t    };\n\t    Tone.extend(Tone.AmplitudeEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.AmplitudeEnvelope}  this\n\t\t */\n\t    Tone.AmplitudeEnvelope.prototype.dispose = function () {\n\t        Tone.Envelope.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.AmplitudeEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  AnalyserNode.getFloatTimeDomainData polyfill\n\t\t *  @private\n\t\t */\n\t    if (window.AnalyserNode && !AnalyserNode.prototype.getFloatTimeDomainData) {\n\t        //referenced https://github.com/mohayonao/get-float-time-domain-data\n\t        AnalyserNode.prototype.getFloatTimeDomainData = function (array) {\n\t            var uint8 = new Uint8Array(array.length);\n\t            this.getByteTimeDomainData(uint8);\n\t            for (var i = 0; i < uint8.length; i++) {\n\t                array[i] = (uint8[i] - 128) / 128;\n\t            }\n\t        };\n\t    }\n\t    /**\n\t\t *  @class  Wrapper around the native Web Audio's\n\t\t *          [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n\t\t *          Extracts FFT or Waveform data from the incoming signal.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {String=} type The return type of the analysis, either \"fft\", or \"waveform\".\n\t\t *  @param {Number=} size The size of the FFT. Value must be a power of\n\t\t *                       two in the range 32 to 32768.\n\t\t */\n\t    Tone.Analyser = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'type',\n\t            'size'\n\t        ], Tone.Analyser);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The analyser node.\n\t\t\t *  @private\n\t\t\t *  @type {AnalyserNode}\n\t\t\t */\n\t        this._analyser = this.input = this.output = this.context.createAnalyser();\n\t        /**\n\t\t\t *  The analysis type\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The buffer that the FFT data is written to\n\t\t\t *  @type {TypedArray}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = null;\n\t        //set the values initially\n\t        this.size = options.size;\n\t        this.type = options.type;\n\t    };\n\t    Tone.extend(Tone.Analyser, Tone.AudioNode);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Analyser.defaults = {\n\t        'size': 1024,\n\t        'type': 'fft',\n\t        'smoothing': 0.8\n\t    };\n\t    /**\n\t\t *  Possible return types of analyser.getValue()\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Analyser.Type = {\n\t        Waveform: 'waveform',\n\t        FFT: 'fft'\n\t    };\n\t    /**\n\t\t *  Run the analysis given the current settings and return the\n\t\t *  result as a TypedArray.\n\t\t *  @returns {TypedArray}\n\t\t */\n\t    Tone.Analyser.prototype.getValue = function () {\n\t        if (this._type === Tone.Analyser.Type.FFT) {\n\t            this._analyser.getFloatFrequencyData(this._buffer);\n\t        } else if (this._type === Tone.Analyser.Type.Waveform) {\n\t            this._analyser.getFloatTimeDomainData(this._buffer);\n\t        }\n\t        return this._buffer;\n\t    };\n\t    /**\n\t\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Number}\n\t\t *  @name size\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'size', {\n\t        get: function () {\n\t            return this._analyser.frequencyBinCount;\n\t        },\n\t        set: function (size) {\n\t            this._analyser.fftSize = size * 2;\n\t            this._buffer = new Float32Array(size);\n\t        }\n\t    });\n\t    /**\n\t\t *  The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {String}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            if (type !== Tone.Analyser.Type.Waveform && type !== Tone.Analyser.Type.FFT) {\n\t                throw new TypeError('Tone.Analyser: invalid type: ' + type);\n\t            }\n\t            this._type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  0 represents no time averaging with the last analysis frame.\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {NormalRange}\n\t\t *  @name smoothing\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'smoothing', {\n\t        get: function () {\n\t            return this._analyser.smoothingTimeConstant;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.smoothingTimeConstant = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Analyser}  this\n\t\t */\n\t    Tone.Analyser.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._analyser.disconnect();\n\t        this._analyser = null;\n\t        this._buffer = null;\n\t    };\n\t    return Tone.Analyser;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Compressor is a thin wrapper around the Web Audio\n\t\t *         [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n\t\t *         Compression reduces the volume of loud sounds or amplifies quiet sounds\n\t\t *         by narrowing or \"compressing\" an audio signal's dynamic range.\n\t\t *         Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {Decibels|Object} [threshold] The value above which the compression starts to be applied.\n\t\t *  @param {Positive} [ratio] The gain reduction ratio.\n\t\t *  @example\n\t\t * var comp = new Tone.Compressor(-30, 3);\n\t\t */\n\t    Tone.Compressor = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'threshold',\n\t            'ratio'\n\t        ], Tone.Compressor);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  the compressor node\n\t\t\t *  @type {DynamicsCompressorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._compressor = this.input = this.output = this.context.createDynamicsCompressor();\n\t        /**\n\t\t\t *  the threshold vaue\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.threshold = new Tone.Param({\n\t            'param': this._compressor.threshold,\n\t            'units': Tone.Type.Decibels,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The attack parameter\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.attack = new Tone.Param(this._compressor.attack, Tone.Type.Time);\n\t        /**\n\t\t\t *  The release parameter\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.release = new Tone.Param(this._compressor.release, Tone.Type.Time);\n\t        /**\n\t\t\t *  The knee parameter\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.knee = new Tone.Param({\n\t            'param': this._compressor.knee,\n\t            'units': Tone.Type.Decibels,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The ratio value\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.ratio = new Tone.Param({\n\t            'param': this._compressor.ratio,\n\t            'convert': false\n\t        });\n\t        //set the defaults\n\t        this._readOnly([\n\t            'knee',\n\t            'release',\n\t            'attack',\n\t            'ratio',\n\t            'threshold'\n\t        ]);\n\t        this.set(options);\n\t    };\n\t    Tone.extend(Tone.Compressor, Tone.AudioNode);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Compressor.defaults = {\n\t        'ratio': 12,\n\t        'threshold': -24,\n\t        'release': 0.25,\n\t        'attack': 0.003,\n\t        'knee': 30\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Compressor} this\n\t\t */\n\t    Tone.Compressor.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'knee',\n\t            'release',\n\t            'attack',\n\t            'ratio',\n\t            'threshold'\n\t        ]);\n\t        this._compressor.disconnect();\n\t        this._compressor = null;\n\t        this.attack.dispose();\n\t        this.attack = null;\n\t        this.release.dispose();\n\t        this.release = null;\n\t        this.threshold.dispose();\n\t        this.threshold = null;\n\t        this.ratio.dispose();\n\t        this.ratio = null;\n\t        this.knee.dispose();\n\t        this.knee = null;\n\t        return this;\n\t    };\n\t    return Tone.Compressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Add a signal and a number or two signals. When no value is\n\t\t *         passed into the constructor, Tone.Add will sum <code>input[0]</code>\n\t\t *         and <code>input[1]</code>. If a value is passed into the constructor, \n\t\t *         the it will be added to the input.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value If no value is provided, Tone.Add will sum the first\n\t\t *                         and second inputs. \n\t\t *  @example\n\t\t * var signal = new Tone.Signal(2);\n\t\t * var add = new Tone.Add(2);\n\t\t * signal.connect(add);\n\t\t * //the output of add equals 4\n\t\t *  @example\n\t\t * //if constructed with no arguments\n\t\t * //it will add the first and second inputs\n\t\t * var add = new Tone.Add();\n\t\t * var sig0 = new Tone.Signal(3).connect(add, 0, 0);\n\t\t * var sig1 = new Tone.Signal(4).connect(add, 0, 1);\n\t\t * //the output of add equals 7. \n\t\t */\n\t    Tone.Add = function (value) {\n\t        Tone.Signal.call(this);\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sum = this.input[0] = this.input[1] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t        this._param = this.input[1] = new Tone.Signal(value);\n\t        this._param.connect(this._sum);\n\t    };\n\t    Tone.extend(Tone.Add, Tone.Signal);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Add} this\n\t\t */\n\t    Tone.Add.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        this._sum.dispose();\n\t        this._sum = null;\n\t        return this;\n\t    };\n\t    return Tone.Add;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Multiply two incoming signals. Or, if a number is given in the constructor, \n\t\t *          multiplies the incoming signal by that value. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value Constant value to multiple. If no value is provided,\n\t\t *                         it will return the product of the first and second inputs\n\t\t *  @example\n\t\t * var mult = new Tone.Multiply();\n\t\t * var sigA = new Tone.Signal(3);\n\t\t * var sigB = new Tone.Signal(4);\n\t\t * sigA.connect(mult, 0, 0);\n\t\t * sigB.connect(mult, 0, 1);\n\t\t * //output of mult is 12.\n\t\t *  @example\n\t\t * var mult = new Tone.Multiply(10);\n\t\t * var sig = new Tone.Signal(2).connect(mult);\n\t\t * //the output of mult is 20. \n\t\t */\n\t    Tone.Multiply = function (value) {\n\t        Tone.Signal.call(this);\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the input node is the same as the output node\n\t\t\t *  it is also the GainNode which handles the scaling of incoming signal\n\t\t\t *  \n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mult = this.input[0] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  the scaling parameter\n\t\t\t *  @type {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input[1] = this.output.gain;\n\t        this._param.value = Tone.defaultArg(value, 0);\n\t    };\n\t    Tone.extend(Tone.Multiply, Tone.Signal);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Multiply} this\n\t\t */\n\t    Tone.Multiply.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        this._mult.dispose();\n\t        this._mult = null;\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Multiply;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var neg = new Tone.Negate();\n\t\t * var sig = new Tone.Signal(-2).connect(neg);\n\t\t * //output of neg is positive 2. \n\t\t */\n\t    Tone.Negate = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  negation is done by multiplying by -1\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multiply = this.input = this.output = new Tone.Multiply(-1);\n\t    };\n\t    Tone.extend(Tone.Negate, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Negate} this\n\t\t */\n\t    Tone.Negate.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._multiply.dispose();\n\t        this._multiply = null;\n\t        return this;\n\t    };\n\t    return Tone.Negate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Subtract the signal connected to <code>input[1]</code> from the signal connected \n\t\t *         to <code>input[0]</code>. If an argument is provided in the constructor, the \n\t\t *         signals <code>.value</code> will be subtracted from the incoming signal.\n\t\t *\n\t\t *  @extends {Tone.Signal}\n\t\t *  @constructor\n\t\t *  @param {number=} value The value to subtract from the incoming signal. If the value\n\t\t *                         is omitted, it will subtract the second signal from the first.\n\t\t *  @example\n\t\t * var sub = new Tone.Subtract(1);\n\t\t * var sig = new Tone.Signal(4).connect(sub);\n\t\t * //the output of sub is 3. \n\t\t *  @example\n\t\t * var sub = new Tone.Subtract();\n\t\t * var sigA = new Tone.Signal(10);\n\t\t * var sigB = new Tone.Signal(2.5);\n\t\t * sigA.connect(sub, 0, 0);\n\t\t * sigB.connect(sub, 0, 1);\n\t\t * //output of sub is 7.5\n\t\t */\n\t    Tone.Subtract = function (value) {\n\t        Tone.Signal.call(this);\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sum = this.input[0] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  negate the input of the second input before connecting it\n\t\t\t *  to the summing node.\n\t\t\t *  @type {Tone.Negate}\n\t\t\t *  @private\n\t\t\t */\n\t        this._neg = new Tone.Negate();\n\t        /**\n\t\t\t *  the node where the value is set\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t        this._param = this.input[1] = new Tone.Signal(value);\n\t        this._param.chain(this._neg, this._sum);\n\t    };\n\t    Tone.extend(Tone.Subtract, Tone.Signal);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t */\n\t    Tone.Subtract.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        this._neg.dispose();\n\t        this._neg = null;\n\t        this._sum.disconnect();\n\t        this._sum = null;\n\t        return this;\n\t    };\n\t    return Tone.Subtract;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var gt0 = new Tone.GreaterThanZero();\n\t\t * var sig = new Tone.Signal(0.01).connect(gt0);\n\t\t * //the output of gt0 is 1. \n\t\t * sig.value = 0;\n\t\t * //the output of gt0 is 0. \n\t\t */\n\t    Tone.GreaterThanZero = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._thresh = this.output = new Tone.WaveShaper(function (val) {\n\t            if (val <= 0) {\n\t                return 0;\n\t            } else {\n\t                return 1;\n\t            }\n\t        }, 127);\n\t        /**\n\t\t\t *  scale the first thresholded signal by a large value.\n\t\t\t *  this will help with values which are very close to 0\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.input = new Tone.Multiply(10000);\n\t        //connections\n\t        this._scale.connect(this._thresh);\n\t    };\n\t    Tone.extend(Tone.GreaterThanZero, Tone.SignalBase);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThanZero} this\n\t\t */\n\t    Tone.GreaterThanZero.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._thresh.dispose();\n\t        this._thresh = null;\n\t        return this;\n\t    };\n\t    return Tone.GreaterThanZero;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.\n\t\t *          can compare two signals or a signal and a number. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number} [value=0] the value to compare to the incoming signal\n\t\t *  @example\n\t\t * var gt = new Tone.GreaterThan(2);\n\t\t * var sig = new Tone.Signal(4).connect(gt);\n\t\t * //output of gt is equal 1. \n\t\t */\n\t    Tone.GreaterThan = function (value) {\n\t        Tone.Signal.call(this);\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  subtract the amount from the incoming signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input[0] = new Tone.Subtract(value);\n\t        this.input[1] = this._param.input[1];\n\t        /**\n\t\t\t *  compare that amount to zero\n\t\t\t *  @type {Tone.GreaterThanZero}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gtz = this.output = new Tone.GreaterThanZero();\n\t        //connect\n\t        this._param.connect(this._gtz);\n\t    };\n\t    Tone.extend(Tone.GreaterThan, Tone.Signal);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThan} this\n\t\t */\n\t    Tone.GreaterThan.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        this._gtz.dispose();\n\t        this._gtz = null;\n\t        return this;\n\t    };\n\t    return Tone.GreaterThan;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Return the absolute value of an incoming signal. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var signal = new Tone.Signal(-1);\n\t\t * var abs = new Tone.Abs();\n\t\t * signal.connect(abs);\n\t\t * //the output of abs is 1. \n\t\t */\n\t    Tone.Abs = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  @type {Tone.LessThan}\n\t\t\t *  @private\n\t\t\t */\n\t        this._abs = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t            if (val === 0) {\n\t                return 0;\n\t            } else {\n\t                return Math.abs(val);\n\t            }\n\t        }, 127);\n\t    };\n\t    Tone.extend(Tone.Abs, Tone.SignalBase);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.Abs} this\n\t\t */\n\t    Tone.Abs.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._abs.dispose();\n\t        this._abs = null;\n\t        return this;\n\t    };\n\t    return Tone.Abs;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus\n\t\t *         values in the NormalRange. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {NormalRange} modulus The modulus to apply.\n\t\t *  @example\n\t\t * var mod = new Tone.Modulo(0.2)\n\t\t * var sig = new Tone.Signal(0.5).connect(mod);\n\t\t * //mod outputs 0.1\n\t\t */\n\t    Tone.Modulo = function (modulus) {\n\t        Tone.SignalBase.call(this);\n\t        this.createInsOuts(1, 0);\n\t        /**\n\t\t\t *  A waveshaper gets the integer multiple of \n\t\t\t *  the input signal and the modulus.\n\t\t\t *  @private\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(Math.pow(2, 16));\n\t        /**\n\t\t\t *  the integer multiple is multiplied by the modulus\n\t\t\t *  @type  {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multiply = new Tone.Multiply();\n\t        /**\n\t\t\t *  and subtracted from the input signal\n\t\t\t *  @type  {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subtract = this.output = new Tone.Subtract();\n\t        /**\n\t\t\t *  the modulus signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modSignal = new Tone.Signal(modulus);\n\t        //connections\n\t        this.input.fan(this._shaper, this._subtract);\n\t        this._modSignal.connect(this._multiply, 0, 0);\n\t        this._shaper.connect(this._multiply, 0, 1);\n\t        this._multiply.connect(this._subtract, 0, 1);\n\t        this._setWaveShaper(modulus);\n\t    };\n\t    Tone.extend(Tone.Modulo, Tone.SignalBase);\n\t    /**\n\t\t *  @param  {number}  mod  the modulus to apply\n\t\t *  @private\n\t\t */\n\t    Tone.Modulo.prototype._setWaveShaper = function (mod) {\n\t        this._shaper.setMap(function (val) {\n\t            var multiple = Math.floor((val + 0.0001) / mod);\n\t            return multiple;\n\t        });\n\t    };\n\t    /**\n\t\t * The modulus value.\n\t\t * @memberOf Tone.Modulo#\n\t\t * @type {NormalRange}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Modulo.prototype, 'value', {\n\t        get: function () {\n\t            return this._modSignal.value;\n\t        },\n\t        set: function (mod) {\n\t            this._modSignal.value = mod;\n\t            this._setWaveShaper(mod);\n\t        }\n\t    });\n\t    /**\n\t\t * clean up\n\t\t *  @returns {Tone.Modulo} this\n\t\t */\n\t    Tone.Modulo.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        this._multiply.dispose();\n\t        this._multiply = null;\n\t        this._subtract.dispose();\n\t        this._subtract = null;\n\t        this._modSignal.dispose();\n\t        this._modSignal = null;\n\t        return this;\n\t    };\n\t    return Tone.Modulo;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. \n\t\t *         See Tone.GainToAudio.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t *  var a2g = new Tone.AudioToGain();\n\t\t */\n\t    Tone.AudioToGain = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t            return (x + 1) / 2;\n\t        });\n\t    };\n\t    Tone.extend(Tone.AudioToGain, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AudioToGain} this\n\t\t */\n\t    Tone.AudioToGain.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._norm.dispose();\n\t        this._norm = null;\n\t        return this;\n\t    };\n\t    return Tone.AudioToGain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Evaluate an expression at audio rate. <br><br>\n\t\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {string} expr the expression to generate\n\t\t *  @example\n\t\t * //adds the signals from input[0] and input[1].\n\t\t * var expr = new Tone.Expr(\"$0 + $1\");\n\t\t */\n\t    Tone.Expr = function () {\n\t        Tone.SignalBase.call(this);\n\t        var expr = this._replacements(Array.prototype.slice.call(arguments));\n\t        var inputCount = this._parseInputs(expr);\n\t        /**\n\t\t\t *  hold onto all of the nodes for disposal\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._nodes = [];\n\t        /**\n\t\t\t *  The inputs. The length is determined by the expression. \n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.input = new Array(inputCount);\n\t        //create a gain for each input\n\t        for (var i = 0; i < inputCount; i++) {\n\t            this.input[i] = this.context.createGain();\n\t        }\n\t        //parse the syntax tree\n\t        var tree = this._parseTree(expr);\n\t        //evaluate the results\n\t        var result;\n\t        try {\n\t            result = this._eval(tree);\n\t        } catch (e) {\n\t            this._disposeNodes();\n\t            throw new Error('Tone.Expr: Could evaluate expression: ' + expr);\n\t        }\n\t        /**\n\t\t\t *  The output node is the result of the expression\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t        this.output = result;\n\t    };\n\t    Tone.extend(Tone.Expr, Tone.SignalBase);\n\t    //some helpers to cut down the amount of code\n\t    function applyBinary(Constructor, args, self) {\n\t        var op = new Constructor();\n\t        self._eval(args[0]).connect(op, 0, 0);\n\t        self._eval(args[1]).connect(op, 0, 1);\n\t        return op;\n\t    }\n\t    function applyUnary(Constructor, args, self) {\n\t        var op = new Constructor();\n\t        self._eval(args[0]).connect(op, 0, 0);\n\t        return op;\n\t    }\n\t    function getNumber(arg) {\n\t        return arg ? parseFloat(arg) : undefined;\n\t    }\n\t    function literalNumber(arg) {\n\t        return arg && arg.args ? parseFloat(arg.args) : undefined;\n\t    }\n\t    /*\n\t\t *  the Expressions that Tone.Expr can parse.\n\t\t *\n\t\t *  each expression belongs to a group and contains a regexp \n\t\t *  for selecting the operator as well as that operators method\n\t\t *  \n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Expr._Expressions = {\n\t        //values\n\t        'value': {\n\t            'signal': {\n\t                regexp: /^\\d+\\.\\d+|^\\d+/,\n\t                method: function (arg) {\n\t                    var sig = new Tone.Signal(getNumber(arg));\n\t                    return sig;\n\t                }\n\t            },\n\t            'input': {\n\t                regexp: /^\\$\\d/,\n\t                method: function (arg, self) {\n\t                    return self.input[getNumber(arg.substr(1))];\n\t                }\n\t            }\n\t        },\n\t        //syntactic glue\n\t        'glue': {\n\t            '(': { regexp: /^\\(/ },\n\t            ')': { regexp: /^\\)/ },\n\t            ',': { regexp: /^,/ }\n\t        },\n\t        //functions\n\t        'func': {\n\t            'abs': {\n\t                regexp: /^abs/,\n\t                method: applyUnary.bind(this, Tone.Abs)\n\t            },\n\t            'mod': {\n\t                regexp: /^mod/,\n\t                method: function (args, self) {\n\t                    var modulus = literalNumber(args[1]);\n\t                    var op = new Tone.Modulo(modulus);\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            },\n\t            'pow': {\n\t                regexp: /^pow/,\n\t                method: function (args, self) {\n\t                    var exp = literalNumber(args[1]);\n\t                    var op = new Tone.Pow(exp);\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            },\n\t            'a2g': {\n\t                regexp: /^a2g/,\n\t                method: function (args, self) {\n\t                    var op = new Tone.AudioToGain();\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            }\n\t        },\n\t        //binary expressions\n\t        'binary': {\n\t            '+': {\n\t                regexp: /^\\+/,\n\t                precedence: 1,\n\t                method: applyBinary.bind(this, Tone.Add)\n\t            },\n\t            '-': {\n\t                regexp: /^\\-/,\n\t                precedence: 1,\n\t                method: function (args, self) {\n\t                    //both unary and binary op\n\t                    if (args.length === 1) {\n\t                        return applyUnary(Tone.Negate, args, self);\n\t                    } else {\n\t                        return applyBinary(Tone.Subtract, args, self);\n\t                    }\n\t                }\n\t            },\n\t            '*': {\n\t                regexp: /^\\*/,\n\t                precedence: 0,\n\t                method: applyBinary.bind(this, Tone.Multiply)\n\t            }\n\t        },\n\t        //unary expressions\n\t        'unary': {\n\t            '-': {\n\t                regexp: /^\\-/,\n\t                method: applyUnary.bind(this, Tone.Negate)\n\t            },\n\t            '!': {\n\t                regexp: /^\\!/,\n\t                method: applyUnary.bind(this, Tone.NOT)\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  @param   {string} expr the expression string\n\t\t *  @return  {number}      the input count\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._parseInputs = function (expr) {\n\t        var inputArray = expr.match(/\\$\\d/g);\n\t        var inputMax = 0;\n\t        if (inputArray !== null) {\n\t            for (var i = 0; i < inputArray.length; i++) {\n\t                var inputNum = parseInt(inputArray[i].substr(1)) + 1;\n\t                inputMax = Math.max(inputMax, inputNum);\n\t            }\n\t        }\n\t        return inputMax;\n\t    };\n\t    /**\n\t\t *  @param   {Array} args \tan array of arguments\n\t\t *  @return  {string} the results of the replacements being replaced\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._replacements = function (args) {\n\t        var expr = args.shift();\n\t        for (var i = 0; i < args.length; i++) {\n\t            expr = expr.replace(/\\%/i, args[i]);\n\t        }\n\t        return expr;\n\t    };\n\t    /**\n\t\t *  tokenize the expression based on the Expressions object\n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._tokenize = function (expr) {\n\t        var position = -1;\n\t        var tokens = [];\n\t        while (expr.length > 0) {\n\t            expr = expr.trim();\n\t            var token = getNextToken(expr);\n\t            tokens.push(token);\n\t            expr = expr.substr(token.value.length);\n\t        }\n\t        function getNextToken(expr) {\n\t            for (var type in Tone.Expr._Expressions) {\n\t                var group = Tone.Expr._Expressions[type];\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    var reg = op.regexp;\n\t                    var match = expr.match(reg);\n\t                    if (match !== null) {\n\t                        return {\n\t                            type: type,\n\t                            value: match[0],\n\t                            method: op.method\n\t                        };\n\t                    }\n\t                }\n\t            }\n\t            throw new SyntaxError('Tone.Expr: Unexpected token ' + expr);\n\t        }\n\t        return {\n\t            next: function () {\n\t                return tokens[++position];\n\t            },\n\t            peek: function () {\n\t                return tokens[position + 1];\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  recursively parse the string expression into a syntax tree\n\t\t *  \n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._parseTree = function (expr) {\n\t        var lexer = this._tokenize(expr);\n\t        var isUndef = Tone.isUndef.bind(this);\n\t        function matchSyntax(token, syn) {\n\t            return !isUndef(token) && token.type === 'glue' && token.value === syn;\n\t        }\n\t        function matchGroup(token, groupName, prec) {\n\t            var ret = false;\n\t            var group = Tone.Expr._Expressions[groupName];\n\t            if (!isUndef(token)) {\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    if (op.regexp.test(token.value)) {\n\t                        if (!isUndef(prec)) {\n\t                            if (op.precedence === prec) {\n\t                                return true;\n\t                            }\n\t                        } else {\n\t                            return true;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            return ret;\n\t        }\n\t        function parseExpression(precedence) {\n\t            if (isUndef(precedence)) {\n\t                precedence = 5;\n\t            }\n\t            var expr;\n\t            if (precedence < 0) {\n\t                expr = parseUnary();\n\t            } else {\n\t                expr = parseExpression(precedence - 1);\n\t            }\n\t            var token = lexer.peek();\n\t            while (matchGroup(token, 'binary', precedence)) {\n\t                token = lexer.next();\n\t                expr = {\n\t                    operator: token.value,\n\t                    method: token.method,\n\t                    args: [\n\t                        expr,\n\t                        parseExpression(precedence - 1)\n\t                    ]\n\t                };\n\t                token = lexer.peek();\n\t            }\n\t            return expr;\n\t        }\n\t        function parseUnary() {\n\t            var token, expr;\n\t            token = lexer.peek();\n\t            if (matchGroup(token, 'unary')) {\n\t                token = lexer.next();\n\t                expr = parseUnary();\n\t                return {\n\t                    operator: token.value,\n\t                    method: token.method,\n\t                    args: [expr]\n\t                };\n\t            }\n\t            return parsePrimary();\n\t        }\n\t        function parsePrimary() {\n\t            var token, expr;\n\t            token = lexer.peek();\n\t            if (isUndef(token)) {\n\t                throw new SyntaxError('Tone.Expr: Unexpected termination of expression');\n\t            }\n\t            if (token.type === 'func') {\n\t                token = lexer.next();\n\t                return parseFunctionCall(token);\n\t            }\n\t            if (token.type === 'value') {\n\t                token = lexer.next();\n\t                return {\n\t                    method: token.method,\n\t                    args: token.value\n\t                };\n\t            }\n\t            if (matchSyntax(token, '(')) {\n\t                lexer.next();\n\t                expr = parseExpression();\n\t                token = lexer.next();\n\t                if (!matchSyntax(token, ')')) {\n\t                    throw new SyntaxError('Expected )');\n\t                }\n\t                return expr;\n\t            }\n\t            throw new SyntaxError('Tone.Expr: Parse error, cannot process token ' + token.value);\n\t        }\n\t        function parseFunctionCall(func) {\n\t            var token, args = [];\n\t            token = lexer.next();\n\t            if (!matchSyntax(token, '(')) {\n\t                throw new SyntaxError('Tone.Expr: Expected ( in a function call \"' + func.value + '\"');\n\t            }\n\t            token = lexer.peek();\n\t            if (!matchSyntax(token, ')')) {\n\t                args = parseArgumentList();\n\t            }\n\t            token = lexer.next();\n\t            if (!matchSyntax(token, ')')) {\n\t                throw new SyntaxError('Tone.Expr: Expected ) in a function call \"' + func.value + '\"');\n\t            }\n\t            return {\n\t                method: func.method,\n\t                args: args,\n\t                name: name\n\t            };\n\t        }\n\t        function parseArgumentList() {\n\t            var token, expr, args = [];\n\t            while (true) {\n\t                expr = parseExpression();\n\t                if (isUndef(expr)) {\n\t                    // TODO maybe throw exception?\n\t                    break;\n\t                }\n\t                args.push(expr);\n\t                token = lexer.peek();\n\t                if (!matchSyntax(token, ',')) {\n\t                    break;\n\t                }\n\t                lexer.next();\n\t            }\n\t            return args;\n\t        }\n\t        return parseExpression();\n\t    };\n\t    /**\n\t\t *  recursively evaluate the expression tree\n\t\t *  @param   {Object} tree \n\t\t *  @return  {AudioNode}      the resulting audio node from the expression\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._eval = function (tree) {\n\t        if (!Tone.isUndef(tree)) {\n\t            var node = tree.method(tree.args, this);\n\t            this._nodes.push(node);\n\t            return node;\n\t        }\n\t    };\n\t    /**\n\t\t *  dispose all the nodes\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._disposeNodes = function () {\n\t        for (var i = 0; i < this._nodes.length; i++) {\n\t            var node = this._nodes[i];\n\t            if (Tone.isFunction(node.dispose)) {\n\t                node.dispose();\n\t            } else if (Tone.isFunction(node.disconnect)) {\n\t                node.disconnect();\n\t            }\n\t            node = null;\n\t            this._nodes[i] = null;\n\t        }\n\t        this._nodes = null;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t */\n\t    Tone.Expr.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._disposeNodes();\n\t    };\n\t    return Tone.Expr;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t * var eqPowGain = new Tone.EqualPowerGain();\n\t\t */\n\t    Tone.EqualPowerGain = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._eqPower = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t            if (Math.abs(val) < 0.001) {\n\t                //should output 0 when input is 0\n\t                return 0;\n\t            } else {\n\t                return Tone.equalPowerScale(val);\n\t            }\n\t        }.bind(this), 4096);\n\t    };\n\t    Tone.extend(Tone.EqualPowerGain, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.EqualPowerGain} this\n\t\t */\n\t    Tone.EqualPowerGain.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._eqPower.dispose();\n\t        this._eqPower = null;\n\t        return this;\n\t    };\n\t    return Tone.EqualPowerGain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * @class  Tone.Crossfade provides equal power fading between two inputs.\n\t\t *         More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n\t\t *\n\t\t * @constructor\n\t\t * @extends {Tone.AudioNode}\n\t\t * @param {NormalRange} [initialFade=0.5]\n\t\t * @example\n\t\t * var crossFade = new Tone.CrossFade(0.5);\n\t\t * //connect effect A to crossfade from\n\t\t * //effect output 0 to crossfade input 0\n\t\t * effectA.connect(crossFade, 0, 0);\n\t\t * //connect effect B to crossfade from\n\t\t * //effect output 0 to crossfade input 1\n\t\t * effectB.connect(crossFade, 0, 1);\n\t\t * crossFade.fade.value = 0;\n\t\t * // ^ only effectA is output\n\t\t * crossFade.fade.value = 1;\n\t\t * // ^ only effectB is output\n\t\t * crossFade.fade.value = 0.5;\n\t\t * // ^ the two signals are mixed equally.\n\t\t */\n\t    Tone.CrossFade = function (initialFade) {\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(2, 1);\n\t        /**\n\t\t\t *  Alias for <code>input[0]</code>.\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.a = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  Alias for <code>input[1]</code>.\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.b = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t * \tThe mix between the two inputs. A fade value of 0\n\t\t\t * \twill output 100% <code>input[0]</code> and\n\t\t\t * \ta value of 1 will output 100% <code>input[1]</code>.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.fade = new Tone.Signal(Tone.defaultArg(initialFade, 0.5), Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t        this._equalPowerA = new Tone.EqualPowerGain();\n\t        /**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t        this._equalPowerB = new Tone.EqualPowerGain();\n\t        /**\n\t\t\t *  invert the incoming signal\n\t\t\t *  @private\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t        this._invert = new Tone.Expr('1 - $0');\n\t        //connections\n\t        this.a.connect(this.output);\n\t        this.b.connect(this.output);\n\t        this.fade.chain(this._equalPowerB, this.b.gain);\n\t        this.fade.chain(this._invert, this._equalPowerA, this.a.gain);\n\t        this._readOnly('fade');\n\t    };\n\t    Tone.extend(Tone.CrossFade, Tone.AudioNode);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.CrossFade} this\n\t\t */\n\t    Tone.CrossFade.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable('fade');\n\t        this._equalPowerA.dispose();\n\t        this._equalPowerA = null;\n\t        this._equalPowerB.dispose();\n\t        this._equalPowerB = null;\n\t        this.fade.dispose();\n\t        this.fade = null;\n\t        this._invert.dispose();\n\t        this._invert = null;\n\t        this.a.dispose();\n\t        this.a = null;\n\t        this.b.dispose();\n\t        this.b = null;\n\t        return this;\n\t    };\n\t    return Tone.CrossFade;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Filter is a filter which allows for all of the same native methods\n\t\t *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n\t\t *          Tone.Filter has the added ability to set the filter rolloff at -12\n\t\t *          (default), -24 and -48.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Frequency|Object} [frequency] The cutoff frequency of the filter.\n\t\t *  @param {string=} type The type of filter.\n\t\t *  @param {number=} rolloff The drop in decibels per octave after the cutoff frequency.\n\t\t *                            3 choices: -12, -24, and -48\n\t\t *  @example\n\t\t *  var filter = new Tone.Filter(200, \"highpass\");\n\t\t */\n\t    Tone.Filter = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'rolloff'\n\t        ], Tone.Filter);\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  the filter(s)\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filters = [];\n\t        /**\n\t\t\t *  The cutoff frequency of the filter.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune parameter\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(0, Tone.Type.Cents);\n\t        /**\n\t\t\t *  The gain of the filter, only used in certain filter types\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.gain = new Tone.Signal({\n\t            'value': options.gain,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The Q or Quality of the filter\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q);\n\t        /**\n\t\t\t *  the type of the filter\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  the rolloff value of the filter\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rolloff = options.rolloff;\n\t        //set the rolloff;\n\t        this.rolloff = options.rolloff;\n\t        this._readOnly([\n\t            'detune',\n\t            'frequency',\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Filter, Tone.AudioNode);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Filter.defaults = {\n\t        'type': 'lowpass',\n\t        'frequency': 350,\n\t        'rolloff': -12,\n\t        'Q': 1,\n\t        'gain': 0\n\t    };\n\t    /**\n\t\t * The type of the filter. Types: \"lowpass\", \"highpass\",\n\t\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n\t\t * @memberOf Tone.Filter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Filter.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            var types = [\n\t                'lowpass',\n\t                'highpass',\n\t                'bandpass',\n\t                'lowshelf',\n\t                'highshelf',\n\t                'notch',\n\t                'allpass',\n\t                'peaking'\n\t            ];\n\t            if (types.indexOf(type) === -1) {\n\t                throw new TypeError('Tone.Filter: invalid type ' + type);\n\t            }\n\t            this._type = type;\n\t            for (var i = 0; i < this._filters.length; i++) {\n\t                this._filters[i].type = type;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The rolloff of the filter which is the drop in db\n\t\t * per octave. Implemented internally by cascading filters.\n\t\t * Only accepts the values -12, -24, -48 and -96.\n\t\t * @memberOf Tone.Filter#\n\t\t * @type {number}\n\t\t * @name rolloff\n\t\t */\n\t    Object.defineProperty(Tone.Filter.prototype, 'rolloff', {\n\t        get: function () {\n\t            return this._rolloff;\n\t        },\n\t        set: function (rolloff) {\n\t            rolloff = parseInt(rolloff, 10);\n\t            var possibilities = [\n\t                -12,\n\t                -24,\n\t                -48,\n\t                -96\n\t            ];\n\t            var cascadingCount = possibilities.indexOf(rolloff);\n\t            //check the rolloff is valid\n\t            if (cascadingCount === -1) {\n\t                throw new RangeError('Tone.Filter: rolloff can only be -12, -24, -48 or -96');\n\t            }\n\t            cascadingCount += 1;\n\t            this._rolloff = rolloff;\n\t            //first disconnect the filters and throw them away\n\t            this.input.disconnect();\n\t            for (var i = 0; i < this._filters.length; i++) {\n\t                this._filters[i].disconnect();\n\t                this._filters[i] = null;\n\t            }\n\t            this._filters = new Array(cascadingCount);\n\t            for (var count = 0; count < cascadingCount; count++) {\n\t                var filter = this.context.createBiquadFilter();\n\t                filter.type = this._type;\n\t                this.frequency.connect(filter.frequency);\n\t                this.detune.connect(filter.detune);\n\t                this.Q.connect(filter.Q);\n\t                this.gain.connect(filter.gain);\n\t                this._filters[count] = filter;\n\t            }\n\t            //connect them up\n\t            var connectionChain = [this.input].concat(this._filters).concat([this.output]);\n\t            Tone.connectSeries.apply(Tone, connectionChain);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.Filter} this\n\t\t */\n\t    Tone.Filter.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        for (var i = 0; i < this._filters.length; i++) {\n\t            this._filters[i].disconnect();\n\t            this._filters[i] = null;\n\t        }\n\t        this._filters = null;\n\t        this._writable([\n\t            'detune',\n\t            'frequency',\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.Q.dispose();\n\t        this.frequency = null;\n\t        this.Q = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.gain.dispose();\n\t        this.gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Filter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Split the incoming signal into three bands (low, mid, high)\n\t\t *         with two crossover frequency controls.\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {Frequency|Object} [lowFrequency] the low/mid crossover frequency\n\t\t *  @param {Frequency} [highFrequency] the mid/high crossover frequency\n\t\t */\n\t    Tone.MultibandSplit = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ], Tone.MultibandSplit);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  the input\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = new Tone.Gain();\n\t        /**\n\t\t\t *  the outputs\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Array(3);\n\t        /**\n\t\t\t *  The low band. Alias for <code>output[0]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.low = this.output[0] = new Tone.Filter(0, 'lowpass');\n\t        /**\n\t\t\t *  the lower filter of the mid band\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowMidFilter = new Tone.Filter(0, 'highpass');\n\t        /**\n\t\t\t *  The mid band output. Alias for <code>output[1]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.mid = this.output[1] = new Tone.Filter(0, 'lowpass');\n\t        /**\n\t\t\t *  The high band output. Alias for <code>output[2]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.high = this.output[2] = new Tone.Filter(0, 'highpass');\n\t        /**\n\t\t\t *  The low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = new Tone.Signal(options.lowFrequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = new Tone.Signal(options.highFrequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The quality of all the filters\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q);\n\t        this.input.fan(this.low, this.high);\n\t        this.input.chain(this._lowMidFilter, this.mid);\n\t        //the frequency control signal\n\t        this.lowFrequency.connect(this.low.frequency);\n\t        this.lowFrequency.connect(this._lowMidFilter.frequency);\n\t        this.highFrequency.connect(this.mid.frequency);\n\t        this.highFrequency.connect(this.high.frequency);\n\t        //the Q value\n\t        this.Q.connect(this.low.Q);\n\t        this.Q.connect(this._lowMidFilter.Q);\n\t        this.Q.connect(this.mid.Q);\n\t        this.Q.connect(this.high.Q);\n\t        this._readOnly([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MultibandSplit, Tone.AudioNode);\n\t    /**\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MultibandSplit.defaults = {\n\t        'lowFrequency': 400,\n\t        'highFrequency': 2500,\n\t        'Q': 1\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MultibandSplit} this\n\t\t */\n\t    Tone.MultibandSplit.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t        this.low.dispose();\n\t        this.low = null;\n\t        this._lowMidFilter.dispose();\n\t        this._lowMidFilter = null;\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.high.dispose();\n\t        this.high = null;\n\t        this.lowFrequency.dispose();\n\t        this.lowFrequency = null;\n\t        this.highFrequency.dispose();\n\t        this.highFrequency = null;\n\t        this.Q.dispose();\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.MultibandSplit;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.EQ3 is a three band EQ with control over low, mid, and high gain as\n\t\t *         well as the low and high crossover frequencies.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *\n\t\t *  @param {Decibels|Object} [lowLevel] The gain applied to the lows.\n\t\t *  @param {Decibels} [midLevel] The gain applied to the mid.\n\t\t *  @param {Decibels} [highLevel] The gain applied to the high.\n\t\t *  @example\n\t\t * var eq = new Tone.EQ3(-10, 3, -20);\n\t\t */\n\t    Tone.EQ3 = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'low',\n\t            'mid',\n\t            'high'\n\t        ], Tone.EQ3);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  the output node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  the multiband split\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multibandSplit = this.input = new Tone.MultibandSplit({\n\t            'lowFrequency': options.lowFrequency,\n\t            'highFrequency': options.highFrequency\n\t        });\n\t        /**\n\t\t\t *  The gain for the lower signals\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowGain = new Tone.Gain(options.low, Tone.Type.Decibels);\n\t        /**\n\t\t\t *  The gain for the mid signals\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midGain = new Tone.Gain(options.mid, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Tone.Gain}\n\t\t\t * @private\n\t\t\t */\n\t        this._highGain = new Tone.Gain(options.high, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The gain in decibels of the low part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.low = this._lowGain.gain;\n\t        /**\n\t\t\t * The gain in decibels of the mid part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.mid = this._midGain.gain;\n\t        /**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.high = this._highGain.gain;\n\t        /**\n\t\t\t *  The Q value for all of the filters.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = this._multibandSplit.Q;\n\t        /**\n\t\t\t *  The low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = this._multibandSplit.lowFrequency;\n\t        /**\n\t\t\t *  The mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = this._multibandSplit.highFrequency;\n\t        //the frequency bands\n\t        this._multibandSplit.low.chain(this._lowGain, this.output);\n\t        this._multibandSplit.mid.chain(this._midGain, this.output);\n\t        this._multibandSplit.high.chain(this._highGain, this.output);\n\t        this._readOnly([\n\t            'low',\n\t            'mid',\n\t            'high',\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.EQ3, Tone.AudioNode);\n\t    /**\n\t\t *  the default values\n\t\t */\n\t    Tone.EQ3.defaults = {\n\t        'low': 0,\n\t        'mid': 0,\n\t        'high': 0,\n\t        'lowFrequency': 400,\n\t        'highFrequency': 2500\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.EQ3} this\n\t\t */\n\t    Tone.EQ3.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'low',\n\t            'mid',\n\t            'high',\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ]);\n\t        this._multibandSplit.dispose();\n\t        this._multibandSplit = null;\n\t        this.lowFrequency = null;\n\t        this.highFrequency = null;\n\t        this._lowGain.dispose();\n\t        this._lowGain = null;\n\t        this._midGain.dispose();\n\t        this._midGain = null;\n\t        this._highGain.dispose();\n\t        this._highGain = null;\n\t        this.low = null;\n\t        this.mid = null;\n\t        this.high = null;\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.EQ3;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Performs a linear scaling on an input signal.\n\t\t *          Scales a NormalRange input to between\n\t\t *          outputMin and outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t *  @example\n\t\t * var scale = new Tone.Scale(50, 100);\n\t\t * var signal = new Tone.Signal(0.5).connect(scale);\n\t\t * //the output of scale equals 75\n\t\t */\n\t    Tone.Scale = function (outputMin, outputMax) {\n\t        Tone.SignalBase.call(this);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._outputMin = Tone.defaultArg(outputMin, 0);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._outputMax = Tone.defaultArg(outputMax, 1);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.input = new Tone.Multiply(1);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._add = this.output = new Tone.Add(0);\n\t        this._scale.connect(this._add);\n\t        this._setRange();\n\t    };\n\t    Tone.extend(Tone.Scale, Tone.SignalBase);\n\t    /**\n\t\t * The minimum output value. This number is output when \n\t\t * the value input value is 0. \n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.Scale.prototype, 'min', {\n\t        get: function () {\n\t            return this._outputMin;\n\t        },\n\t        set: function (min) {\n\t            this._outputMin = min;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value. This number is output when \n\t\t * the value input value is 1. \n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.Scale.prototype, 'max', {\n\t        get: function () {\n\t            return this._outputMax;\n\t        },\n\t        set: function (max) {\n\t            this._outputMax = max;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t    Tone.Scale.prototype._setRange = function () {\n\t        this._add.value = this._outputMin;\n\t        this._scale.value = this._outputMax - this._outputMin;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Scale} this\n\t\t */\n\t    Tone.Scale.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._add.dispose();\n\t        this._add = null;\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        return this;\n\t    };\n\t    return Tone.Scale;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class  Performs an exponential scaling on an input signal.\n\t\t *          Scales a NormalRange value [0,1] exponentially\n\t\t *          to the output range of outputMin to outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t *  @param {number} [exponent=2] The exponent which scales the incoming signal.\n\t\t *  @example\n\t\t * var scaleExp = new Tone.ScaleExp(0, 100, 2);\n\t\t * var signal = new Tone.Signal(0.5).connect(scaleExp);\n\t\t */\n\t    Tone.ScaleExp = function (outputMin, outputMax, exponent) {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  scale the input to the output range\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.output = new Tone.Scale(outputMin, outputMax);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t        this._exp = this.input = new Tone.Pow(Tone.defaultArg(exponent, 2));\n\t        this._exp.connect(this._scale);\n\t    };\n\t    Tone.extend(Tone.ScaleExp, Tone.SignalBase);\n\t    /**\n\t\t * Instead of interpolating linearly between the <code>min</code> and \n\t\t * <code>max</code> values, setting the exponent will interpolate between\n\t\t * the two values with an exponential curve. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum output value. This number is output when \n\t\t * the value input value is 0. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'min', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value. This number is output when \n\t\t * the value input value is 1. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'max', {\n\t        get: function () {\n\t            return this._scale.max;\n\t        },\n\t        set: function (max) {\n\t            this._scale.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.ScaleExp} this\n\t\t */\n\t    Tone.ScaleExp.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._exp.dispose();\n\t        this._exp = null;\n\t        return this;\n\t    };\n\t    return Tone.ScaleExp;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  createDelay shim\n\t\t *  @private\n\t\t */\n\t    if (window.DelayNode && !AudioContext.prototype.createDelay) {\n\t        AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n\t\t *  @extends {Tone}\n\t\t *  @param {Time=} delayTime The delay applied to the incoming signal.\n\t\t *  @param {Time=} maxDelay The maximum delay time.\n\t\t */\n\t    Tone.Delay = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'delayTime',\n\t            'maxDelay'\n\t        ], Tone.Delay);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The native delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = this.input = this.output = this.context.createDelay(this.toSeconds(options.maxDelay));\n\t        /**\n\t\t\t *  The amount of time the incoming signal is\n\t\t\t *  delayed.\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = new Tone.Param({\n\t            'param': this._delayNode.delayTime,\n\t            'units': Tone.Type.Time,\n\t            'value': options.delayTime\n\t        });\n\t        this._readOnly('delayTime');\n\t    };\n\t    Tone.extend(Tone.Delay, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Delay.defaults = {\n\t        'maxDelay': 1,\n\t        'delayTime': 0\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Delay}  this\n\t\t */\n\t    Tone.Delay.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._delayNode.disconnect();\n\t        this._delayNode = null;\n\t        this._writable('delayTime');\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.Delay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Comb filters are basic building blocks for physical modeling. Read more\n\t\t *         about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [delayTime] The delay time of the filter.\n\t\t *  @param {NormalRange=} resonance The amount of feedback the filter has.\n\t\t */\n\t    Tone.FeedbackCombFilter = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'delayTime',\n\t            'resonance'\n\t        ], Tone.FeedbackCombFilter);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = this.input = this.output = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The amount of delay of the comb filter.\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delay.delayTime;\n\t        /**\n\t\t\t *  the feedback node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of feedback of the delayed signal.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._feedback.gain;\n\t        this._delay.chain(this._feedback, this._delay);\n\t        this._readOnly([\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FeedbackCombFilter, Tone.AudioNode);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackCombFilter.defaults = {\n\t        'delayTime': 0.1,\n\t        'resonance': 0.5\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackCombFilter} this\n\t\t */\n\t    Tone.FeedbackCombFilter.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this.delayTime = null;\n\t        this._feedback.dispose();\n\t        this._feedback = null;\n\t        this.resonance = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackCombFilter;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class  Get the current waveform data of the connected audio source.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Number=} size The size of the FFT. Value must be a power of\n\t\t *                       two in the range 32 to 32768.\n\t\t */\n\t    Tone.FFT = function () {\n\t        var options = Tone.defaults(arguments, ['size'], Tone.FFT);\n\t        options.type = Tone.Analyser.Type.FFT;\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The analyser node.\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Analyser}\n\t\t\t */\n\t        this._analyser = this.input = this.output = new Tone.Analyser(options);\n\t    };\n\t    Tone.extend(Tone.FFT, Tone.AudioNode);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FFT.defaults = { 'size': 1024 };\n\t    /**\n\t\t *  Gets the waveform of the audio source. Returns the waveform data\n\t\t *  of length [size](#size) as a Float32Array with values between -1 and 1.\n\t\t *  @returns {TypedArray}\n\t\t */\n\t    Tone.FFT.prototype.getValue = function () {\n\t        return this._analyser.getValue();\n\t    };\n\t    /**\n\t\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t\t *  @memberOf Tone.FFT#\n\t\t *  @type {Number}\n\t\t *  @name size\n\t\t */\n\t    Object.defineProperty(Tone.FFT.prototype, 'size', {\n\t        get: function () {\n\t            return this._analyser.size;\n\t        },\n\t        set: function (size) {\n\t            this._analyser.size = size;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.FFT}  this\n\t\t */\n\t    Tone.FFT.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._analyser.dispose();\n\t        this._analyser = null;\n\t    };\n\t    return Tone.FFT;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Follower is a  crude envelope follower which will follow\n\t\t *          the amplitude of an incoming signal.\n\t\t *          Take care with small (< 0.02) attack or decay values\n\t\t *          as follower has some ripple which is exaggerated\n\t\t *          at these values. Read more about envelope followers (also known\n\t\t *          as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Time|Object} [attack] The rate at which the follower rises.\n\t\t *  @param {Time=} release The rate at which the folower falls.\n\t\t *  @example\n\t\t * var follower = new Tone.Follower(0.2, 0.4);\n\t\t */\n\t    Tone.Follower = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'attack',\n\t            'release'\n\t        ], Tone.Follower);\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  @type {Tone.Abs}\n\t\t\t *  @private\n\t\t\t */\n\t        this._abs = new Tone.Abs();\n\t        /**\n\t\t\t *  the lowpass filter which smooths the input\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filter = this.context.createBiquadFilter();\n\t        this._filter.type = 'lowpass';\n\t        this._filter.frequency.value = 0;\n\t        this._filter.Q.value = -100;\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._frequencyValues = new Tone.WaveShaper();\n\t        /**\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sub = new Tone.Subtract();\n\t        /**\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = new Tone.Delay(this.blockTime);\n\t        /**\n\t\t\t *  this keeps it far from 0, even for very small differences\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mult = new Tone.Multiply(10000);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._attack = options.attack;\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._release = options.release;\n\t        //the smoothed signal to get the values\n\t        this.input.chain(this._abs, this._filter, this.output);\n\t        //the difference path\n\t        this._abs.connect(this._sub, 0, 1);\n\t        this._filter.chain(this._delay, this._sub);\n\t        //threshold the difference and use the thresh to set the frequency\n\t        this._sub.chain(this._mult, this._frequencyValues, this._filter.frequency);\n\t        //set the attack and release values in the table\n\t        this._setAttackRelease(this._attack, this._release);\n\t    };\n\t    Tone.extend(Tone.Follower, Tone.AudioNode);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Follower.defaults = {\n\t        'attack': 0.05,\n\t        'release': 0.5\n\t    };\n\t    /**\n\t\t *  sets the attack and release times in the wave shaper\n\t\t *  @param   {Time} attack\n\t\t *  @param   {Time} release\n\t\t *  @private\n\t\t */\n\t    Tone.Follower.prototype._setAttackRelease = function (attack, release) {\n\t        var minTime = this.blockTime;\n\t        attack = Tone.Time(attack).toFrequency();\n\t        release = Tone.Time(release).toFrequency();\n\t        attack = Math.max(attack, minTime);\n\t        release = Math.max(release, minTime);\n\t        this._frequencyValues.setMap(function (val) {\n\t            if (val <= 0) {\n\t                return attack;\n\t            } else {\n\t                return release;\n\t            }\n\t        });\n\t    };\n\t    /**\n\t\t * The attack time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Time}\n\t\t * @name attack\n\t\t */\n\t    Object.defineProperty(Tone.Follower.prototype, 'attack', {\n\t        get: function () {\n\t            return this._attack;\n\t        },\n\t        set: function (attack) {\n\t            this._attack = attack;\n\t            this._setAttackRelease(this._attack, this._release);\n\t        }\n\t    });\n\t    /**\n\t\t * The release time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Time}\n\t\t * @name release\n\t\t */\n\t    Object.defineProperty(Tone.Follower.prototype, 'release', {\n\t        get: function () {\n\t            return this._release;\n\t        },\n\t        set: function (release) {\n\t            this._release = release;\n\t            this._setAttackRelease(this._attack, this._release);\n\t        }\n\t    });\n\t    /**\n\t\t *  Borrows the connect method from Signal so that the output can be used\n\t\t *  as a Tone.Signal control signal.\n\t\t *  @function\n\t\t */\n\t    Tone.Follower.prototype.connect = Tone.Signal.prototype.connect;\n\t    /**\n\t\t *  dispose\n\t\t *  @returns {Tone.Follower} this\n\t\t */\n\t    Tone.Follower.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._filter.disconnect();\n\t        this._filter = null;\n\t        this._frequencyValues.disconnect();\n\t        this._frequencyValues = null;\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this._sub.disconnect();\n\t        this._sub = null;\n\t        this._abs.dispose();\n\t        this._abs = null;\n\t        this._mult.dispose();\n\t        this._mult = null;\n\t        this._curve = null;\n\t        return this;\n\t    };\n\t    return Tone.Follower;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.ScaledEnvelop is an envelope which can be scaled \n\t\t *         to any range. It's useful for applying an envelope \n\t\t *         to a frequency or any other non-NormalRange signal \n\t\t *         parameter. \n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var scaledEnv = new Tone.ScaledEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"min\" : 200,\n\t\t *  \t\"max\" : 2000\n\t\t *  });\n\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t */\n\t    Tone.ScaledEnvelope = function () {\n\t        //get all of the defaults\n\t        var options = Tone.defaults(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope);\n\t        Tone.Envelope.call(this, options);\n\t        options = Tone.defaultArg(options, Tone.ScaledEnvelope.defaults);\n\t        /** \n\t\t\t *  scale the incoming signal by an exponent\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t        this._exp = this.output = new Tone.Pow(options.exponent);\n\t        /**\n\t\t\t *  scale the signal to the desired range\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.output = new Tone.Scale(options.min, options.max);\n\t        this._sig.chain(this._exp, this._scale);\n\t    };\n\t    Tone.extend(Tone.ScaledEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.ScaledEnvelope.defaults = {\n\t        'min': 0,\n\t        'max': 1,\n\t        'exponent': 1\n\t    };\n\t    /**\n\t\t * The envelope's min output value. This is the value which it\n\t\t * starts at. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'min', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's max output value. In other words, the value\n\t\t * at the peak of the attack portion of the envelope. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'max', {\n\t        get: function () {\n\t            return this._scale.max;\n\t        },\n\t        set: function (max) {\n\t            this._scale.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's exponent value. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.ScaledEnvelope} this\n\t\t */\n\t    Tone.ScaledEnvelope.prototype.dispose = function () {\n\t        Tone.Envelope.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._exp.dispose();\n\t        this._exp = null;\n\t        return this;\n\t    };\n\t    return Tone.ScaledEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`\n\t\t *         it's got a `baseFrequency` and `octaves` parameter. \n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var env = new Tone.FrequencyEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"baseFrequency\" : \"C2\",\n\t\t *  \t\"octaves\" : 4\n\t\t *  });\n\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t */\n\t    Tone.FrequencyEnvelope = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope);\n\t        Tone.ScaledEnvelope.call(this, options);\n\t        //merge it with the frequency envelope defaults\n\t        options = Tone.defaultArg(options, Tone.FrequencyEnvelope.defaults);\n\t        /**\n\t\t\t *  Stores the octave value\n\t\t\t *  @type {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        //setup\n\t        this.baseFrequency = options.baseFrequency;\n\t        this.octaves = options.octaves;\n\t    };\n\t    Tone.extend(Tone.FrequencyEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.FrequencyEnvelope.defaults = {\n\t        'baseFrequency': 200,\n\t        'octaves': 4,\n\t        'exponent': 2\n\t    };\n\t    /**\n\t\t * The envelope's mininum output value. This is the value which it\n\t\t * starts at. \n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = this.toFrequency(min);\n\t            //also update the octaves\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t * The number of octaves above the baseFrequency that the\n\t\t * envelope will scale to.\n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            this._scale.max = this.baseFrequency * Math.pow(2, octaves);\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's exponent value. \n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FrequencyEnvelope} this\n\t\t */\n\t    Tone.FrequencyEnvelope.prototype.dispose = function () {\n\t        Tone.ScaledEnvelope.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.FrequencyEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Gate only passes a signal through when the incoming\n\t\t *          signal exceeds a specified threshold. To do this, Gate uses\n\t\t *          a Tone.Follower to follow the amplitude of the incoming signal.\n\t\t *          A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Decibels|Object} [threshold] The threshold above which the gate will open.\n\t\t *  @param {Time=} attack The follower's attack time\n\t\t *  @param {Time=} release The follower's release time\n\t\t *  @example\n\t\t * var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();\n\t\t * var mic = new Tone.UserMedia().connect(gate);\n\t\t * //the gate will only pass through the incoming\n\t\t * //signal when it's louder than -30db\n\t\t */\n\t    Tone.Gate = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'threshold',\n\t            'attack',\n\t            'release'\n\t        ], Tone.Gate);\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t        this._follower = new Tone.Follower(options.attack, options.release);\n\t        /**\n\t\t\t *  @type {Tone.GreaterThan}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gt = new Tone.GreaterThan(Tone.dbToGain(options.threshold));\n\t        //the connections\n\t        this.input.connect(this.output);\n\t        //the control signal\n\t        this.input.chain(this._gt, this._follower, this.output.gain);\n\t    };\n\t    Tone.extend(Tone.Gate, Tone.AudioNode);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Gate.defaults = {\n\t        'attack': 0.1,\n\t        'release': 0.1,\n\t        'threshold': -40\n\t    };\n\t    /**\n\t\t * The threshold of the gate in decibels\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Decibels}\n\t\t * @name threshold\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'threshold', {\n\t        get: function () {\n\t            return Tone.gainToDb(this._gt.value);\n\t        },\n\t        set: function (thresh) {\n\t            this._gt.value = Tone.dbToGain(thresh);\n\t        }\n\t    });\n\t    /**\n\t\t * The attack speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Time}\n\t\t * @name attack\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'attack', {\n\t        get: function () {\n\t            return this._follower.attack;\n\t        },\n\t        set: function (attackTime) {\n\t            this._follower.attack = attackTime;\n\t        }\n\t    });\n\t    /**\n\t\t * The release speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Time}\n\t\t * @name release\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'release', {\n\t        get: function () {\n\t            return this._follower.release;\n\t        },\n\t        set: function (releaseTime) {\n\t            this._follower.release = releaseTime;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Gate} this\n\t\t */\n\t    Tone.Gate.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._follower.dispose();\n\t        this._gt.dispose();\n\t        this._follower = null;\n\t        this._gt = null;\n\t        return this;\n\t    };\n\t    return Tone.Gate;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * @class Tone.TickSignal extends Tone.TimelineSignal, but adds the capability\n\t\t *        to calculate the number of elapsed ticks. exponential and target curves\n\t\t *        are approximated with multiple linear ramps.\n\t\t *\n\t\t *        Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos, for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n\t\t *        describing integrating timing functions for tempo calculations.\n\t\t *\n\t\t * @param {Number} value The initial value of the signal\n\t\t * @extends {Tone.TimelineSignal}\n\t\t */\n\t    Tone.TickSignal = function (value) {\n\t        value = Tone.defaultArg(value, 1);\n\t        Tone.TimelineSignal.call(this, {\n\t            'units': Tone.Type.Ticks,\n\t            'value': value\n\t        });\n\t        //extend the memory\n\t        this._events.memory = Infinity;\n\t    };\n\t    Tone.extend(Tone.TickSignal, Tone.TimelineSignal);\n\t    /**\n\t\t * Wraps Tone.TimelineSignal methods so that they also\n\t\t * record the ticks.\n\t\t * @param  {Function} method\n\t\t * @return {Function}\n\t\t * @private\n\t\t */\n\t    function _wrapScheduleMethods(method) {\n\t        return function (value, time) {\n\t            time = this.toSeconds(time);\n\t            method.apply(this, arguments);\n\t            var event = this._events.get(time);\n\t            var previousEvent = this._events.previousEvent(event);\n\t            var ticksUntilTime = this._getTickUntilEvent(previousEvent, time - this.sampleTime);\n\t            event.ticks = Math.max(ticksUntilTime, 0);\n\t            return this;\n\t        };\n\t    }\n\t    Tone.TickSignal.prototype.setValueAtTime = _wrapScheduleMethods(Tone.TimelineSignal.prototype.setValueAtTime);\n\t    Tone.TickSignal.prototype.linearRampToValueAtTime = _wrapScheduleMethods(Tone.TimelineSignal.prototype.linearRampToValueAtTime);\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value\n\t\t *  @param {Time} startTime\n\t\t *  @param {number} timeConstant\n\t\t *  @returns {Tone.TickSignal} this\n\t\t */\n\t    Tone.TickSignal.prototype.setTargetAtTime = function (value, time, constant) {\n\t        //aproximate it with multiple linear ramps\n\t        time = this.toSeconds(time);\n\t        this.setRampPoint(time);\n\t        value = this._fromUnits(value);\n\t        //start from previously scheduled value\n\t        var prevEvent = this._events.get(time);\n\t        var segments = 5;\n\t        for (var i = 0; i <= segments; i++) {\n\t            var segTime = constant * i + time;\n\t            var rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, value, constant, segTime);\n\t            this.linearRampToValueAtTime(this._toUnits(rampVal), segTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from\n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *  @param  {number} value\n\t\t *  @param  {Time} endTime\n\t\t *  @returns {Tone.TickSignal} this\n\t\t */\n\t    Tone.TickSignal.prototype.exponentialRampToValueAtTime = function (value, time) {\n\t        //aproximate it with multiple linear ramps\n\t        time = this.toSeconds(time);\n\t        value = this._fromUnits(value);\n\t        //start from previously scheduled value\n\t        var prevEvent = this._events.get(time);\n\t        if (prevEvent === null) {\n\t            prevEvent = {\n\t                'value': this._initial,\n\t                'time': 0\n\t            };\n\t        }\n\t        var segments = 5;\n\t        var segmentDur = (time - prevEvent.time) / segments;\n\t        for (var i = 0; i <= segments; i++) {\n\t            var segTime = segmentDur * i + prevEvent.time;\n\t            var rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, value, segTime);\n\t            this.linearRampToValueAtTime(this._toUnits(rampVal), segTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Returns the tick value at the time. Takes into account\n\t\t * any automation curves scheduled on the signal.\n\t\t * @private\n\t\t * @param  {Time} time The time to get the tick count at\n\t\t * @return {Ticks}      The number of ticks which have elapsed at the time\n\t\t *                          given any automations.\n\t\t */\n\t    Tone.TickSignal.prototype._getTickUntilEvent = function (event, time) {\n\t        if (event === null) {\n\t            event = {\n\t                'ticks': 0,\n\t                'time': 0\n\t            };\n\t        }\n\t        var val0 = this.getValueAtTime(event.time);\n\t        var val1 = this.getValueAtTime(time);\n\t        return 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t    };\n\t    /**\n\t\t * Returns the tick value at the time. Takes into account\n\t\t * any automation curves scheduled on the signal.\n\t\t * @param  {Time} time The time to get the tick count at\n\t\t * @return {Ticks}      The number of ticks which have elapsed at the time\n\t\t *                          given any automations.\n\t\t */\n\t    Tone.TickSignal.prototype.getTickAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        var event = this._events.get(time);\n\t        return this._getTickUntilEvent(event, time);\n\t    };\n\t    /**\n\t\t * Return the elapsed time of the number of ticks from the given time\n\t\t * @param {Ticks} ticks The number of ticks to calculate\n\t\t * @param  {Time} time The time to get the next tick from\n\t\t * @return {Seconds} The duration of the number of ticks from the given time in seconds\n\t\t */\n\t    Tone.TickSignal.prototype.getDurationOfTicks = function (ticks, time) {\n\t        time = this.toSeconds(time);\n\t        var currentTick = this.getTickAtTime(time);\n\t        return this.getTimeOfTick(currentTick + ticks) - time;\n\t    };\n\t    /**\n\t\t * Given a tick, returns the time that tick occurs at.\n\t\t * @param  {Ticks} tick\n\t\t * @return {Time}      The time that the tick occurs.\n\t\t */\n\t    Tone.TickSignal.prototype.getTimeOfTick = function (tick) {\n\t        var before = this._events.get(tick, 'ticks');\n\t        var after = this._events.getAfter(tick, 'ticks');\n\t        if (before && before.ticks === tick) {\n\t            return before.time;\n\t        } else if (before && after && after.type === Tone.TimelineSignal.Type.Linear && before.value !== after.value) {\n\t            var val0 = this.getValueAtTime(before.time);\n\t            var val1 = this.getValueAtTime(after.time);\n\t            var delta = (val1 - val0) / (after.time - before.time);\n\t            var k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t            var sol1 = (-val0 + k) / delta;\n\t            var sol2 = (-val0 - k) / delta;\n\t            return (sol1 > 0 ? sol1 : sol2) + before.time;\n\t        } else if (before) {\n\t            if (before.value === 0) {\n\t                return Infinity;\n\t            } else {\n\t                return before.time + (tick - before.ticks) / before.value;\n\t            }\n\t        } else {\n\t            return tick / this._initial;\n\t        }\n\t    };\n\t    return Tone.TickSignal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A Timeline State. Provides the methods: <code>setStateAtTime(\"state\", time)</code>\n\t\t *          and <code>getValueAtTime(time)</code>.\n\t\t *\n\t\t *  @extends {Tone.Timeline}\n\t\t *  @param {String} initial The initial state of the TimelineState. \n\t\t *                          Defaults to <code>undefined</code>\n\t\t */\n\t    Tone.TimelineState = function (initial) {\n\t        Tone.Timeline.call(this);\n\t        /**\n\t\t\t *  The initial state\n\t\t\t *  @private\n\t\t\t *  @type {String}\n\t\t\t */\n\t        this._initial = initial;\n\t    };\n\t    Tone.extend(Tone.TimelineState, Tone.Timeline);\n\t    /**\n\t\t *  Returns the scheduled state scheduled before or at\n\t\t *  the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t */\n\t    Tone.TimelineState.prototype.getValueAtTime = function (time) {\n\t        var event = this.get(time);\n\t        if (event !== null) {\n\t            return event.state;\n\t        } else {\n\t            return this._initial;\n\t        }\n\t    };\n\t    /**\n\t\t *  Add a state to the timeline.\n\t\t *  @param  {String}  state The name of the state to set.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.TimelineState} this\n\t\t */\n\t    Tone.TimelineState.prototype.setStateAtTime = function (state, time) {\n\t        this.add({\n\t            'state': state,\n\t            'time': time\n\t        });\n\t        return this;\n\t    };\n\t    return Tone.TimelineState;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A sample accurate clock which provides a callback at the given rate. \n\t\t *          While the callback is not sample-accurate (it is still susceptible to\n\t\t *          loose JS timing), the time passed in as the argument to the callback\n\t\t *          is precise. For most applications, it is better to use Tone.Transport\n\t\t *          instead of the Clock by itself since you can synchronize multiple callbacks.\n\t\t *\n\t\t * \t@constructor\n\t\t *  @extends {Tone.Emitter}\n\t\t * \t@param {function} callback The callback to be invoked with the time of the audio event\n\t\t * \t@param {Frequency} frequency The rate of the callback\n\t\t * \t@example\n\t\t * //the callback will be invoked approximately once a second\n\t\t * //and will print the time exactly once a second apart.\n\t\t * var clock = new Tone.Clock(function(time){\n\t\t * \tconsole.log(time);\n\t\t * }, 1);\n\t\t */\n\t    Tone.Clock = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'callback',\n\t            'frequency'\n\t        ], Tone.Clock);\n\t        Tone.Emitter.call(this);\n\t        /**\n\t\t\t *  The callback function to invoke at the scheduled tick.\n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  The next time the callback is scheduled.\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._nextTick = 0;\n\t        /**\n\t\t\t *  The last state of the clock.\n\t\t\t *  @type  {State}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lastState = Tone.State.Stopped;\n\t        /**\n\t\t\t *  The rate the callback function should be invoked. \n\t\t\t *  @type  {BPM}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.TickSignal(options.frequency, Tone.Type.Frequency);\n\t        this._readOnly('frequency');\n\t        /**\n\t\t\t *  The number of times the callback was invoked. Starts counting at 0\n\t\t\t *  and increments after the callback was invoked. \n\t\t\t *  @type {Ticks}\n\t\t\t *  @readOnly\n\t\t\t */\n\t        this.ticks = 0;\n\t        /**\n\t\t\t *  The state timeline\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  The loop function bound to its context. \n\t\t\t *  This is necessary to remove the event in the end.\n\t\t\t *  @type {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._boundLoop = this._loop.bind(this);\n\t        //bind a callback to the worker thread\n\t        this.context.on('tick', this._boundLoop);\n\t    };\n\t    Tone.extend(Tone.Clock, Tone.Emitter);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Clock.defaults = {\n\t        'callback': Tone.noOp,\n\t        'frequency': 1\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Clock#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Clock.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the clock at the given time. Optionally pass in an offset\n\t\t *  of where to start the tick counter from.\n\t\t *  @param  {Time=}  time    The time the clock should start\n\t\t *  @param  {Ticks=}  offset  Where the tick counter starts counting from.\n\t\t *  @return  {Tone.Clock}  this\n\t\t */\n\t    Tone.Clock.prototype.start = function (time, offset) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) !== Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Started, time);\n\t            this._state.get(time).offset = offset;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.Clock} this\n\t\t *  @example\n\t\t * clock.stop();\n\t\t */\n\t    Tone.Clock.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the clock. Pausing does not reset the tick counter.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.Clock} this\n\t\t */\n\t    Tone.Clock.prototype.pause = function (time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Paused, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The scheduling loop.\n\t\t *  @private\n\t\t */\n\t    Tone.Clock.prototype._loop = function () {\n\t        //the end of the update interval\n\t        var endTime = this.now() + this.context.updateInterval;\n\t        //the current event at the time of the loop\n\t        var event = this._state.get(endTime);\n\t        if (event) {\n\t            //state change events\n\t            if (event.state !== this._lastState) {\n\t                this._lastState = event.state;\n\t                switch (event.state) {\n\t                case Tone.State.Started:\n\t                    if (!Tone.isUndef(event.offset)) {\n\t                        this.ticks = event.offset;\n\t                    }\n\t                    this._nextTick = event.time;\n\t                    this.emit('start', event.time, this.ticks);\n\t                    break;\n\t                case Tone.State.Stopped:\n\t                    this.ticks = 0;\n\t                    this.emit('stop', event.time);\n\t                    break;\n\t                case Tone.State.Paused:\n\t                    this.emit('pause', event.time);\n\t                    break;\n\t                }\n\t            }\n\t            //all the tick events\n\t            while (endTime > this._nextTick && this._state) {\n\t                var tickTime = this._nextTick;\n\t                if (this.frequency) {\n\t                    this._nextTick += this.frequency.getDurationOfTicks(1, this._nextTick);\n\t                    if (event.state === Tone.State.Started) {\n\t                        try {\n\t                            this.callback(tickTime);\n\t                            this.ticks++;\n\t                        } catch (e) {\n\t                            this.ticks++;\n\t                            throw e;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the scheduled state at the given time.\n\t\t *  @param  {Time}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t *  @example\n\t\t * clock.start(\"+0.1\");\n\t\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t\t */\n\t    Tone.Clock.prototype.getStateAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        return this._state.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Clock} this\n\t\t */\n\t    Tone.Clock.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this.context.off('tick', this._boundLoop);\n\t        this._writable('frequency');\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._boundLoop = null;\n\t        this._nextTick = Infinity;\n\t        this.callback = null;\n\t        this._state.dispose();\n\t        this._state = null;\n\t    };\n\t    return Tone.Clock;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Similar to Tone.Timeline, but all events represent\n\t\t *         intervals with both \"time\" and \"duration\" times. The \n\t\t *         events are placed in a tree structure optimized\n\t\t *         for querying an intersection point with the timeline\n\t\t *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n\t\t *         to represent the data.\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.IntervalTimeline = function () {\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The root node of the inteval tree\n\t\t\t *  @type  {IntervalNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._root = null;\n\t        /**\n\t\t\t *  Keep track of the length of the timeline.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._length = 0;\n\t    };\n\t    Tone.extend(Tone.IntervalTimeline);\n\t    /**\n\t\t *  The event to add to the timeline. All events must \n\t\t *  have a time and duration value\n\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.add = function (event) {\n\t        if (Tone.isUndef(event.time) || Tone.isUndef(event.duration)) {\n\t            throw new Error('Tone.IntervalTimeline: events must have time and duration parameters');\n\t        }\n\t        var node = new IntervalNode(event.time, event.time + event.duration, event);\n\t        if (this._root === null) {\n\t            this._root = node;\n\t        } else {\n\t            this._root.insert(node);\n\t        }\n\t        this._length++;\n\t        // Restructure tree to be balanced\n\t        while (node !== null) {\n\t            node.updateHeight();\n\t            node.updateMax();\n\t            this._rebalance(node);\n\t            node = node.parent;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove an event from the timeline.\n\t\t *  @param  {Object}  event  The event to remove from the timeline\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.remove = function (event) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(event.time, results);\n\t            for (var i = 0; i < results.length; i++) {\n\t                var node = results[i];\n\t                if (node.event === event) {\n\t                    this._removeNode(node);\n\t                    this._length--;\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The number of items in the timeline.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.IntervalTimeline#\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.IntervalTimeline.prototype, 'length', {\n\t        get: function () {\n\t            return this._length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Remove events whose time time is after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.cancel = function (after) {\n\t        this.forEachAfter(after, function (event) {\n\t            this.remove(event);\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the root node as the given node\n\t\t *  @param {IntervalNode} node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._setRoot = function (node) {\n\t        this._root = node;\n\t        if (this._root !== null) {\n\t            this._root.parent = null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Replace the references to the node in the node's parent\n\t\t *  with the replacement node.\n\t\t *  @param  {IntervalNode}  node        \n\t\t *  @param  {IntervalNode}  replacement \n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._replaceNodeInParent = function (node, replacement) {\n\t        if (node.parent !== null) {\n\t            if (node.isLeftChild()) {\n\t                node.parent.left = replacement;\n\t            } else {\n\t                node.parent.right = replacement;\n\t            }\n\t            this._rebalance(node.parent);\n\t        } else {\n\t            this._setRoot(replacement);\n\t        }\n\t    };\n\t    /**\n\t\t *  Remove the node from the tree and replace it with \n\t\t *  a successor which follows the schema.\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._removeNode = function (node) {\n\t        if (node.left === null && node.right === null) {\n\t            this._replaceNodeInParent(node, null);\n\t        } else if (node.right === null) {\n\t            this._replaceNodeInParent(node, node.left);\n\t        } else if (node.left === null) {\n\t            this._replaceNodeInParent(node, node.right);\n\t        } else {\n\t            var balance = node.getBalance();\n\t            var replacement, temp;\n\t            if (balance > 0) {\n\t                if (node.left.right === null) {\n\t                    replacement = node.left;\n\t                    replacement.right = node.right;\n\t                    temp = replacement;\n\t                } else {\n\t                    replacement = node.left.right;\n\t                    while (replacement.right !== null) {\n\t                        replacement = replacement.right;\n\t                    }\n\t                    replacement.parent.right = replacement.left;\n\t                    temp = replacement.parent;\n\t                    replacement.left = node.left;\n\t                    replacement.right = node.right;\n\t                }\n\t            } else {\n\t                if (node.right.left === null) {\n\t                    replacement = node.right;\n\t                    replacement.left = node.left;\n\t                    temp = replacement;\n\t                } else {\n\t                    replacement = node.right.left;\n\t                    while (replacement.left !== null) {\n\t                        replacement = replacement.left;\n\t                    }\n\t                    replacement.parent = replacement.parent;\n\t                    replacement.parent.left = replacement.right;\n\t                    temp = replacement.parent;\n\t                    replacement.left = node.left;\n\t                    replacement.right = node.right;\n\t                }\n\t            }\n\t            if (node.parent !== null) {\n\t                if (node.isLeftChild()) {\n\t                    node.parent.left = replacement;\n\t                } else {\n\t                    node.parent.right = replacement;\n\t                }\n\t            } else {\n\t                this._setRoot(replacement);\n\t            }\n\t            // this._replaceNodeInParent(node, replacement);\n\t            this._rebalance(temp);\n\t        }\n\t        node.dispose();\n\t    };\n\t    /**\n\t\t *  Rotate the tree to the left\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rotateLeft = function (node) {\n\t        var parent = node.parent;\n\t        var isLeftChild = node.isLeftChild();\n\t        // Make node.right the new root of this sub tree (instead of node)\n\t        var pivotNode = node.right;\n\t        node.right = pivotNode.left;\n\t        pivotNode.left = node;\n\t        if (parent !== null) {\n\t            if (isLeftChild) {\n\t                parent.left = pivotNode;\n\t            } else {\n\t                parent.right = pivotNode;\n\t            }\n\t        } else {\n\t            this._setRoot(pivotNode);\n\t        }\n\t    };\n\t    /**\n\t\t *  Rotate the tree to the right\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rotateRight = function (node) {\n\t        var parent = node.parent;\n\t        var isLeftChild = node.isLeftChild();\n\t        // Make node.left the new root of this sub tree (instead of node)\n\t        var pivotNode = node.left;\n\t        node.left = pivotNode.right;\n\t        pivotNode.right = node;\n\t        if (parent !== null) {\n\t            if (isLeftChild) {\n\t                parent.left = pivotNode;\n\t            } else {\n\t                parent.right = pivotNode;\n\t            }\n\t        } else {\n\t            this._setRoot(pivotNode);\n\t        }\n\t    };\n\t    /**\n\t\t *  Balance the BST\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rebalance = function (node) {\n\t        var balance = node.getBalance();\n\t        if (balance > 1) {\n\t            if (node.left.getBalance() < 0) {\n\t                this._rotateLeft(node.left);\n\t            } else {\n\t                this._rotateRight(node);\n\t            }\n\t        } else if (balance < -1) {\n\t            if (node.right.getBalance() > 0) {\n\t                this._rotateRight(node.right);\n\t            } else {\n\t                this._rotateLeft(node);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Get an event whose time and duration span the give time. Will\n\t\t *  return the match whose \"time\" value is closest to the given time.\n\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t *  @return  {Object}  The event which spans the desired time\n\t\t */\n\t    Tone.IntervalTimeline.prototype.get = function (time) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(time, results);\n\t            if (results.length > 0) {\n\t                var max = results[0];\n\t                for (var i = 1; i < results.length; i++) {\n\t                    if (results[i].low > max.low) {\n\t                        max = results[i];\n\t                    }\n\t                }\n\t                return max.event;\n\t            }\n\t        }\n\t        return null;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the timeline.\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEach = function (callback) {\n\t        if (this._root !== null) {\n\t            var allNodes = [];\n\t            this._root.traverse(function (node) {\n\t                allNodes.push(node);\n\t            });\n\t            for (var i = 0; i < allNodes.length; i++) {\n\t                var ev = allNodes[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array in which the given time\n\t\t *  overlaps with the time and duration time of the event.\n\t\t *  @param  {Number}  time The time to check if items are overlapping\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEachAtTime = function (time, callback) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(time, results);\n\t            for (var i = results.length - 1; i >= 0; i--) {\n\t                var ev = results[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array in which the time is greater\n\t\t *  than the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEachAfter = function (time, callback) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.searchAfter(time, results);\n\t            for (var i = results.length - 1; i >= 0; i--) {\n\t                var ev = results[i].event;\n\t                callback(ev);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.dispose = function () {\n\t        var allNodes = [];\n\t        if (this._root !== null) {\n\t            this._root.traverse(function (node) {\n\t                allNodes.push(node);\n\t            });\n\t        }\n\t        for (var i = 0; i < allNodes.length; i++) {\n\t            allNodes[i].dispose();\n\t        }\n\t        allNodes = null;\n\t        this._root = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tINTERVAL NODE HELPER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Represents a node in the binary search tree, with the addition\n\t\t *  of a \"high\" value which keeps track of the highest value of\n\t\t *  its children. \n\t\t *  References: \n\t\t *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n\t\t *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n\t\t *  @param {Number} low\n\t\t *  @param {Number} high\n\t\t *  @private\n\t\t */\n\t    var IntervalNode = function (low, high, event) {\n\t        //the event container\n\t        this.event = event;\n\t        //the low value\n\t        this.low = low;\n\t        //the high value\n\t        this.high = high;\n\t        //the high value for this and all child nodes\n\t        this.max = this.high;\n\t        //the nodes to the left\n\t        this._left = null;\n\t        //the nodes to the right\n\t        this._right = null;\n\t        //the parent node\n\t        this.parent = null;\n\t        //the number of child nodes\n\t        this.height = 0;\n\t    };\n\t    /** \n\t\t *  Insert a node into the correct spot in the tree\n\t\t *  @param  {IntervalNode}  node\n\t\t */\n\t    IntervalNode.prototype.insert = function (node) {\n\t        if (node.low <= this.low) {\n\t            if (this.left === null) {\n\t                this.left = node;\n\t            } else {\n\t                this.left.insert(node);\n\t            }\n\t        } else {\n\t            if (this.right === null) {\n\t                this.right = node;\n\t            } else {\n\t                this.right.insert(node);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Search the tree for nodes which overlap \n\t\t *  with the given point\n\t\t *  @param  {Number}  point  The point to query\n\t\t *  @param  {Array}  results  The array to put the results\n\t\t */\n\t    IntervalNode.prototype.search = function (point, results) {\n\t        // If p is to the right of the rightmost point of any interval\n\t        // in this node and all children, there won't be any matches.\n\t        if (point > this.max) {\n\t            return;\n\t        }\n\t        // Search left children\n\t        if (this.left !== null) {\n\t            this.left.search(point, results);\n\t        }\n\t        // Check this node\n\t        if (this.low <= point && this.high > point) {\n\t            results.push(this);\n\t        }\n\t        // If p is to the left of the time of this interval,\n\t        // then it can't be in any child to the right.\n\t        if (this.low > point) {\n\t            return;\n\t        }\n\t        // Search right children\n\t        if (this.right !== null) {\n\t            this.right.search(point, results);\n\t        }\n\t    };\n\t    /**\n\t\t *  Search the tree for nodes which are less \n\t\t *  than the given point\n\t\t *  @param  {Number}  point  The point to query\n\t\t *  @param  {Array}  results  The array to put the results\n\t\t */\n\t    IntervalNode.prototype.searchAfter = function (point, results) {\n\t        // Check this node\n\t        if (this.low >= point) {\n\t            results.push(this);\n\t            if (this.left !== null) {\n\t                this.left.searchAfter(point, results);\n\t            }\n\t        }\n\t        // search the right side\n\t        if (this.right !== null) {\n\t            this.right.searchAfter(point, results);\n\t        }\n\t    };\n\t    /**\n\t\t *  Invoke the callback on this element and both it's branches\n\t\t *  @param  {Function}  callback\n\t\t */\n\t    IntervalNode.prototype.traverse = function (callback) {\n\t        callback(this);\n\t        if (this.left !== null) {\n\t            this.left.traverse(callback);\n\t        }\n\t        if (this.right !== null) {\n\t            this.right.traverse(callback);\n\t        }\n\t    };\n\t    /**\n\t\t *  Update the height of the node\n\t\t */\n\t    IntervalNode.prototype.updateHeight = function () {\n\t        if (this.left !== null && this.right !== null) {\n\t            this.height = Math.max(this.left.height, this.right.height) + 1;\n\t        } else if (this.right !== null) {\n\t            this.height = this.right.height + 1;\n\t        } else if (this.left !== null) {\n\t            this.height = this.left.height + 1;\n\t        } else {\n\t            this.height = 0;\n\t        }\n\t    };\n\t    /**\n\t\t *  Update the height of the node\n\t\t */\n\t    IntervalNode.prototype.updateMax = function () {\n\t        this.max = this.high;\n\t        if (this.left !== null) {\n\t            this.max = Math.max(this.max, this.left.max);\n\t        }\n\t        if (this.right !== null) {\n\t            this.max = Math.max(this.max, this.right.max);\n\t        }\n\t    };\n\t    /**\n\t\t *  The balance is how the leafs are distributed on the node\n\t\t *  @return  {Number}  Negative numbers are balanced to the right\n\t\t */\n\t    IntervalNode.prototype.getBalance = function () {\n\t        var balance = 0;\n\t        if (this.left !== null && this.right !== null) {\n\t            balance = this.left.height - this.right.height;\n\t        } else if (this.left !== null) {\n\t            balance = this.left.height + 1;\n\t        } else if (this.right !== null) {\n\t            balance = -(this.right.height + 1);\n\t        }\n\t        return balance;\n\t    };\n\t    /**\n\t\t *  @returns {Boolean} true if this node is the left child\n\t\t *  of its parent\n\t\t */\n\t    IntervalNode.prototype.isLeftChild = function () {\n\t        return this.parent !== null && this.parent.left === this;\n\t    };\n\t    /**\n\t\t *  get/set the left node\n\t\t *  @type {IntervalNode}\n\t\t */\n\t    Object.defineProperty(IntervalNode.prototype, 'left', {\n\t        get: function () {\n\t            return this._left;\n\t        },\n\t        set: function (node) {\n\t            this._left = node;\n\t            if (node !== null) {\n\t                node.parent = this;\n\t            }\n\t            this.updateHeight();\n\t            this.updateMax();\n\t        }\n\t    });\n\t    /**\n\t\t *  get/set the right node\n\t\t *  @type {IntervalNode}\n\t\t */\n\t    Object.defineProperty(IntervalNode.prototype, 'right', {\n\t        get: function () {\n\t            return this._right;\n\t        },\n\t        set: function (node) {\n\t            this._right = node;\n\t            if (node !== null) {\n\t                node.parent = this;\n\t            }\n\t            this.updateHeight();\n\t            this.updateMax();\n\t        }\n\t    });\n\t    /**\n\t\t *  null out references.\n\t\t */\n\t    IntervalNode.prototype.dispose = function () {\n\t        this.parent = null;\n\t        this._left = null;\n\t        this._right = null;\n\t        this.event = null;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEND INTERVAL NODE HELPER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    return Tone.IntervalTimeline;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TransportEvent is an internal class used by (Tone.Transport)[Transport]\n\t\t *         to schedule events. Do no invoke this class directly, it is\n\t\t *         handled from within Tone.Transport.\n\t\t *  @extends {Tone}\n\t\t *  @param {Object} options\n\t\t */\n\t    Tone.TransportEvent = function (Transport, options) {\n\t        options = Tone.defaultArg(options, Tone.TransportEvent.defaults);\n\t        Tone.call(this);\n\t        /**\n\t\t\t * Reference to the Transport that created it\n\t\t\t * @type {Tone.Transport}\n\t\t\t */\n\t        this.Transport = Transport;\n\t        /**\n\t\t\t * The unique id of the event\n\t\t\t * @type {Number}\n\t\t\t */\n\t        this.id = Tone.TransportEvent._eventId++;\n\t        /**\n\t\t\t * The time the event starts\n\t\t\t * @type {Ticks}\n\t\t\t */\n\t        this.time = options.time;\n\t        /**\n\t\t\t * The callback to invoke\n\t\t\t * @type {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t * If the event should be removed after being created.\n\t\t\t * @type {Boolean}\n\t\t\t * @private\n\t\t\t */\n\t        this._once = options.once;\n\t    };\n\t    Tone.extend(Tone.TransportEvent);\n\t    /**\n\t\t * The defaults\n\t\t * @static\n\t\t * @type {Object}\n\t\t */\n\t    Tone.TransportEvent.defaults = {\n\t        'once': false,\n\t        'callback': Tone.noOp\n\t    };\n\t    /**\n\t\t * Current ID counter\n\t\t * @private\n\t\t * @static\n\t\t * @type {Number}\n\t\t */\n\t    Tone.TransportEvent._eventId = 0;\n\t    /**\n\t\t * Invoke the callback even callback.\n\t\t * @param  {Time} time  The AudioContext time in seconds of the event\n\t\t */\n\t    Tone.TransportEvent.prototype.invoke = function (time) {\n\t        if (this.callback) {\n\t            this.callback(time);\n\t            if (this._once && this.Transport) {\n\t                this.Transport.clear(this.id);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t * Clean up\n\t\t * @return {Tone.TransportEvent} this\n\t\t */\n\t    Tone.TransportEvent.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.Transport = null;\n\t        this.callback = null;\n\t        return this;\n\t    };\n\t    return Tone.TransportEvent;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TransportRepeatEvent is an internal class used by Tone.Transport\n\t\t *         to schedule repeat events. This class should not be instantiated directly.\n\t\t *  @extends {Tone.TransportEvent}\n\t\t *  @param {Object} options\n\t\t */\n\t    Tone.TransportRepeatEvent = function (Transport, options) {\n\t        Tone.TransportEvent.call(this, Transport, options);\n\t        options = Tone.defaultArg(options, Tone.TransportRepeatEvent.defaults);\n\t        /**\n\t\t\t * When the event should stop repeating\n\t\t\t * @type {Ticks}\n\t\t\t * @private\n\t\t\t */\n\t        this.duration = options.duration;\n\t        /**\n\t\t\t * The interval of the repeated event\n\t\t\t * @type {Ticks}\n\t\t\t * @private\n\t\t\t */\n\t        this._interval = options.interval;\n\t        /**\n\t\t\t * The ID of the current timeline event\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._currentId = -1;\n\t        /**\n\t\t\t * The ID of the next timeline event\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._nextId = -1;\n\t        /**\n\t\t\t  * The time of the next event\n\t\t\t  * @type {Ticks}\n\t\t\t  * @private\n\t\t\t  */\n\t        this._nextTick = this.time;\n\t        /**\n\t\t\t * a reference to the bound start method\n\t\t\t * @type {Function}\n\t\t\t * @private\n\t\t\t */\n\t        this._boundRestart = this._restart.bind(this);\n\t        this.Transport.on('start loopStart', this._boundRestart);\n\t        this._restart();\n\t    };\n\t    Tone.extend(Tone.TransportRepeatEvent, Tone.TransportEvent);\n\t    /**\n\t\t * The defaults\n\t\t * @static\n\t\t * @type {Object}\n\t\t */\n\t    Tone.TransportRepeatEvent.defaults = {\n\t        'duration': Infinity,\n\t        'interval': 1\n\t    };\n\t    /**\n\t\t * Invoke the callback. Returns the tick time which\n\t\t * the next event should be scheduled at.\n\t\t * @param  {Number} time  The AudioContext time in seconds of the event\n\t\t */\n\t    Tone.TransportRepeatEvent.prototype.invoke = function (time) {\n\t        //create more events if necessary\n\t        this._createEvents();\n\t        //call the super class\n\t        Tone.TransportEvent.prototype.invoke.call(this, time);\n\t    };\n\t    /**\n\t\t * Push more events onto the timeline to keep up with the position of the timeline\n\t\t * @private\n\t\t */\n\t    Tone.TransportRepeatEvent.prototype._createEvents = function () {\n\t        // schedule the next event\n\t        var ticks = this.Transport.ticks;\n\t        if (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t            this._nextTick += this._interval;\n\t            this._currentId = this._nextId;\n\t            this._nextId = this.Transport.scheduleOnce(this.invoke.bind(this), Tone.TransportTime(this._nextTick, 'i'));\n\t        }\n\t    };\n\t    /**\n\t\t * Push more events onto the timeline to keep up with the position of the timeline\n\t\t * @private\n\t\t */\n\t    Tone.TransportRepeatEvent.prototype._restart = function () {\n\t        this.Transport.clear(this._currentId);\n\t        this.Transport.clear(this._nextId);\n\t        var ticks = this.Transport.ticks;\n\t        this._nextTick = this.time;\n\t        if (ticks > this.time) {\n\t            this._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t        }\n\t        this._currentId = this.Transport.scheduleOnce(this.invoke.bind(this), Tone.TransportTime(this._nextTick, 'i'));\n\t        this._nextTick += this._interval;\n\t        this._nextId = this.Transport.scheduleOnce(this.invoke.bind(this), Tone.TransportTime(this._nextTick, 'i'));\n\t    };\n\t    /**\n\t\t * Clean up\n\t\t * @return {Tone.TransportRepeatEvent} this\n\t\t */\n\t    Tone.TransportRepeatEvent.prototype.dispose = function () {\n\t        this.Transport.clear(this._currentId);\n\t        this.Transport.clear(this._nextId);\n\t        this.Transport.off('start loopStart', this._boundRestart);\n\t        this._boundCreateEvents = null;\n\t        Tone.TransportEvent.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.TransportRepeatEvent;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Transport for timing musical events.\n\t\t *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n\t\t *          Tone.Transport timing events pass in the exact time of the scheduled event\n\t\t *          in the argument of the callback function. Pass that time value to the object\n\t\t *          you're scheduling. <br><br>\n\t\t *          A single transport is created for you when the library is initialized.\n\t\t *          <br><br>\n\t\t *          The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n\t\t *          called with the time of that event as the argument.\n\t\t *\n\t\t *  @extends {Tone.Emitter}\n\t\t *  @singleton\n\t\t *  @example\n\t\t * //repeated event every 8th note\n\t\t * Tone.Transport.scheduleRepeat(function(time){\n\t\t * \t//do something with the time\n\t\t * }, \"8n\");\n\t\t *  @example\n\t\t * //schedule an event on the 16th measure\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \t//do something with the time\n\t\t * }, \"16:0:0\");\n\t\t */\n\t    Tone.Transport = function () {\n\t        Tone.Emitter.call(this);\n\t        Tone.getContext(function () {\n\t            ///////////////////////////////////////////////////////////////////////\n\t            //\tLOOPING\n\t            //////////////////////////////////////////////////////////////////////\n\t            /**\n\t\t\t\t * \tIf the transport loops or not.\n\t\t\t\t *  @type {boolean}\n\t\t\t\t */\n\t            this.loop = false;\n\t            /**\n\t\t\t\t * \tThe loop start position in ticks\n\t\t\t\t *  @type {Ticks}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._loopStart = 0;\n\t            /**\n\t\t\t\t * \tThe loop end position in ticks\n\t\t\t\t *  @type {Ticks}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._loopEnd = 0;\n\t            ///////////////////////////////////////////////////////////////////////\n\t            //\tCLOCK/TEMPO\n\t            //////////////////////////////////////////////////////////////////////\n\t            /**\n\t\t\t\t *  Pulses per quarter is the number of ticks per quarter note.\n\t\t\t\t *  @private\n\t\t\t\t *  @type  {Number}\n\t\t\t\t */\n\t            this._ppq = TransportConstructor.defaults.PPQ;\n\t            /**\n\t\t\t\t *  watches the main oscillator for timing ticks\n\t\t\t\t *  initially starts at 120bpm\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Tone.Clock}\n\t\t\t\t */\n\t            this._clock = new Tone.Clock({\n\t                'callback': this._processTick.bind(this),\n\t                'frequency': 0\n\t            });\n\t            this._bindClockEvents();\n\t            /**\n\t\t\t\t *  The Beats Per Minute of the Transport.\n\t\t\t\t *  @type {BPM}\n\t\t\t\t *  @signal\n\t\t\t\t *  @example\n\t\t\t\t * Tone.Transport.bpm.value = 80;\n\t\t\t\t * //ramp the bpm to 120 over 10 seconds\n\t\t\t\t * Tone.Transport.bpm.rampTo(120, 10);\n\t\t\t\t */\n\t            this.bpm = this._clock.frequency;\n\t            this.bpm._toUnits = this._toUnits.bind(this);\n\t            this.bpm._fromUnits = this._fromUnits.bind(this);\n\t            this.bpm.units = Tone.Type.BPM;\n\t            this.bpm.value = TransportConstructor.defaults.bpm;\n\t            this._readOnly('bpm');\n\t            /**\n\t\t\t\t *  The time signature, or more accurately the numerator\n\t\t\t\t *  of the time signature over a denominator of 4.\n\t\t\t\t *  @type {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._timeSignature = TransportConstructor.defaults.timeSignature;\n\t            ///////////////////////////////////////////////////////////////////////\n\t            //\tTIMELINE EVENTS\n\t            //////////////////////////////////////////////////////////////////////\n\t            /**\n\t\t\t\t *  All the events in an object to keep track by ID\n\t\t\t\t *  @type {Object}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._scheduledEvents = {};\n\t            /**\n\t\t\t\t * \tThe scheduled events.\n\t\t\t\t *  @type {Tone.Timeline}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._timeline = new Tone.Timeline();\n\t            /**\n\t\t\t\t *  Repeated events\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._repeatedEvents = new Tone.IntervalTimeline();\n\t            /**\n\t\t\t\t *  All of the synced Signals\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Array}\n\t\t\t\t */\n\t            this._syncedSignals = [];\n\t            ///////////////////////////////////////////////////////////////////////\n\t            //\tSWING\n\t            //////////////////////////////////////////////////////////////////////\n\t            /**\n\t\t\t\t *  The subdivision of the swing\n\t\t\t\t *  @type  {Ticks}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._swingTicks = TransportConstructor.defaults.PPQ / 2;\n\t            //8n\n\t            /**\n\t\t\t\t *  The swing amount\n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._swingAmount = 0;\n\t        }.bind(this));\n\t    };\n\t    Tone.extend(Tone.Transport, Tone.Emitter);\n\t    /**\n\t\t *  the defaults\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Transport.defaults = {\n\t        'bpm': 120,\n\t        'swing': 0,\n\t        'swingSubdivision': '8n',\n\t        'timeSignature': 4,\n\t        'loopStart': 0,\n\t        'loopEnd': '4m',\n\t        'PPQ': 192\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tTICKS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  called on every tick\n\t\t *  @param   {number} tickTime clock relative tick time\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._processTick = function (tickTime) {\n\t        var ticks = this._clock.ticks;\n\t        //handle swing\n\t        if (this._swingAmount > 0 && ticks % this._ppq !== 0 && //not on a downbeat\n\t            ticks % (this._swingTicks * 2) !== 0) {\n\t            //add some swing\n\t            var progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);\n\t            var amount = Math.sin(progress * Math.PI) * this._swingAmount;\n\t            tickTime += Tone.Time(this._swingTicks * 2 / 3, 'i') * amount;\n\t        }\n\t        //do the loop test\n\t        if (this.loop) {\n\t            if (ticks >= this._loopEnd) {\n\t                this.emit('loopEnd', tickTime);\n\t                this._clock.ticks = this._loopStart;\n\t                ticks = this._loopStart;\n\t                this.emit('loopStart', tickTime, this.seconds);\n\t                this.emit('loop', tickTime);\n\t            }\n\t        }\n\t        //invoke the timeline events scheduled on this tick\n\t        this._timeline.forEachAtTime(ticks, function (event) {\n\t            event.invoke(tickTime);\n\t        });\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSCHEDULABLE EVENTS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Schedule an event along the timeline.\n\t\t *  @param {Function} callback The callback to be invoked at the time.\n\t\t *  @param {TransportTime}  time The time to invoke the callback at.\n\t\t *  @return {Number} The id of the event which can be used for canceling the event.\n\t\t *  @example\n\t\t * //trigger the callback when the Transport reaches the desired time\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \tenvelope.triggerAttack(time);\n\t\t * }, \"128i\");\n\t\t */\n\t    Tone.Transport.prototype.schedule = function (callback, time) {\n\t        var event = new Tone.TransportEvent(this, {\n\t            'time': this.toTicks(time),\n\t            'callback': callback\n\t        });\n\t        return this._addEvent(event, this._timeline);\n\t    };\n\t    /**\n\t\t *  Schedule a repeated event along the timeline. The event will fire\n\t\t *  at the `interval` starting at the `startTime` and for the specified\n\t\t *  `duration`.\n\t\t *  @param  {Function}  callback   The callback to invoke.\n\t\t *  @param  {Time}    interval   The duration between successive\n\t\t *                               callbacks. Must be a positive number.\n\t\t *  @param  {TimelinePosition=}    startTime  When along the timeline the events should\n\t\t *                               start being invoked.\n\t\t *  @param {Time} [duration=Infinity] How long the event should repeat.\n\t\t *  @return  {Number}    The ID of the scheduled event. Use this to cancel\n\t\t *                           the event.\n\t\t *  @example\n\t\t * //a callback invoked every eighth note after the first measure\n\t\t * Tone.Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t\t */\n\t    Tone.Transport.prototype.scheduleRepeat = function (callback, interval, startTime, duration) {\n\t        var event = new Tone.TransportRepeatEvent(this, {\n\t            'callback': callback,\n\t            'interval': this.toTicks(interval),\n\t            'time': this.toTicks(startTime),\n\t            'duration': this.toTicks(Tone.defaultArg(duration, Infinity))\n\t        });\n\t        //kick it off if the Transport is started\n\t        return this._addEvent(event, this._repeatedEvents);\n\t    };\n\t    /**\n\t\t *  Schedule an event that will be removed after it is invoked.\n\t\t *  Note that if the given time is less than the current transport time,\n\t\t *  the event will be invoked immediately.\n\t\t *  @param {Function} callback The callback to invoke once.\n\t\t *  @param {TransportTime} time The time the callback should be invoked.\n\t\t *  @returns {Number} The ID of the scheduled event.\n\t\t */\n\t    Tone.Transport.prototype.scheduleOnce = function (callback, time) {\n\t        var event = new Tone.TransportEvent(this, {\n\t            'time': this.toTicks(time),\n\t            'callback': callback,\n\t            'once': true\n\t        });\n\t        return this._addEvent(event, this._timeline);\n\t    };\n\t    /**\n\t\t *  Clear the passed in event id from the timeline\n\t\t *  @param {Number} eventId The id of the event.\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.clear = function (eventId) {\n\t        if (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t            var item = this._scheduledEvents[eventId.toString()];\n\t            item.timeline.remove(item.event);\n\t            item.event.dispose();\n\t            delete this._scheduledEvents[eventId.toString()];\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Add an event to the correct timeline. Keep track of the\n\t\t * timeline it was added to.\n\t\t * @param {Tone.TransportEvent}\tevent\n\t\t * @param {Tone.Timeline} timeline\n\t\t * @returns {Number} the event id which was just added\n\t\t * @private\n\t\t */\n\t    Tone.Transport.prototype._addEvent = function (event, timeline) {\n\t        this._scheduledEvents[event.id.toString()] = {\n\t            'event': event,\n\t            'timeline': timeline\n\t        };\n\t        timeline.add(event);\n\t        return event.id;\n\t    };\n\t    /**\n\t\t *  Remove scheduled events from the timeline after\n\t\t *  the given time. Repeated events will be removed\n\t\t *  if their startTime is after the given time\n\t\t *  @param {TransportTime} [after=0] Clear all events after\n\t\t *                          this time.\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.cancel = function (after) {\n\t        after = Tone.defaultArg(after, 0);\n\t        after = this.toTicks(after);\n\t        this._timeline.cancel(after);\n\t        this._repeatedEvents.cancel(after);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSTART/STOP/PAUSE\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Bind start/stop/pause events from the clock and emit them.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._bindClockEvents = function () {\n\t        this._clock.on('start', function (time, offset) {\n\t            offset = Tone.Time(this._clock.ticks, 'i').toSeconds();\n\t            this.emit('start', time, offset);\n\t        }.bind(this));\n\t        this._clock.on('stop', function (time) {\n\t            this.emit('stop', time);\n\t        }.bind(this));\n\t        this._clock.on('pause', function (time) {\n\t            this.emit('pause', time);\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'state', {\n\t        get: function () {\n\t            return this._clock.getStateAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now] The time when the transport should start.\n\t\t *  @param  {TransportTime=} offset The timeline offset to start the transport.\n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * //start the transport in one second starting at beginning of the 5th measure.\n\t\t * Tone.Transport.start(\"+1\", \"4:0:0\");\n\t\t */\n\t    Tone.Transport.prototype.start = function (time, offset) {\n\t        //start the clock\n\t        if (!Tone.isUndef(offset)) {\n\t            offset = this.toTicks(offset);\n\t        }\n\t        this._clock.start(time, offset);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now] The time when the transport should stop.\n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * Tone.Transport.stop();\n\t\t */\n\t    Tone.Transport.prototype.stop = function (time) {\n\t        this._clock.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now]\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.pause = function (time) {\n\t        this._clock.pause(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Toggle the current state of the transport. If it is\n\t\t * started, it will stop it, otherwise it will start the Transport.\n\t\t * @param  {Time=} time The time of the event\n\t\t * @return {Tone.Transport}      this\n\t\t */\n\t    Tone.Transport.prototype.toggle = function (time) {\n\t        time = this.toSeconds(time);\n\t        if (this._clock.getStateAtTime(time) !== Tone.State.Started) {\n\t            this.start(time);\n\t        } else {\n\t            this.stop(time);\n\t        }\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSETTERS/GETTERS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The time signature as just the numerator over 4.\n\t\t *  For example 4/4 would be just 4 and 6/8 would be 3.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Number|Array}\n\t\t *  @name timeSignature\n\t\t *  @example\n\t\t * //common time\n\t\t * Tone.Transport.timeSignature = 4;\n\t\t * // 7/8\n\t\t * Tone.Transport.timeSignature = [7, 8];\n\t\t * //this will be reduced to a single number\n\t\t * Tone.Transport.timeSignature; //returns 3.5\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'timeSignature', {\n\t        get: function () {\n\t            return this._timeSignature;\n\t        },\n\t        set: function (timeSig) {\n\t            if (Tone.isArray(timeSig)) {\n\t                timeSig = timeSig[0] / timeSig[1] * 4;\n\t            }\n\t            this._timeSignature = timeSig;\n\t        }\n\t    });\n\t    /**\n\t\t * When the Tone.Transport.loop = true, this is the starting position of the loop.\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {TransportTime}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toSeconds();\n\t        },\n\t        set: function (startPosition) {\n\t            this._loopStart = this.toTicks(startPosition);\n\t        }\n\t    });\n\t    /**\n\t\t * When the Tone.Transport.loop = true, this is the ending position of the loop.\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {TransportTime}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toSeconds();\n\t        },\n\t        set: function (endPosition) {\n\t            this._loopEnd = this.toTicks(endPosition);\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the loop start and stop at the same time.\n\t\t *  @param {TransportTime} startPosition\n\t\t *  @param {TransportTime} endPosition\n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * //loop over the first measure\n\t\t * Tone.Transport.setLoopPoints(0, \"1m\");\n\t\t * Tone.Transport.loop = true;\n\t\t */\n\t    Tone.Transport.prototype.setLoopPoints = function (startPosition, endPosition) {\n\t        this.loopStart = startPosition;\n\t        this.loopEnd = endPosition;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The swing value. Between 0-1 where 1 equal to\n\t\t *  the note + half the subdivision.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {NormalRange}\n\t\t *  @name swing\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'swing', {\n\t        get: function () {\n\t            return this._swingAmount;\n\t        },\n\t        set: function (amount) {\n\t            //scale the values to a normal range\n\t            this._swingAmount = amount;\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the subdivision which the swing will be applied to.\n\t\t *  The default value is an 8th note. Value must be less\n\t\t *  than a quarter note.\n\t\t *\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Time}\n\t\t *  @name swingSubdivision\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'swingSubdivision', {\n\t        get: function () {\n\t            return Tone.Time(this._swingTicks, 'i').toNotation();\n\t        },\n\t        set: function (subdivision) {\n\t            this._swingTicks = this.toTicks(subdivision);\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t\t *  Setting the value will jump to that position right away.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {BarsBeatsSixteenths}\n\t\t *  @name position\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'position', {\n\t        get: function () {\n\t            return Tone.TransportTime(this.ticks, 'i').toBarsBeatsSixteenths();\n\t        },\n\t        set: function (progress) {\n\t            var ticks = this.toTicks(progress);\n\t            this.ticks = ticks;\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's position in seconds\n\t\t *  Setting the value will jump to that position right away.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Seconds}\n\t\t *  @name seconds\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'seconds', {\n\t        get: function () {\n\t            return Tone.TransportTime(this.ticks, 'i').toSeconds();\n\t        },\n\t        set: function (progress) {\n\t            var ticks = this.toTicks(progress);\n\t            this.ticks = ticks;\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's loop position as a normalized value. Always\n\t\t *  returns 0 if the transport if loop is not true.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @name progress\n\t\t *  @type {NormalRange}\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'progress', {\n\t        get: function () {\n\t            if (this.loop) {\n\t                return (this.ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The transports current tick position.\n\t\t *\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Ticks}\n\t\t *  @name ticks\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'ticks', {\n\t        get: function () {\n\t            return this._clock.ticks;\n\t        },\n\t        set: function (t) {\n\t            if (this._clock.ticks !== t) {\n\t                var now = this.now();\n\t                //stop everything synced to the transport\n\t                if (this.state === Tone.State.Started) {\n\t                    this.emit('stop', now);\n\t                    this._clock.ticks = t;\n\t                    //restart it with the new time\n\t                    this.emit('start', now, this.seconds);\n\t                } else {\n\t                    this._clock.ticks = t;\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Pulses Per Quarter note. This is the smallest resolution\n\t\t *  the Transport timing supports. This should be set once\n\t\t *  on initialization and not set again. Changing this value\n\t\t *  after other objects have been created can cause problems.\n\t\t *\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Number}\n\t\t *  @name PPQ\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'PPQ', {\n\t        get: function () {\n\t            return this._ppq;\n\t        },\n\t        set: function (ppq) {\n\t            var bpm = this.bpm.value;\n\t            this._ppq = ppq;\n\t            this.bpm.value = bpm;\n\t        }\n\t    });\n\t    /**\n\t\t *  Convert from BPM to frequency (factoring in PPQ)\n\t\t *  @param  {BPM}  bpm The BPM value to convert to frequency\n\t\t *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._fromUnits = function (bpm) {\n\t        return 1 / (60 / bpm / this.PPQ);\n\t    };\n\t    /**\n\t\t *  Convert from frequency (with PPQ) into BPM\n\t\t *  @param  {Frequency}  freq The clocks frequency to convert to BPM\n\t\t *  @return  {BPM}  The frequency value as BPM.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._toUnits = function (freq) {\n\t        return freq / this.PPQ * 60;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSYNCING\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the time aligned to the next subdivision\n\t\t *  of the Transport. If the Transport is not started,\n\t\t *  it will return 0.\n\t\t *  Note: this will not work precisely during tempo ramps.\n\t\t *  @param  {Time}  subdivision  The subdivision to quantize to\n\t\t *  @return  {Number}  The context time of the next subdivision.\n\t\t *  @example\n\t\t * Tone.Transport.start(); //the transport must be started\n\t\t * Tone.Transport.nextSubdivision(\"4n\");\n\t\t */\n\t    Tone.Transport.prototype.nextSubdivision = function (subdivision) {\n\t        subdivision = this.toSeconds(subdivision);\n\t        //if the transport's not started, return 0\n\t        var now;\n\t        if (this.state === Tone.State.Started) {\n\t            now = this._clock._nextTick;\n\t        } else {\n\t            return 0;\n\t        }\n\t        var transportPos = Tone.Time(this.ticks, 'i');\n\t        var remainingTime = subdivision - transportPos % subdivision;\n\t        if (remainingTime === 0) {\n\t            remainingTime = subdivision;\n\t        }\n\t        return now + remainingTime;\n\t    };\n\t    /**\n\t\t *  Attaches the signal to the tempo control signal so that\n\t\t *  any changes in the tempo will change the signal in the same\n\t\t *  ratio.\n\t\t *\n\t\t *  @param  {Tone.Signal} signal\n\t\t *  @param {number=} ratio Optionally pass in the ratio between\n\t\t *                         the two signals. Otherwise it will be computed\n\t\t *                         based on their current values.\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.syncSignal = function (signal, ratio) {\n\t        if (!ratio) {\n\t            //get the sync ratio\n\t            if (signal._param.value !== 0) {\n\t                ratio = signal._param.value / this.bpm._param.value;\n\t            } else {\n\t                ratio = 0;\n\t            }\n\t        }\n\t        var ratioSignal = new Tone.Gain(ratio);\n\t        this.bpm.chain(ratioSignal, signal._param);\n\t        this._syncedSignals.push({\n\t            'ratio': ratioSignal,\n\t            'signal': signal,\n\t            'initial': signal._param.value\n\t        });\n\t        signal._param.value = 0;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsyncs a previously synced signal from the transport's control.\n\t\t *  See Tone.Transport.syncSignal.\n\t\t *  @param  {Tone.Signal} signal\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.unsyncSignal = function (signal) {\n\t        for (var i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t            var syncedSignal = this._syncedSignals[i];\n\t            if (syncedSignal.signal === signal) {\n\t                syncedSignal.ratio.dispose();\n\t                syncedSignal.signal._param.value = syncedSignal.initial;\n\t                this._syncedSignals.splice(i, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Transport} this\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this._clock.dispose();\n\t        this._clock = null;\n\t        this._writable('bpm');\n\t        this.bpm = null;\n\t        this._timeline.dispose();\n\t        this._timeline = null;\n\t        this._repeatedEvents.dispose();\n\t        this._repeatedEvents = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tINITIALIZATION\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    var TransportConstructor = Tone.Transport;\n\t    Tone.Transport = new TransportConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Transport instanceof TransportConstructor) {\n\t            Tone.Transport = context.Transport;\n\t        } else {\n\t            Tone.Transport = new TransportConstructor();\n\t        }\n\t        //store the Transport on the context so it can be retrieved later\n\t        context.Transport = Tone.Transport;\n\t    });\n\t    Tone.Context.on('close', function (context) {\n\t        if (context.Transport instanceof TransportConstructor) {\n\t            context.Transport.dispose();\n\t        }\n\t    });\n\t    return Tone.Transport;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Volume is a simple volume node, useful for creating a volume fader.\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {Decibels} [volume=0] the initial volume\n\t\t *  @example\n\t\t * var vol = new Tone.Volume(-12);\n\t\t * instrument.chain(vol, Tone.Master);\n\t\t */\n\t    Tone.Volume = function () {\n\t        var options = Tone.defaults(arguments, ['volume'], Tone.Volume);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t * the output node\n\t\t\t * @type {GainNode}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this.input = new Tone.Gain(options.volume, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The unmuted volume\n\t\t\t * @type {Decibels}\n\t\t\t * @private\n\t\t\t */\n\t        this._unmutedVolume = options.volume;\n\t        /**\n\t\t\t *  The volume control in decibels.\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.volume = this.output.gain;\n\t        this._readOnly('volume');\n\t        //set the mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.Volume, Tone.AudioNode);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Volume.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute the output.\n\t\t * @memberOf Tone.Volume#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * volume.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Volume.prototype, 'mute', {\n\t        get: function () {\n\t            return this.volume.value === -Infinity;\n\t        },\n\t        set: function (mute) {\n\t            if (!this.mute && mute) {\n\t                this._unmutedVolume = this.volume.value;\n\t                //maybe it should ramp here?\n\t                this.volume.value = -Infinity;\n\t            } else if (this.mute && !mute) {\n\t                this.volume.value = this._unmutedVolume;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Volume} this\n\t\t */\n\t    Tone.Volume.prototype.dispose = function () {\n\t        this.input.dispose();\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable('volume');\n\t        this.volume.dispose();\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.Volume;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A single master output which is connected to the\n\t\t *          AudioDestinationNode (aka your speakers).\n\t\t *          It provides useful conveniences such as the ability\n\t\t *          to set the volume and mute the entire application.\n\t\t *          It also gives you the ability to apply master effects to your application.\n\t\t *          <br><br>\n\t\t *          Like Tone.Transport, A single Tone.Master is created\n\t\t *          on initialization and you do not need to explicitly construct one.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @singleton\n\t\t *  @example\n\t\t * //the audio will go from the oscillator to the speakers\n\t\t * oscillator.connect(Tone.Master);\n\t\t * //a convenience for connecting to the master output is also provided:\n\t\t * oscillator.toMaster();\n\t\t * //the above two examples are equivalent.\n\t\t */\n\t    Tone.Master = function () {\n\t        Tone.AudioNode.call(this);\n\t        Tone.getContext(function () {\n\t            this.createInsOuts(1, 0);\n\t            /**\n\t\t\t\t *  The private volume node\n\t\t\t\t *  @type  {Tone.Volume}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._volume = this.output = new Tone.Volume();\n\t            /**\n\t\t\t\t * The volume of the master output.\n\t\t\t\t * @type {Decibels}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t            this.volume = this._volume.volume;\n\t            this._readOnly('volume');\n\t            //connections\n\t            this.input.chain(this.output, this.context.destination);\n\t        }.bind(this));\n\t    };\n\t    Tone.extend(Tone.Master, Tone.AudioNode);\n\t    /**\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Master.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute the output.\n\t\t * @memberOf Tone.Master#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * Tone.Master.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Master.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t\t *  chained in the master effects chain.\n\t\t *  @param {AudioNode|Tone} args... All arguments will be connected in a row\n\t\t *                                  and the Master will be routed through it.\n\t\t *  @return  {Tone.Master}  this\n\t\t *  @example\n\t\t * //some overall compression to keep the levels in check\n\t\t * var masterCompressor = new Tone.Compressor({\n\t\t * \t\"threshold\" : -6,\n\t\t * \t\"ratio\" : 3,\n\t\t * \t\"attack\" : 0.5,\n\t\t * \t\"release\" : 0.1\n\t\t * });\n\t\t * //give a little boost to the lows\n\t\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t\t * //route everything through the filter\n\t\t * //and compressor before going to the speakers\n\t\t * Tone.Master.chain(lowBump, masterCompressor);\n\t\t */\n\t    Tone.Master.prototype.chain = function () {\n\t        this.input.disconnect();\n\t        this.input.chain.apply(this.input, arguments);\n\t        arguments[arguments.length - 1].connect(this.output);\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Master}  this\n\t\t */\n\t    Tone.Master.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUGMENT TONE's PROTOTYPE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)\n\t\t *  @returns {Tone.AudioNode} this\n\t\t *  @example\n\t\t * //connect an oscillator to the master output\n\t\t * var osc = new Tone.Oscillator().toMaster();\n\t\t */\n\t    Tone.AudioNode.prototype.toMaster = function () {\n\t        this.connect(Tone.Master);\n\t        return this;\n\t    };\n\t    if (window.AudioNode) {\n\t        // Also augment AudioNode's prototype to include toMaster as a convenience\n\t        AudioNode.prototype.toMaster = function () {\n\t            this.connect(Tone.Master);\n\t            return this;\n\t        };\n\t    }\n\t    /**\n\t\t *  initialize the module and listen for new audio contexts\n\t\t */\n\t    var MasterConstructor = Tone.Master;\n\t    Tone.Master = new MasterConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        // if it already exists, just restore it\n\t        if (context.Master instanceof MasterConstructor) {\n\t            Tone.Master = context.Master;\n\t        } else {\n\t            Tone.Master = new MasterConstructor();\n\t        }\n\t        context.Master = Tone.Master;\n\t    });\n\t    Tone.Context.on('close', function (context) {\n\t        if (context.Master instanceof MasterConstructor) {\n\t            context.Master.dispose();\n\t        }\n\t    });\n\t    return Tone.Master;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base class for sources. Sources have start/stop methods\n\t\t *          and the ability to be synced to the\n\t\t *          start/stop of Tone.Transport.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @example\n\t\t * //Multiple state change events can be chained together,\n\t\t * //but must be set in the correct order and with ascending times\n\t\t *\n\t\t * // OK\n\t\t * state.start().stop(\"+0.2\");\n\t\t * // AND\n\t\t * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n\t\t *\n\t\t * // BAD\n\t\t * state.stop(\"+0.2\").start();\n\t\t * // OR\n\t\t * state.start(\"+0.3\").stop(\"+0.2\");\n\t\t *\n\t\t */\n\t    Tone.Source = function (options) {\n\t        options = Tone.defaultArg(options, Tone.Source.defaults);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        /**\n\t\t\t * \tKeep track of the scheduled state.\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        this._state.memory = 10;\n\t        /**\n\t\t\t *  The synced `start` callback function from the transport\n\t\t\t *  @type {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._synced = false;\n\t        /**\n\t\t\t *  Keep track of all of the scheduled event ids\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scheduled = [];\n\t        //make the output explicitly stereo\n\t        this._volume.output.output.channelCount = 2;\n\t        this._volume.output.output.channelCountMode = 'explicit';\n\t        //mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.Source, Tone.AudioNode);\n\t    /**\n\t\t *  The default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Source.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Source#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Source.prototype, 'state', {\n\t        get: function () {\n\t            if (this._synced) {\n\t                if (Tone.Transport.state === Tone.State.Started) {\n\t                    return this._state.getValueAtTime(Tone.Transport.seconds);\n\t                } else {\n\t                    return Tone.State.Stopped;\n\t                }\n\t            } else {\n\t                return this._state.getValueAtTime(this.now());\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output.\n\t\t * @memberOf Tone.Source#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * source.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Source.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    //overwrite these functions\n\t    Tone.Source.prototype._start = Tone.noOp;\n\t    Tone.Source.prototype._stop = Tone.noOp;\n\t    /**\n\t\t *  Start the source at the specified time. If no time is given,\n\t\t *  start the source now.\n\t\t *  @param  {Time} [time=now] When the source should be started.\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t\t */\n\t    Tone.Source.prototype.start = function (time, offset, duration) {\n\t        if (Tone.isUndef(time) && this._synced) {\n\t            time = Tone.Transport.seconds;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        //if it's started, stop it and restart it\n\t        if (!this.retrigger && this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this.stop(time);\n\t        }\n\t        this._state.setStateAtTime(Tone.State.Started, time);\n\t        if (this._synced) {\n\t            // add the offset time to the event\n\t            var event = this._state.get(time);\n\t            event.offset = Tone.defaultArg(offset, 0);\n\t            event.duration = duration;\n\t            var sched = Tone.Transport.schedule(function (t) {\n\t                this._start(t, offset, duration);\n\t            }.bind(this), time);\n\t            this._scheduled.push(sched);\n\t        } else {\n\t            this._start.apply(this, arguments);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the source at the specified time. If no time is given,\n\t\t *  stop the source now.\n\t\t *  @param  {Time} [time=now] When the source should be stopped.\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * source.stop(); // stops the source immediately\n\t\t */\n\t    Tone.Source.prototype.stop = function (time) {\n\t        if (Tone.isUndef(time) && this._synced) {\n\t            time = Tone.Transport.seconds;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        if (!this._synced) {\n\t            this._stop.apply(this, arguments);\n\t        } else {\n\t            var sched = Tone.Transport.schedule(this._stop.bind(this), time);\n\t            this._scheduled.push(sched);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the source to the Transport so that all subsequent\n\t\t *  calls to `start` and `stop` are synced to the TransportTime\n\t\t *  instead of the AudioContext time.\n\t\t *\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t\t * source.sync().start(0).stop(0.3);\n\t\t * //start the transport.\n\t\t * Tone.Transport.start();\n\t\t *\n\t\t *  @example\n\t\t * //start the transport with an offset and the sync'ed sources\n\t\t * //will start in the correct position\n\t\t * source.sync().start(0.1);\n\t\t * //the source will be invoked with an offset of 0.4\n\t\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t\t */\n\t    Tone.Source.prototype.sync = function () {\n\t        this._synced = true;\n\t        this._syncedStart = function (time, offset) {\n\t            if (offset > 0) {\n\t                // get the playback state at that time\n\t                var stateEvent = this._state.get(offset);\n\t                // listen for start events which may occur in the middle of the sync'ed time\n\t                if (stateEvent && stateEvent.state === Tone.State.Started && stateEvent.time !== offset) {\n\t                    // get the offset\n\t                    var startOffset = offset - this.toSeconds(stateEvent.time);\n\t                    var duration;\n\t                    if (stateEvent.duration) {\n\t                        duration = this.toSeconds(stateEvent.duration) - startOffset;\n\t                    }\n\t                    this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t                }\n\t            }\n\t        }.bind(this);\n\t        this._syncedStop = function (time) {\n\t            if (this._state.getValueAtTime(Tone.Transport.seconds) === Tone.State.Started) {\n\t                this._stop(time);\n\t            }\n\t        }.bind(this);\n\t        Tone.Transport.on('start loopStart', this._syncedStart);\n\t        Tone.Transport.on('stop pause loopEnd', this._syncedStop);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t\t *  @returns {Tone.Source} this\n\t\t */\n\t    Tone.Source.prototype.unsync = function () {\n\t        if (this._synced) {\n\t            Tone.Transport.off('stop pause loopEnd', this._syncedStop);\n\t            Tone.Transport.off('start loopStart', this._syncedStart);\n\t        }\n\t        this._synced = false;\n\t        // clear all of the scheduled ids\n\t        for (var i = 0; i < this._scheduled.length; i++) {\n\t            var id = this._scheduled[i];\n\t            Tone.Transport.clear(id);\n\t        }\n\t        this._scheduled = [];\n\t        this._state.cancel(0);\n\t        return this;\n\t    };\n\t    /**\n\t\t *\tClean up.\n\t\t *  @return {Tone.Source} this\n\t\t */\n\t    Tone.Source.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.unsync();\n\t        this._scheduled = null;\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        this._state.dispose();\n\t        this._state = null;\n\t    };\n\t    return Tone.Source;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  OscillatorNode shim\n\t\t *  @private\n\t\t */\n\t    if (window.OscillatorNode && !OscillatorNode.prototype.start) {\n\t        OscillatorNode.prototype.start = OscillatorNode.prototype.noteOn;\n\t        OscillatorNode.prototype.stop = OscillatorNode.prototype.noteOff;\n\t        if (!OscillatorNode.prototype.setPeriodicWave) {\n\t            OscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;\n\t        }\n\t        if (!AudioContext.prototype.createPeriodicWave) {\n\t            AudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;\n\t        }\n\t    }\n\t    /**\n\t\t *  @class Tone.Oscillator supports a number of features including\n\t\t *         phase rotation, multiple oscillator types (see Tone.Oscillator.type),\n\t\t *         and Transport syncing (see Tone.Oscillator.syncFrequency).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {Frequency} [frequency] Starting frequency\n\t\t *  @param {string} [type] The oscillator type. Read more about type below.\n\t\t *  @example\n\t\t * //make and start a 440hz sine tone\n\t\t * var osc = new Tone.Oscillator(440, \"sine\").toMaster().start();\n\t\t */\n\t    Tone.Oscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.Oscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  the main oscillator\n\t\t\t *  @type {OscillatorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = null;\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  the periodic wave\n\t\t\t *  @type {PeriodicWave}\n\t\t\t *  @private\n\t\t\t */\n\t        this._wave = null;\n\t        /**\n\t\t\t *  The partials of the oscillator\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._partials = Tone.defaultArg(options.partials, [1]);\n\t        /**\n\t\t\t *  the phase of the oscillator\n\t\t\t *  between 0 - 360\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._phase = options.phase;\n\t        /**\n\t\t\t *  the type of the oscillator\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = null;\n\t        //setup\n\t        this.type = options.type;\n\t        this.phase = this._phase;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Oscillator, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Oscillator.defaults = {\n\t        'type': 'sine',\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'partials': []\n\t    };\n\t    /**\n\t\t *  The Oscillator types\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Oscillator.Type = {\n\t        Sine: 'sine',\n\t        Triangle: 'triangle',\n\t        Sawtooth: 'sawtooth',\n\t        Square: 'square',\n\t        Custom: 'custom'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._start = function (time) {\n\t        //new oscillator with previous values\n\t        this._oscillator = this.context.createOscillator();\n\t        this._oscillator.setPeriodicWave(this._wave);\n\t        //connect the control signal to the oscillator frequency & detune\n\t        this._oscillator.connect(this.output);\n\t        this.frequency.connect(this._oscillator.frequency);\n\t        this.detune.connect(this._oscillator.detune);\n\t        //start the oscillator\n\t        time = this.toSeconds(time);\n\t        Tone.isPast(time);\n\t        this._oscillator.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @private\n\t\t *  @param  {Time} [time=now] (optional) timing parameter\n\t\t *  @returns {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype._stop = function (time) {\n\t        if (this._oscillator) {\n\t            time = this.toSeconds(time);\n\t            Tone.isPast(time);\n\t            this._oscillator.stop(time);\n\t            this._oscillator = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t\t *  will also affect the oscillators frequency.\n\t\t *  @returns {Tone.Oscillator} this\n\t\t *  @example\n\t\t * Tone.Transport.bpm.value = 120;\n\t\t * osc.frequency.value = 440;\n\t\t * //the ration between the bpm and the frequency will be maintained\n\t\t * osc.syncFrequency();\n\t\t * Tone.Transport.bpm.value = 240;\n\t\t * // the frequency of the oscillator is doubled to 880\n\t\t */\n\t    Tone.Oscillator.prototype.syncFrequency = function () {\n\t        Tone.Transport.syncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsync the oscillator's frequency from the Transport.\n\t\t *  See Tone.Oscillator.syncFrequency\n\t\t *  @returns {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype.unsyncFrequency = function () {\n\t        Tone.Transport.unsyncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t\t * 8 partials of the triangle wave.\n\t\t * <br><br>\n\t\t * Uses PeriodicWave internally even for native types so that it can set the phase.\n\t\t * PeriodicWave equations are from the\n\t\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t\t *\n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * //set it to a square wave\n\t\t * osc.type = \"square\";\n\t\t * @example\n\t\t * //set the first 6 partials of a sawtooth wave\n\t\t * osc.type = \"sawtooth6\";\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            var coefs = this._getRealImaginary(type, this._phase);\n\t            var periodicWave = this.context.createPeriodicWave(coefs[0], coefs[1]);\n\t            this._wave = periodicWave;\n\t            if (this._oscillator !== null) {\n\t                this._oscillator.setPeriodicWave(this._wave);\n\t            }\n\t            this._type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Returns the real and imaginary components based\n\t\t *  on the oscillator type.\n\t\t *  @returns {Array} [real, imaginary]\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._getRealImaginary = function (type, phase) {\n\t        var fftSize = 4096;\n\t        var periodicWaveSize = fftSize / 2;\n\t        var real = new Float32Array(periodicWaveSize);\n\t        var imag = new Float32Array(periodicWaveSize);\n\t        var partialCount = 1;\n\t        if (type === Tone.Oscillator.Type.Custom) {\n\t            partialCount = this._partials.length + 1;\n\t            periodicWaveSize = partialCount;\n\t        } else {\n\t            var partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t            if (partial) {\n\t                partialCount = parseInt(partial[2]) + 1;\n\t                type = partial[1];\n\t                partialCount = Math.max(partialCount, 2);\n\t                periodicWaveSize = partialCount;\n\t            }\n\t        }\n\t        for (var n = 1; n < periodicWaveSize; ++n) {\n\t            var piFactor = 2 / (n * Math.PI);\n\t            var b;\n\t            switch (type) {\n\t            case Tone.Oscillator.Type.Sine:\n\t                b = n <= partialCount ? 1 : 0;\n\t                break;\n\t            case Tone.Oscillator.Type.Square:\n\t                b = n & 1 ? 2 * piFactor : 0;\n\t                break;\n\t            case Tone.Oscillator.Type.Sawtooth:\n\t                b = piFactor * (n & 1 ? 1 : -1);\n\t                break;\n\t            case Tone.Oscillator.Type.Triangle:\n\t                if (n & 1) {\n\t                    b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);\n\t                } else {\n\t                    b = 0;\n\t                }\n\t                break;\n\t            case Tone.Oscillator.Type.Custom:\n\t                b = this._partials[n - 1];\n\t                break;\n\t            default:\n\t                throw new TypeError('Tone.Oscillator: invalid type: ' + type);\n\t            }\n\t            if (b !== 0) {\n\t                real[n] = -b * Math.sin(phase * n);\n\t                imag[n] = b * Math.cos(phase * n);\n\t            } else {\n\t                real[n] = 0;\n\t                imag[n] = 0;\n\t            }\n\t        }\n\t        return [\n\t            real,\n\t            imag\n\t        ];\n\t    };\n\t    /**\n\t\t *  Compute the inverse FFT for a given phase.\n\t\t *  @param  {Float32Array}  real\n\t\t *  @param  {Float32Array}  imag\n\t\t *  @param  {NormalRange}  phase\n\t\t *  @return  {AudioRange}\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._inverseFFT = function (real, imag, phase) {\n\t        var sum = 0;\n\t        var len = real.length;\n\t        for (var i = 0; i < len; i++) {\n\t            sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t        }\n\t        return sum;\n\t    };\n\t    /**\n\t\t *  Returns the initial value of the oscillator.\n\t\t *  @return  {AudioRange}\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._getInitialValue = function () {\n\t        var coefs = this._getRealImaginary(this._type, 0);\n\t        var real = coefs[0];\n\t        var imag = coefs[1];\n\t        var maxValue = 0;\n\t        var twoPi = Math.PI * 2;\n\t        //check for peaks in 8 places\n\t        for (var i = 0; i < 8; i++) {\n\t            maxValue = Math.max(this._inverseFFT(real, imag, i / 8 * twoPi), maxValue);\n\t        }\n\t        return -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t    };\n\t    /**\n\t\t * The partials of the waveform. A partial represents\n\t\t * the amplitude at a harmonic. The first harmonic is the\n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series.\n\t\t * Setting this value will automatically set the type to \"custom\".\n\t\t * The value is an empty array when the type is not \"custom\".\n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'partials', {\n\t        get: function () {\n\t            if (this._type !== Tone.Oscillator.Type.Custom) {\n\t                return [];\n\t            } else {\n\t                return this._partials;\n\t            }\n\t        },\n\t        set: function (partials) {\n\t            this._partials = partials;\n\t            this.type = Tone.Oscillator.Type.Custom;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t * @example\n\t\t * osc.phase = 180; //flips the phase of the oscillator\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._phase * (180 / Math.PI);\n\t        },\n\t        set: function (phase) {\n\t            this._phase = phase * Math.PI / 180;\n\t            //reset the type\n\t            this.type = this._type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._oscillator !== null) {\n\t            this._oscillator.disconnect();\n\t            this._oscillator = null;\n\t        }\n\t        this._wave = null;\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this._partials = null;\n\t        return this;\n\t    };\n\t    return Tone.Oscillator;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be\n\t\t *         it's own class is that many browsers optimize out Tone.Signal\n\t\t *         with a value of 0 and will not process nodes further down the graph.\n\t\t *  @extends {Tone.SignalBase}\n\t\t */\n\t    Tone.Zero = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  The gain node\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = this.input = this.output = new Tone.Gain();\n\t        this.context.getConstant(0).connect(this._gain);\n\t    };\n\t    Tone.extend(Tone.Zero, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @return  {Tone.Zero}  this\n\t\t */\n\t    Tone.Zero.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._gain.dispose();\n\t        this._gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Zero;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  LFO stands for low frequency oscillator. Tone.LFO produces an output signal\n\t\t *          which can be attached to an AudioParam or Tone.Signal\n\t\t *          in order to modulate that parameter with an oscillator. The LFO can\n\t\t *          also be synced to the transport to start/stop and change when the tempo changes.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Frequency|Object} [frequency] The frequency of the oscillation. Typically, LFOs will be\n\t\t *                               in the frequency range of 0.1 to 10 hertz.\n\t\t *  @param {number=} min The minimum output value of the LFO.\n\t\t *  @param {number=} max The maximum value of the LFO.\n\t\t *  @example\n\t\t * var lfo = new Tone.LFO(\"4n\", 400, 4000);\n\t\t * lfo.connect(filter.frequency);\n\t\t */\n\t    Tone.LFO = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'min',\n\t            'max'\n\t        ], Tone.LFO);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = new Tone.Oscillator({\n\t            'frequency': options.frequency,\n\t            'type': options.type\n\t        });\n\t        /**\n\t\t\t *  the lfo's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._oscillator.frequency;\n\t        /**\n\t\t\t * The amplitude of the LFO, which controls the output range between\n\t\t\t * the min and max output. For example if the min is -10 and the max\n\t\t\t * is 10, setting the amplitude to 0.5 would make the LFO modulate\n\t\t\t * between -5 and 5.\n\t\t\t * @type {Number}\n\t\t\t * @signal\n\t\t\t */\n\t        this.amplitude = this._oscillator.volume;\n\t        this.amplitude.units = Tone.Type.NormalRange;\n\t        this.amplitude.value = options.amplitude;\n\t        /**\n\t\t\t *  The signal which is output when the LFO is stopped\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stoppedSignal = new Tone.Signal(0, Tone.Type.AudioRange);\n\t        /**\n\t\t\t *  Just outputs zeros.\n\t\t\t *  @type {Tone.Zero}\n\t\t\t *  @private\n\t\t\t */\n\t        this._zeros = new Tone.Zero();\n\t        /**\n\t\t\t *  The value that the LFO outputs when it's stopped\n\t\t\t *  @type {AudioRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stoppedValue = 0;\n\t        /**\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._a2g = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scaler = this.output = new Tone.Scale(options.min, options.max);\n\t        /**\n\t\t\t *  the units of the LFO (used for converting)\n\t\t\t *  @type {Tone.Type}\n\t\t\t *  @private\n\t\t\t */\n\t        this._units = Tone.Type.Default;\n\t        this.units = options.units;\n\t        //connect it up\n\t        this._oscillator.chain(this._a2g, this._scaler);\n\t        this._zeros.connect(this._a2g);\n\t        this._stoppedSignal.connect(this._a2g);\n\t        this._readOnly([\n\t            'amplitude',\n\t            'frequency'\n\t        ]);\n\t        this.phase = options.phase;\n\t    };\n\t    Tone.extend(Tone.LFO, Tone.AudioNode);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.LFO.defaults = {\n\t        'type': 'sine',\n\t        'min': 0,\n\t        'max': 1,\n\t        'phase': 0,\n\t        'frequency': '4n',\n\t        'amplitude': 1,\n\t        'units': Tone.Type.Default\n\t    };\n\t    /**\n\t\t *  Start the LFO.\n\t\t *  @param  {Time} [time=now] the time the LFO will start\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._stoppedSignal.setValueAtTime(0, time);\n\t        this._oscillator.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the LFO.\n\t\t *  @param  {Time} [time=now] the time the LFO will stop\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\t        this._oscillator.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the start/stop/pause to the transport\n\t\t *  and the frequency to the bpm of the transport\n\t\t *  @returns {Tone.LFO} this\n\t\t *  @example\n\t\t *  lfo.frequency.value = \"8n\";\n\t\t *  lfo.sync().start(0)\n\t\t *  //the rate of the LFO will always be an eighth note,\n\t\t *  //even as the tempo changes\n\t\t */\n\t    Tone.LFO.prototype.sync = function () {\n\t        this._oscillator.sync();\n\t        this._oscillator.syncFrequency();\n\t        return this;\n\t    };\n\t    /**\n\t\t *  unsync the LFO from transport control\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.unsync = function () {\n\t        this._oscillator.unsync();\n\t        this._oscillator.unsyncFrequency();\n\t        return this;\n\t    };\n\t    /**\n\t\t * The miniumum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'min', {\n\t        get: function () {\n\t            return this._toUnits(this._scaler.min);\n\t        },\n\t        set: function (min) {\n\t            min = this._fromUnits(min);\n\t            this._scaler.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'max', {\n\t        get: function () {\n\t            return this._toUnits(this._scaler.max);\n\t        },\n\t        set: function (max) {\n\t            max = this._fromUnits(max);\n\t            this._scaler.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the oscillator: sine, square, sawtooth, triangle.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'type', {\n\t        get: function () {\n\t            return this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            this._oscillator.type = type;\n\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t            this._stoppedSignal.value = this._stoppedValue;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'phase', {\n\t        get: function () {\n\t            return this._oscillator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._oscillator.phase = phase;\n\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t            this._stoppedSignal.value = this._stoppedValue;\n\t        }\n\t    });\n\t    /**\n\t\t * The output units of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {Tone.Type}\n\t\t * @name units\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'units', {\n\t        get: function () {\n\t            return this._units;\n\t        },\n\t        set: function (val) {\n\t            var currentMin = this.min;\n\t            var currentMax = this.max;\n\t            //convert the min and the max\n\t            this._units = val;\n\t            this.min = currentMin;\n\t            this.max = currentMax;\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {Boolean}\n\t\t * @name mute\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'mute', {\n\t        get: function () {\n\t            return this._oscillator.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._oscillator.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.LFO#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'state', {\n\t        get: function () {\n\t            return this._oscillator.state;\n\t        }\n\t    });\n\t    /**\n\t\t *  Connect the output of the LFO to an AudioParam, AudioNode, or Tone Node.\n\t\t *  Tone.LFO will automatically convert to the destination units of the\n\t\t *  will get the units from the connected node.\n\t\t *  @param  {Tone | AudioParam | AudioNode} node\n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone.LFO} this\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype.connect = function (node) {\n\t        if (node.constructor === Tone.Signal || node.constructor === Tone.Param || node.constructor === Tone.TimelineSignal) {\n\t            this.convert = node.convert;\n\t            this.units = node.units;\n\t        }\n\t        Tone.Signal.prototype.connect.apply(this, arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  private method borrowed from Param converts\n\t\t *  units from their destination value\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype._fromUnits = Tone.Param.prototype._fromUnits;\n\t    /**\n\t\t *  private method borrowed from Param converts\n\t\t *  units to their destination value\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype._toUnits = Tone.Param.prototype._toUnits;\n\t    /**\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'amplitude',\n\t            'frequency'\n\t        ]);\n\t        this._oscillator.dispose();\n\t        this._oscillator = null;\n\t        this._stoppedSignal.dispose();\n\t        this._stoppedSignal = null;\n\t        this._zeros.dispose();\n\t        this._zeros = null;\n\t        this._scaler.dispose();\n\t        this._scaler = null;\n\t        this._a2g.dispose();\n\t        this._a2g = null;\n\t        this.frequency = null;\n\t        this.amplitude = null;\n\t        return this;\n\t    };\n\t    return Tone.LFO;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Limiter will limit the loudness of an incoming signal.\n\t\t *         It is composed of a Tone.Compressor with a fast attack\n\t\t *         and release. Limiters are commonly used to safeguard against\n\t\t *         signal clipping. Unlike a compressor, limiters do not provide\n\t\t *         smooth gain reduction and almost completely prevent\n\t\t *         additional gain above the threshold.\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {number} threshold The theshold above which the limiting is applied.\n\t\t *  @example\n\t\t *  var limiter = new Tone.Limiter(-6);\n\t\t */\n\t    Tone.Limiter = function () {\n\t        var options = Tone.defaults(arguments, ['threshold'], Tone.Limiter);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  the compressor\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this._compressor = this.input = this.output = new Tone.Compressor({\n\t            'attack': 0.001,\n\t            'decay': 0.001,\n\t            'threshold': options.threshold\n\t        });\n\t        /**\n\t\t\t * The threshold of of the limiter\n\t\t\t * @type {Decibel}\n\t\t\t * @signal\n\t\t\t */\n\t        this.threshold = this._compressor.threshold;\n\t        this._readOnly('threshold');\n\t    };\n\t    Tone.extend(Tone.Limiter, Tone.AudioNode);\n\t    /**\n\t\t *  The default value\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Limiter.defaults = { 'threshold': -12 };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Limiter} this\n\t\t */\n\t    Tone.Limiter.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._compressor.dispose();\n\t        this._compressor = null;\n\t        this._writable('threshold');\n\t        this.threshold = null;\n\t        return this;\n\t    };\n\t    return Tone.Limiter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Lowpass is a lowpass feedback comb filter. It is similar to\n\t\t *         Tone.FeedbackCombFilter, but includes a lowpass filter.\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [delayTime] The delay time of the comb filter\n\t\t *  @param {NormalRange=} resonance The resonance (feedback) of the comb filter\n\t\t *  @param {Frequency=} dampening The cutoff of the lowpass filter dampens the\n\t\t *                                signal as it is fedback.\n\t\t */\n\t    Tone.LowpassCombFilter = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'delayTime',\n\t            'resonance',\n\t            'dampening'\n\t        ], Tone.LowpassCombFilter);\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = this.input = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The delayTime of the comb filter.\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delay.delayTime;\n\t        /**\n\t\t\t *  the lowpass filter\n\t\t\t *  @type  {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowpass = this.output = this.context.createBiquadFilter();\n\t        this._lowpass.Q.value = -3.0102999566398125;\n\t        this._lowpass.type = 'lowpass';\n\t        /**\n\t\t\t *  The dampening control of the feedback\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = new Tone.Param({\n\t            'param': this._lowpass.frequency,\n\t            'units': Tone.Type.Frequency,\n\t            'value': options.dampening\n\t        });\n\t        /**\n\t\t\t *  the feedback gain\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of feedback of the delayed signal.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._feedback.gain;\n\t        //connections\n\t        this._delay.chain(this._lowpass, this._feedback, this._delay);\n\t        this._readOnly([\n\t            'dampening',\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.LowpassCombFilter, Tone.AudioNode);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.LowpassCombFilter.defaults = {\n\t        'delayTime': 0.1,\n\t        'resonance': 0.5,\n\t        'dampening': 3000\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.LowpassCombFilter} this\n\t\t */\n\t    Tone.LowpassCombFilter.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'dampening',\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t        this.dampening.dispose();\n\t        this.dampening = null;\n\t        this.resonance.dispose();\n\t        this.resonance = null;\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this.delayTime = null;\n\t        this._lowpass.disconnect();\n\t        this._lowpass = null;\n\t        this._feedback.disconnect();\n\t        this._feedback = null;\n\t        return this;\n\t    };\n\t    return Tone.LowpassCombFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Merge brings two signals into the left and right\n\t\t *          channels of a single stereo channel.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @example\n\t\t * var merge = new Tone.Merge().toMaster();\n\t\t * //routing a sine tone in the left channel\n\t\t * //and noise in the right channel\n\t\t * var osc = new Tone.Oscillator().connect(merge.left);\n\t\t * var noise = new Tone.Noise().connect(merge.right);\n\t\t * //starting our oscillators\n\t\t * noise.start();\n\t\t * osc.start();\n\t\t */\n\t    Tone.Merge = function () {\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  The left input channel.\n\t\t\t *  Alias for <code>input[0]</code>\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t        this.left = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  The right input channel.\n\t\t\t *  Alias for <code>input[1]</code>.\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t        this.right = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t *  the merger node for the two channels\n\t\t\t *  @type {ChannelMergerNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merger = this.output = this.context.createChannelMerger(2);\n\t        //connections\n\t        this.left.connect(this._merger, 0, 0);\n\t        this.right.connect(this._merger, 0, 1);\n\t        this.left.channelCount = 1;\n\t        this.right.channelCount = 1;\n\t        this.left.channelCountMode = 'explicit';\n\t        this.right.channelCountMode = 'explicit';\n\t    };\n\t    Tone.extend(Tone.Merge, Tone.AudioNode);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Merge} this\n\t\t */\n\t    Tone.Merge.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.left.dispose();\n\t        this.left = null;\n\t        this.right.dispose();\n\t        this.right = null;\n\t        this._merger.disconnect();\n\t        this._merger = null;\n\t        return this;\n\t    };\n\t    return Tone.Merge;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n\t\t *          of an input signal with some averaging applied. It can also get the raw\n\t\t *          value of the input signal.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Number} smoothing The amount of smoothing applied between frames.\n\t\t *  @example\n\t\t * var meter = new Tone.Meter();\n\t\t * var mic = new Tone.UserMedia().open();\n\t\t * //connect mic to the meter\n\t\t * mic.connect(meter);\n\t\t * //the current level of the mic input in decibels\n\t\t * var level = meter.getValue();\n\t\t */\n\t    Tone.Meter = function () {\n\t        var options = Tone.defaults(arguments, ['smoothing'], Tone.Meter);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The analyser node which computes the levels.\n\t\t\t *  @private\n\t\t\t *  @type  {Tone.Analyser}\n\t\t\t */\n\t        this.input = this.output = this._analyser = new Tone.Analyser('waveform', 1024);\n\t        /**\n\t\t\t *  The amount of carryover between the current and last frame.\n\t\t\t *  Only applied meter for \"level\" type.\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.smoothing = options.smoothing;\n\t    };\n\t    Tone.extend(Tone.Meter, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Meter.defaults = { 'smoothing': 0.8 };\n\t    /**\n\t\t *  Get the current decibel value of the incoming signal\n\t\t *  @returns {Decibels}\n\t\t */\n\t    Tone.Meter.prototype.getLevel = function () {\n\t        this._analyser.type = 'fft';\n\t        var values = this._analyser.getValue();\n\t        var offset = 28;\n\t        // normalizes most signal levels\n\t        // TODO: compute loudness from FFT\n\t        return Math.max.apply(this, values) + offset;\n\t    };\n\t    /**\n\t\t *  Get the signal value of the incoming signal\n\t\t *  @returns {Number}\n\t\t */\n\t    Tone.Meter.prototype.getValue = function () {\n\t        this._analyser.type = 'waveform';\n\t        var value = this._analyser.getValue();\n\t        return value[0];\n\t    };\n\t    /**\n\t\t * A value from 0 -> 1 where 0 represents no time averaging with the last analysis frame.\n\t\t * @memberOf Tone.Meter#\n\t\t * @type {Number}\n\t\t * @name smoothing\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Meter.prototype, 'smoothing', {\n\t        get: function () {\n\t            return this._analyser.smoothing;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.smoothing = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Meter} this\n\t\t */\n\t    Tone.Meter.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._analyser.dispose();\n\t        this._analyser = null;\n\t        return this;\n\t    };\n\t    return Tone.Meter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *\t@class  Tone.Split splits an incoming signal into left and right channels.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @example\n\t\t * var split = new Tone.Split();\n\t\t * stereoSignal.connect(split);\n\t\t */\n\t    Tone.Split = function () {\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(0, 2);\n\t        /**\n\t\t\t *  @type {ChannelSplitterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._splitter = this.input = this.context.createChannelSplitter(2);\n\t        this._splitter.channelCount = 2;\n\t        this._splitter.channelCountMode = 'explicit';\n\t        /**\n\t\t\t *  Left channel output.\n\t\t\t *  Alias for <code>output[0]</code>\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.left = this.output[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  Right channel output.\n\t\t\t *  Alias for <code>output[1]</code>\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.right = this.output[1] = new Tone.Gain();\n\t        //connections\n\t        this._splitter.connect(this.left, 0, 0);\n\t        this._splitter.connect(this.right, 1, 0);\n\t    };\n\t    Tone.extend(Tone.Split, Tone.AudioNode);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Split} this\n\t\t */\n\t    Tone.Split.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._splitter.disconnect();\n\t        this.left.dispose();\n\t        this.left = null;\n\t        this.right.dispose();\n\t        this.right = null;\n\t        this._splitter = null;\n\t        return this;\n\t    };\n\t    return Tone.Split;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal\n\t\t *         (which comes out of both the left and the right channel)\n\t\t *         and the 'side' (which only comes out of the the side channels). <br><br>\n\t\t *         <code>\n\t\t *         Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>\n\t\t *         Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideSplit = function () {\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(0, 2);\n\t        /**\n\t\t\t *  split the incoming signal into left and right channels\n\t\t\t *  @type  {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t        this._split = this.input = new Tone.Split();\n\t        /**\n\t\t\t *  The mid send. Connect to mid processing. Alias for\n\t\t\t *  <code>output[0]</code>\n\t\t\t *  @type {Tone.Expr}\n\t\t\t */\n\t        this.mid = this.output[0] = new Tone.Expr('($0 + $1) * $2');\n\t        /**\n\t\t\t *  The side output. Connect to side processing. Alias for\n\t\t\t *  <code>output[1]</code>\n\t\t\t *  @type {Tone.Expr}\n\t\t\t */\n\t        this.side = this.output[1] = new Tone.Expr('($0 - $1) * $2');\n\t        this._split.connect(this.mid, 0, 0);\n\t        this._split.connect(this.mid, 1, 1);\n\t        this._split.connect(this.side, 0, 0);\n\t        this._split.connect(this.side, 1, 1);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this.mid, 0, 2);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this.side, 0, 2);\n\t    };\n\t    Tone.extend(Tone.MidSideSplit, Tone.AudioNode);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideSplit} this\n\t\t */\n\t    Tone.MidSideSplit.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._split.dispose();\n\t        this._split = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideSplit;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal\n\t\t *         (which comes out of both the left and the right channel)\n\t\t *         and the 'side' (which only comes out of the the side channels).\n\t\t *         MidSideMerge merges the mid and side signal after they've been seperated\n\t\t *         by Tone.MidSideSplit.<br><br>\n\t\t *         <code>\n\t\t *         Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>\n\t\t *         Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideMerge = function () {\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  The mid signal input. Alias for\n\t\t\t *  <code>input[0]</code>\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.mid = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  recombine the mid/side into Left\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._left = new Tone.Expr('($0 + $1) * $2');\n\t        /**\n\t\t\t *  The side signal input. Alias for\n\t\t\t *  <code>input[1]</code>\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.side = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t *  recombine the mid/side into Right\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._right = new Tone.Expr('($0 - $1) * $2');\n\t        /**\n\t\t\t *  Merge the left/right signal back into a stereo signal.\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = this.output = new Tone.Merge();\n\t        this.mid.connect(this._left, 0, 0);\n\t        this.side.connect(this._left, 0, 1);\n\t        this.mid.connect(this._right, 0, 0);\n\t        this.side.connect(this._right, 0, 1);\n\t        this._left.connect(this._merge, 0, 0);\n\t        this._right.connect(this._merge, 0, 1);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this._left, 0, 2);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this._right, 0, 2);\n\t    };\n\t    Tone.extend(Tone.MidSideMerge, Tone.AudioNode);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideMerge} this\n\t\t */\n\t    Tone.MidSideMerge.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._left.dispose();\n\t        this._left = null;\n\t        this._right.dispose();\n\t        this._right = null;\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideMerge;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.MidSideCompressor applies two different compressors to the mid\n\t\t *         and side signal components. See Tone.MidSideSplit.\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Object} options The options that are passed to the mid and side\n\t\t *                          compressors.\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideCompressor = function (options) {\n\t        Tone.AudioNode.call(this);\n\t        options = Tone.defaultArg(options, Tone.MidSideCompressor.defaults);\n\t        /**\n\t\t\t *  the mid/side split\n\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideSplit = this.input = new Tone.MidSideSplit();\n\t        /**\n\t\t\t *  the mid/side recombination\n\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideMerge = this.output = new Tone.MidSideMerge();\n\t        /**\n\t\t\t *  The compressor applied to the mid signal\n\t\t\t *  @type  {Tone.Compressor}\n\t\t\t */\n\t        this.mid = new Tone.Compressor(options.mid);\n\t        /**\n\t\t\t *  The compressor applied to the side signal\n\t\t\t *  @type  {Tone.Compressor}\n\t\t\t */\n\t        this.side = new Tone.Compressor(options.side);\n\t        this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n\t        this._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n\t        this._readOnly([\n\t            'mid',\n\t            'side'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MidSideCompressor, Tone.AudioNode);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MidSideCompressor.defaults = {\n\t        'mid': {\n\t            'ratio': 3,\n\t            'threshold': -24,\n\t            'release': 0.03,\n\t            'attack': 0.02,\n\t            'knee': 16\n\t        },\n\t        'side': {\n\t            'ratio': 6,\n\t            'threshold': -30,\n\t            'release': 0.25,\n\t            'attack': 0.03,\n\t            'knee': 10\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MidSideCompressor} this\n\t\t */\n\t    Tone.MidSideCompressor.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'mid',\n\t            'side'\n\t        ]);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._midSideSplit.dispose();\n\t        this._midSideSplit = null;\n\t        this._midSideMerge.dispose();\n\t        this._midSideMerge = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideCompressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Mono coerces the incoming mono or stereo signal into a mono signal\n\t\t *         where both left and right channels have the same value. This can be useful\n\t\t *         for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t */\n\t    Tone.Mono = function () {\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(1, 0);\n\t        /**\n\t\t\t *  merge the signal\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = this.output = new Tone.Merge();\n\t        this.input.connect(this._merge, 0, 0);\n\t        this.input.connect(this._merge, 0, 1);\n\t        this.input.gain.value = Tone.dbToGain(-10);\n\t    };\n\t    Tone.extend(Tone.Mono);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Mono} this\n\t\t */\n\t    Tone.Mono.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        return this;\n\t    };\n\t    return Tone.Mono;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A compressor with seperate controls over low/mid/high dynamics\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {Object} options The low/mid/high compressor settings.\n\t\t *  @example\n\t\t *  var multiband = new Tone.MultibandCompressor({\n\t\t *  \t\"lowFrequency\" : 200,\n\t\t *  \t\"highFrequency\" : 1300\n\t\t *  \t\"low\" : {\n\t\t *  \t\t\"threshold\" : -12\n\t\t *  \t}\n\t\t *  })\n\t\t */\n\t    Tone.MultibandCompressor = function (options) {\n\t        Tone.AudioNode.call(this);\n\t        options = Tone.defaultArg(arguments, Tone.MultibandCompressor.defaults);\n\t        /**\n\t\t\t *  split the incoming signal into high/mid/low\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._splitter = this.input = new Tone.MultibandSplit({\n\t            'lowFrequency': options.lowFrequency,\n\t            'highFrequency': options.highFrequency\n\t        });\n\t        /**\n\t\t\t *  low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = this._splitter.lowFrequency;\n\t        /**\n\t\t\t *  mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = this._splitter.highFrequency;\n\t        /**\n\t\t\t *  the output\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  The compressor applied to the low frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.low = new Tone.Compressor(options.low);\n\t        /**\n\t\t\t *  The compressor applied to the mid frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.mid = new Tone.Compressor(options.mid);\n\t        /**\n\t\t\t *  The compressor applied to the high frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.high = new Tone.Compressor(options.high);\n\t        //connect the compressor\n\t        this._splitter.low.chain(this.low, this.output);\n\t        this._splitter.mid.chain(this.mid, this.output);\n\t        this._splitter.high.chain(this.high, this.output);\n\t        this._readOnly([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MultibandCompressor, Tone.AudioNode);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MultibandCompressor.defaults = {\n\t        'low': Tone.Compressor.defaults,\n\t        'mid': Tone.Compressor.defaults,\n\t        'high': Tone.Compressor.defaults,\n\t        'lowFrequency': 250,\n\t        'highFrequency': 2000\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MultibandCompressor} this\n\t\t */\n\t    Tone.MultibandCompressor.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._splitter.dispose();\n\t        this._writable([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t        this.low.dispose();\n\t        this.mid.dispose();\n\t        this.high.dispose();\n\t        this._splitter = null;\n\t        this.low = null;\n\t        this.mid = null;\n\t        this.high = null;\n\t        this.lowFrequency = null;\n\t        this.highFrequency = null;\n\t        return this;\n\t    };\n\t    return Tone.MultibandCompressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Panner is an equal power Left/Right Panner and does not\n\t\t *          support 3D. Panner uses the StereoPannerNode when available.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {NormalRange} [initialPan=0] The initail panner value (center).\n\t\t *  @example\n\t\t *  //pan the input signal hard right.\n\t\t *  var panner = new Tone.Panner(1);\n\t\t */\n\t    Tone.Panner = function (initialPan) {\n\t        Tone.AudioNode.call(this);\n\t        if (Tone.Panner.hasStereoPanner) {\n\t            /**\n\t\t\t\t *  the panner node\n\t\t\t\t *  @type {StereoPannerNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._panner = this.input = this.output = this.context.createStereoPanner();\n\t            /**\n\t\t\t\t *  The pan control. -1 = hard left, 1 = hard right.\n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t            this.pan = this._panner.pan;\n\t        } else {\n\t            /**\n\t\t\t\t *  the dry/wet knob\n\t\t\t\t *  @type {Tone.CrossFade}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._crossFade = new Tone.CrossFade();\n\t            /**\n\t\t\t\t *  @type {Tone.Merge}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._merger = this.output = new Tone.Merge();\n\t            /**\n\t\t\t\t *  @type {Tone.Split}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._splitter = this.input = new Tone.Split();\n\t            /**\n\t\t\t\t *  The pan control. -1 = hard left, 1 = hard right.\n\t\t\t\t *  @type {AudioRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t            this.pan = new Tone.Signal(0, Tone.Type.AudioRange);\n\t            /**\n\t\t\t\t *  always sends 0\n\t\t\t\t *  @type {Tone.Zero}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._zero = new Tone.Zero();\n\t            /**\n\t\t\t\t *  The analog to gain conversion\n\t\t\t\t *  @type  {Tone.AudioToGain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._a2g = new Tone.AudioToGain();\n\t            //CONNECTIONS:\n\t            this._zero.connect(this._a2g);\n\t            this.pan.chain(this._a2g, this._crossFade.fade);\n\t            //left channel is a, right channel is b\n\t            this._splitter.connect(this._crossFade, 0, 0);\n\t            this._splitter.connect(this._crossFade, 1, 1);\n\t            //merge it back together\n\t            this._crossFade.a.connect(this._merger, 0, 0);\n\t            this._crossFade.b.connect(this._merger, 0, 1);\n\t        }\n\t        //initial value\n\t        this.pan.value = Tone.defaultArg(initialPan, 0);\n\t        this._readOnly('pan');\n\t    };\n\t    Tone.extend(Tone.Panner, Tone.AudioNode);\n\t    /**\n\t\t *  Indicates if the panner is using the new StereoPannerNode internally\n\t\t *  @type  {Boolean}\n\t\t *  @static\n\t\t *  @private\n\t\t *  @readOnly\n\t\t */\n\t    Tone.Panner.hasStereoPanner = Tone.context && Tone.isFunction(Tone.context.createStereoPanner);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Panner} this\n\t\t */\n\t    Tone.Panner.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable('pan');\n\t        if (Tone.Panner.hasStereoPanner) {\n\t            this._panner.disconnect();\n\t            this._panner = null;\n\t            this.pan = null;\n\t        } else {\n\t            this._zero.dispose();\n\t            this._zero = null;\n\t            this._crossFade.dispose();\n\t            this._crossFade = null;\n\t            this._splitter.dispose();\n\t            this._splitter = null;\n\t            this._merger.dispose();\n\t            this._merger = null;\n\t            this.pan.dispose();\n\t            this.pan = null;\n\t            this._a2g.dispose();\n\t            this._a2g = null;\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Panner;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A spatialized panner node which supports equalpower or HRTF panning.\n\t\t *          Tries to normalize the API across various browsers. See Tone.Listener\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Number} positionX The initial x position.\n\t\t *  @param {Number} positionY The initial y position.\n\t\t *  @param {Number} positionZ The initial z position.\n\t\t */\n\t    Tone.Panner3D = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'positionX',\n\t            'positionY',\n\t            'positionZ'\n\t        ], Tone.Panner3D);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The panner node\n\t\t\t *  @type {PannerNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = this.input = this.output = this.context.createPanner();\n\t        //set some values\n\t        this._panner.panningModel = options.panningModel;\n\t        this._panner.maxDistance = options.maxDistance;\n\t        this._panner.distanceModel = options.distanceModel;\n\t        this._panner.coneOuterGain = options.coneOuterGain;\n\t        this._panner.coneOuterAngle = options.coneOuterAngle;\n\t        this._panner.coneInnerAngle = options.coneInnerAngle;\n\t        this._panner.refDistance = options.refDistance;\n\t        this._panner.rolloffFactor = options.rolloffFactor;\n\t        /**\n\t\t\t *  Holds the current orientation\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._orientation = [\n\t            options.orientationX,\n\t            options.orientationY,\n\t            options.orientationZ\n\t        ];\n\t        /**\n\t\t\t *  Holds the current position\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._position = [\n\t            options.positionX,\n\t            options.positionY,\n\t            options.positionZ\n\t        ];\n\t        // set the default position/orientation\n\t        this.orientationX = options.orientationX;\n\t        this.orientationY = options.orientationY;\n\t        this.orientationZ = options.orientationZ;\n\t        this.positionX = options.positionX;\n\t        this.positionY = options.positionY;\n\t        this.positionZ = options.positionZ;\n\t    };\n\t    Tone.extend(Tone.Panner3D, Tone.AudioNode);\n\t    /**\n\t\t *  Defaults according to the specification\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Panner3D.defaults = {\n\t        'positionX': 0,\n\t        'positionY': 0,\n\t        'positionZ': 0,\n\t        'orientationX': 0,\n\t        'orientationY': 0,\n\t        'orientationZ': 0,\n\t        'panningModel': 'equalpower',\n\t        'maxDistance': 10000,\n\t        'distanceModel': 'inverse',\n\t        'coneOuterGain': 0,\n\t        'coneOuterAngle': 360,\n\t        'coneInnerAngle': 360,\n\t        'refDistance': 1,\n\t        'rolloffFactor': 1\n\t    };\n\t    /**\n\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.Panner3D.prototype._rampTimeConstant = 0.01;\n\t    /**\n\t\t *  Sets the position of the source in 3d space.\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.setPosition = function (x, y, z) {\n\t        if (this._panner.positionX) {\n\t            var now = this.now();\n\t            this._panner.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this._panner.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this._panner.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this._panner.setPosition(x, y, z);\n\t        }\n\t        this._position = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the orientation of the source in 3d space.\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.setOrientation = function (x, y, z) {\n\t        if (this._panner.orientationX) {\n\t            var now = this.now();\n\t            this._panner.orientationX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this._panner.orientationY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this._panner.orientationZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this._panner.setOrientation(x, y, z);\n\t        }\n\t        this._orientation = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The x position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionX\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionX', {\n\t        set: function (pos) {\n\t            this._position[0] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionY\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionY', {\n\t        set: function (pos) {\n\t            this._position[1] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionZ\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionZ', {\n\t        set: function (pos) {\n\t            this._position[2] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationX\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationX', {\n\t        set: function (pos) {\n\t            this._orientation[0] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationY\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationY', {\n\t        set: function (pos) {\n\t            this._orientation[1] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationZ\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationZ', {\n\t        set: function (pos) {\n\t            this._orientation[2] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  Proxy a property on the panner to an exposed public propery\n\t\t *  @param  {String}  prop\n\t\t *  @private\n\t\t */\n\t    Tone.Panner3D._aliasProperty = function (prop) {\n\t        Object.defineProperty(Tone.Panner3D.prototype, prop, {\n\t            set: function (val) {\n\t                this._panner[prop] = val;\n\t            },\n\t            get: function () {\n\t                return this._panner[prop];\n\t            }\n\t        });\n\t    };\n\t    /**\n\t\t *  The panning model. Either \"equalpower\" or \"HRTF\".\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name panningModel\n\t\t */\n\t    Tone.Panner3D._aliasProperty('panningModel');\n\t    /**\n\t\t *  A reference distance for reducing volume as source move further from the listener\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name refDistance\n\t\t */\n\t    Tone.Panner3D._aliasProperty('refDistance');\n\t    /**\n\t\t *  Describes how quickly the volume is reduced as source moves away from listener.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name rolloffFactor\n\t\t */\n\t    Tone.Panner3D._aliasProperty('rolloffFactor');\n\t    /**\n\t\t *  The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name distanceModel\n\t\t */\n\t    Tone.Panner3D._aliasProperty('distanceModel');\n\t    /**\n\t\t *  The angle, in degrees, inside of which there will be no volume reduction\n\t\t *  @type {Degrees}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneInnerAngle\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneInnerAngle');\n\t    /**\n\t\t *  The angle, in degrees, outside of which the volume will be reduced\n\t\t *  to a constant value of coneOuterGain\n\t\t *  @type {Degrees}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneOuterAngle\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneOuterAngle');\n\t    /**\n\t\t *  The gain outside of the coneOuterAngle\n\t\t *  @type {Gain}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneOuterGain\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneOuterGain');\n\t    /**\n\t\t *  The maximum distance between source and listener,\n\t\t *  after which the volume will not be reduced any further.\n\t\t *  @type {Positive}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name maxDistance\n\t\t */\n\t    Tone.Panner3D._aliasProperty('maxDistance');\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._panner.disconnect();\n\t        this._panner = null;\n\t        this._orientation = null;\n\t        this._position = null;\n\t        return this;\n\t    };\n\t    return Tone.Panner3D;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PanVol is a Tone.Panner and Tone.Volume in one.\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {AudioRange} pan the initial pan\n\t\t *  @param {number} volume The output volume.\n\t\t *  @example\n\t\t * //pan the incoming signal left and drop the volume\n\t\t * var panVol = new Tone.PanVol(-0.25, -12);\n\t\t */\n\t    Tone.PanVol = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'pan',\n\t            'volume'\n\t        ], Tone.PanVol);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The panning node\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = this.input = new Tone.Panner(options.pan);\n\t        /**\n\t\t\t *  The L/R panning control.\n\t\t\t *  @type {AudioRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.pan = this._panner.pan;\n\t        /**\n\t\t\t *  The volume node\n\t\t\t *  @type {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t *  The volume control in decibels.\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        //connections\n\t        this._panner.connect(this._volume);\n\t        this.mute = options.mute;\n\t        this._readOnly([\n\t            'pan',\n\t            'volume'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PanVol, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.PanVol.defaults = {\n\t        'pan': 0,\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute/unmute the volume\n\t\t * @memberOf Tone.PanVol#\n\t\t * @name mute\n\t\t * @type {Boolean}\n\t\t */\n\t    Object.defineProperty(Tone.PanVol.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.PanVol} this\n\t\t */\n\t    Tone.PanVol.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'pan',\n\t            'volume'\n\t        ]);\n\t        this._panner.dispose();\n\t        this._panner = null;\n\t        this.pan = null;\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.PanVol;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Solo lets you isolate a specific audio stream. When\n\t\t *         an instance is set to `solo=true`, it will mute all other instances.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @example\n\t\t * var soloA = new Tone.Solo()\n\t\t * var soloB = new Tone.Solo()\n\t\t * soloA.solo = true\n\t\t * //no audio will pass through soloB\n\t\t */\n\t    Tone.Solo = function () {\n\t        var options = Tone.defaults(arguments, ['solo'], Tone.Solo);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The input and output node\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.input = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  A bound _soloed method\n\t\t\t *  @type  {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._soloBind = this._soloed.bind(this);\n\t        //listen for solo events class-wide.\n\t        this.context.on('solo', this._soloBind);\n\t        //set initially\n\t        this.solo = options.solo;\n\t    };\n\t    Tone.extend(Tone.Solo, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t */\n\t    Tone.Solo.defaults = { solo: false };\n\t    /**\n\t\t *  Isolates this instance and mutes all other instances of Tone.Solo.\n\t\t *  Only one instance can be soloed at a time. A soloed\n\t\t *  instance will report `solo=false` when another instance is soloed.\n\t\t *  @memberOf Tone.Solo#\n\t\t *  @type {Boolean}\n\t\t *  @name solo\n\t\t */\n\t    Object.defineProperty(Tone.Solo.prototype, 'solo', {\n\t        get: function () {\n\t            return this._isSoloed();\n\t        },\n\t        set: function (solo) {\n\t            if (solo) {\n\t                this._addSolo();\n\t            } else {\n\t                this._removeSolo();\n\t            }\n\t            this.context.emit('solo', this);\n\t        }\n\t    });\n\t    /**\n\t\t *  If the current instance is muted, i.e. another instance is soloed\n\t\t *  @memberOf Tone.Solo#\n\t\t *  @type {Boolean}\n\t\t *  @name muted\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Solo.prototype, 'muted', {\n\t        get: function () {\n\t            return this.input.gain.value === 0;\n\t        }\n\t    });\n\t    /**\n\t\t * Add this to the soloed array\n\t\t * @private\n\t\t */\n\t    Tone.Solo.prototype._addSolo = function () {\n\t        if (!Tone.isArray(this.context._currentSolo)) {\n\t            this.context._currentSolo = [];\n\t        }\n\t        if (!this._isSoloed()) {\n\t            this.context._currentSolo.push(this);\n\t        }\n\t    };\n\t    /**\n\t\t * Remove this from the soloed array\n\t\t * @private\n\t\t */\n\t    Tone.Solo.prototype._removeSolo = function () {\n\t        if (this._isSoloed()) {\n\t            var index = this.context._currentSolo.indexOf(this);\n\t            this.context._currentSolo.splice(index, 1);\n\t        }\n\t    };\n\t    /**\n\t\t * @return {Boolean} Is this on the soloed array\n\t\t * @private\n\t\t */\n\t    Tone.Solo.prototype._isSoloed = function () {\n\t        if (Tone.isArray(this.context._currentSolo)) {\n\t            return this.context._currentSolo.length !== 0 && this.context._currentSolo.indexOf(this) !== -1;\n\t        } else {\n\t            return false;\n\t        }\n\t    };\n\t    /**\n\t\t * @return {Boolean} Returns true if no one is soloed\n\t\t * @private\n\t\t */\n\t    Tone.Solo.prototype._noSolos = function () {\n\t        return !Tone.isArray(this.context._currentSolo) || this.context._currentSolo.length === 0;\n\t    };\n\t    /**\n\t\t *  Solo the current instance and unsolo all other instances.\n\t\t *  @param  {Tone.Solo}  instance  The instance which is being soloed/unsoloed.\n\t\t *  @private\n\t\t */\n\t    Tone.Solo.prototype._soloed = function () {\n\t        if (this._isSoloed()) {\n\t            this.input.gain.value = 1;\n\t        } else if (this._noSolos()) {\n\t            //no one is soloed\n\t            this.input.gain.value = 1;\n\t        } else {\n\t            this.input.gain.value = 0;\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Solo}  this\n\t\t */\n\t    Tone.Solo.prototype.dispose = function () {\n\t        this.context.off('solo', this._soloBind);\n\t        this._removeSolo();\n\t        this._soloBind = null;\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.Solo;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class  Get the current waveform data of the connected audio source.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Number=} size The size of the FFT. Value must be a power of\n\t\t *                       two in the range 32 to 32768.\n\t\t */\n\t    Tone.Waveform = function () {\n\t        var options = Tone.defaults(arguments, ['size'], Tone.Waveform);\n\t        options.type = Tone.Analyser.Type.Waveform;\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The analyser node.\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Analyser}\n\t\t\t */\n\t        this._analyser = this.input = this.output = new Tone.Analyser(options);\n\t    };\n\t    Tone.extend(Tone.Waveform, Tone.AudioNode);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Waveform.defaults = { 'size': 1024 };\n\t    /**\n\t\t *  Gets the waveform of the audio source. Returns the waveform data\n\t\t *  of length [size](#size) as a Float32Array with values between -1 and 1.\n\t\t *  @returns {TypedArray}\n\t\t */\n\t    Tone.Waveform.prototype.getValue = function () {\n\t        return this._analyser.getValue();\n\t    };\n\t    /**\n\t\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t\t *  @memberOf Tone.Waveform#\n\t\t *  @type {Number}\n\t\t *  @name size\n\t\t */\n\t    Object.defineProperty(Tone.Waveform.prototype, 'size', {\n\t        get: function () {\n\t            return this._analyser.size;\n\t        },\n\t        set: function (size) {\n\t            this._analyser.size = size;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Waveform}  this\n\t\t */\n\t    Tone.Waveform.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._analyser.dispose();\n\t        this._analyser = null;\n\t    };\n\t    return Tone.Waveform;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.CtrlInterpolate will interpolate between given values based\n\t\t *         on the \"index\" property. Passing in an array or object literal\n\t\t *         will interpolate each of the parameters. Note (i.e. \"C3\")\n\t\t *         and Time (i.e. \"4n + 2\") can be interpolated. All other values are\n\t\t *         assumed to be numbers. \n\t\t *  @example\n\t\t * var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);\n\t\t * interp.index = 0.75;\n\t\t * interp.value; //returns 1.5\n\t\t *\n\t\t *  @example\n\t\t * var interp = new Tone.CtrlInterpolate([\n\t\t * \t[2, 4, 5],\n\t\t * \t[9, 3, 2],\n\t\t * ]);\n\t\t * @param {Array} values The array of values to interpolate over\n\t\t * @param {Positive} index The initial interpolation index.\n\t\t * @extends {Tone}\n\t\t */\n\t    Tone.CtrlInterpolate = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'values',\n\t            'index'\n\t        ], Tone.CtrlInterpolate);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The values to interpolate between\n\t\t\t *  @type  {Array}\n\t\t\t */\n\t        this.values = options.values;\n\t        /**\n\t\t\t *  The interpolated index between values. For example: a value of 1.5\n\t\t\t *  would interpolate equally between the value at index 1\n\t\t\t *  and the value at index 2. \n\t\t\t *  @example\n\t\t\t * interp.index = 0; \n\t\t\t * interp.value; //returns the value at 0\n\t\t\t * interp.index = 0.5;\n\t\t\t * interp.value; //returns the value between indices 0 and 1. \n\t\t\t *  @type  {Positive}\n\t\t\t */\n\t        this.index = options.index;\n\t    };\n\t    Tone.extend(Tone.CtrlInterpolate);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlInterpolate.defaults = {\n\t        'index': 0,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  The current interpolated value based on the index\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlInterpolate#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlInterpolate.prototype, 'value', {\n\t        get: function () {\n\t            var index = this.index;\n\t            index = Math.min(index, this.values.length - 1);\n\t            var lowerPosition = Math.floor(index);\n\t            var lower = this.values[lowerPosition];\n\t            var upper = this.values[Math.ceil(index)];\n\t            return this._interpolate(index - lowerPosition, lower, upper);\n\t        }\n\t    });\n\t    /**\n\t\t *  Internal interpolation routine\n\t\t *  @param  {NormalRange}  index  The index between the lower and upper\n\t\t *  @param  {*}  lower \n\t\t *  @param  {*}  upper \n\t\t *  @return  {*}  The interpolated value\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlInterpolate.prototype._interpolate = function (index, lower, upper) {\n\t        if (Tone.isArray(lower)) {\n\t            var retArray = [];\n\t            for (var i = 0; i < lower.length; i++) {\n\t                retArray[i] = this._interpolate(index, lower[i], upper[i]);\n\t            }\n\t            return retArray;\n\t        } else if (Tone.isObject(lower)) {\n\t            var retObj = {};\n\t            for (var attr in lower) {\n\t                retObj[attr] = this._interpolate(index, lower[attr], upper[attr]);\n\t            }\n\t            return retObj;\n\t        } else {\n\t            lower = this._toNumber(lower);\n\t            upper = this._toNumber(upper);\n\t            return (1 - index) * lower + index * upper;\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert from the given type into a number\n\t\t *  @param  {Number|String}  value\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlInterpolate.prototype._toNumber = function (val) {\n\t        if (Tone.isNumber(val)) {\n\t            return val;\n\t        } else {\n\t            //otherwise assume that it's Time...\n\t            return this.toSeconds(val);\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.CtrlInterpolate}  this\n\t\t */\n\t    Tone.CtrlInterpolate.prototype.dispose = function () {\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlInterpolate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.CtrlMarkov represents a Markov Chain where each call\n\t\t *         to Tone.CtrlMarkov.next will move to the next state. If the next\n\t\t *         state choice is an array, the next state is chosen randomly with\n\t\t *         even probability for all of the choices. For a weighted probability\n\t\t *         of the next choices, pass in an object with \"state\" and \"probability\" attributes. \n\t\t *         The probabilities will be normalized and then chosen. If no next options\n\t\t *         are given for the current state, the state will stay there. \n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var chain = new Tone.CtrlMarkov({\n\t\t * \t\"beginning\" : [\"end\", \"middle\"],\n\t\t * \t\"middle\" : \"end\"\n\t\t * });\n\t\t * chain.value = \"beginning\";\n\t\t * chain.next(); //returns \"end\" or \"middle\" with 50% probability\n\t\t *\n\t\t *  @example\n\t\t * var chain = new Tone.CtrlMarkov({\n\t\t * \t\"beginning\" : [{\"value\" : \"end\", \"probability\" : 0.8}, \n\t\t * \t\t\t\t\t{\"value\" : \"middle\", \"probability\" : 0.2}],\n\t\t * \t\"middle\" : \"end\"\n\t\t * });\n\t\t * chain.value = \"beginning\";\n\t\t * chain.next(); //returns \"end\" with 80% probability or \"middle\" with 20%.\n\t\t *  @param {Object} values An object with the state names as the keys\n\t\t *                         and the next state(s) as the values. \n\t\t */\n\t    Tone.CtrlMarkov = function (values, initial) {\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The Markov values with states as the keys\n\t\t\t *  and next state(s) as the values. \n\t\t\t *  @type {Object}\n\t\t\t */\n\t        this.values = Tone.defaultArg(values, {});\n\t        /**\n\t\t\t *  The current state of the Markov values. The next\n\t\t\t *  state will be evaluated and returned when Tone.CtrlMarkov.next\n\t\t\t *  is invoked.\n\t\t\t *  @type {String}\n\t\t\t */\n\t        this.value = Tone.defaultArg(initial, Object.keys(this.values)[0]);\n\t    };\n\t    Tone.extend(Tone.CtrlMarkov);\n\t    /**\n\t\t *  Returns the next state of the Markov values. \n\t\t *  @return  {String}\n\t\t */\n\t    Tone.CtrlMarkov.prototype.next = function () {\n\t        if (this.values.hasOwnProperty(this.value)) {\n\t            var next = this.values[this.value];\n\t            if (Tone.isArray(next)) {\n\t                var distribution = this._getProbDistribution(next);\n\t                var rand = Math.random();\n\t                var total = 0;\n\t                for (var i = 0; i < distribution.length; i++) {\n\t                    var dist = distribution[i];\n\t                    if (rand > total && rand < total + dist) {\n\t                        var chosen = next[i];\n\t                        if (Tone.isObject(chosen)) {\n\t                            this.value = chosen.value;\n\t                        } else {\n\t                            this.value = chosen;\n\t                        }\n\t                    }\n\t                    total += dist;\n\t                }\n\t            } else {\n\t                this.value = next;\n\t            }\n\t        }\n\t        return this.value;\n\t    };\n\t    /**\n\t\t *  Choose randomly from an array weighted options in the form \n\t\t *  {\"state\" : string, \"probability\" : number} or an array of values\n\t\t *  @param  {Array}  options \n\t\t *  @return  {Array}  The randomly selected choice\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlMarkov.prototype._getProbDistribution = function (options) {\n\t        var distribution = [];\n\t        var total = 0;\n\t        var needsNormalizing = false;\n\t        for (var i = 0; i < options.length; i++) {\n\t            var option = options[i];\n\t            if (Tone.isObject(option)) {\n\t                needsNormalizing = true;\n\t                distribution[i] = option.probability;\n\t            } else {\n\t                distribution[i] = 1 / options.length;\n\t            }\n\t            total += distribution[i];\n\t        }\n\t        if (needsNormalizing) {\n\t            //normalize the values\n\t            for (var j = 0; j < distribution.length; j++) {\n\t                distribution[j] = distribution[j] / total;\n\t            }\n\t        }\n\t        return distribution;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.CtrlMarkov}  this\n\t\t */\n\t    Tone.CtrlMarkov.prototype.dispose = function () {\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlMarkov;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Generate patterns from an array of values.\n\t\t *         Has a number of arpeggiation and randomized\n\t\t *         selection patterns. \n\t\t *           <ul>\n\t\t *  \t        <li>\"up\" - cycles upward</li>\n\t\t *  \t\t\t<li>\"down\" - cycles downward</li>\n\t\t *  \t\t\t<li>\"upDown\" - up then and down</li>\n\t\t *  \t\t\t<li>\"downUp\" - cycles down then and up</li>\n\t\t *  \t\t\t<li>\"alternateUp\" - jump up two and down one</li>\n\t\t *  \t\t\t<li>\"alternateDown\" - jump down two and up one</li>\n\t\t *  \t\t\t<li>\"random\" - randomly select an index</li>\n\t\t *  \t\t\t<li>\"randomWalk\" - randomly moves one index away from the current position</li>\n\t\t *  \t\t\t<li>\"randomOnce\" - randomly select an index without repeating until all values have been chosen.</li>\n\t\t *     \t\t</ul>\n\t\t *  @param  {Array}  values   An array of options to choose from.\n\t\t *  @param  {Tone.CtrlPattern.Type=}  type  The name of the pattern.\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.CtrlPattern = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'values',\n\t            'type'\n\t        ], Tone.CtrlPattern);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The array of values to arpeggiate over\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.values = options.values;\n\t        /**\n\t\t\t *  The current position in the values array\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.index = 0;\n\t        /**\n\t\t\t *  The type placeholder\n\t\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = null;\n\t        /**\n\t\t\t *  Shuffled values for the RandomOnce type\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shuffled = null;\n\t        /**\n\t\t\t *  The direction of the movement\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._direction = null;\n\t        this.type = options.type;\n\t    };\n\t    Tone.extend(Tone.CtrlPattern);\n\t    /**\n\t\t *  The Control Patterns\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t */\n\t    Tone.CtrlPattern.Type = {\n\t        Up: 'up',\n\t        Down: 'down',\n\t        UpDown: 'upDown',\n\t        DownUp: 'downUp',\n\t        AlternateUp: 'alternateUp',\n\t        AlternateDown: 'alternateDown',\n\t        Random: 'random',\n\t        RandomWalk: 'randomWalk',\n\t        RandomOnce: 'randomOnce'\n\t    };\n\t    /**\n\t\t *  The default values. \n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlPattern.defaults = {\n\t        'type': Tone.CtrlPattern.Type.Up,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  The value at the current index of the pattern.\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlPattern#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'value', {\n\t        get: function () {\n\t            //some safeguards\n\t            if (this.values.length === 0) {\n\t                return;\n\t            } else if (this.values.length === 1) {\n\t                return this.values[0];\n\t            }\n\t            this.index = Math.min(this.index, this.values.length - 1);\n\t            var val = this.values[this.index];\n\t            if (this.type === Tone.CtrlPattern.Type.RandomOnce) {\n\t                if (this.values.length !== this._shuffled.length) {\n\t                    this._shuffleValues();\n\t                }\n\t                val = this.values[this._shuffled[this.index]];\n\t            }\n\t            return val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The pattern used to select the next\n\t\t *  item from the values array\n\t\t *  @memberOf Tone.CtrlPattern#\n\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._type = type;\n\t            this._shuffled = null;\n\t            //the first index\n\t            if (this._type === Tone.CtrlPattern.Type.Up || this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.RandomOnce || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t                this.index = 0;\n\t            } else if (this._type === Tone.CtrlPattern.Type.Down || this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t                this.index = this.values.length - 1;\n\t            }\n\t            //the direction\n\t            if (this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            } else if (this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t            //randoms\n\t            if (this._type === Tone.CtrlPattern.Type.RandomOnce) {\n\t                this._shuffleValues();\n\t            } else if (this._type === Tone.CtrlPattern.Random) {\n\t                this.index = Math.floor(Math.random() * this.values.length);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Return the next value given the current position\n\t\t *  and pattern.\n\t\t *  @return {*} The next value\n\t\t */\n\t    Tone.CtrlPattern.prototype.next = function () {\n\t        var type = this.type;\n\t        //choose the next index\n\t        if (type === Tone.CtrlPattern.Type.Up) {\n\t            this.index++;\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.Down) {\n\t            this.index--;\n\t            if (this.index < 0) {\n\t                this.index = this.values.length - 1;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.UpDown || type === Tone.CtrlPattern.Type.DownUp) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index++;\n\t            } else {\n\t                this.index--;\n\t            }\n\t            if (this.index < 0) {\n\t                this.index = 1;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            } else if (this.index >= this.values.length) {\n\t                this.index = this.values.length - 2;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.Random) {\n\t            this.index = Math.floor(Math.random() * this.values.length);\n\t        } else if (type === Tone.CtrlPattern.Type.RandomWalk) {\n\t            if (Math.random() < 0.5) {\n\t                this.index--;\n\t                this.index = Math.max(this.index, 0);\n\t            } else {\n\t                this.index++;\n\t                this.index = Math.min(this.index, this.values.length - 1);\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.RandomOnce) {\n\t            this.index++;\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t                //reshuffle the values for next time\n\t                this._shuffleValues();\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.AlternateUp) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index += 2;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            } else {\n\t                this.index -= 1;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.AlternateDown) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index += 1;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            } else {\n\t                this.index -= 2;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t            if (this.index < 0) {\n\t                this.index = this.values.length - 1;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t        }\n\t        return this.value;\n\t    };\n\t    /**\n\t\t *  Shuffles the values and places the results into the _shuffled\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlPattern.prototype._shuffleValues = function () {\n\t        var copy = [];\n\t        this._shuffled = [];\n\t        for (var i = 0; i < this.values.length; i++) {\n\t            copy[i] = i;\n\t        }\n\t        while (copy.length > 0) {\n\t            var randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n\t            this._shuffled.push(randVal[0]);\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.CtrlPattern} this\n\t\t */\n\t    Tone.CtrlPattern.prototype.dispose = function () {\n\t        this._shuffled = null;\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlPattern;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Choose a random value.\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var randomWalk = new Tone.CtrlRandom({\n\t\t * \t\"min\" : 0,\n\t\t * \t\"max\" : 10,\n\t\t * \t\"integer\" : true\n\t\t * });\n\t\t * randomWalk.eval();\n\t\t *\n\t\t *  @param {Number|Time=} min The minimum return value.\n\t\t *  @param {Number|Time=} max The maximum return value.\n\t\t */\n\t    Tone.CtrlRandom = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'min',\n\t            'max'\n\t        ], Tone.CtrlRandom);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The minimum return value\n\t\t\t *  @type  {Number|Time}\n\t\t\t */\n\t        this.min = options.min;\n\t        /**\n\t\t\t *  The maximum return value\n\t\t\t *  @type  {Number|Time}\n\t\t\t */\n\t        this.max = options.max;\n\t        /**\n\t\t\t *  If the return value should be an integer\n\t\t\t *  @type  {Boolean}\n\t\t\t */\n\t        this.integer = options.integer;\n\t    };\n\t    Tone.extend(Tone.CtrlRandom);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlRandom.defaults = {\n\t        'min': 0,\n\t        'max': 1,\n\t        'integer': false\n\t    };\n\t    /**\n\t\t *  Return a random value between min and max. \n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlRandom#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlRandom.prototype, 'value', {\n\t        get: function () {\n\t            var min = this.toSeconds(this.min);\n\t            var max = this.toSeconds(this.max);\n\t            var rand = Math.random();\n\t            var val = rand * min + (1 - rand) * max;\n\t            if (this.integer) {\n\t                val = Math.floor(val);\n\t            }\n\t            return val;\n\t        }\n\t    });\n\t    return Tone.CtrlRandom;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  AudioBuffer.copyToChannel polyfill\n\t\t *  @private\n\t\t */\n\t    if (window.AudioBuffer && !AudioBuffer.prototype.copyToChannel) {\n\t        AudioBuffer.prototype.copyToChannel = function (src, chanNum, start) {\n\t            var channel = this.getChannelData(chanNum);\n\t            start = start || 0;\n\t            for (var i = 0; i < channel.length; i++) {\n\t                channel[i + start] = src[i];\n\t            }\n\t        };\n\t        AudioBuffer.prototype.copyFromChannel = function (dest, chanNum, start) {\n\t            var channel = this.getChannelData(chanNum);\n\t            start = start || 0;\n\t            for (var i = 0; i < dest.length; i++) {\n\t                dest[i] = channel[i + start];\n\t            }\n\t        };\n\t    }\n\t    /**\n\t\t *  @class  Buffer loading and storage. Tone.Buffer is used internally by all \n\t\t *          classes that make requests for audio files such as Tone.Player,\n\t\t *          Tone.Sampler and Tone.Convolver.\n\t\t *          \n\t\t *          Aside from load callbacks from individual buffers, Tone.Buffer \n\t\t *  \t\tprovides events which keep track of the loading progress \n\t\t *  \t\tof _all_ of the buffers. These are Tone.Buffer.on(\"load\" / \"progress\" / \"error\")\n\t\t *\n\t\t *  @constructor \n\t\t *  @extends {Tone}\n\t\t *  @param {AudioBuffer|String} url The url to load, or the audio buffer to set. \n\t\t *  @param {Function=} onload A callback which is invoked after the buffer is loaded. \n\t\t *                            It's recommended to use `Tone.Buffer.on('load', callback)` instead \n\t\t *                            since it will give you a callback when _all_ buffers are loaded.\n\t\t *  @param {Function=} onerror The callback to invoke if there is an error\n\t\t *  @example\n\t\t * var buffer = new Tone.Buffer(\"path/to/sound.mp3\", function(){\n\t\t * \t//the buffer is now available.\n\t\t * \tvar buff = buffer.get();\n\t\t * });\n\t\t *  @example\n\t\t * //can load provide fallback extension types if the first type is not supported.\n\t\t * var buffer = new Tone.Buffer(\"path/to/sound.[mp3|ogg|wav]\");\n\t\t */\n\t    Tone.Buffer = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'url',\n\t            'onload',\n\t            'onerror'\n\t        ], Tone.Buffer);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  stores the loaded AudioBuffer\n\t\t\t *  @type {AudioBuffer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = null;\n\t        /**\n\t\t\t *  indicates if the buffer should be reversed or not\n\t\t\t *  @type {Boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._reversed = options.reverse;\n\t        /**\n\t\t\t *  The XHR\n\t\t\t *  @type  {XMLHttpRequest}\n\t\t\t *  @private\n\t\t\t */\n\t        this._xhr = null;\n\t        if (options.url instanceof AudioBuffer || options.url instanceof Tone.Buffer) {\n\t            this.set(options.url);\n\t            // invoke the onload callback\n\t            if (options.onload) {\n\t                options.onload(this);\n\t            }\n\t        } else if (Tone.isString(options.url)) {\n\t            this.load(options.url, options.onload, options.onerror);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Buffer);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Buffer.defaults = {\n\t        'url': undefined,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Pass in an AudioBuffer or Tone.Buffer to set the value\n\t\t *  of this buffer.\n\t\t *  @param {AudioBuffer|Tone.Buffer} buffer the buffer\n\t\t *  @returns {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.set = function (buffer) {\n\t        if (buffer instanceof Tone.Buffer) {\n\t            this._buffer = buffer.get();\n\t        } else {\n\t            this._buffer = buffer;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  @return {AudioBuffer} The audio buffer stored in the object.\n\t\t */\n\t    Tone.Buffer.prototype.get = function () {\n\t        return this._buffer;\n\t    };\n\t    /**\n\t\t *  Makes an xhr reqest for the selected url then decodes\n\t\t *  the file as an audio buffer. Invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {String} url The url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer\n\t\t */\n\t    Tone.Buffer.prototype.load = function (url, onload, onerror) {\n\t        var promise = new Promise(function (load, error) {\n\t            this._xhr = Tone.Buffer.load(url, //success\n\t            function (buff) {\n\t                this._xhr = null;\n\t                this.set(buff);\n\t                load(this);\n\t                if (onload) {\n\t                    onload(this);\n\t                }\n\t            }.bind(this), //error\n\t            function (err) {\n\t                this._xhr = null;\n\t                error(err);\n\t                if (onerror) {\n\t                    onerror(err);\n\t                }\n\t            }.bind(this));\n\t        }.bind(this));\n\t        return promise;\n\t    };\n\t    /**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._buffer = null;\n\t        if (this._xhr) {\n\t            Tone.Buffer._removeFromDownloadQueue(this._xhr);\n\t            this._xhr.abort();\n\t            this._xhr = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * If the buffer is loaded or not\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'loaded', {\n\t        get: function () {\n\t            return this.length > 0;\n\t        }\n\t    });\n\t    /**\n\t\t * The duration of the buffer. \n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name duration\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'duration', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.duration;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The length of the buffer in samples\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name length\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'length', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.length;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of discrete audio channels. Returns 0 if no buffer\n\t\t * is loaded.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name numberOfChannels\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'numberOfChannels', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.numberOfChannels;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the audio buffer from the array. To create a multichannel AudioBuffer,\n\t\t *  pass in a multidimensional array. \n\t\t *  @param {Float32Array} array The array to fill the audio buffer\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.fromArray = function (array) {\n\t        var isMultidimensional = array[0].length > 0;\n\t        var channels = isMultidimensional ? array.length : 1;\n\t        var len = isMultidimensional ? array[0].length : array.length;\n\t        var buffer = this.context.createBuffer(channels, len, this.context.sampleRate);\n\t        if (!isMultidimensional && channels === 1) {\n\t            array = [array];\n\t        }\n\t        for (var c = 0; c < channels; c++) {\n\t            buffer.copyToChannel(array[c], c);\n\t        }\n\t        this._buffer = buffer;\n\t        return this;\n\t    };\n\t    /**\n\t\t * \tSums muliple channels into 1 channel\n\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t *  @return {Array}\n\t\t */\n\t    Tone.Buffer.prototype.toMono = function (chanNum) {\n\t        if (Tone.isNumber(chanNum)) {\n\t            this.fromArray(this.toArray(chanNum));\n\t        } else {\n\t            var outputArray = new Float32Array(this.length);\n\t            var numChannels = this.numberOfChannels;\n\t            for (var channel = 0; channel < numChannels; channel++) {\n\t                var channelArray = this.toArray(channel);\n\t                for (var i = 0; i < channelArray.length; i++) {\n\t                    outputArray[i] += channelArray[i];\n\t                }\n\t            }\n\t            //divide by the number of channels\n\t            outputArray = outputArray.map(function (sample) {\n\t                return sample / numChannels;\n\t            });\n\t            this.fromArray(outputArray);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional \n\t\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t *  @return {Array}\n\t\t */\n\t    Tone.Buffer.prototype.toArray = function (channel) {\n\t        if (Tone.isNumber(channel)) {\n\t            return this.getChannelData(channel);\n\t        } else if (this.numberOfChannels === 1) {\n\t            return this.toArray(0);\n\t        } else {\n\t            var ret = [];\n\t            for (var c = 0; c < this.numberOfChannels; c++) {\n\t                ret[c] = this.getChannelData(c);\n\t            }\n\t            return ret;\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t\t *  @param  {Number}  channel  The channel number to return\n\t\t *  @return  {Float32Array}  The audio as a TypedArray\n\t\t */\n\t    Tone.Buffer.prototype.getChannelData = function (channel) {\n\t        return this._buffer.getChannelData(channel);\n\t    };\n\t    /**\n\t\t *  Cut a subsection of the array and return a buffer of the\n\t\t *  subsection. Does not modify the original buffer\n\t\t *  @param {Time} start The time to start the slice\n\t\t *  @param {Time=} end The end time to slice. If none is given\n\t\t *                     will default to the end of the buffer\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.slice = function (start, end) {\n\t        end = Tone.defaultArg(end, this.duration);\n\t        var startSamples = Math.floor(this.context.sampleRate * this.toSeconds(start));\n\t        var endSamples = Math.floor(this.context.sampleRate * this.toSeconds(end));\n\t        var replacement = [];\n\t        for (var i = 0; i < this.numberOfChannels; i++) {\n\t            replacement[i] = this.toArray(i).slice(startSamples, endSamples);\n\t        }\n\t        var retBuffer = new Tone.Buffer().fromArray(replacement);\n\t        return retBuffer;\n\t    };\n\t    /**\n\t\t *  Reverse the buffer.\n\t\t *  @private\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype._reverse = function () {\n\t        if (this.loaded) {\n\t            for (var i = 0; i < this.numberOfChannels; i++) {\n\t                Array.prototype.reverse.call(this.getChannelData(i));\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Reverse the buffer.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'reverse', {\n\t        get: function () {\n\t            return this._reversed;\n\t        },\n\t        set: function (rev) {\n\t            if (this._reversed !== rev) {\n\t                this._reversed = rev;\n\t                this._reverse();\n\t            }\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // STATIC METHODS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //statically inherits Emitter methods\n\t    Tone.Emitter.mixin(Tone.Buffer);\n\t    /**\n\t\t *  the static queue for all of the xhr requests\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t    Tone.Buffer._downloadQueue = [];\n\t    /**\n\t\t *  A path which is prefixed before every url.\n\t\t *  @type  {String}\n\t\t *  @static\n\t\t */\n\t    Tone.Buffer.baseUrl = '';\n\t    /**\n\t\t *  Create a Tone.Buffer from the array. To create a multichannel AudioBuffer,\n\t\t *  pass in a multidimensional array. \n\t\t *  @param {Float32Array} array The array to fill the audio buffer\n\t\t *  @return {Tone.Buffer} A Tone.Buffer created from the array\n\t\t */\n\t    Tone.Buffer.fromArray = function (array) {\n\t        return new Tone.Buffer().fromArray(array);\n\t    };\n\t    /**\n\t\t * Remove an xhr request from the download queue\n\t\t * @private\n\t\t */\n\t    Tone.Buffer._removeFromDownloadQueue = function (request) {\n\t        var index = Tone.Buffer._downloadQueue.indexOf(request);\n\t        if (index !== -1) {\n\t            Tone.Buffer._downloadQueue.splice(index, 1);\n\t        }\n\t    };\n\t    /**\n\t\t *  Loads a url using XMLHttpRequest.\n\t\t *  @param {String} url\n\t\t *  @param {Function} onload\n\t\t *  @param {Function} onerror\n\t\t *  @param {Function} onprogress\n\t\t *  @return {XMLHttpRequest}\n\t\t */\n\t    Tone.Buffer.load = function (url, onload, onerror) {\n\t        //default\n\t        onload = Tone.defaultArg(onload, Tone.noOp);\n\t        // test if the url contains multiple extensions\n\t        var matches = url.match(/\\[(.+\\|?)+\\]$/);\n\t        if (matches) {\n\t            var extensions = matches[1].split('|');\n\t            var extension = extensions[0];\n\t            for (var i = 0; i < extensions.length; i++) {\n\t                if (Tone.Buffer.supportsType(extensions[i])) {\n\t                    extension = extensions[i];\n\t                    break;\n\t                }\n\t            }\n\t            url = url.replace(matches[0], extension);\n\t        }\n\t        function onError(e) {\n\t            Tone.Buffer._removeFromDownloadQueue(request);\n\t            Tone.Buffer.emit('error', e);\n\t            if (onerror) {\n\t                onerror(e);\n\t            } else {\n\t                throw e;\n\t            }\n\t        }\n\t        function onProgress() {\n\t            //calculate the progress\n\t            var totalProgress = 0;\n\t            for (var i = 0; i < Tone.Buffer._downloadQueue.length; i++) {\n\t                totalProgress += Tone.Buffer._downloadQueue[i].progress;\n\t            }\n\t            Tone.Buffer.emit('progress', totalProgress / Tone.Buffer._downloadQueue.length);\n\t        }\n\t        var request = new XMLHttpRequest();\n\t        request.open('GET', Tone.Buffer.baseUrl + url, true);\n\t        request.responseType = 'arraybuffer';\n\t        //start out as 0\n\t        request.progress = 0;\n\t        Tone.Buffer._downloadQueue.push(request);\n\t        request.addEventListener('load', function () {\n\t            if (request.status === 200) {\n\t                Tone.context.decodeAudioData(request.response, function (buff) {\n\t                    request.progress = 1;\n\t                    onProgress();\n\t                    onload(buff);\n\t                    Tone.Buffer._removeFromDownloadQueue(request);\n\t                    if (Tone.Buffer._downloadQueue.length === 0) {\n\t                        //emit the event at the end\n\t                        Tone.Buffer.emit('load');\n\t                    }\n\t                }, function () {\n\t                    Tone.Buffer._removeFromDownloadQueue(request);\n\t                    onError('Tone.Buffer: could not decode audio data: ' + url);\n\t                });\n\t            } else {\n\t                onError('Tone.Buffer: could not locate file: ' + url);\n\t            }\n\t        });\n\t        request.addEventListener('error', onError);\n\t        request.addEventListener('progress', function (event) {\n\t            if (event.lengthComputable) {\n\t                //only go to 95%, the last 5% is when the audio is decoded\n\t                request.progress = event.loaded / event.total * 0.95;\n\t                onProgress();\n\t            }\n\t        });\n\t        request.send();\n\t        return request;\n\t    };\n\t    /**\n\t\t *  Stop all of the downloads in progress\n\t\t *  @return {Tone.Buffer}\n\t\t *  @static\n\t\t */\n\t    Tone.Buffer.cancelDownloads = function () {\n\t        Tone.Buffer._downloadQueue.slice().forEach(function (request) {\n\t            Tone.Buffer._removeFromDownloadQueue(request);\n\t            request.abort();\n\t        });\n\t        return Tone.Buffer;\n\t    };\n\t    /**\n\t\t *  Checks a url's extension to see if the current browser can play that file type.\n\t\t *  @param {String} url The url/extension to test\n\t\t *  @return {Boolean} If the file extension can be played\n\t\t *  @static\n\t\t *  @example\n\t\t * Tone.Buffer.supportsType(\"wav\"); //returns true\n\t\t * Tone.Buffer.supportsType(\"path/to/file.wav\"); //returns true\n\t\t */\n\t    Tone.Buffer.supportsType = function (url) {\n\t        var extension = url.split('.');\n\t        extension = extension[extension.length - 1];\n\t        var response = document.createElement('audio').canPlayType('audio/' + extension);\n\t        return response !== '';\n\t    };\n\t    /**\n\t\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t\t *  @return {Promise}\n\t\t */\n\t    Tone.loaded = function () {\n\t        var onload, onerror;\n\t        function removeEvents() {\n\t            //remove the events when it's resolved\n\t            Tone.Buffer.off('load', onload);\n\t            Tone.Buffer.off('error', onerror);\n\t        }\n\t        return new Promise(function (success, fail) {\n\t            onload = function () {\n\t                success();\n\t            };\n\t            onerror = function () {\n\t                fail();\n\t            };\n\t            //add the event listeners\n\t            Tone.Buffer.on('load', onload);\n\t            Tone.Buffer.on('error', onerror);\n\t        }).then(removeEvents).catch(function (e) {\n\t            removeEvents();\n\t            throw new Error(e);\n\t        });\n\t    };\n\t    return Tone.Buffer;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class A data structure for holding multiple buffers.\n\t\t *  \n\t\t *  @param  {Object|Array}    urls      An object literal or array\n\t\t *                                      of urls to load.\n\t\t *  @param  {Function=}  callback  The callback to invoke when\n\t\t *                                 the buffers are loaded. \n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * //load a whole bank of piano samples\n\t\t * var pianoSamples = new Tone.Buffers({\n\t\t * \t\"C4\" : \"path/to/C4.mp3\"\n\t\t * \t\"C#4\" : \"path/to/C#4.mp3\"\n\t\t * \t\"D4\" : \"path/to/D4.mp3\"\n\t\t * \t\"D#4\" : \"path/to/D#4.mp3\"\n\t\t * \t...\n\t\t * }, function(){\n\t\t * \t//play one of the samples when they all load\n\t\t * \tplayer.buffer = pianoSamples.get(\"C4\");\n\t\t * \tplayer.start();\n\t\t * });\n\t\t * \t@example\n\t\t * //To pass in additional parameters in the second parameter\n\t\t * var buffers = new Tone.Buffers(urls, {\n\t\t * \t\"onload\" : callback,\n\t\t * \t\"baseUrl\" : \"../path/to/audio/\"\n\t\t * })\n\t\t */\n\t    Tone.Buffers = function (urls) {\n\t        //remove the urls from the options\n\t        var args = Array.prototype.slice.call(arguments);\n\t        args.shift();\n\t        var options = Tone.defaults(args, [\n\t            'onload',\n\t            'baseUrl'\n\t        ], Tone.Buffers);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  All of the buffers\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffers = {};\n\t        /**\n\t\t\t *  A path which is prefixed before every url.\n\t\t\t *  @type  {String}\n\t\t\t */\n\t        this.baseUrl = options.baseUrl;\n\t        this._loadingCount = 0;\n\t        //add each one\n\t        for (var key in urls) {\n\t            this._loadingCount++;\n\t            this.add(key, urls[key], this._bufferLoaded.bind(this, options.onload));\n\t        }\n\t    };\n\t    Tone.extend(Tone.Buffers);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Buffers.defaults = {\n\t        'onload': Tone.noOp,\n\t        'baseUrl': ''\n\t    };\n\t    /**\n\t\t *  True if the buffers object has a buffer by that name.\n\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t *                                 buffer.\n\t\t *  @return  {Boolean}\n\t\t */\n\t    Tone.Buffers.prototype.has = function (name) {\n\t        return this._buffers.hasOwnProperty(name);\n\t    };\n\t    /**\n\t\t *  Get a buffer by name. If an array was loaded, \n\t\t *  then use the array index.\n\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t *                                 buffer.\n\t\t *  @return  {Tone.Buffer}\n\t\t */\n\t    Tone.Buffers.prototype.get = function (name) {\n\t        if (this.has(name)) {\n\t            return this._buffers[name];\n\t        } else {\n\t            throw new Error('Tone.Buffers: no buffer named ' + name);\n\t        }\n\t    };\n\t    /**\n\t\t *  A buffer was loaded. decrement the counter.\n\t\t *  @param  {Function}  callback \n\t\t *  @private\n\t\t */\n\t    Tone.Buffers.prototype._bufferLoaded = function (callback) {\n\t        this._loadingCount--;\n\t        if (this._loadingCount === 0 && callback) {\n\t            callback(this);\n\t        }\n\t    };\n\t    /**\n\t\t * If the buffers are loaded or not\n\t\t * @memberOf Tone.Buffers#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffers.prototype, 'loaded', {\n\t        get: function () {\n\t            var isLoaded = true;\n\t            for (var buffName in this._buffers) {\n\t                var buff = this.get(buffName);\n\t                isLoaded = isLoaded && buff.loaded;\n\t            }\n\t            return isLoaded;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a buffer by name and url to the Buffers\n\t\t *  @param  {String}    name      A unique name to give\n\t\t *                                the buffer\n\t\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, \n\t\t *                                                 or a buffer which will be added\n\t\t *                                                 with the given name.\n\t\t *  @param  {Function=}  callback  The callback to invoke \n\t\t *                                 when the url is loaded.\n\t\t */\n\t    Tone.Buffers.prototype.add = function (name, url, callback) {\n\t        callback = Tone.defaultArg(callback, Tone.noOp);\n\t        if (url instanceof Tone.Buffer) {\n\t            this._buffers[name] = url;\n\t            callback(this);\n\t        } else if (url instanceof AudioBuffer) {\n\t            this._buffers[name] = new Tone.Buffer(url);\n\t            callback(this);\n\t        } else if (Tone.isString(url)) {\n\t            this._buffers[name] = new Tone.Buffer(this.baseUrl + url, callback);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Buffers} this\n\t\t */\n\t    Tone.Buffers.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        for (var name in this._buffers) {\n\t            this._buffers[name].dispose();\n\t        }\n\t        this._buffers = null;\n\t        return this;\n\t    };\n\t    return Tone.Buffers;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  buses are another way of routing audio\n\t\t *\n\t\t *  augments Tone.prototype to include send and recieve\n\t\t */\n\t    /**\n\t\t  *  All of the routes\n\t\t  *  \n\t\t  *  @type {Object}\n\t\t  *  @static\n\t\t  *  @private\n\t\t  */\n\t    var Buses = {};\n\t    /**\n\t\t *  Send this signal to the channel name. \n\t\t *  @param  {String} channelName A named channel to send the signal to.\n\t\t *  @param  {Decibels} amount The amount of the source to send to the bus. \n\t\t *  @return {GainNode} The gain node which connects this node to the desired channel. \n\t\t *                     Can be used to adjust the levels of the send.\n\t\t *  @example\n\t\t * source.send(\"reverb\", -12);\n\t\t */\n\t    Tone.prototype.send = function (channelName, amount) {\n\t        if (!Buses.hasOwnProperty(channelName)) {\n\t            Buses[channelName] = this.context.createGain();\n\t        }\n\t        amount = Tone.defaultArg(amount, 0);\n\t        var sendKnob = new Tone.Gain(amount, Tone.Type.Decibels);\n\t        this.output.chain(sendKnob, Buses[channelName]);\n\t        return sendKnob;\n\t    };\n\t    /**\n\t\t *  Recieve the input from the desired channelName to the input\n\t\t *\n\t\t *  @param  {String} channelName A named channel to send the signal to.\n\t\t *  @param  {Number=} channelNumber The channel to connect to\n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * reverbEffect.receive(\"reverb\");\n\t\t */\n\t    Tone.prototype.receive = function (channelName, inputNum) {\n\t        if (!Buses.hasOwnProperty(channelName)) {\n\t            Buses[channelName] = this.context.createGain();\n\t        }\n\t        Buses[channelName].connect(this, 0, inputNum);\n\t        return this;\n\t    };\n\t    //remove all the send/receives when a new audio context is passed in\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Buses) {\n\t            Buses = context.Buses;\n\t        } else {\n\t            Buses = {};\n\t            context.Buses = Buses;\n\t        }\n\t    });\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Draw is useful for synchronizing visuals and audio events.\n\t\t *         Callbacks from Tone.Transport or any of the Tone.Event classes\n\t\t *         always happen _before_ the scheduled time and are not synchronized\n\t\t *         to the animation frame so they are not good for triggering tightly\n\t\t *         synchronized visuals and sound. Tone.Draw makes it easy to schedule\n\t\t *         callbacks using the AudioContext time and uses requestAnimationFrame.\n\t\t *         \n\t\t *  @singleton\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \t//use the time argument to schedule a callback with Tone.Draw\n\t\t * \tTone.Draw.schedule(function(){\n\t\t * \t\t//do drawing or DOM manipulation here\n\t\t * \t}, time)\n\t\t * }, \"+0.5\")\n\t\t */\n\t    Tone.Draw = function () {\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  All of the events.\n\t\t\t *  @type  {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = new Tone.Timeline();\n\t        /**\n\t\t\t *  The duration after which events are not invoked.\n\t\t\t *  @type  {Number}\n\t\t\t *  @default 0.25\n\t\t\t */\n\t        this.expiration = 0.25;\n\t        /**\n\t\t\t *  The amount of time before the scheduled time \n\t\t\t *  that the callback can be invoked. Default is\n\t\t\t *  half the time of an animation frame (0.008 seconds).\n\t\t\t *  @type  {Number}\n\t\t\t *  @default 0.008\n\t\t\t */\n\t        this.anticipation = 0.008;\n\t        /**\n\t\t\t *  The draw loop\n\t\t\t *  @type  {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._boundDrawLoop = this._drawLoop.bind(this);\n\t    };\n\t    Tone.extend(Tone.Draw);\n\t    /**\n\t\t *  Schedule a function at the given time to be invoked\n\t\t *  on the nearest animation frame.\n\t\t *  @param  {Function}  callback  Callback is invoked at the given time.\n\t\t *  @param  {Time}    time      The time relative to the AudioContext time\n\t\t *                              to invoke the callback.\n\t\t *  @return  {Tone.Draw}    this\n\t\t */\n\t    Tone.Draw.prototype.schedule = function (callback, time) {\n\t        this._events.add({\n\t            callback: callback,\n\t            time: this.toSeconds(time)\n\t        });\n\t        //start the draw loop on the first event\n\t        if (this._events.length === 1) {\n\t            requestAnimationFrame(this._boundDrawLoop);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel events scheduled after the given time\n\t\t *  @param  {Time=}  after  Time after which scheduled events will \n\t\t *                          be removed from the scheduling timeline.\n\t\t *  @return  {Tone.Draw}  this\n\t\t */\n\t    Tone.Draw.prototype.cancel = function (after) {\n\t        this._events.cancel(this.toSeconds(after));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The draw loop\n\t\t *  @private\n\t\t */\n\t    Tone.Draw.prototype._drawLoop = function () {\n\t        var now = Tone.now();\n\t        while (this._events.length && this._events.peek().time - this.anticipation <= now) {\n\t            var event = this._events.shift();\n\t            if (now - event.time <= this.expiration) {\n\t                event.callback();\n\t            }\n\t        }\n\t        if (this._events.length > 0) {\n\t            requestAnimationFrame(this._boundDrawLoop);\n\t        }\n\t    };\n\t    //make a singleton\n\t    Tone.Draw = new Tone.Draw();\n\t    return Tone.Draw;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Both Tone.Panner3D and Tone.Listener have a position in 3D space \n\t\t *          using a right-handed cartesian coordinate system. \n\t\t *          The units used in the coordinate system are not defined; \n\t\t *          these coordinates are independent/invariant of any particular \n\t\t *          units such as meters or feet. Tone.Panner3D objects have an forward \n\t\t *          vector representing the direction the sound is projecting. Additionally, \n\t\t *          they have a sound cone representing how directional the sound is. \n\t\t *          For example, the sound could be omnidirectional, in which case it would \n\t\t *          be heard anywhere regardless of its forward, or it can be more directional \n\t\t *          and heard only if it is facing the listener. Tone.Listener objects \n\t\t *          (representing a person's ears) have an forward and up vector \n\t\t *          representing in which direction the person is facing. Because both the \n\t\t *          source stream and the listener can be moving, they both have a velocity \n\t\t *          vector representing both the speed and direction of movement. Taken together, \n\t\t *          these two velocities can be used to generate a doppler shift effect which changes the pitch.\n\t\t *          <br><br>\n\t\t *          Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @singleton\n\t\t */\n\t    Tone.Listener = function () {\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  Holds the current forward orientation\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._orientation = [\n\t            0,\n\t            0,\n\t            0,\n\t            0,\n\t            0,\n\t            0\n\t        ];\n\t        /**\n\t\t\t *  Holds the current position\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._position = [\n\t            0,\n\t            0,\n\t            0\n\t        ];\n\t        Tone.getContext(function () {\n\t            // set the default position/forward\n\t            this.set(ListenerConstructor.defaults);\n\t        }.bind(this));\n\t    };\n\t    Tone.extend(Tone.Listener);\n\t    /**\n\t\t *  Defaults according to the specification\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Listener.defaults = {\n\t        'positionX': 0,\n\t        'positionY': 0,\n\t        'positionZ': 0,\n\t        'forwardX': 0,\n\t        'forwardY': 0,\n\t        'forwardZ': 1,\n\t        'upX': 0,\n\t        'upY': 1,\n\t        'upZ': 0\n\t    };\n\t    /**\n\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.Listener.prototype._rampTimeConstant = 0.01;\n\t    /**\n\t\t *  Sets the position of the listener in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.setPosition = function (x, y, z) {\n\t        if (this.context.listener.positionX) {\n\t            var now = this.now();\n\t            this.context.listener.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this.context.listener.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this.context.listener.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this.context.listener.setPosition(x, y, z);\n\t        }\n\t        this._position = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the orientation of the listener using two vectors, the forward\n\t\t *  vector (which direction the listener is facing) and the up vector \n\t\t *  (which the up direction of the listener). An up vector\n\t\t *  of 0, 0, 1 is equivalent to the listener standing up in the Z direction. \n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @param  {Number}  upX\n\t\t *  @param  {Number}  upY\n\t\t *  @param  {Number}  upZ\n\t\t *  @return {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.setOrientation = function (x, y, z, upX, upY, upZ) {\n\t        if (this.context.listener.forwardX) {\n\t            var now = this.now();\n\t            this.context.listener.forwardX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this.context.listener.forwardY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this.context.listener.forwardZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t            this.context.listener.upX.setTargetAtTime(upX, now, this._rampTimeConstant);\n\t            this.context.listener.upY.setTargetAtTime(upY, now, this._rampTimeConstant);\n\t            this.context.listener.upZ.setTargetAtTime(upZ, now, this._rampTimeConstant);\n\t        } else {\n\t            this.context.listener.setOrientation(x, y, z, upX, upY, upZ);\n\t        }\n\t        this._orientation = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The x position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionX', {\n\t        set: function (pos) {\n\t            this._position[0] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionY', {\n\t        set: function (pos) {\n\t            this._position[1] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionZ', {\n\t        set: function (pos) {\n\t            this._position[2] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardX', {\n\t        set: function (pos) {\n\t            this._orientation[0] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardY', {\n\t        set: function (pos) {\n\t            this._orientation[1] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardZ', {\n\t        set: function (pos) {\n\t            this._orientation[2] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upX', {\n\t        set: function (pos) {\n\t            this._orientation[3] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[3];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upY', {\n\t        set: function (pos) {\n\t            this._orientation[4] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[4];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upZ', {\n\t        set: function (pos) {\n\t            this._orientation[5] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[5];\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.dispose = function () {\n\t        this._orientation = null;\n\t        this._position = null;\n\t        return this;\n\t    };\n\t    //SINGLETON SETUP\n\t    var ListenerConstructor = Tone.Listener;\n\t    Tone.Listener = new ListenerConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Listener instanceof ListenerConstructor) {\n\t            //a single listener object\n\t            Tone.Listener = context.Listener;\n\t        } else {\n\t            //make new Listener insides\n\t            Tone.Listener = new ListenerConstructor();\n\t        }\n\t        context.Listener = Tone.Listener;\n\t    });\n\t    //END SINGLETON SETUP\n\t    return Tone.Listener;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  shim\n\t\t *  @private\n\t\t */\n\t    if (!window.hasOwnProperty('OfflineAudioContext') && window.hasOwnProperty('webkitOfflineAudioContext')) {\n\t        window.OfflineAudioContext = window.webkitOfflineAudioContext;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the OfflineAudioContext\n\t\t *  @extends {Tone.Context}\n\t\t *  @param  {Number}  channels  The number of channels to render\n\t\t *  @param  {Number}  duration  The duration to render in samples\n\t\t *  @param {Number} sampleRate the sample rate to render at\n\t\t */\n\t    Tone.OfflineContext = function (channels, duration, sampleRate) {\n\t        /**\n\t\t\t *  The offline context\n\t\t\t *  @private\n\t\t\t *  @type  {OfflineAudioContext}\n\t\t\t */\n\t        var offlineContext = new OfflineAudioContext(channels, duration * sampleRate, sampleRate);\n\t        //wrap the methods/members\n\t        Tone.Context.call(this, {\n\t            'context': offlineContext,\n\t            'clockSource': 'offline',\n\t            'lookAhead': 0,\n\t            'updateInterval': 128 / sampleRate\n\t        });\n\t        /**\n\t\t\t *  A private reference to the duration\n\t\t\t *  @private\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this._duration = duration;\n\t        /**\n\t\t\t *  An artificial clock source\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._currentTime = 0;\n\t    };\n\t    Tone.extend(Tone.OfflineContext, Tone.Context);\n\t    /**\n\t\t *  Override the now method to point to the internal clock time\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.OfflineContext.prototype.now = function () {\n\t        return this._currentTime;\n\t    };\n\t    /**\n\t\t *  Render the output of the OfflineContext\n\t\t *  @return  {Promise}\n\t\t */\n\t    Tone.OfflineContext.prototype.render = function () {\n\t        while (this._duration - this._currentTime >= 0) {\n\t            //invoke all the callbacks on that time\n\t            this.emit('tick');\n\t            //increment the clock\n\t            this._currentTime += this.blockTime;\n\t        }\n\t        //promise returned is not yet implemented in all browsers\n\t        return new Promise(function (done) {\n\t            this._context.oncomplete = function (e) {\n\t                done(e.renderedBuffer);\n\t            };\n\t            this._context.startRendering();\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Close the context\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.OfflineContext.prototype.close = function () {\n\t        this._context = null;\n\t    };\n\t    return Tone.OfflineContext;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext. \n\t\t *  The OfflineAudioContext is capable of rendering much faster than real time in many cases. \n\t\t *  The callback function also passes in an offline instance of Tone.Transport which can be used\n\t\t *  to schedule events along the Transport. \n\t\t *  @param  {Function}  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n\t\t *  @param  {Time}  duration     the amount of time to record for.\n\t\t *  @return  {Promise}  The promise which is invoked with the Tone.Buffer of the recorded output.\n\t\t *  @example\n\t\t * //render 2 seconds of the oscillator\n\t\t * Tone.Offline(function(){\n\t\t * \t//only nodes created in this callback will be recorded\n\t\t * \tvar oscillator = new Tone.Oscillator().toMaster().start(0)\n\t\t * \t//schedule their events\n\t\t * }, 2).then(function(buffer){\n\t\t * \t//do something with the output buffer\n\t\t * })\n\t\t * @example\n\t\t * //can also schedule events along the Transport\n\t\t * //using the passed in Offline Transport\n\t\t * Tone.Offline(function(Transport){\n\t\t * \tvar osc = new Tone.Oscillator().toMaster()\n\t\t * \tTransport.schedule(function(time){\n\t\t * \t\tosc.start(time).stop(time + 0.1)\n\t\t * \t}, 1)\n\t\t * \tTransport.start(0.2)\n\t\t * }, 4).then(function(buffer){\n\t\t * \t//do something with the output buffer\n\t\t * })\n\t\t */\n\t    Tone.Offline = function (callback, duration) {\n\t        //set the OfflineAudioContext\n\t        var sampleRate = Tone.context.sampleRate;\n\t        var originalContext = Tone.context;\n\t        var context = new Tone.OfflineContext(2, duration, sampleRate);\n\t        Tone.context = context;\n\t        //invoke the callback/scheduling\n\t        callback(Tone.Transport);\n\t        //process the audio\n\t        var rendered = context.render();\n\t        //return the original AudioContext\n\t        Tone.context = originalContext;\n\t        //return the audio\n\t        return rendered.then(function (buffer) {\n\t            //wrap it in a Tone.Buffer\n\t            return new Tone.Buffer(buffer);\n\t        });\n\t    };\n\t    return Tone.Offline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * \t@class  Tone.Effect is the base class for effects. Connect the effect between\n\t\t * \t        the effectSend and effectReturn GainNodes, then control the amount of\n\t\t * \t        effect which goes to the output using the wet control.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {NormalRange|Object} [wet] The starting wet value.\n\t\t */\n\t    Tone.Effect = function () {\n\t        var options = Tone.defaults(arguments, ['wet'], Tone.Effect);\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t        /**\n\t\t\t *  The wet control is how much of the effected\n\t\t\t *  will pass through to the output. 1 = 100% effected\n\t\t\t *  signal, 0 = 100% dry signal.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.wet = this._dryWet.fade;\n\t        /**\n\t\t\t *  connect the effectSend to the input of hte effect\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSend = new Tone.Gain();\n\t        /**\n\t\t\t *  connect the output of the effect to the effectReturn\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturn = new Tone.Gain();\n\t        //connections\n\t        this.input.connect(this._dryWet.a);\n\t        this.input.connect(this.effectSend);\n\t        this.effectReturn.connect(this._dryWet.b);\n\t        this._dryWet.connect(this.output);\n\t        this._readOnly(['wet']);\n\t    };\n\t    Tone.extend(Tone.Effect, Tone.AudioNode);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Effect.defaults = { 'wet': 1 };\n\t    /**\n\t\t *  chains the effect in between the effectSend and effectReturn\n\t\t *  @param  {Tone} effect\n\t\t *  @private\n\t\t *  @returns {Tone.Effect} this\n\t\t */\n\t    Tone.Effect.prototype.connectEffect = function (effect) {\n\t        this.effectSend.chain(effect, this.effectReturn);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Effect} this\n\t\t */\n\t    Tone.Effect.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._dryWet.dispose();\n\t        this._dryWet = null;\n\t        this.effectSend.dispose();\n\t        this.effectSend = null;\n\t        this.effectReturn.dispose();\n\t        this.effectReturn = null;\n\t        this._writable(['wet']);\n\t        this.wet = null;\n\t        return this;\n\t    };\n\t    return Tone.Effect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n\t\t *         Setting the LFO rate and depth allows for control over the filter modulation rate \n\t\t *         and depth.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Time|Object} [frequency] The rate of the LFO.\n\t\t *  @param {Frequency=} baseFrequency The lower value of the LFOs oscillation\n\t \t *  @param {Frequency=} octaves The number of octaves above the baseFrequency\n\t\t *  @example\n\t\t * //create an autofilter and start it's LFO\n\t\t * var autoFilter = new Tone.AutoFilter(\"4n\").toMaster().start();\n\t\t * //route an oscillator through the filter and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(autoFilter).start();\n\t\t */\n\t    Tone.AutoFilter = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'baseFrequency',\n\t            'octaves'\n\t        ], Tone.AutoFilter);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which drives the filter cutoff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'amplitude': options.depth\n\t        });\n\t        /**\n\t\t\t * The range of the filter modulating between the min and max frequency. \n\t\t\t * 0 = no modulation. 1 = full modulation.\n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        /**\n\t\t\t * How fast the filter modulates between min and max. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        /**\n\t\t\t *  The filter node\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.filter = new Tone.Filter(options.filter);\n\t        /**\n\t\t\t *  The octaves placeholder\n\t\t\t *  @type {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = 0;\n\t        //connections\n\t        this.connectEffect(this.filter);\n\t        this._lfo.connect(this.filter.frequency);\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.octaves = options.octaves;\n\t        this.baseFrequency = options.baseFrequency;\n\t    };\n\t    //extend Effect\n\t    Tone.extend(Tone.AutoFilter, Tone.Effect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoFilter.defaults = {\n\t        'frequency': 1,\n\t        'type': 'sine',\n\t        'depth': 1,\n\t        'baseFrequency': 200,\n\t        'octaves': 2.6,\n\t        'filter': {\n\t            'type': 'lowpass',\n\t            'rolloff': -12,\n\t            'Q': 1\n\t        }\n\t    };\n\t    /**\n\t\t * Start the effect.\n\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.start = function (time) {\n\t        this._lfo.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the effect.\n\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.stop = function (time) {\n\t        this._lfo.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the filter to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                               Transport has started. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.sync = function (delay) {\n\t        this._lfo.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the filter from the transport.\n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.unsync = function () {\n\t        this._lfo.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the AutoFilter. \n\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum value of the filter's cutoff frequency.\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {Frequency}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._lfo.min;\n\t        },\n\t        set: function (freq) {\n\t            this._lfo.min = this.toFrequency(freq);\n\t            //and set the max\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum value of the filter's cutoff frequency. \n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (oct) {\n\t            this._octaves = oct;\n\t            this._lfo.max = this.baseFrequency * Math.pow(2, oct);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this.filter.dispose();\n\t        this.filter = null;\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. \n\t\t *         More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency|Object} [frequency] Rate of left-right oscillation. \n\t\t *  @example\n\t\t * //create an autopanner and start it's LFO\n\t\t * var autoPanner = new Tone.AutoPanner(\"4n\").toMaster().start();\n\t\t * //route an oscillator through the panner and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(autoPanner).start();\n\t\t */\n\t    Tone.AutoPanner = function () {\n\t        var options = Tone.defaults(arguments, ['frequency'], Tone.AutoPanner);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which drives the panning\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'amplitude': options.depth,\n\t            'min': -1,\n\t            'max': 1\n\t        });\n\t        /**\n\t\t\t * The amount of panning between left and right. \n\t\t\t * 0 = always center. 1 = full range between left and right. \n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        /**\n\t\t\t *  the panner node which does the panning\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = new Tone.Panner();\n\t        /**\n\t\t\t * How fast the panner modulates between left and right. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        //connections\n\t        this.connectEffect(this._panner);\n\t        this._lfo.connect(this._panner.pan);\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'depth',\n\t            'frequency'\n\t        ]);\n\t    };\n\t    //extend Effect\n\t    Tone.extend(Tone.AutoPanner, Tone.Effect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoPanner.defaults = {\n\t        'frequency': 1,\n\t        'type': 'sine',\n\t        'depth': 1\n\t    };\n\t    /**\n\t\t * Start the effect.\n\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.start = function (time) {\n\t        this._lfo.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the effect.\n\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.stop = function (time) {\n\t        this._lfo.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the panner to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                               Transport has started. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.sync = function (delay) {\n\t        this._lfo.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the panner from the transport\n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.unsync = function () {\n\t        this._lfo.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the AutoFilter. \n\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AutoPanner.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this._panner.dispose();\n\t        this._panner = null;\n\t        this._writable([\n\t            'depth',\n\t            'frequency'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoPanner;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).\n\t\t *          The frequency of the filter is adjusted proportionally to the \n\t\t *          incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency|Object} [baseFrequency] The frequency the filter is set \n\t\t *                                            to at the low point of the wah\n\t\t *  @param {Positive} [octaves] The number of octaves above the baseFrequency\n\t\t *                                the filter will sweep to when fully open\n\t\t *  @param {Decibels} [sensitivity] The decibel threshold sensitivity for \n\t\t *                                   the incoming signal. Normal range of -40 to 0. \n\t\t *  @example\n\t\t * var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();\n\t\t * //initialize the synth and connect to autowah\n\t\t * var synth = new Synth.connect(autoWah);\n\t\t * //Q value influences the effect of the wah - default is 2\n\t\t * autoWah.Q.value = 6;\n\t\t * //more audible on higher notes\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\")\n\t\t */\n\t    Tone.AutoWah = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'baseFrequency',\n\t            'octaves',\n\t            'sensitivity'\n\t        ], Tone.AutoWah);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  The envelope follower. Set the attack/release\n\t\t\t *  timing to adjust how the envelope is followed. \n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t        this.follower = new Tone.Follower(options.follower);\n\t        /**\n\t\t\t *  scales the follower value to the frequency domain\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sweepRange = new Tone.ScaleExp(0, 1, 0.5);\n\t        /**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._baseFrequency = options.baseFrequency;\n\t        /**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  the input gain to adjust the sensitivity\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputBoost = new Tone.Gain();\n\t        /**\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._bandpass = new Tone.Filter({\n\t            'rolloff': -48,\n\t            'frequency': 0,\n\t            'Q': options.Q\n\t        });\n\t        /**\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._peaking = new Tone.Filter(0, 'peaking');\n\t        this._peaking.gain.value = options.gain;\n\t        /**\n\t\t\t * The gain of the filter.\n\t\t\t * @type {Number}\n\t\t\t * @signal\n\t\t\t */\n\t        this.gain = this._peaking.gain;\n\t        /**\n\t\t\t * The quality of the filter.\n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t */\n\t        this.Q = this._bandpass.Q;\n\t        //the control signal path\n\t        this.effectSend.chain(this._inputBoost, this.follower, this._sweepRange);\n\t        this._sweepRange.connect(this._bandpass.frequency);\n\t        this._sweepRange.connect(this._peaking.frequency);\n\t        //the filtered path\n\t        this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t        //set the initial value\n\t        this._setSweepRange();\n\t        this.sensitivity = options.sensitivity;\n\t        this._readOnly([\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AutoWah, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoWah.defaults = {\n\t        'baseFrequency': 100,\n\t        'octaves': 6,\n\t        'sensitivity': 0,\n\t        'Q': 2,\n\t        'gain': 2,\n\t        'follower': {\n\t            'attack': 0.3,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t * The number of octaves that the filter will sweep above the \n\t\t * baseFrequency. \n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Number}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            this._setSweepRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The base frequency from which the sweep will start from.\n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._baseFrequency;\n\t        },\n\t        set: function (baseFreq) {\n\t            this._baseFrequency = baseFreq;\n\t            this._setSweepRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The sensitivity to control how responsive to the input signal the filter is. \n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Decibels}\n\t\t * @name sensitivity\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'sensitivity', {\n\t        get: function () {\n\t            return Tone.gainToDb(1 / this._inputBoost.gain.value);\n\t        },\n\t        set: function (sensitivy) {\n\t            this._inputBoost.gain.value = 1 / Tone.dbToGain(sensitivy);\n\t        }\n\t    });\n\t    /**\n\t\t *  sets the sweep range of the scaler\n\t\t *  @private\n\t\t */\n\t    Tone.AutoWah.prototype._setSweepRange = function () {\n\t        this._sweepRange.min = this._baseFrequency;\n\t        this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.AutoWah} this\n\t\t */\n\t    Tone.AutoWah.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this.follower.dispose();\n\t        this.follower = null;\n\t        this._sweepRange.dispose();\n\t        this._sweepRange = null;\n\t        this._bandpass.dispose();\n\t        this._bandpass = null;\n\t        this._peaking.dispose();\n\t        this._peaking = null;\n\t        this._inputBoost.dispose();\n\t        this._inputBoost = null;\n\t        this._writable([\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t        this.gain = null;\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoWah;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Bitcrusher downsamples the incoming signal to a different bitdepth. \n\t\t *         Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing\n\t\t *         on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Number} bits The number of bits to downsample the signal. Nominal range\n\t\t *                       of 1 to 8. \n\t\t *  @example\n\t\t * //initialize crusher and route a synth through it\n\t\t * var crusher = new Tone.BitCrusher(4).toMaster();\n\t\t * var synth = new Tone.MonoSynth().connect(crusher);\n\t\t */\n\t    Tone.BitCrusher = function () {\n\t        var options = Tone.defaults(arguments, ['bits'], Tone.BitCrusher);\n\t        Tone.Effect.call(this, options);\n\t        var invStepSize = 1 / Math.pow(2, options.bits - 1);\n\t        /**\n\t\t\t *  Subtract the input signal and the modulus of the input signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subtract = new Tone.Subtract();\n\t        /**\n\t\t\t *  The mod function\n\t\t\t *  @type  {Tone.Modulo}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulo = new Tone.Modulo(invStepSize);\n\t        /**\n\t\t\t *  keeps track of the bits\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._bits = options.bits;\n\t        //connect it up\n\t        this.effectSend.fan(this._subtract, this._modulo);\n\t        this._modulo.connect(this._subtract, 0, 1);\n\t        this._subtract.connect(this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.BitCrusher, Tone.Effect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.BitCrusher.defaults = { 'bits': 4 };\n\t    /**\n\t\t * The bit depth of the effect. Nominal range of 1-8. \n\t\t * @memberOf Tone.BitCrusher#\n\t\t * @type {number}\n\t\t * @name bits\n\t\t */\n\t    Object.defineProperty(Tone.BitCrusher.prototype, 'bits', {\n\t        get: function () {\n\t            return this._bits;\n\t        },\n\t        set: function (bits) {\n\t            this._bits = bits;\n\t            var invStepSize = 1 / Math.pow(2, bits - 1);\n\t            this._modulo.value = invStepSize;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.BitCrusher} this\n\t\t */\n\t    Tone.BitCrusher.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._subtract.dispose();\n\t        this._subtract = null;\n\t        this._modulo.dispose();\n\t        this._modulo = null;\n\t        return this;\n\t    };\n\t    return Tone.BitCrusher;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good \n\t\t *         for making different types of distortion sounds.\n\t\t *         Note that odd orders sound very different from even ones, \n\t\t *         and order = 1 is no change. \n\t\t *         Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {Positive|Object} [order] The order of the chebyshev polynomial. Normal range between 1-100. \n\t\t *  @example\n\t\t * //create a new cheby\n\t\t * var cheby = new Tone.Chebyshev(50);\n\t\t * //create a monosynth connected to our cheby\n\t\t * synth = new Tone.MonoSynth().connect(cheby);\n\t\t */\n\t    Tone.Chebyshev = function () {\n\t        var options = Tone.defaults(arguments, ['order'], Tone.Chebyshev);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(4096);\n\t        /**\n\t\t\t * holds onto the order of the filter\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t        this._order = options.order;\n\t        this.connectEffect(this._shaper);\n\t        this.order = options.order;\n\t        this.oversample = options.oversample;\n\t    };\n\t    Tone.extend(Tone.Chebyshev, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Chebyshev.defaults = {\n\t        'order': 1,\n\t        'oversample': 'none'\n\t    };\n\t    /**\n\t\t *  get the coefficient for that degree\n\t\t *  @param {number} x the x value\n\t\t *  @param   {number} degree \n\t\t *  @param {Object} memo memoize the computed value. \n\t\t *                       this speeds up computation greatly. \n\t\t *  @return  {number}       the coefficient \n\t\t *  @private\n\t\t */\n\t    Tone.Chebyshev.prototype._getCoefficient = function (x, degree, memo) {\n\t        if (memo.hasOwnProperty(degree)) {\n\t            return memo[degree];\n\t        } else if (degree === 0) {\n\t            memo[degree] = 0;\n\t        } else if (degree === 1) {\n\t            memo[degree] = x;\n\t        } else {\n\t            memo[degree] = 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo);\n\t        }\n\t        return memo[degree];\n\t    };\n\t    /**\n\t\t * The order of the Chebyshev polynomial which creates\n\t\t * the equation which is applied to the incoming \n\t\t * signal through a Tone.WaveShaper. The equations\n\t\t * are in the form:<br>\n\t\t * order 2: 2x^2 + 1<br>\n\t\t * order 3: 4x^3 + 3x <br>\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {Positive}\n\t\t * @name order\n\t\t */\n\t    Object.defineProperty(Tone.Chebyshev.prototype, 'order', {\n\t        get: function () {\n\t            return this._order;\n\t        },\n\t        set: function (order) {\n\t            this._order = order;\n\t            var curve = new Array(4096);\n\t            var len = curve.length;\n\t            for (var i = 0; i < len; ++i) {\n\t                var x = i * 2 / len - 1;\n\t                if (x === 0) {\n\t                    //should output 0 when input is 0\n\t                    curve[i] = 0;\n\t                } else {\n\t                    curve[i] = this._getCoefficient(x, order, {});\n\t                }\n\t            }\n\t            this._shaper.curve = curve;\n\t        }\n\t    });\n\t    /**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.Chebyshev.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            this._shaper.oversample = oversampling;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Chebyshev} this\n\t\t */\n\t    Tone.Chebyshev.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        return this;\n\t    };\n\t    return Tone.Chebyshev;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R.\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.Effect}\n\t\t */\n\t    Tone.StereoEffect = function () {\n\t        //get the defaults\n\t        Tone.AudioNode.call(this);\n\t        var options = Tone.defaults(arguments, ['wet'], Tone.Effect);\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t        /**\n\t\t\t *  The wet control, i.e. how much of the effected\n\t\t\t *  will pass through to the output.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.wet = this._dryWet.fade;\n\t        /**\n\t\t\t *  then split it\n\t\t\t *  @type {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t        this._split = new Tone.Split();\n\t        /**\n\t\t\t *  the effects send LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSendL = this._split.left;\n\t        /**\n\t\t\t *  the effects send RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSendR = this._split.right;\n\t        /**\n\t\t\t *  the stereo effect merger\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = new Tone.Merge();\n\t        /**\n\t\t\t *  the effect return LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturnL = this._merge.left;\n\t        /**\n\t\t\t *  the effect return RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturnR = this._merge.right;\n\t        //connections\n\t        this.input.connect(this._split);\n\t        //dry wet connections\n\t        this.input.connect(this._dryWet, 0, 0);\n\t        this._merge.connect(this._dryWet, 0, 1);\n\t        this._dryWet.connect(this.output);\n\t        this._readOnly(['wet']);\n\t    };\n\t    Tone.extend(Tone.StereoEffect, Tone.Effect);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.StereoEffect} this\n\t\t */\n\t    Tone.StereoEffect.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._dryWet.dispose();\n\t        this._dryWet = null;\n\t        this._split.dispose();\n\t        this._split = null;\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        this.effectSendL = null;\n\t        this.effectSendR = null;\n\t        this.effectReturnL = null;\n\t        this.effectReturnR = null;\n\t        this._writable(['wet']);\n\t        this.wet = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * \t@class  Tone.FeedbackEffect provides a loop between an \n\t\t * \t        audio source and its own output. This is a base-class\n\t\t * \t        for feedback effects. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {NormalRange|Object} [feedback] The initial feedback value.\n\t\t */\n\t    Tone.FeedbackEffect = function () {\n\t        var options = Tone.defaults(arguments, ['feedback'], Tone.FeedbackEffect);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the gain which controls the feedback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackGain = new Tone.Gain(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of signal which is fed back into the effect input. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = this._feedbackGain.gain;\n\t        //the feedback loop\n\t        this.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.FeedbackEffect, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackEffect.defaults = { 'feedback': 0.125 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.FeedbackEffect} this\n\t\t */\n\t    Tone.FeedbackEffect.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this._feedbackGain.dispose();\n\t        this._feedbackGain = null;\n\t        this.feedback = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Just like a stereo feedback effect, but the feedback is routed from left to right\n\t\t *         and right to left instead of on the same channel.\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.StereoEffect}\n\t\t */\n\t    Tone.StereoXFeedbackEffect = function () {\n\t        var options = Tone.defaults(arguments, ['feedback'], Tone.FeedbackEffect);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The amount of feedback from the output\n\t\t\t *  back into the input of the effect (routed\n\t\t\t *  across left and right channels).\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackLR = new Tone.Gain();\n\t        /**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackRL = new Tone.Gain();\n\t        //connect it up\n\t        this.effectReturnL.chain(this._feedbackLR, this.effectSendR);\n\t        this.effectReturnR.chain(this._feedbackRL, this.effectSendL);\n\t        this.feedback.fan(this._feedbackLR.gain, this._feedbackRL.gain);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.StereoXFeedbackEffect, Tone.StereoEffect);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoXFeedbackEffect} this\n\t\t */\n\t    Tone.StereoXFeedbackEffect.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this.feedback.dispose();\n\t        this.feedback = null;\n\t        this._feedbackLR.dispose();\n\t        this._feedbackLR = null;\n\t        this._feedbackRL.dispose();\n\t        this._feedbackRL = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoXFeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Chorus is a stereo chorus effect with feedback composed of \n\t\t *         a left and right delay with a Tone.LFO applied to the delayTime of each channel. \n\t\t *         Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n\t\t *         Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.StereoXFeedbackEffect}\n\t\t *\t@param {Frequency|Object} [frequency] The frequency of the LFO.\n\t\t *\t@param {Milliseconds} [delayTime] The delay of the chorus effect in ms. \n\t\t *\t@param {NormalRange} [depth] The depth of the chorus.\n\t\t *\t@example\n\t\t * var chorus = new Tone.Chorus(4, 2.5, 0.5);\n\t\t * var synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);\n\t\t * synth.triggerAttackRelease([\"C3\",\"E3\",\"G3\"], \"8n\");\n\t\t */\n\t    Tone.Chorus = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'delayTime',\n\t            'depth'\n\t        ], Tone.Chorus);\n\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the depth of the chorus\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._depth = options.depth;\n\t        /**\n\t\t\t *  the delayTime\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayTime = options.delayTime / 1000;\n\t        /**\n\t\t\t *  the lfo which controls the delayTime\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'min': 0,\n\t            'max': 1\n\t        });\n\t        /**\n\t\t\t *  another LFO for the right side with a 180 degree phase diff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'min': 0,\n\t            'max': 1,\n\t            'phase': 180\n\t        });\n\t        /**\n\t\t\t *  delay for left\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNodeL = new Tone.Delay();\n\t        /**\n\t\t\t *  delay for right\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNodeR = new Tone.Delay();\n\t        /**\n\t\t\t * The frequency of the LFO which modulates the delayTime. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfoL.frequency;\n\t        //connections\n\t        this.effectSendL.chain(this._delayNodeL, this.effectReturnL);\n\t        this.effectSendR.chain(this._delayNodeR, this.effectReturnR);\n\t        //and pass through to make the detune apparent\n\t        this.effectSendL.connect(this.effectReturnL);\n\t        this.effectSendR.connect(this.effectReturnR);\n\t        //lfo setup\n\t        this._lfoL.connect(this._delayNodeL.delayTime);\n\t        this._lfoR.connect(this._delayNodeR.delayTime);\n\t        //start the lfo\n\t        this._lfoL.start();\n\t        this._lfoR.start();\n\t        //have one LFO frequency control the other\n\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t        //set the initial values\n\t        this.depth = this._depth;\n\t        this.frequency.value = options.frequency;\n\t        this.type = options.type;\n\t        this._readOnly(['frequency']);\n\t        this.spread = options.spread;\n\t    };\n\t    Tone.extend(Tone.Chorus, Tone.StereoXFeedbackEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Chorus.defaults = {\n\t        'frequency': 1.5,\n\t        'delayTime': 3.5,\n\t        'depth': 0.7,\n\t        'feedback': 0.1,\n\t        'type': 'sine',\n\t        'spread': 180\n\t    };\n\t    /**\n\t\t * The depth of the effect. A depth of 1 makes the delayTime\n\t\t * modulate between 0 and 2*delayTime (centered around the delayTime). \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {NormalRange}\n\t\t * @name depth\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'depth', {\n\t        get: function () {\n\t            return this._depth;\n\t        },\n\t        set: function (depth) {\n\t            this._depth = depth;\n\t            var deviation = this._delayTime * depth;\n\t            this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n\t            this._lfoL.max = this._delayTime + deviation;\n\t            this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n\t            this._lfoR.max = this._delayTime + deviation;\n\t        }\n\t    });\n\t    /**\n\t\t * The delayTime in milliseconds of the chorus. A larger delayTime\n\t\t * will give a more pronounced effect. Nominal range a delayTime\n\t\t * is between 2 and 20ms. \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {Milliseconds}\n\t\t * @name delayTime\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'delayTime', {\n\t        get: function () {\n\t            return this._delayTime * 1000;\n\t        },\n\t        set: function (delayTime) {\n\t            this._delayTime = delayTime / 1000;\n\t            this.depth = this._depth;\n\t        }\n\t    });\n\t    /**\n\t\t * The oscillator type of the LFO. \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfoL.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfoL.type = type;\n\t            this._lfoR.type = type;\n\t        }\n\t    });\n\t    /** \n\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {Degrees}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'spread', {\n\t        get: function () {\n\t            return this._lfoR.phase - this._lfoL.phase;\n\t        },\n\t        set: function (spread) {\n\t            this._lfoL.phase = 90 - spread / 2;\n\t            this._lfoR.phase = spread / 2 + 90;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Chorus} this\n\t\t */\n\t    Tone.Chorus.prototype.dispose = function () {\n\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        this._delayNodeL.dispose();\n\t        this._delayNodeL = null;\n\t        this._delayNodeR.dispose();\n\t        this._delayNodeR = null;\n\t        this._writable('frequency');\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.Chorus;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Convolver is a wrapper around the Native Web Audio \n\t\t *          [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n\t\t *          Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n\t\t *          [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {string|Tone.Buffer|Object} [url] The URL of the impulse response or the Tone.Buffer\n\t\t *                                           contianing the impulse response. \n\t\t *  @param {Function} onload The callback to invoke when the url is loaded.\n\t\t *  @example\n\t\t * //initializing the convolver with an impulse response\n\t\t * var convolver = new Tone.Convolver(\"./path/to/ir.wav\").toMaster();\n\t\t */\n\t    Tone.Convolver = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.Convolver);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  convolver node\n\t\t\t *  @type {ConvolverNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._convolver = this.context.createConvolver();\n\t        /**\n\t\t\t *  the convolution buffer\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = new Tone.Buffer();\n\t        if (Tone.isString(options.url)) {\n\t            this._buffer.load(options.url, function (buffer) {\n\t                this.buffer = buffer;\n\t                options.onload();\n\t            }.bind(this));\n\t        } else if (options.url) {\n\t            this.buffer = options.url;\n\t            options.onload();\n\t        }\n\t        this.connectEffect(this._convolver);\n\t    };\n\t    Tone.extend(Tone.Convolver, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Convolver.defaults = { 'onload': Tone.noOp };\n\t    /**\n\t\t *  The convolver's buffer\n\t\t *  @memberOf Tone.Convolver#\n\t\t *  @type {AudioBuffer}\n\t\t *  @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Convolver.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer.get();\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t            this._convolver.buffer = this._buffer.get();\n\t        }\n\t    });\n\t    /**\n\t\t *  Load an impulse response url as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {string} url The url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @param  {function=} callback\n\t\t *  @returns {Promise}\n\t\t */\n\t    Tone.Convolver.prototype.load = function (url, callback) {\n\t        return this._buffer.load(url, function (buff) {\n\t            this.buffer = buff;\n\t            if (callback) {\n\t                callback();\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Convolver} this\n\t\t */\n\t    Tone.Convolver.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._convolver.disconnect();\n\t        this._convolver = null;\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    return Tone.Convolver;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Distortion is a simple distortion effect using Tone.WaveShaper.\n\t\t *         Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {Number|Object} [distortion] The amount of distortion (nominal range of 0-1)\n\t\t *  @example\n\t\t * var dist = new Tone.Distortion(0.8).toMaster();\n\t\t * var fm = new Tone.SimpleFM().connect(dist);\n\t\t * //this sounds good on bass notes\n\t\t * fm.triggerAttackRelease(\"A1\", \"8n\");\n\t\t */\n\t    Tone.Distortion = function () {\n\t        var options = Tone.defaults(arguments, ['distortion'], Tone.Distortion);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(4096);\n\t        /**\n\t\t\t * holds the distortion amount\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t        this._distortion = options.distortion;\n\t        this.connectEffect(this._shaper);\n\t        this.distortion = options.distortion;\n\t        this.oversample = options.oversample;\n\t    };\n\t    Tone.extend(Tone.Distortion, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Distortion.defaults = {\n\t        'distortion': 0.4,\n\t        'oversample': 'none'\n\t    };\n\t    /**\n\t\t * The amount of distortion.\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {NormalRange}\n\t\t * @name distortion\n\t\t */\n\t    Object.defineProperty(Tone.Distortion.prototype, 'distortion', {\n\t        get: function () {\n\t            return this._distortion;\n\t        },\n\t        set: function (amount) {\n\t            this._distortion = amount;\n\t            var k = amount * 100;\n\t            var deg = Math.PI / 180;\n\t            this._shaper.setMap(function (x) {\n\t                if (Math.abs(x) < 0.001) {\n\t                    //should output 0 when input is 0\n\t                    return 0;\n\t                } else {\n\t                    return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n\t                }\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.Distortion.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            this._shaper.oversample = oversampling;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Distortion} this\n\t\t */\n\t    Tone.Distortion.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        return this;\n\t    };\n\t    return Tone.Distortion;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.FeedbackDelay is a DelayNode in which part of output\n\t\t *          signal is fed back into the delay. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Time|Object} [delayTime] The delay applied to the incoming signal. \n\t\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t\t *                            is fed back through the delay.\n\t\t *  @example\n\t\t * var feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toMaster();\n\t\t * var tom = new Tone.DrumSynth({\n\t\t * \t\"octaves\" : 4,\n\t\t * \t\"pitchDecay\" : 0.1\n\t\t * }).connect(feedbackDelay);\n\t\t * tom.triggerAttackRelease(\"A2\",\"32n\");\n\t\t */\n\t    Tone.FeedbackDelay = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'delayTime',\n\t            'feedback'\n\t        ], Tone.FeedbackDelay);\n\t        Tone.FeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The delayTime of the DelayNode. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delayNode.delayTime;\n\t        // connect it up\n\t        this.connectEffect(this._delayNode);\n\t        this._readOnly(['delayTime']);\n\t    };\n\t    Tone.extend(Tone.FeedbackDelay, Tone.FeedbackEffect);\n\t    /**\n\t\t *  The default values. \n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackDelay.defaults = { 'delayTime': 0.25 };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackDelay} this\n\t\t */\n\t    Tone.FeedbackDelay.prototype.dispose = function () {\n\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t        this._delayNode.dispose();\n\t        this._delayNode = null;\n\t        this._writable(['delayTime']);\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackDelay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  an array of comb filter delay values from Freeverb implementation\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterTunings = [\n\t        1557 / 44100,\n\t        1617 / 44100,\n\t        1491 / 44100,\n\t        1422 / 44100,\n\t        1277 / 44100,\n\t        1356 / 44100,\n\t        1188 / 44100,\n\t        1116 / 44100\n\t    ];\n\t    /**\n\t\t *  an array of allpass filter frequency values from Freeverb implementation\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var allpassFilterFrequencies = [\n\t        225,\n\t        556,\n\t        441,\n\t        341\n\t    ];\n\t    /**\n\t\t *  @class Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n\t\t *         Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [roomSize] Correlated to the decay time.\n\t\t *  @param {Frequency} [dampening] The cutoff frequency of a lowpass filter as part\n\t\t *                                 of the reverb.\n\t\t *  @example\n\t\t * var freeverb = new Tone.Freeverb().toMaster();\n\t\t * freeverb.dampening.value = 1000;\n\t\t * //routing synth through the reverb\n\t\t * var synth = new Tone.AMSynth().connect(freeverb);\n\t\t */\n\t    Tone.Freeverb = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'roomSize',\n\t            'dampening'\n\t        ], Tone.Freeverb);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The roomSize value between. A larger roomSize\n\t\t\t *  will result in a longer decay.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of dampening of the reverberant signal.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = new Tone.Signal(options.dampening, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  the comb filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._combFilters = [];\n\t        /**\n\t\t\t *  the allpass filters on the left\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFiltersL = [];\n\t        /**\n\t\t\t *  the allpass filters on the right\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFiltersR = [];\n\t        //make the allpass filters on the right\n\t        for (var l = 0; l < allpassFilterFrequencies.length; l++) {\n\t            var allpassL = this.context.createBiquadFilter();\n\t            allpassL.type = 'allpass';\n\t            allpassL.frequency.value = allpassFilterFrequencies[l];\n\t            this._allpassFiltersL.push(allpassL);\n\t        }\n\t        //make the allpass filters on the left\n\t        for (var r = 0; r < allpassFilterFrequencies.length; r++) {\n\t            var allpassR = this.context.createBiquadFilter();\n\t            allpassR.type = 'allpass';\n\t            allpassR.frequency.value = allpassFilterFrequencies[r];\n\t            this._allpassFiltersR.push(allpassR);\n\t        }\n\t        //make the comb filters\n\t        for (var c = 0; c < combFilterTunings.length; c++) {\n\t            var lfpf = new Tone.LowpassCombFilter(combFilterTunings[c]);\n\t            if (c < combFilterTunings.length / 2) {\n\t                this.effectSendL.chain(lfpf, this._allpassFiltersL[0]);\n\t            } else {\n\t                this.effectSendR.chain(lfpf, this._allpassFiltersR[0]);\n\t            }\n\t            this.roomSize.connect(lfpf.resonance);\n\t            this.dampening.connect(lfpf.dampening);\n\t            this._combFilters.push(lfpf);\n\t        }\n\t        //chain the allpass filters togetehr\n\t        Tone.connectSeries.apply(Tone, this._allpassFiltersL);\n\t        Tone.connectSeries.apply(Tone, this._allpassFiltersR);\n\t        this._allpassFiltersL[this._allpassFiltersL.length - 1].connect(this.effectReturnL);\n\t        this._allpassFiltersR[this._allpassFiltersR.length - 1].connect(this.effectReturnR);\n\t        this._readOnly([\n\t            'roomSize',\n\t            'dampening'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Freeverb, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Freeverb.defaults = {\n\t        'roomSize': 0.7,\n\t        'dampening': 3000\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Freeverb} this\n\t\t */\n\t    Tone.Freeverb.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        for (var al = 0; al < this._allpassFiltersL.length; al++) {\n\t            this._allpassFiltersL[al].disconnect();\n\t            this._allpassFiltersL[al] = null;\n\t        }\n\t        this._allpassFiltersL = null;\n\t        for (var ar = 0; ar < this._allpassFiltersR.length; ar++) {\n\t            this._allpassFiltersR[ar].disconnect();\n\t            this._allpassFiltersR[ar] = null;\n\t        }\n\t        this._allpassFiltersR = null;\n\t        for (var cf = 0; cf < this._combFilters.length; cf++) {\n\t            this._combFilters[cf].dispose();\n\t            this._combFilters[cf] = null;\n\t        }\n\t        this._combFilters = null;\n\t        this._writable([\n\t            'roomSize',\n\t            'dampening'\n\t        ]);\n\t        this.roomSize.dispose();\n\t        this.roomSize = null;\n\t        this.dampening.dispose();\n\t        this.dampening = null;\n\t        return this;\n\t    };\n\t    return Tone.Freeverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  an array of the comb filter delay time values\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterDelayTimes = [\n\t        1687 / 25000,\n\t        1601 / 25000,\n\t        2053 / 25000,\n\t        2251 / 25000\n\t    ];\n\t    /**\n\t\t *  the resonances of each of the comb filters\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterResonances = [\n\t        0.773,\n\t        0.802,\n\t        0.753,\n\t        0.733\n\t    ];\n\t    /**\n\t\t *  the allpass filter frequencies\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var allpassFilterFreqs = [\n\t        347,\n\t        113,\n\t        37\n\t    ];\n\t    /**\n\t\t *  @class Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n\t\t *         tuned by John Chowning in 1970.\n\t\t *         It is made up of three allpass filters and four Tone.FeedbackCombFilter. \n\t\t *         \n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [roomSize] Coorelates to the decay time.\n\t\t *  @example\n\t\t * var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);\n\t\t * var delay = new Tone.FeedbackDelay(0.5); \n\t\t * //connecting the synth to reverb through delay\n\t\t * var synth = new Tone.DuoSynth().chain(delay, reverb);\n\t\t * synth.triggerAttackRelease(\"A4\",\"8n\");\n\t\t */\n\t    Tone.JCReverb = function () {\n\t        var options = Tone.defaults(arguments, ['roomSize'], Tone.JCReverb);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  room size control values between [0,1]\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  scale the room size\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scaleRoomSize = new Tone.Scale(-0.733, 0.197);\n\t        /**\n\t\t\t *  a series of allpass filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFilters = [];\n\t        /**\n\t\t\t *  parallel feedback comb filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackCombFilters = [];\n\t        //make the allpass filters\n\t        for (var af = 0; af < allpassFilterFreqs.length; af++) {\n\t            var allpass = this.context.createBiquadFilter();\n\t            allpass.type = 'allpass';\n\t            allpass.frequency.value = allpassFilterFreqs[af];\n\t            this._allpassFilters.push(allpass);\n\t        }\n\t        //and the comb filters\n\t        for (var cf = 0; cf < combFilterDelayTimes.length; cf++) {\n\t            var fbcf = new Tone.FeedbackCombFilter(combFilterDelayTimes[cf], 0.1);\n\t            this._scaleRoomSize.connect(fbcf.resonance);\n\t            fbcf.resonance.value = combFilterResonances[cf];\n\t            this._allpassFilters[this._allpassFilters.length - 1].connect(fbcf);\n\t            if (cf < combFilterDelayTimes.length / 2) {\n\t                fbcf.connect(this.effectReturnL);\n\t            } else {\n\t                fbcf.connect(this.effectReturnR);\n\t            }\n\t            this._feedbackCombFilters.push(fbcf);\n\t        }\n\t        //chain the allpass filters together\n\t        this.roomSize.connect(this._scaleRoomSize);\n\t        Tone.connectSeries.apply(Tone, this._allpassFilters);\n\t        this.effectSendL.connect(this._allpassFilters[0]);\n\t        this.effectSendR.connect(this._allpassFilters[0]);\n\t        this._readOnly(['roomSize']);\n\t    };\n\t    Tone.extend(Tone.JCReverb, Tone.StereoEffect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.JCReverb.defaults = { 'roomSize': 0.5 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.JCReverb} this\n\t\t */\n\t    Tone.JCReverb.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        for (var apf = 0; apf < this._allpassFilters.length; apf++) {\n\t            this._allpassFilters[apf].disconnect();\n\t            this._allpassFilters[apf] = null;\n\t        }\n\t        this._allpassFilters = null;\n\t        for (var fbcf = 0; fbcf < this._feedbackCombFilters.length; fbcf++) {\n\t            this._feedbackCombFilters[fbcf].dispose();\n\t            this._feedbackCombFilters[fbcf] = null;\n\t        }\n\t        this._feedbackCombFilters = null;\n\t        this._writable(['roomSize']);\n\t        this.roomSize.dispose();\n\t        this.roomSize = null;\n\t        this._scaleRoomSize.dispose();\n\t        this._scaleRoomSize = null;\n\t        return this;\n\t    };\n\t    return Tone.JCReverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels) \n\t\t *         and effects them separately before being recombined.\n\t\t *         Applies a Mid/Side seperation and recombination.\n\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t *         <br><br>\n\t\t *         This is a base-class for Mid/Side Effects. \n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideEffect = function () {\n\t        Tone.Effect.apply(this, arguments);\n\t        /**\n\t\t\t *  The mid/side split\n\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideSplit = new Tone.MidSideSplit();\n\t        /**\n\t\t\t *  The mid/side merge\n\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideMerge = new Tone.MidSideMerge();\n\t        /**\n\t\t\t *  The mid send. Connect to mid processing\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this.midSend = this._midSideSplit.mid;\n\t        /**\n\t\t\t *  The side send. Connect to side processing\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this.sideSend = this._midSideSplit.side;\n\t        /**\n\t\t\t *  The mid return connection\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.midReturn = this._midSideMerge.mid;\n\t        /**\n\t\t\t *  The side return connection\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.sideReturn = this._midSideMerge.side;\n\t        //the connections\n\t        this.effectSend.connect(this._midSideSplit);\n\t        this._midSideMerge.connect(this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.MidSideEffect, Tone.Effect);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.MidSideEffect} this\n\t\t */\n\t    Tone.MidSideEffect.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._midSideSplit.dispose();\n\t        this._midSideSplit = null;\n\t        this._midSideMerge.dispose();\n\t        this._midSideMerge = null;\n\t        this.midSend = null;\n\t        this.sideSend = null;\n\t        this.midReturn = null;\n\t        this.sideReturn = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Phaser is a phaser effect. Phasers work by changing the phase\n\t\t *         of different frequency components of an incoming signal. Read more on \n\t\t *         [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)). \n\t\t *         Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n\t\t *\n\t\t *\t@extends {Tone.StereoEffect}\n\t\t *\t@constructor\n\t\t *\t@param {Frequency|Object} [frequency] The speed of the phasing. \n\t\t *\t@param {number} [octaves] The octaves of the effect. \n\t\t *\t@param {Frequency} [baseFrequency] The base frequency of the filters. \n\t\t *\t@example\n\t\t * var phaser = new Tone.Phaser({\n\t\t * \t\"frequency\" : 15, \n\t\t * \t\"octaves\" : 5, \n\t\t * \t\"baseFrequency\" : 1000\n\t\t * }).toMaster();\n\t\t * var synth = new Tone.FMSynth().connect(phaser);\n\t\t * synth.triggerAttackRelease(\"E3\", \"2n\");\n\t\t */\n\t    Tone.Phaser = function () {\n\t        //set the defaults\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'octaves',\n\t            'baseFrequency'\n\t        ], Tone.Phaser);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which controls the frequency on the left side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO(options.frequency, 0, 1);\n\t        /**\n\t\t\t *  the lfo which controls the frequency on the right side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO(options.frequency, 0, 1);\n\t        this._lfoR.phase = 180;\n\t        /**\n\t\t\t *  the base modulation frequency\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._baseFrequency = options.baseFrequency;\n\t        /**\n\t\t\t *  the octaves of the phasing\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  The quality factor of the filters\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q, Tone.Type.Positive);\n\t        /**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filtersL = this._makeFilters(options.stages, this._lfoL, this.Q);\n\t        /**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filtersR = this._makeFilters(options.stages, this._lfoR, this.Q);\n\t        /**\n\t\t\t * the frequency of the effect\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t        this.frequency = this._lfoL.frequency;\n\t        this.frequency.value = options.frequency;\n\t        //connect them up\n\t        this.effectSendL.connect(this._filtersL[0]);\n\t        this.effectSendR.connect(this._filtersR[0]);\n\t        this._filtersL[options.stages - 1].connect(this.effectReturnL);\n\t        this._filtersR[options.stages - 1].connect(this.effectReturnR);\n\t        //control the frequency with one LFO\n\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t        //set the options\n\t        this.baseFrequency = options.baseFrequency;\n\t        this.octaves = options.octaves;\n\t        //start the lfo\n\t        this._lfoL.start();\n\t        this._lfoR.start();\n\t        this._readOnly([\n\t            'frequency',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Phaser, Tone.StereoEffect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {object}\n\t\t */\n\t    Tone.Phaser.defaults = {\n\t        'frequency': 0.5,\n\t        'octaves': 3,\n\t        'stages': 10,\n\t        'Q': 10,\n\t        'baseFrequency': 350\n\t    };\n\t    /**\n\t\t *  @param {number} stages\n\t\t *  @returns {Array} the number of filters all connected together\n\t\t *  @private\n\t\t */\n\t    Tone.Phaser.prototype._makeFilters = function (stages, connectToFreq, Q) {\n\t        var filters = new Array(stages);\n\t        //make all the filters\n\t        for (var i = 0; i < stages; i++) {\n\t            var filter = this.context.createBiquadFilter();\n\t            filter.type = 'allpass';\n\t            Q.connect(filter.Q);\n\t            connectToFreq.connect(filter.frequency);\n\t            filters[i] = filter;\n\t        }\n\t        Tone.connectSeries.apply(Tone, filters);\n\t        return filters;\n\t    };\n\t    /**\n\t\t * The number of octaves the phase goes above\n\t\t * the baseFrequency\n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.Phaser.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            var max = this._baseFrequency * Math.pow(2, octaves);\n\t            this._lfoL.max = max;\n\t            this._lfoR.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The the base frequency of the filters. \n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {number}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.Phaser.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._baseFrequency;\n\t        },\n\t        set: function (freq) {\n\t            this._baseFrequency = freq;\n\t            this._lfoL.min = freq;\n\t            this._lfoR.min = freq;\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Phaser} this\n\t\t */\n\t    Tone.Phaser.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'Q'\n\t        ]);\n\t        this.Q.dispose();\n\t        this.Q = null;\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        for (var i = 0; i < this._filtersL.length; i++) {\n\t            this._filtersL[i].disconnect();\n\t            this._filtersL[i] = null;\n\t        }\n\t        this._filtersL = null;\n\t        for (var j = 0; j < this._filtersR.length; j++) {\n\t            this._filtersR[j].disconnect();\n\t            this._filtersR[j] = null;\n\t        }\n\t        this._filtersR = null;\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.Phaser;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.PingPongDelay is a feedback delay effect where the echo is heard\n\t\t *          first in one channel and next in the opposite channel. In a stereo\n\t\t *          system these are the right and left channels.\n\t\t *          PingPongDelay in more simplified terms is two Tone.FeedbackDelays \n\t\t *          with independent delay values. Each delay is routed to one channel\n\t\t *          (left or right), and the channel triggered second will always \n\t\t *          trigger at the same interval after the first.\n\t\t *\n\t\t * \t@constructor\n\t\t * \t@extends {Tone.StereoXFeedbackEffect}\n\t\t *  @param {Time|Object} [delayTime] The delayTime between consecutive echos.\n\t\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t\t *                                 is fed back through the delay.\n\t\t *  @example\n\t\t * var pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toMaster();\n\t\t * var drum = new Tone.DrumSynth().connect(pingPong);\n\t\t * drum.triggerAttackRelease(\"C4\", \"32n\");\n\t\t */\n\t    Tone.PingPongDelay = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'delayTime',\n\t            'feedback'\n\t        ], Tone.PingPongDelay);\n\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the delay node on the left side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._leftDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the delay node on the right side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rightDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the predelay on the right side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rightPreDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the delay time signal\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = new Tone.Signal(options.delayTime, Tone.Type.Time);\n\t        //connect it up\n\t        this.effectSendL.chain(this._leftDelay, this.effectReturnL);\n\t        this.effectSendR.chain(this._rightPreDelay, this._rightDelay, this.effectReturnR);\n\t        this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n\t        //rearranged the feedback to be after the rightPreDelay\n\t        this._feedbackLR.disconnect();\n\t        this._feedbackLR.connect(this._rightDelay);\n\t        this._readOnly(['delayTime']);\n\t    };\n\t    Tone.extend(Tone.PingPongDelay, Tone.StereoXFeedbackEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PingPongDelay.defaults = {\n\t        'delayTime': 0.25,\n\t        'maxDelayTime': 1\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.PingPongDelay} this\n\t\t */\n\t    Tone.PingPongDelay.prototype.dispose = function () {\n\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t        this._leftDelay.dispose();\n\t        this._leftDelay = null;\n\t        this._rightDelay.dispose();\n\t        this._rightDelay = null;\n\t        this._rightPreDelay.dispose();\n\t        this._rightPreDelay = null;\n\t        this._writable(['delayTime']);\n\t        this.delayTime.dispose();\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.PingPongDelay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PitchShift does near-realtime pitch shifting to the incoming signal. \n\t\t *         The effect is achieved by speeding up or slowing down the delayTime\n\t\t *         of a DelayNode using a sawtooth wave. \n\t\t *         Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n\t\t *         Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n\t\t *         \n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Interval=} pitch The interval to transpose the incoming signal by. \n\t\t */\n\t    Tone.PitchShift = function () {\n\t        var options = Tone.defaults(arguments, ['pitch'], Tone.PitchShift);\n\t        Tone.FeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  The pitch signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._frequency = new Tone.Signal(0);\n\t        /**\n\t\t\t *  Uses two DelayNodes to cover up the jump in\n\t\t\t *  the sawtooth wave. \n\t\t\t *  @type  {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayA = new Tone.Delay(0, 1);\n\t        /**\n\t\t\t *  The first LFO.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoA = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 0.1,\n\t            'type': 'sawtooth'\n\t        }).connect(this._delayA.delayTime);\n\t        /**\n\t\t\t *  The second DelayNode\n\t\t\t *  @type  {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayB = new Tone.Delay(0, 1);\n\t        /**\n\t\t\t *  The first LFO.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoB = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 0.1,\n\t            'type': 'sawtooth',\n\t            'phase': 180\n\t        }).connect(this._delayB.delayTime);\n\t        /**\n\t\t\t *  Crossfade quickly between the two delay lines\n\t\t\t *  to cover up the jump in the sawtooth wave\n\t\t\t *  @type  {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._crossFade = new Tone.CrossFade();\n\t        /**\n\t\t\t *  LFO which alternates between the two\n\t\t\t *  delay lines to cover up the disparity in the\n\t\t\t *  sawtooth wave. \n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._crossFadeLFO = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 1,\n\t            'type': 'triangle',\n\t            'phase': 90\n\t        }).connect(this._crossFade.fade);\n\t        /**\n\t\t\t *  The delay node\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackDelay = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The amount of delay on the input signal\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._feedbackDelay.delayTime;\n\t        this._readOnly('delayTime');\n\t        /**\n\t\t\t *  Hold the current pitch\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pitch = options.pitch;\n\t        /**\n\t\t\t *  Hold the current windowSize\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._windowSize = options.windowSize;\n\t        //connect the two delay lines up\n\t        this._delayA.connect(this._crossFade.a);\n\t        this._delayB.connect(this._crossFade.b);\n\t        //connect the frequency\n\t        this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n\t        //route the input\n\t        this.effectSend.fan(this._delayA, this._delayB);\n\t        this._crossFade.chain(this._feedbackDelay, this.effectReturn);\n\t        //start the LFOs at the same time\n\t        var now = this.now();\n\t        this._lfoA.start(now);\n\t        this._lfoB.start(now);\n\t        this._crossFadeLFO.start(now);\n\t        //set the initial value\n\t        this.windowSize = this._windowSize;\n\t    };\n\t    Tone.extend(Tone.PitchShift, Tone.FeedbackEffect);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.PitchShift.defaults = {\n\t        'pitch': 0,\n\t        'windowSize': 0.1,\n\t        'delayTime': 0,\n\t        'feedback': 0\n\t    };\n\t    /**\n\t\t * Repitch the incoming signal by some interval (measured\n\t\t * in semi-tones). \n\t\t * @memberOf Tone.PitchShift#\n\t\t * @type {Interval}\n\t\t * @name pitch\n\t\t * @example\n\t\t * pitchShift.pitch = -12; //down one octave\n\t\t * pitchShift.pitch = 7; //up a fifth\n\t\t */\n\t    Object.defineProperty(Tone.PitchShift.prototype, 'pitch', {\n\t        get: function () {\n\t            return this._pitch;\n\t        },\n\t        set: function (interval) {\n\t            this._pitch = interval;\n\t            var factor = 0;\n\t            if (interval < 0) {\n\t                this._lfoA.min = 0;\n\t                this._lfoA.max = this._windowSize;\n\t                this._lfoB.min = 0;\n\t                this._lfoB.max = this._windowSize;\n\t                factor = Tone.intervalToFrequencyRatio(interval - 1) + 1;\n\t            } else {\n\t                this._lfoA.min = this._windowSize;\n\t                this._lfoA.max = 0;\n\t                this._lfoB.min = this._windowSize;\n\t                this._lfoB.max = 0;\n\t                factor = Tone.intervalToFrequencyRatio(interval) - 1;\n\t            }\n\t            this._frequency.value = factor * (1.2 / this._windowSize);\n\t        }\n\t    });\n\t    /**\n\t\t * The window size corresponds roughly to the sample length in a looping sampler. \n\t\t * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n\t\t * signal, but larger values will result in smoother pitch shifting for larger intervals. \n\t\t * A nominal range of 0.03 to 0.1 is recommended. \n\t\t * @memberOf Tone.PitchShift#\n\t\t * @type {Time}\n\t\t * @name windowSize\n\t\t * @example\n\t\t * pitchShift.windowSize = 0.1;\n\t\t */\n\t    Object.defineProperty(Tone.PitchShift.prototype, 'windowSize', {\n\t        get: function () {\n\t            return this._windowSize;\n\t        },\n\t        set: function (size) {\n\t            this._windowSize = this.toSeconds(size);\n\t            this.pitch = this._pitch;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.PitchShift}  this\n\t\t */\n\t    Tone.PitchShift.prototype.dispose = function () {\n\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t        this._frequency.dispose();\n\t        this._frequency = null;\n\t        this._delayA.disconnect();\n\t        this._delayA = null;\n\t        this._delayB.disconnect();\n\t        this._delayB = null;\n\t        this._lfoA.dispose();\n\t        this._lfoA = null;\n\t        this._lfoB.dispose();\n\t        this._lfoB = null;\n\t        this._crossFade.dispose();\n\t        this._crossFade = null;\n\t        this._crossFadeLFO.dispose();\n\t        this._crossFadeLFO = null;\n\t        this._writable('delayTime');\n\t        this._feedbackDelay.dispose();\n\t        this._feedbackDelay = null;\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.PitchShift;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Base class for stereo feedback effects where the effectReturn\n\t\t *         is fed back into the same channel. \n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.StereoEffect}\n\t\t */\n\t    Tone.StereoFeedbackEffect = function () {\n\t        var options = Tone.defaults(arguments, ['feedback'], Tone.FeedbackEffect);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  controls the amount of feedback\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackL = new Tone.Gain();\n\t        /**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackR = new Tone.Gain();\n\t        //connect it up\n\t        this.effectReturnL.chain(this._feedbackL, this.effectSendL);\n\t        this.effectReturnR.chain(this._feedbackR, this.effectSendR);\n\t        this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.StereoFeedbackEffect, Tone.StereoEffect);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoFeedbackEffect} this\n\t\t */\n\t    Tone.StereoFeedbackEffect.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this.feedback.dispose();\n\t        this.feedback = null;\n\t        this._feedbackL.dispose();\n\t        this._feedbackL = null;\n\t        this._feedbackR.dispose();\n\t        this._feedbackR = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoFeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Applies a width factor to the mid/side seperation. \n\t\t *         0 is all mid and 1 is all side.\n\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t *         <br><br>\n\t\t *         <code>\n\t\t *         Mid *= 2*(1-width)<br>\n\t\t *         Side *= 2*width\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.MidSideEffect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [width] The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t\t */\n\t    Tone.StereoWidener = function () {\n\t        var options = Tone.defaults(arguments, ['width'], Tone.StereoWidener);\n\t        Tone.MidSideEffect.call(this, options);\n\t        /**\n\t\t\t *  The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  Mid multiplier\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midMult = new Tone.Expr('$0 * ($1 * (1 - $2))');\n\t        /**\n\t\t\t *  Side multiplier\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sideMult = new Tone.Expr('$0 * ($1 * $2)');\n\t        /**\n\t\t\t *  constant output of 2\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this._two = new Tone.Signal(2);\n\t        //the mid chain\n\t        this._two.connect(this._midMult, 0, 1);\n\t        this.width.connect(this._midMult, 0, 2);\n\t        //the side chain\n\t        this._two.connect(this._sideMult, 0, 1);\n\t        this.width.connect(this._sideMult, 0, 2);\n\t        //connect it to the effect send/return\n\t        this.midSend.chain(this._midMult, this.midReturn);\n\t        this.sideSend.chain(this._sideMult, this.sideReturn);\n\t        this._readOnly(['width']);\n\t    };\n\t    Tone.extend(Tone.StereoWidener, Tone.MidSideEffect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.StereoWidener.defaults = { 'width': 0.5 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.StereoWidener} this\n\t\t */\n\t    Tone.StereoWidener.prototype.dispose = function () {\n\t        Tone.MidSideEffect.prototype.dispose.call(this);\n\t        this._writable(['width']);\n\t        this.width.dispose();\n\t        this.width = null;\n\t        this._midMult.dispose();\n\t        this._midMult = null;\n\t        this._sideMult.dispose();\n\t        this._sideMult = null;\n\t        this._two.dispose();\n\t        this._two = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoWidener;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.\n\t\t *         The type, frequency, and depth of the LFO is controllable.\n\t\t *\n\t\t *  @extends {Tone.StereoEffect}\n\t\t *  @constructor\n\t\t *  @param {Frequency} [frequency] The rate of the effect.\n\t\t *  @param {NormalRange} [depth] The depth of the effect.\n\t\t *  @example\n\t\t * //create a tremolo and start it's LFO\n\t\t * var tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();\n\t\t * //route an oscillator through the tremolo and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(tremolo).start();\n\t\t */\n\t    Tone.Tremolo = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'depth'\n\t        ], Tone.Tremolo);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The tremelo LFO in the left channel\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO({\n\t            'phase': options.spread,\n\t            'min': 1,\n\t            'max': 0\n\t        });\n\t        /**\n\t\t\t *  The tremelo LFO in the left channel\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO({\n\t            'phase': options.spread,\n\t            'min': 1,\n\t            'max': 0\n\t        });\n\t        /**\n\t\t\t *  Where the gain is multiplied\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitudeL = new Tone.Gain();\n\t        /**\n\t\t\t *  Where the gain is multiplied\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitudeR = new Tone.Gain();\n\t        /**\n\t\t\t *  The frequency of the tremolo.\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The depth of the effect. A depth of 0, has no effect\n\t\t\t *  on the amplitude, and a depth of 1 makes the amplitude\n\t\t\t *  modulate fully between 0 and 1.\n\t\t\t *  @type  {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.depth = new Tone.Signal(options.depth, Tone.Type.NormalRange);\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.effectSendL.chain(this._amplitudeL, this.effectReturnL);\n\t        this.effectSendR.chain(this._amplitudeR, this.effectReturnR);\n\t        this._lfoL.connect(this._amplitudeL.gain);\n\t        this._lfoR.connect(this._amplitudeR.gain);\n\t        this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n\t        this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n\t        this.type = options.type;\n\t        this.spread = options.spread;\n\t    };\n\t    Tone.extend(Tone.Tremolo, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Tremolo.defaults = {\n\t        'frequency': 10,\n\t        'type': 'sine',\n\t        'depth': 0.5,\n\t        'spread': 180\n\t    };\n\t    /**\n\t\t * Start the tremolo.\n\t\t * @param {Time} [time=now] When the tremolo begins.\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.start = function (time) {\n\t        this._lfoL.start(time);\n\t        this._lfoR.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the tremolo.\n\t\t * @param {Time} [time=now] When the tremolo stops.\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.stop = function (time) {\n\t        this._lfoL.stop(time);\n\t        this._lfoR.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the effect to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                              Transport has started.\n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.Tremolo.prototype.sync = function (delay) {\n\t        this._lfoL.sync(delay);\n\t        this._lfoR.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the filter from the transport\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.unsync = function () {\n\t        this._lfoL.unsync();\n\t        this._lfoR.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * The Tremolo's oscillator type.\n\t\t * @memberOf Tone.Tremolo#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Tremolo.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfoL.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfoL.type = type;\n\t            this._lfoR.type = type;\n\t        }\n\t    });\n\t    /** \n\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t * @memberOf Tone.Tremolo#\n\t\t * @type {Degrees}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.Tremolo.prototype, 'spread', {\n\t        get: function () {\n\t            return this._lfoR.phase - this._lfoL.phase;    //180\n\t        },\n\t        set: function (spread) {\n\t            this._lfoL.phase = 90 - spread / 2;\n\t            this._lfoR.phase = spread / 2 + 90;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        this._amplitudeL.dispose();\n\t        this._amplitudeL = null;\n\t        this._amplitudeR.dispose();\n\t        this._amplitudeR = null;\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.Tremolo;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n\t\t *         modulates the delayTime of the delay, causing the pitch to rise\n\t\t *         and fall. \n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency} frequency The frequency of the vibrato.\n\t\t *  @param {NormalRange} depth The amount the pitch is modulated.\n\t\t */\n\t    Tone.Vibrato = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'depth'\n\t        ], Tone.Vibrato);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  The delay node used for the vibrato effect\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = new Tone.Delay(0, options.maxDelay);\n\t        /**\n\t\t\t *  The LFO used to control the vibrato\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'type': options.type,\n\t            'min': 0,\n\t            'max': options.maxDelay,\n\t            'frequency': options.frequency,\n\t            'phase': -90    //offse the phase so the resting position is in the center\n\t        }).start().connect(this._delayNode.delayTime);\n\t        /**\n\t\t\t *  The frequency of the vibrato\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        /**\n\t\t\t *  The depth of the vibrato. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        this.depth.value = options.depth;\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.effectSend.chain(this._delayNode, this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.Vibrato, Tone.Effect);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Vibrato.defaults = {\n\t        'maxDelay': 0.005,\n\t        'frequency': 5,\n\t        'depth': 0.1,\n\t        'type': 'sine'\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the Vibrato.\n\t\t * @memberOf Tone.Vibrato#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Vibrato.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Vibrato} this\n\t\t */\n\t    Tone.Vibrato.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._delayNode.dispose();\n\t        this._delayNode = null;\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t    };\n\t    return Tone.Vibrato;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable\n\t\t *          callback for a single or repeatable events along the timeline. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @param {function} callback The callback to invoke at the time. \n\t\t *  @param {*} value The value or values which should be passed to\n\t\t *                      the callback function on invocation.  \n\t\t *  @example\n\t\t * var chord = new Tone.Event(function(time, chord){\n\t\t * \t//the chord as well as the exact time of the event\n\t\t * \t//are passed in as arguments to the callback function\n\t\t * }, [\"D4\", \"E4\", \"F4\"]);\n\t\t * //start the chord at the beginning of the transport timeline\n\t\t * chord.start();\n\t\t * //loop it every measure for 8 measures\n\t\t * chord.loop = 8;\n\t\t * chord.loopEnd = \"1m\";\n\t\t */\n\t    Tone.Event = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'callback',\n\t            'value'\n\t        ], Tone.Event);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  Loop value\n\t\t\t *  @type  {Boolean|Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  The callback to invoke. \n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  The value which is passed to the\n\t\t\t *  callback function.\n\t\t\t *  @type  {*}\n\t\t\t *  @private\n\t\t\t */\n\t        this.value = options.value;\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = this.toTicks(options.loopStart);\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = this.toTicks(options.loopEnd);\n\t        /**\n\t\t\t *  Tracks the scheduled events\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  The playback speed of the note. A speed of 1\n\t\t\t *  is no change. \n\t\t\t *  @private\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this._playbackRate = 1;\n\t        /**\n\t\t\t *  A delay time from when the event is scheduled to start\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startOffset = 0;\n\t        /**\n\t\t\t *  private holder of probability value\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._probability = options.probability;\n\t        /**\n\t\t\t *  the amount of variation from the\n\t\t\t *  given time. \n\t\t\t *  @type {Boolean|Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._humanize = options.humanize;\n\t        /**\n\t\t\t *  If mute is true, the callback won't be\n\t\t\t *  invoked.\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.mute = options.mute;\n\t        //set the initial values\n\t        this.playbackRate = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.Event);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Event.defaults = {\n\t        'callback': Tone.noOp,\n\t        'loop': false,\n\t        'loopEnd': '1m',\n\t        'loopStart': 0,\n\t        'playbackRate': 1,\n\t        'value': null,\n\t        'probability': 1,\n\t        'mute': false,\n\t        'humanize': false\n\t    };\n\t    /**\n\t\t *  Reschedule all of the events along the timeline\n\t\t *  with the updated values.\n\t\t *  @param {Time} after Only reschedules events after the given time.\n\t\t *  @return  {Tone.Event}  this\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._rescheduleEvents = function (after) {\n\t        //if no argument is given, schedules all of the events\n\t        after = Tone.defaultArg(after, -1);\n\t        this._state.forEachFrom(after, function (event) {\n\t            var duration;\n\t            if (event.state === Tone.State.Started) {\n\t                if (!Tone.isUndef(event.id)) {\n\t                    Tone.Transport.clear(event.id);\n\t                }\n\t                var startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t                if (this._loop) {\n\t                    duration = Infinity;\n\t                    if (Tone.isNumber(this._loop)) {\n\t                        duration = this._loop * this._getLoopDuration();\n\t                    }\n\t                    var nextEvent = this._state.getAfter(startTick);\n\t                    if (nextEvent !== null) {\n\t                        duration = Math.min(duration, nextEvent.time - startTick);\n\t                    }\n\t                    if (duration !== Infinity) {\n\t                        //schedule a stop since it's finite duration\n\t                        this._state.setStateAtTime(Tone.State.Stopped, startTick + duration + 1);\n\t                        duration = Tone.Time(duration, 'i');\n\t                    }\n\t                    var interval = Tone.Time(this._getLoopDuration(), 'i');\n\t                    event.id = Tone.Transport.scheduleRepeat(this._tick.bind(this), interval, Tone.TransportTime(startTick, 'i'), duration);\n\t                } else {\n\t                    event.id = Tone.Transport.schedule(this._tick.bind(this), startTick + 'i');\n\t                }\n\t            }\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Event#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(Tone.Transport.ticks);\n\t        }\n\t    });\n\t    /**\n\t\t *  The start from the scheduled start time\n\t\t *  @type {Ticks}\n\t\t *  @memberOf Tone.Event#\n\t\t *  @name startOffset\n\t\t *  @private\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'startOffset', {\n\t        get: function () {\n\t            return this._startOffset;\n\t        },\n\t        set: function (offset) {\n\t            this._startOffset = offset;\n\t        }\n\t    });\n\t    /**\n\t\t *  The probability of the notes being triggered.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'probability', {\n\t        get: function () {\n\t            return this._probability;\n\t        },\n\t        set: function (prob) {\n\t            this._probability = prob;\n\t        }\n\t    });\n\t    /**\n\t\t *  If set to true, will apply small random variation\n\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t *  by that amount.\n\t\t *  @example\n\t\t * event.humanize = true;\n\t\t *  @type {Boolean|Time}\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._humanize = variation;\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the note at the given time. \n\t\t *  @param  {TimelinePosition}  time  When the note should start.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.start = function (time) {\n\t        time = this.toTicks(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Stopped) {\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': time,\n\t                'id': undefined\n\t            });\n\t            this._rescheduleEvents(time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the Event at the given time.\n\t\t *  @param  {TimelinePosition}  time  When the note should stop.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.stop = function (time) {\n\t        this.cancel(time);\n\t        time = this.toTicks(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Stopped, time);\n\t            var previousEvent = this._state.getBefore(time);\n\t            var reschedulTime = time;\n\t            if (previousEvent !== null) {\n\t                reschedulTime = previousEvent.time;\n\t            }\n\t            this._rescheduleEvents(reschedulTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.cancel = function (time) {\n\t        time = Tone.defaultArg(time, -Infinity);\n\t        time = this.toTicks(time);\n\t        this._state.forEachFrom(time, function (event) {\n\t            Tone.Transport.clear(event.id);\n\t        });\n\t        this._state.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The callback function invoker. Also \n\t\t *  checks if the Event is done playing\n\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._tick = function (time) {\n\t        if (!this.mute && this._state.getValueAtTime(Tone.Transport.ticks) === Tone.State.Started) {\n\t            if (this.probability < 1 && Math.random() > this.probability) {\n\t                return;\n\t            }\n\t            if (this.humanize) {\n\t                var variation = 0.02;\n\t                if (!Tone.isBoolean(this.humanize)) {\n\t                    variation = this.toSeconds(this.humanize);\n\t                }\n\t                time += (Math.random() * 2 - 1) * variation;\n\t            }\n\t            this.callback(time, this.value);\n\t        }\n\t    };\n\t    /**\n\t\t *  Get the duration of the loop.\n\t\t *  @return  {Ticks}\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._getLoopDuration = function () {\n\t        return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t    };\n\t    /**\n\t\t *  If the note should loop or not\n\t\t *  between Tone.Event.loopStart and \n\t\t *  Tone.Event.loopEnd. An integer\n\t\t *  value corresponds to the number of\n\t\t *  loops the Event does after it starts.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Boolean|Positive}\n\t\t *  @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            this._rescheduleEvents();\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe playback rate of the note. Defaults to 1.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Positive}\n\t\t *  @name playbackRate\n\t\t *  @example\n\t\t * note.loop = true;\n\t\t * //repeat the note twice as fast\n\t\t * note.playbackRate = 2;\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this._rescheduleEvents();\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopEnd point is the time the event will loop\n\t\t *  if Tone.Event.loop is true.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toNotation();\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = this.toTicks(loopEnd);\n\t            if (this._loop) {\n\t                this._rescheduleEvents();\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The time when the loop should start. \n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toNotation();\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = this.toTicks(loopStart);\n\t            if (this._loop) {\n\t                this._rescheduleEvents();\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The current progress of the loop interval.\n\t\t *  Returns 0 if the event is not started yet or\n\t\t *  it is not set to loop.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {NormalRange}\n\t\t *  @name progress\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'progress', {\n\t        get: function () {\n\t            if (this._loop) {\n\t                var ticks = Tone.Transport.ticks;\n\t                var lastEvent = this._state.get(ticks);\n\t                if (lastEvent !== null && lastEvent.state === Tone.State.Started) {\n\t                    var loopDuration = this._getLoopDuration();\n\t                    var progress = (ticks - lastEvent.time) % loopDuration;\n\t                    return progress / loopDuration;\n\t                } else {\n\t                    return 0;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.dispose = function () {\n\t        this.cancel();\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this.callback = null;\n\t        this.value = null;\n\t    };\n\t    return Tone.Event;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Loop creates a looped callback at the \n\t\t *         specified interval. The callback can be \n\t\t *         started, stopped and scheduled along\n\t\t *         the Transport's timeline. \n\t\t *  @example\n\t\t * var loop = new Tone.Loop(function(time){\n\t\t * \t//triggered every eighth note. \n\t\t * \tconsole.log(time);\n\t\t * }, \"8n\").start(0);\n\t\t * Tone.Transport.start();\n\t\t *  @extends {Tone}\n\t\t *  @param {Function} callback The callback to invoke with the event.\n\t\t *  @param {Time} interval The time between successive callback calls. \n\t\t */\n\t    Tone.Loop = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'callback',\n\t            'interval'\n\t        ], Tone.Loop);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The event which produces the callbacks\n\t\t\t */\n\t        this._event = new Tone.Event({\n\t            'callback': this._tick.bind(this),\n\t            'loop': true,\n\t            'loopEnd': options.interval,\n\t            'playbackRate': options.playbackRate,\n\t            'probability': options.probability\n\t        });\n\t        /**\n\t\t\t *  The callback to invoke with the next event in the pattern\n\t\t\t *  @type {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        //set the iterations\n\t        this.iterations = options.iterations;\n\t    };\n\t    Tone.extend(Tone.Loop);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Loop.defaults = {\n\t        'interval': '4n',\n\t        'callback': Tone.noOp,\n\t        'playbackRate': 1,\n\t        'iterations': Infinity,\n\t        'probability': true,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Start the loop at the specified time along the Transport's\n\t\t *  timeline.\n\t\t *  @param  {TimelinePosition=}  time  When to start the Loop.\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.start = function (time) {\n\t        this._event.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the loop at the given time.\n\t\t *  @param  {TimelinePosition=}  time  When to stop the Arpeggio\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.stop = function (time) {\n\t        this._event.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.cancel = function (time) {\n\t        this._event.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Internal function called when the notes should be called\n\t\t *  @param  {Number}  time  The time the event occurs\n\t\t *  @private\n\t\t */\n\t    Tone.Loop.prototype._tick = function (time) {\n\t        this.callback(time);\n\t    };\n\t    /**\n\t\t *  The state of the Loop, either started or stopped.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {String}\n\t\t *  @name state\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'state', {\n\t        get: function () {\n\t            return this._event.state;\n\t        }\n\t    });\n\t    /**\n\t\t *  The progress of the loop as a value between 0-1. 0, when\n\t\t *  the loop is stopped or done iterating. \n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {NormalRange}\n\t\t *  @name progress\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'progress', {\n\t        get: function () {\n\t            return this._event.progress;\n\t        }\n\t    });\n\t    /**\n\t\t *  The time between successive callbacks. \n\t\t *  @example\n\t\t * loop.interval = \"8n\"; //loop every 8n\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Time}\n\t\t *  @name interval\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'interval', {\n\t        get: function () {\n\t            return this._event.loopEnd;\n\t        },\n\t        set: function (interval) {\n\t            this._event.loopEnd = interval;\n\t        }\n\t    });\n\t    /**\n\t\t *  The playback rate of the loop. The normal playback rate is 1 (no change). \n\t\t *  A `playbackRate` of 2 would be twice as fast. \n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Time}\n\t\t *  @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._event.playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._event.playbackRate = rate;\n\t        }\n\t    });\n\t    /**\n\t\t *  Random variation +/-0.01s to the scheduled time. \n\t\t *  Or give it a time value which it will randomize by.\n\t\t *  @type {Boolean|Time}\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._event.humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._event.humanize = variation;\n\t        }\n\t    });\n\t    /**\n\t\t *  The probably of the callback being invoked.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'probability', {\n\t        get: function () {\n\t            return this._event.probability;\n\t        },\n\t        set: function (prob) {\n\t            this._event.probability = prob;\n\t        }\n\t    });\n\t    /**\n\t\t *  Muting the Loop means that no callbacks are invoked.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Boolean}\n\t\t *  @name mute\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'mute', {\n\t        get: function () {\n\t            return this._event.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._event.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of iterations of the loop. The default\n\t\t *  value is Infinity (loop forever).\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Positive}\n\t\t *  @name iterations\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'iterations', {\n\t        get: function () {\n\t            if (this._event.loop === true) {\n\t                return Infinity;\n\t            } else {\n\t                return this._event.loop;\n\t            }\n\t        },\n\t        set: function (iters) {\n\t            if (iters === Infinity) {\n\t                this._event.loop = true;\n\t            } else {\n\t                this._event.loop = iters;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.dispose = function () {\n\t        this._event.dispose();\n\t        this._event = null;\n\t        this.callback = null;\n\t    };\n\t    return Tone.Loop;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Part is a collection Tone.Events which can be\n\t\t *         started/stopped and looped as a single unit.\n\t\t *\n\t\t *  @extends {Tone.Event}\n\t\t *  @param {Function} callback The callback to invoke on each event\n\t\t *  @param {Array} events the array of events\n\t\t *  @example\n\t\t * var part = new Tone.Part(function(time, note){\n\t\t * \t//the notes given as the second element in the array\n\t\t * \t//will be passed in as the second argument\n\t\t * \tsynth.triggerAttackRelease(note, \"8n\", time);\n\t\t * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n\t\t *  @example\n\t\t * //use an array of objects as long as the object has a \"time\" attribute\n\t\t * var part = new Tone.Part(function(time, value){\n\t\t * \t//the value is an object which contains both the note and the velocity\n\t\t * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n\t\t * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9}, \n\t\t * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n\t\t * ]).start(0);\n\t\t */\n\t    Tone.Part = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'callback',\n\t            'events'\n\t        ], Tone.Part);\n\t        Tone.Event.call(this, options);\n\t        /**\n\t\t\t *  An array of Objects. \n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = [];\n\t        //add the events\n\t        for (var i = 0; i < options.events.length; i++) {\n\t            if (Array.isArray(options.events[i])) {\n\t                this.add(options.events[i][0], options.events[i][1]);\n\t            } else {\n\t                this.add(options.events[i]);\n\t            }\n\t        }\n\t    };\n\t    Tone.extend(Tone.Part, Tone.Event);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Part.defaults = {\n\t        'callback': Tone.noOp,\n\t        'loop': false,\n\t        'loopEnd': '1m',\n\t        'loopStart': 0,\n\t        'playbackRate': 1,\n\t        'probability': 1,\n\t        'humanize': false,\n\t        'mute': false,\n\t        'events': []\n\t    };\n\t    /**\n\t\t *  Start the part at the given time. \n\t\t *  @param  {TransportTime}  time    When to start the part.\n\t\t *  @param  {Time=}  offset  The offset from the start of the part\n\t\t *                           to begin playing at.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.start = function (time, offset) {\n\t        var ticks = this.toTicks(time);\n\t        if (this._state.getValueAtTime(ticks) !== Tone.State.Started) {\n\t            if (this._loop) {\n\t                offset = Tone.defaultArg(offset, this._loopStart);\n\t            } else {\n\t                offset = Tone.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toTicks(offset);\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': ticks,\n\t                'offset': offset\n\t            });\n\t            this._forEach(function (event) {\n\t                this._startNote(event, ticks, offset);\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the event in the given event at the correct time given\n\t\t *  the ticks and offset and looping.\n\t\t *  @param  {Tone.Event}  event \n\t\t *  @param  {Ticks}  ticks\n\t\t *  @param  {Ticks}  offset\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._startNote = function (event, ticks, offset) {\n\t        ticks -= offset;\n\t        if (this._loop) {\n\t            if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t                if (event.startOffset < offset) {\n\t                    //start it on the next loop\n\t                    ticks += this._getLoopDuration();\n\t                }\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t                event.loop = false;\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            }\n\t        } else {\n\t            if (event.startOffset >= offset) {\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  The start from the scheduled start time\n\t\t *  @type {Ticks}\n\t\t *  @memberOf Tone.Part#\n\t\t *  @name startOffset\n\t\t *  @private\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'startOffset', {\n\t        get: function () {\n\t            return this._startOffset;\n\t        },\n\t        set: function (offset) {\n\t            this._startOffset = offset;\n\t            this._forEach(function (event) {\n\t                event.startOffset += this._startOffset;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  Stop the part at the given time.\n\t\t *  @param  {TimelinePosition}  time  When to stop the part.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.stop = function (time) {\n\t        var ticks = this.toTicks(time);\n\t        this._state.cancel(ticks);\n\t        this._state.setStateAtTime(Tone.State.Stopped, ticks);\n\t        this._forEach(function (event) {\n\t            event.stop(time);\n\t        });\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get/Set an Event's value at the given time. \n\t\t *  If a value is passed in and no event exists at\n\t\t *  the given time, one will be created with that value. \n\t\t *  If two events are at the same time, the first one will\n\t\t *  be returned.\n\t\t *  @example\n\t\t * part.at(\"1m\"); //returns the part at the first measure\n\t\t *\n\t\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2. \n\t\t * //if an event didn't exist at that time, it will be created.\n\t\t *  @param {TransportTime} time The time of the event to get or set.\n\t\t *  @param {*=} value If a value is passed in, the value of the\n\t\t *                    event at the given time will be set to it.\n\t\t *  @return {Tone.Event} the event at the time\n\t\t */\n\t    Tone.Part.prototype.at = function (time, value) {\n\t        time = Tone.TransportTime(time);\n\t        var tickTime = Tone.Time(1, 'i').toSeconds();\n\t        for (var i = 0; i < this._events.length; i++) {\n\t            var event = this._events[i];\n\t            if (Math.abs(time.toTicks() - event.startOffset) < tickTime) {\n\t                if (!Tone.isUndef(value)) {\n\t                    event.value = value;\n\t                }\n\t                return event;\n\t            }\n\t        }\n\t        //if there was no event at that time, create one\n\t        if (!Tone.isUndef(value)) {\n\t            this.add(time, value);\n\t            //return the new event\n\t            return this._events[this._events.length - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Add a an event to the part. \n\t\t *  @param {Time} time The time the note should start.\n\t\t *                            If an object is passed in, it should\n\t\t *                            have a 'time' attribute and the rest\n\t\t *                            of the object will be used as the 'value'.\n\t\t *  @param  {Tone.Event|*}  value \n\t\t *  @returns {Tone.Part} this\n\t\t *  @example\n\t\t * part.add(\"1m\", \"C#+11\");\n\t\t */\n\t    Tone.Part.prototype.add = function (time, value) {\n\t        //extract the parameters\n\t        if (time.hasOwnProperty('time')) {\n\t            value = time;\n\t            time = value.time;\n\t        }\n\t        time = this.toTicks(time);\n\t        var event;\n\t        if (value instanceof Tone.Event) {\n\t            event = value;\n\t            event.callback = this._tick.bind(this);\n\t        } else {\n\t            event = new Tone.Event({\n\t                'callback': this._tick.bind(this),\n\t                'value': value\n\t            });\n\t        }\n\t        //the start offset\n\t        event.startOffset = time;\n\t        //initialize the values\n\t        event.set({\n\t            'loopEnd': this.loopEnd,\n\t            'loopStart': this.loopStart,\n\t            'loop': this.loop,\n\t            'humanize': this.humanize,\n\t            'playbackRate': this.playbackRate,\n\t            'probability': this.probability\n\t        });\n\t        this._events.push(event);\n\t        //start the note if it should be played right now\n\t        this._restartEvent(event);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Restart the given event\n\t\t *  @param  {Tone.Event}  event \n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._restartEvent = function (event) {\n\t        this._state.forEach(function (stateEvent) {\n\t            if (stateEvent.state === Tone.State.Started) {\n\t                this._startNote(event, stateEvent.time, stateEvent.offset);\n\t            } else {\n\t                //stop the note\n\t                event.stop(Tone.TransportTime(stateEvent.time, 'i'));\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Remove an event from the part. Will recursively iterate\n\t\t *  into nested parts to find the event.\n\t\t *  @param {Time} time The time of the event\n\t\t *  @param {*} value Optionally select only a specific event value\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.remove = function (time, value) {\n\t        //extract the parameters\n\t        if (time.hasOwnProperty('time')) {\n\t            value = time;\n\t            time = value.time;\n\t        }\n\t        time = this.toTicks(time);\n\t        for (var i = this._events.length - 1; i >= 0; i--) {\n\t            var event = this._events[i];\n\t            if (event instanceof Tone.Part) {\n\t                event.remove(time, value);\n\t            } else {\n\t                if (event.startOffset === time) {\n\t                    if (Tone.isUndef(value) || !Tone.isUndef(value) && event.value === value) {\n\t                        this._events.splice(i, 1);\n\t                        event.dispose();\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove all of the notes from the group. \n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.removeAll = function () {\n\t        this._forEach(function (event) {\n\t            event.dispose();\n\t        });\n\t        this._events = [];\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t\t *  @param {TimelinePosition} after The time after which to cancel the scheduled events.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.cancel = function (after) {\n\t        this._forEach(function (event) {\n\t            event.cancel(after);\n\t        });\n\t        this._state.cancel(this.toTicks(after));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over all of the events\n\t\t *  @param {Function} callback\n\t\t *  @param {Object} ctx The context\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._forEach = function (callback, ctx) {\n\t        if (this._events) {\n\t            ctx = Tone.defaultArg(ctx, this);\n\t            for (var i = this._events.length - 1; i >= 0; i--) {\n\t                var e = this._events[i];\n\t                if (e instanceof Tone.Part) {\n\t                    e._forEach(callback, ctx);\n\t                } else {\n\t                    callback.call(ctx, e);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the attribute of all of the events\n\t\t *  @param  {String}  attr  the attribute to set\n\t\t *  @param  {*}  value      The value to set it to\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._setAll = function (attr, value) {\n\t        this._forEach(function (event) {\n\t            event[attr] = value;\n\t        });\n\t    };\n\t    /**\n\t\t *  Internal tick method\n\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._tick = function (time, value) {\n\t        if (!this.mute) {\n\t            this.callback(time, value);\n\t        }\n\t    };\n\t    /**\n\t\t *  Determine if the event should be currently looping\n\t\t *  given the loop boundries of this Part.\n\t\t *  @param  {Tone.Event}  event  The event to test\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._testLoopBoundries = function (event) {\n\t        if (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd) {\n\t            event.cancel(0);\n\t        } else {\n\t            //reschedule it if it's stopped\n\t            if (event.state === Tone.State.Stopped) {\n\t                this._restartEvent(event);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  The probability of the notes being triggered.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'probability', {\n\t        get: function () {\n\t            return this._probability;\n\t        },\n\t        set: function (prob) {\n\t            this._probability = prob;\n\t            this._setAll('probability', prob);\n\t        }\n\t    });\n\t    /**\n\t\t *  If set to true, will apply small random variation\n\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t *  by that amount.\n\t\t *  @example\n\t\t * event.humanize = true;\n\t\t *  @type {Boolean|Time}\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._humanize = variation;\n\t            this._setAll('humanize', variation);\n\t        }\n\t    });\n\t    /**\n\t\t *  If the part should loop or not\n\t\t *  between Tone.Part.loopStart and \n\t\t *  Tone.Part.loopEnd. An integer\n\t\t *  value corresponds to the number of\n\t\t *  loops the Part does after it starts.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Boolean|Positive}\n\t\t *  @name loop\n\t\t *  @example\n\t\t * //loop the part 8 times\n\t\t * part.loop = 8;\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            this._forEach(function (event) {\n\t                event._loopStart = this._loopStart;\n\t                event._loopEnd = this._loopEnd;\n\t                event.loop = loop;\n\t                this._testLoopBoundries(event);\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopEnd point determines when it will \n\t\t *  loop if Tone.Part.loop is true.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toNotation();\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = this.toTicks(loopEnd);\n\t            if (this._loop) {\n\t                this._forEach(function (event) {\n\t                    event.loopEnd = loopEnd;\n\t                    this._testLoopBoundries(event);\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopStart point determines when it will \n\t\t *  loop if Tone.Part.loop is true.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toNotation();\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = this.toTicks(loopStart);\n\t            if (this._loop) {\n\t                this._forEach(function (event) {\n\t                    event.loopStart = this.loopStart;\n\t                    this._testLoopBoundries(event);\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe playback rate of the part\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Positive}\n\t\t *  @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this._setAll('playbackRate', rate);\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe number of scheduled notes in the part. \n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Positive}\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'length', {\n\t        get: function () {\n\t            return this._events.length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.dispose = function () {\n\t        this.removeAll();\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this.callback = null;\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Part;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Pattern arpeggiates between the given notes\n\t\t *         in a number of patterns. See Tone.CtrlPattern for\n\t\t *         a full list of patterns.\n\t\t *  @example\n\t\t * var pattern = new Tone.Pattern(function(time, note){\n\t\t *   //the order of the notes passed in depends on the pattern\n\t\t * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n\t\t *  @extends {Tone.Loop}\n\t\t *  @param {Function} callback The callback to invoke with the\n\t\t *                             event.\n\t\t *  @param {Array} values The values to arpeggiate over.\n\t\t */\n\t    Tone.Pattern = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'callback',\n\t            'values',\n\t            'pattern'\n\t        ], Tone.Pattern);\n\t        Tone.Loop.call(this, options);\n\t        /**\n\t\t\t *  The pattern manager\n\t\t\t *  @type {Tone.CtrlPattern}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pattern = new Tone.CtrlPattern({\n\t            'values': options.values,\n\t            'type': options.pattern,\n\t            'index': options.index\n\t        });\n\t    };\n\t    Tone.extend(Tone.Pattern, Tone.Loop);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Pattern.defaults = {\n\t        'pattern': Tone.CtrlPattern.Type.Up,\n\t        'callback': Tone.noOp,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  Internal function called when the notes should be called\n\t\t *  @param  {Number}  time  The time the event occurs\n\t\t *  @private\n\t\t */\n\t    Tone.Pattern.prototype._tick = function (time) {\n\t        this.callback(time, this._pattern.value);\n\t        this._pattern.next();\n\t    };\n\t    /**\n\t\t *  The current index in the values array.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {Positive}\n\t\t *  @name index\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'index', {\n\t        get: function () {\n\t            return this._pattern.index;\n\t        },\n\t        set: function (i) {\n\t            this._pattern.index = i;\n\t        }\n\t    });\n\t    /**\n\t\t *  The array of events.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {Array}\n\t\t *  @name values\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'values', {\n\t        get: function () {\n\t            return this._pattern.values;\n\t        },\n\t        set: function (vals) {\n\t            this._pattern.values = vals;\n\t        }\n\t    });\n\t    /**\n\t\t *  The current value of the pattern.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'value', {\n\t        get: function () {\n\t            return this._pattern.value;\n\t        }\n\t    });\n\t    /**\n\t\t *  The pattern type. See Tone.CtrlPattern for the full list of patterns.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {String}\n\t\t *  @name pattern\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'pattern', {\n\t        get: function () {\n\t            return this._pattern.type;\n\t        },\n\t        set: function (pattern) {\n\t            this._pattern.type = pattern;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Pattern}  this\n\t\t */\n\t    Tone.Pattern.prototype.dispose = function () {\n\t        Tone.Loop.prototype.dispose.call(this);\n\t        this._pattern.dispose();\n\t        this._pattern = null;\n\t    };\n\t    return Tone.Pattern;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A sequence is an alternate notation of a part. Instead\n\t\t *         of passing in an array of [time, event] pairs, pass\n\t\t *         in an array of events which will be spaced at the\n\t\t *         given subdivision. Sub-arrays will subdivide that beat\n\t\t *         by the number of items are in the array. \n\t\t *         Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n\t\t *  @param  {Function}  callback  The callback to invoke with every note\n\t\t *  @param  {Array}    events  The sequence\n\t\t *  @param  {Time} subdivision  The subdivision between which events are placed. \n\t\t *  @extends {Tone.Part}\n\t\t *  @example\n\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t * \tconsole.log(note);\n\t\t * //straight quater notes\n\t\t * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n\t\t *  @example\n\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t * \tconsole.log(note);\n\t\t * //subdivisions are given as subarrays\n\t\t * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n\t\t */\n\t    Tone.Sequence = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'callback',\n\t            'events',\n\t            'subdivision'\n\t        ], Tone.Sequence);\n\t        //remove the events\n\t        var events = options.events;\n\t        delete options.events;\n\t        Tone.Part.call(this, options);\n\t        /**\n\t\t\t *  The subdivison of each note\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subdivision = this.toTicks(options.subdivision);\n\t        //if no time was passed in, the loop end is the end of the cycle\n\t        if (Tone.isUndef(options.loopEnd) && !Tone.isUndef(events)) {\n\t            this._loopEnd = events.length * this._subdivision;\n\t        }\n\t        //defaults to looping\n\t        this._loop = true;\n\t        //add all of the events\n\t        if (!Tone.isUndef(events)) {\n\t            for (var i = 0; i < events.length; i++) {\n\t                this.add(i, events[i]);\n\t            }\n\t        }\n\t    };\n\t    Tone.extend(Tone.Sequence, Tone.Part);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Sequence.defaults = { 'subdivision': '4n' };\n\t    /**\n\t\t *  The subdivision of the sequence. This can only be \n\t\t *  set in the constructor. The subdivision is the \n\t\t *  interval between successive steps. \n\t\t *  @type {Time}\n\t\t *  @memberOf Tone.Sequence#\n\t\t *  @name subdivision\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Sequence.prototype, 'subdivision', {\n\t        get: function () {\n\t            return Tone.Time(this._subdivision, 'i').toNotation();\n\t        }\n\t    });\n\t    /**\n\t\t *  Get/Set an index of the sequence. If the index contains a subarray, \n\t\t *  a Tone.Sequence representing that sub-array will be returned. \n\t\t *  @example\n\t\t * var sequence = new Tone.Sequence(playNote, [\"E4\", \"C4\", \"F#4\", [\"A4\", \"Bb3\"]])\n\t\t * sequence.at(0)// => returns \"E4\"\n\t\t * //set a value\n\t\t * sequence.at(0, \"G3\");\n\t\t * //get a nested sequence\n\t\t * sequence.at(3).at(1)// => returns \"Bb3\"\n\t\t * @param {Positive} index The index to get or set\n\t\t * @param {*} value Optionally pass in the value to set at the given index.\n\t\t */\n\t    Tone.Sequence.prototype.at = function (index, value) {\n\t        //if the value is an array, \n\t        if (Tone.isArray(value)) {\n\t            //remove the current event at that index\n\t            this.remove(index);\n\t        }\n\t        //call the parent's method\n\t        return Tone.Part.prototype.at.call(this, this._indexTime(index), value);\n\t    };\n\t    /**\n\t\t *  Add an event at an index, if there's already something\n\t\t *  at that index, overwrite it. If `value` is an array, \n\t\t *  it will be parsed as a subsequence.\n\t\t *  @param {Number} index The index to add the event to\n\t\t *  @param {*} value The value to add at that index\n\t\t *  @returns {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.add = function (index, value) {\n\t        if (value === null) {\n\t            return this;\n\t        }\n\t        if (Tone.isArray(value)) {\n\t            //make a subsequence and add that to the sequence\n\t            var subSubdivision = Math.round(this._subdivision / value.length);\n\t            value = new Tone.Sequence(this._tick.bind(this), value, Tone.Time(subSubdivision, 'i'));\n\t        }\n\t        Tone.Part.prototype.add.call(this, this._indexTime(index), value);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove a value from the sequence by index\n\t\t *  @param {Number} index The index of the event to remove\n\t\t *  @returns {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.remove = function (index, value) {\n\t        Tone.Part.prototype.remove.call(this, this._indexTime(index), value);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the time of the index given the Sequence's subdivision\n\t\t *  @param  {Number}  index \n\t\t *  @return  {Time}  The time of that index\n\t\t *  @private\n\t\t */\n\t    Tone.Sequence.prototype._indexTime = function (index) {\n\t        if (index instanceof Tone.TransportTime) {\n\t            return index;\n\t        } else {\n\t            return Tone.TransportTime(index * this._subdivision + this.startOffset, 'i');\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.dispose = function () {\n\t        Tone.Part.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.Sequence;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PulseOscillator is a pulse oscillator with control over pulse width,\n\t\t *         also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is \n\t\t *         a square and only odd-numbered harmonics are present. At all other widths \n\t\t *         even-numbered harmonics are present. Read more \n\t\t *         [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {Frequency} [frequency] The frequency of the oscillator\n\t\t *  @param {NormalRange} [width] The width of the pulse\n\t\t *  @example\n\t\t * var pulse = new Tone.PulseOscillator(\"E5\", 0.4).toMaster().start();\n\t\t */\n\t    Tone.PulseOscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'width'\n\t        ], Tone.Oscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The width of the pulse. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  gate the width amount\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._widthGate = new Tone.Gain();\n\t        /**\n\t\t\t *  the sawtooth oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sawtooth = new Tone.Oscillator({\n\t            frequency: options.frequency,\n\t            detune: options.detune,\n\t            type: 'sawtooth',\n\t            phase: options.phase\n\t        });\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._sawtooth.frequency;\n\t        /**\n\t\t\t *  The detune in cents. \n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._sawtooth.detune;\n\t        /**\n\t\t\t *  Threshold the signal to turn it into a square\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._thresh = new Tone.WaveShaper(function (val) {\n\t            if (val < 0) {\n\t                return -1;\n\t            } else {\n\t                return 1;\n\t            }\n\t        });\n\t        //connections\n\t        this._sawtooth.chain(this._thresh, this.output);\n\t        this.width.chain(this._widthGate, this._thresh);\n\t        this._readOnly([\n\t            'width',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PulseOscillator, Tone.Source);\n\t    /**\n\t\t *  The default parameters.\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PulseOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'width': 0.2\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} time \n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._sawtooth.start(time);\n\t        this._widthGate.gain.setValueAtTime(1, time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time \n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._sawtooth.stop(time);\n\t        //the width is still connected to the output. \n\t        //that needs to be stopped also\n\t        this._widthGate.gain.setValueAtTime(0, time);\n\t    };\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._sawtooth.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._sawtooth.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the oscillator. Always returns \"pulse\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return 'pulse';\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return [];\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up method.\n\t\t *  @return {Tone.PulseOscillator} this\n\t\t */\n\t    Tone.PulseOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._sawtooth.dispose();\n\t        this._sawtooth = null;\n\t        this._writable([\n\t            'width',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.width.dispose();\n\t        this.width = null;\n\t        this._widthGate.dispose();\n\t        this._widthGate = null;\n\t        this._thresh.dispose();\n\t        this._thresh = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.PulseOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PWMOscillator modulates the width of a Tone.PulseOscillator \n\t\t *         at the modulationFrequency. This has the effect of continuously\n\t\t *         changing the timbre of the oscillator by altering the harmonics \n\t\t *         generated.\n\t\t *\n\t\t *  @extends {Tone.Source}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse. \n\t\t *  @example\n\t\t *  var pwm = new Tone.PWMOscillator(\"Ab3\", 0.3).toMaster().start();\n\t\t */\n\t    Tone.PWMOscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'modulationFrequency'\n\t        ], Tone.PWMOscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  the pulse oscillator\n\t\t\t *  @type {Tone.PulseOscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pulse = new Tone.PulseOscillator(options.modulationFrequency);\n\t        //change the pulse oscillator type\n\t        this._pulse._sawtooth.type = 'sine';\n\t        /**\n\t\t\t *  the modulator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator({\n\t            'frequency': options.frequency,\n\t            'detune': options.detune,\n\t            'phase': options.phase\n\t        });\n\t        /**\n\t\t\t *  Scale the oscillator so it doesn't go silent \n\t\t\t *  at the extreme values.\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = new Tone.Multiply(2);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._modulator.frequency;\n\t        /**\n\t\t\t *  The detune of the oscillator.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._modulator.detune;\n\t        /**\n\t\t\t *  The modulation rate of the oscillator. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.modulationFrequency = this._pulse.frequency;\n\t        //connections\n\t        this._modulator.chain(this._scale, this._pulse.width);\n\t        this._pulse.connect(this.output);\n\t        this._readOnly([\n\t            'modulationFrequency',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PWMOscillator, Tone.Source);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.PWMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationFrequency': 0.4\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._pulse.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._pulse.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the oscillator. Always returns \"pwm\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return 'pwm';\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return [];\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._modulator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.PWMOscillator} this\n\t\t */\n\t    Tone.PWMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._pulse.dispose();\n\t        this._pulse = null;\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._writable([\n\t            'modulationFrequency',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.modulationFrequency = null;\n\t        return this;\n\t    };\n\t    return Tone.PWMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FMOscillator \n\t\t *\n\t\t *  @extends {Tone.Source}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.FMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.FMOscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'modulationType'\n\t        ], Tone.FMOscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The carrier oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._carrier.detune;\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t\t *  modulating signal (ma) -- as in ma/mf. \n\t\t\t *\t@type {Positive}\n\t\t\t *\t@signal\n\t\t\t */\n\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t        this.modulationIndex.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  The modulating oscillator\n\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t        /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //connections\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t        this._modulator.connect(this._modulationNode.gain);\n\t        this._modulationNode.connect(this._carrier.frequency);\n\t        this._carrier.connect(this.output);\n\t        this.detune.connect(this._modulator.detune);\n\t        this.phase = options.phase;\n\t        this._readOnly([\n\t            'modulationIndex',\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FMOscillator, Tone.Source);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationIndex': 2,\n\t        'modulationType': 'square',\n\t        'harmonicity': 1\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._carrier.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._carrier.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._carrier.type;\n\t        },\n\t        set: function (type) {\n\t            this._carrier.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {String}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            return this._modulator.type;\n\t        },\n\t        set: function (type) {\n\t            this._modulator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._carrier.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._carrier.phase = phase;\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._carrier.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._carrier.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.FMOscillator} this\n\t\t */\n\t    Tone.FMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'modulationIndex',\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.modulationIndex.dispose();\n\t        this.modulationIndex = null;\n\t        return this;\n\t    };\n\t    return Tone.FMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AMOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.AMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.AMOscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'modulationType'\n\t        ], Tone.AMOscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The carrier oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._carrier.frequency;\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._carrier.detune;\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The modulating oscillator\n\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t        /**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationScale = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //connections\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.detune.connect(this._modulator.detune);\n\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t        this._carrier.chain(this._modulationNode, this.output);\n\t        this.phase = options.phase;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.AMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationType': 'square',\n\t        'harmonicity': 1\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._carrier.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._carrier.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._carrier.type;\n\t        },\n\t        set: function (type) {\n\t            this._carrier.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {string}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            return this._modulator.type;\n\t        },\n\t        set: function (type) {\n\t            this._modulator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._carrier.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._carrier.phase = phase;\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._carrier.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._carrier.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.AMOscillator} this\n\t\t */\n\t    Tone.AMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this._modulationScale.dispose();\n\t        this._modulationScale = null;\n\t        return this;\n\t    };\n\t    return Tone.AMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FatOscillator \n\t\t *\n\t\t *  @extends {Tone.Source}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.FatOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.FatOscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'spread'\n\t        ], Tone.FatOscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  The array of oscillators\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillators = [];\n\t        /**\n\t\t\t *  The total spread of the oscillators\n\t\t\t *  @type  {Cents}\n\t\t\t *  @private\n\t\t\t */\n\t        this._spread = options.spread;\n\t        /**\n\t\t\t *  The type of the oscillator\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The phase of the oscillators\n\t\t\t *  @type {Degrees}\n\t\t\t *  @private\n\t\t\t */\n\t        this._phase = options.phase;\n\t        /**\n\t\t\t *  The partials array\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._partials = Tone.defaultArg(options.partials, []);\n\t        //set the count initially\n\t        this.count = options.count;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FatOscillator, Tone.Source);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FatOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'spread': 20,\n\t        'count': 3,\n\t        'type': 'sawtooth'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.start(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.stop(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  Iterate over all of the oscillators\n\t\t *  @param  {Function}  iterator  The iterator function\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._forEach = function (iterator) {\n\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t            iterator.call(this, this._oscillators[i], i);\n\t        }\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._type = type;\n\t            this._forEach(function (osc) {\n\t                osc.type = type;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t * for a total detune spread of 40 cents.\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Cents}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'spread', {\n\t        get: function () {\n\t            return this._spread;\n\t        },\n\t        set: function (spread) {\n\t            this._spread = spread;\n\t            if (this._oscillators.length > 1) {\n\t                var start = -spread / 2;\n\t                var step = spread / (this._oscillators.length - 1);\n\t                this._forEach(function (osc, i) {\n\t                    osc.detune.value = start + step * i;\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of detuned oscillators\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Number}\n\t\t * @name count\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'count', {\n\t        get: function () {\n\t            return this._oscillators.length;\n\t        },\n\t        set: function (count) {\n\t            count = Math.max(count, 1);\n\t            if (this._oscillators.length !== count) {\n\t                // var partials = this.partials;\n\t                // var type = this.type;\n\t                //dispose the previous oscillators\n\t                this._forEach(function (osc) {\n\t                    osc.dispose();\n\t                });\n\t                this._oscillators = [];\n\t                for (var i = 0; i < count; i++) {\n\t                    var osc = new Tone.Oscillator();\n\t                    if (this.type === Tone.Oscillator.Type.Custom) {\n\t                        osc.partials = this._partials;\n\t                    } else {\n\t                        osc.type = this._type;\n\t                    }\n\t                    osc.phase = this._phase;\n\t                    osc.volume.value = -6 - count;\n\t                    this.frequency.connect(osc.frequency);\n\t                    this.detune.connect(osc.detune);\n\t                    osc.connect(this.output);\n\t                    this._oscillators[i] = osc;\n\t                }\n\t                //set the spread\n\t                this.spread = this._spread;\n\t                if (this.state === Tone.State.Started) {\n\t                    this._forEach(function (osc) {\n\t                        osc.start();\n\t                    });\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._phase;\n\t        },\n\t        set: function (phase) {\n\t            this._phase = phase;\n\t            this._forEach(function (osc) {\n\t                osc.phase = phase;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._partials;\n\t        },\n\t        set: function (partials) {\n\t            this._partials = partials;\n\t            this._type = Tone.Oscillator.Type.Custom;\n\t            this._forEach(function (osc) {\n\t                osc.partials = partials;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.FatOscillator} this\n\t\t */\n\t    Tone.FatOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this._forEach(function (osc) {\n\t            osc.dispose();\n\t        });\n\t        this._oscillators = null;\n\t        this._partials = null;\n\t        return this;\n\t    };\n\t    return Tone.FatOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n\t\t *         Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n\t\t *         into one class. The oscillator class can be changed by setting the `type`. \n\t\t *         `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n\t\t *         any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n\t\t *         will use the FMOscillator, AMOscillator or FatOscillator respectively. \n\t\t *         For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n\t\t *         to a FatOscillator of type \"sawtooth\". \n\t\t *\n\t\t *  @extends {Tone.Source}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The initial frequency of the oscillator.\n\t\t *  @param {String} type The type of the oscillator.\n\t\t *  @example\n\t\t *  var omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\");\n\t\t */\n\t    Tone.OmniOscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.OmniOscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  the type of the oscillator source\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sourceType = undefined;\n\t        /**\n\t\t\t *  the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = null;\n\t        //set the oscillator\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        //set the options\n\t        this.set(options);\n\t    };\n\t    Tone.extend(Tone.OmniOscillator, Tone.Source);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.OmniOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'type': 'sine',\n\t        'phase': 0\n\t    };\n\t    /**\n\t\t *  @enum {String}\n\t\t *  @private\n\t\t */\n\t    var OmniOscType = {\n\t        Pulse: 'PulseOscillator',\n\t        PWM: 'PWMOscillator',\n\t        Osc: 'Oscillator',\n\t        FM: 'FMOscillator',\n\t        AM: 'AMOscillator',\n\t        Fat: 'FatOscillator'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._start = function (time) {\n\t        this._oscillator.start(time);\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._stop = function (time) {\n\t        this._oscillator.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error \n\t\t * when it's not.\n\t\t * \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {String}\n\t\t * @name type\n\t\t * @example\n\t\t * omniOsc.type = \"pwm\";\n\t\t * //modulationFrequency is parameter which is available\n\t\t * //only when the type is \"pwm\". \n\t\t * omniOsc.modulationFrequency.value = 0.5;\n\t\t * @example\n\t\t * //an square wave frequency modulated by a sawtooth\n\t\t * omniOsc.type = \"fmsquare\";\n\t\t * omniOsc.modulationType = \"sawtooth\";\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'type', {\n\t        get: function () {\n\t            var prefix = '';\n\t            if (this._sourceType === OmniOscType.FM) {\n\t                prefix = 'fm';\n\t            } else if (this._sourceType === OmniOscType.AM) {\n\t                prefix = 'am';\n\t            } else if (this._sourceType === OmniOscType.Fat) {\n\t                prefix = 'fat';\n\t            }\n\t            return prefix + this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            if (type.substr(0, 2) === 'fm') {\n\t                this._createNewOscillator(OmniOscType.FM);\n\t                this._oscillator.type = type.substr(2);\n\t            } else if (type.substr(0, 2) === 'am') {\n\t                this._createNewOscillator(OmniOscType.AM);\n\t                this._oscillator.type = type.substr(2);\n\t            } else if (type.substr(0, 3) === 'fat') {\n\t                this._createNewOscillator(OmniOscType.Fat);\n\t                this._oscillator.type = type.substr(3);\n\t            } else if (type === 'pwm') {\n\t                this._createNewOscillator(OmniOscType.PWM);\n\t            } else if (type === 'pulse') {\n\t                this._createNewOscillator(OmniOscType.Pulse);\n\t            } else {\n\t                this._createNewOscillator(OmniOscType.Osc);\n\t                this._oscillator.type = type;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._oscillator.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._oscillator.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Set a member/attribute of the oscillator. \n\t\t *  @param {Object|String} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone.OmniOscillator} this\n\t\t */\n\t    Tone.OmniOscillator.prototype.set = function (params, value) {\n\t        //make sure the type is set first\n\t        if (params === 'type') {\n\t            this.type = value;\n\t        } else if (Tone.isObject(params) && params.hasOwnProperty('type')) {\n\t            this.type = params.type;\n\t        }\n\t        //then set the rest\n\t        Tone.prototype.set.apply(this, arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the oscillator to the frequency and detune signals\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._createNewOscillator = function (oscType) {\n\t        if (oscType !== this._sourceType) {\n\t            this._sourceType = oscType;\n\t            var OscillatorConstructor = Tone[oscType];\n\t            //short delay to avoid clicks on the change\n\t            var now = this.now();\n\t            if (this._oscillator !== null) {\n\t                var oldOsc = this._oscillator;\n\t                oldOsc.stop(now);\n\t                //dispose the old one\n\t                this.context.setTimeout(function () {\n\t                    oldOsc.dispose();\n\t                    oldOsc = null;\n\t                }, this.blockTime);\n\t            }\n\t            this._oscillator = new OscillatorConstructor();\n\t            this.frequency.connect(this._oscillator.frequency);\n\t            this.detune.connect(this._oscillator.detune);\n\t            this._oscillator.connect(this.output);\n\t            if (this.state === Tone.State.Started) {\n\t                this._oscillator.start(now);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t * The phase of the oscillator in degrees. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._oscillator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._oscillator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The width of the oscillator (only if the oscillator is set to \"pulse\")\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {NormalRange}\n\t\t * @signal\n\t\t * @name width\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pulse\");\n\t\t * //can access the width attribute only if type === \"pulse\"\n\t\t * omniOsc.width.value = 0.2; \n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'width', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Pulse) {\n\t                return this._oscillator.width;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of detuned oscillators\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Number}\n\t\t * @name count\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'count', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                return this._oscillator.count;\n\t            }\n\t        },\n\t        set: function (count) {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                this._oscillator.count = count;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t\t * for more info.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Cents}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'spread', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                return this._oscillator.spread;\n\t            }\n\t        },\n\t        set: function (spread) {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                this._oscillator.spread = spread;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator. Only if the oscillator\n\t\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t\t * for more info. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {String}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                return this._oscillator.modulationType;\n\t            }\n\t        },\n\t        set: function (mType) {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                this._oscillator.modulationType = mType;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t * modulating signal (ma) -- as in ma/mf. \n\t\t * See Tone.FMOscillator for more info. \n\t\t * @type {Positive}\n\t\t * @signal\n\t\t * @name modulationIndex\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationIndex', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM) {\n\t                return this._oscillator.modulationIndex;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t\t *  for more info. \n\t\t *  @memberOf Tone.OmniOscillator#\n\t\t *  @signal\n\t\t *  @type {Positive}\n\t\t *  @name harmonicity\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'harmonicity', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                return this._oscillator.harmonicity;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The modulationFrequency Signal of the oscillator \n\t\t * (only if the oscillator type is set to pwm). See \n\t\t * Tone.PWMOscillator for more info. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Frequency}\n\t\t * @signal\n\t\t * @name modulationFrequency\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pwm\");\n\t\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t\t * omniOsc.modulationFrequency.value = 0.2; \n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationFrequency', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.PWM) {\n\t                return this._oscillator.modulationFrequency;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.OmniOscillator} this\n\t\t */\n\t    Tone.OmniOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._oscillator.dispose();\n\t        this._oscillator = null;\n\t        this._sourceType = null;\n\t        return this;\n\t    };\n\t    return Tone.OmniOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base-class for all instruments\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t */\n\t    Tone.Instrument = function (options) {\n\t        //get the defaults\n\t        options = Tone.defaultArg(options, Tone.Instrument.defaults);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The output and volume triming node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t    };\n\t    Tone.extend(Tone.Instrument, Tone.AudioNode);\n\t    /**\n\t\t *  the default attributes\n\t\t *  @type {object}\n\t\t */\n\t    Tone.Instrument.defaults = {\n\t        /** the volume of the output in decibels */\n\t        'volume': 0\n\t    };\n\t    /**\n\t\t *  @abstract\n\t\t *  @param {string|number} note the note to trigger\n\t\t *  @param {Time} [time=now] the time to trigger the ntoe\n\t\t *  @param {number} [velocity=1] the velocity to trigger the note\n\t\t */\n\t    Tone.Instrument.prototype.triggerAttack = Tone.noOp;\n\t    /**\n\t\t *  @abstract\n\t\t *  @param {Time} [time=now] when to trigger the release\n\t\t */\n\t    Tone.Instrument.prototype.triggerRelease = Tone.noOp;\n\t    /**\n\t\t *  Trigger the attack and then the release after the duration.\n\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t *  @param  {Time} duration How long the note should be held for before\n\t\t *                          triggering the release. This value must be greater than 0.\n\t\t *  @param {Time} [time=now]  When the note should be triggered.\n\t\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t\t *  @returns {Tone.Instrument} this\n\t\t *  @example\n\t\t * //trigger \"C4\" for the duration of an 8th note\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.Instrument.prototype.triggerAttackRelease = function (note, duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(note, time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Instrument} this\n\t\t */\n\t    Tone.Instrument.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this._writable(['volume']);\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.Instrument;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  This is an abstract base class for other monophonic instruments to \n\t\t *          extend. IMPORTANT: It does not make any sound on its own and\n\t\t *          shouldn't be directly instantiated.\n\t\t *\n\t\t *  @constructor\n\t\t *  @abstract\n\t\t *  @extends {Tone.Instrument}\n\t\t */\n\t    Tone.Monophonic = function (options) {\n\t        //get the defaults\n\t        options = Tone.defaultArg(options, Tone.Monophonic.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The glide time between notes. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.portamento = options.portamento;\n\t    };\n\t    Tone.extend(Tone.Monophonic, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Monophonic.defaults = { 'portamento': 0 };\n\t    /**\n\t\t *  Trigger the attack of the note optionally with a given velocity. \n\t\t *  \n\t\t *  \n\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t *  @param  {Time} [time=now]     When the note should start.\n\t\t *  @param  {number} [velocity=1] velocity The velocity scaler \n\t\t *                                determines how \"loud\" the note \n\t\t *                                will be triggered.\n\t\t *  @returns {Tone.Monophonic} this\n\t\t *  @example\n\t\t * synth.triggerAttack(\"C4\");\n\t\t *  @example\n\t\t * //trigger the note a half second from now at half velocity\n\t\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t\t */\n\t    Tone.Monophonic.prototype.triggerAttack = function (note, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this._triggerEnvelopeAttack(time, velocity);\n\t        this.setNote(note, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of the envelope\n\t\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t\t *  @returns {Tone.Monophonic} this\n\t\t *  @example\n\t\t * synth.triggerRelease();\n\t\t */\n\t    Tone.Monophonic.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._triggerEnvelopeRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @private\n\t\t */\n\t    Tone.Monophonic.prototype._triggerEnvelopeAttack = function () {\n\t    };\n\t    /**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @private\n\t\t */\n\t    Tone.Monophonic.prototype._triggerEnvelopeRelease = function () {\n\t    };\n\t    /**\n\t\t *  Set the note at the given time. If no time is given, the note\n\t\t *  will set immediately. \n\t\t *  @param {Frequency} note The note to change to.\n\t\t *  @param  {Time} [time=now] The time when the note should be set. \n\t\t *  @returns {Tone.Monophonic} this\n\t\t * @example\n\t\t * //change to F#6 in one quarter note from now.\n\t\t * synth.setNote(\"F#6\", \"+4n\");\n\t\t * @example\n\t\t * //change to Bb4 right now\n\t\t * synth.setNote(\"Bb4\");\n\t\t */\n\t    Tone.Monophonic.prototype.setNote = function (note, time) {\n\t        time = this.toSeconds(time);\n\t        if (this.portamento > 0) {\n\t            var currentNote = this.frequency.value;\n\t            this.frequency.setValueAtTime(currentNote, time);\n\t            var portTime = this.toSeconds(this.portamento);\n\t            this.frequency.exponentialRampToValueAtTime(note, time + portTime);\n\t        } else {\n\t            this.frequency.setValueAtTime(note, time);\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Monophonic;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Synth is composed simply of a Tone.OmniOscillator\n\t\t *          routed through a Tone.AmplitudeEnvelope. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.Synth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.Synth = function (options) {\n\t        //get the defaults\n\t        options = Tone.defaultArg(options, Tone.Synth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this.oscillator.frequency;\n\t        /**\n\t\t\t *  The detune control.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this.oscillator.detune;\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the oscillators to the output\n\t        this.oscillator.chain(this.envelope, this.output);\n\t        //start the oscillators\n\t        this.oscillator.start();\n\t        this._readOnly([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Synth, Tone.Monophonic);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Synth.defaults = {\n\t        'oscillator': { 'type': 'triangle' },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0.3,\n\t            'release': 1\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.Synth} this\n\t\t *  @private\n\t\t */\n\t    Tone.Synth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.Synth} this\n\t\t *  @private\n\t\t */\n\t    Tone.Synth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Synth} this\n\t\t */\n\t    Tone.Synth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.Synth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  AMSynth uses the output of one Tone.Synth to modulate the\n\t\t *          amplitude of another Tone.Synth. The harmonicity (the ratio between\n\t\t *          the two signals) affects the timbre of the output signal greatly.\n\t\t *          Read more about Amplitude Modulation Synthesis on\n\t\t *          [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth\n\t\t *                            see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.AMSynth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"4n\");\n\t\t */\n\t    Tone.AMSynth = function (options) {\n\t        options = Tone.defaultArg(options, Tone.AMSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The carrier voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Synth();\n\t        this._carrier.volume.value = -10;\n\t        /**\n\t\t\t *  The carrier's oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.oscillator = this._carrier.oscillator;\n\t        /**\n\t\t\t *  The carrier's envelope\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t        /**\n\t\t\t *  The modulator voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Synth();\n\t        this._modulator.volume.value = -10;\n\t        /**\n\t\t\t *  The modulator's oscillator which is applied\n\t\t\t *  to the amplitude of the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t        /**\n\t\t\t *  The modulator's envelope\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t        /**\n\t\t\t *  The frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationScale = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain();\n\t        //control the two voices frequency\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t        this._carrier.chain(this._modulationNode, this.output);\n\t        this._readOnly([\n\t            'frequency',\n\t            'harmonicity',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AMSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AMSynth.defaults = {\n\t        'harmonicity': 3,\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.01,\n\t            'decay': 0.01,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        },\n\t        'modulation': { 'type': 'square' },\n\t        'modulationEnvelope': {\n\t            'attack': 0.5,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t *  trigger the attack portion of the note\n\t\t *\n\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note\n\t\t *  @private\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the port glide\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.modulationEnvelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  trigger the release portion of the note\n\t\t *\n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @private\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        this.modulationEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'harmonicity',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._modulationScale.dispose();\n\t        this._modulationScale = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.oscillator = null;\n\t        this.envelope = null;\n\t        this.modulationEnvelope = null;\n\t        this.modulation = null;\n\t        return this;\n\t    };\n\t    return Tone.AMSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.\n\t\t *          The amplitude of the Tone.Oscillator and the cutoff frequency of the \n\t\t *          Tone.Filter are controlled by Tone.Envelopes. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n\t\t *          \n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.MonoSynth({\n\t\t * \t\"oscillator\" : {\n\t\t * \t\t\"type\" : \"square\"\n\t\t *  },\n\t\t *  \"envelope\" : {\n\t\t *  \t\"attack\" : 0.1\n\t\t *  }\n\t\t * }).toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.MonoSynth = function (options) {\n\t        //get the defaults\n\t        options = Tone.defaultArg(options, Tone.MonoSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this.oscillator.frequency;\n\t        /**\n\t\t\t *  The detune control.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this.oscillator.detune;\n\t        /**\n\t\t\t *  The filter.\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.filter = new Tone.Filter(options.filter);\n\t        /**\n\t\t\t *  The filter envelope.\n\t\t\t *  @type {Tone.FrequencyEnvelope}\n\t\t\t */\n\t        this.filterEnvelope = new Tone.FrequencyEnvelope(options.filterEnvelope);\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the oscillators to the output\n\t        this.oscillator.chain(this.filter, this.envelope, this.output);\n\t        //start the oscillators\n\t        this.oscillator.start();\n\t        //connect the filter envelope\n\t        this.filterEnvelope.connect(this.filter.frequency);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'filter',\n\t            'filterEnvelope',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MonoSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MonoSynth.defaults = {\n\t        'frequency': 'C4',\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'square' },\n\t        'filter': {\n\t            'Q': 6,\n\t            'type': 'lowpass',\n\t            'rolloff': -24\n\t        },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0.9,\n\t            'release': 1\n\t        },\n\t        'filterEnvelope': {\n\t            'attack': 0.06,\n\t            'decay': 0.2,\n\t            'sustain': 0.5,\n\t            'release': 2,\n\t            'baseFrequency': 200,\n\t            'octaves': 7,\n\t            'exponent': 2\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.MonoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.filterEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.MonoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        this.filterEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t */\n\t    Tone.MonoSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'filter',\n\t            'filterEnvelope',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this.filterEnvelope.dispose();\n\t        this.filterEnvelope = null;\n\t        this.filter.dispose();\n\t        this.filter = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.MonoSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.DuoSynth is a monophonic synth composed of two \n\t\t *          MonoSynths run in parallel with control over the \n\t\t *          frequency ratio between the two voices and vibrato effect.\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var duoSynth = new Tone.DuoSynth().toMaster();\n\t\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t\t */\n\t    Tone.DuoSynth = function (options) {\n\t        options = Tone.defaultArg(options, Tone.DuoSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  the first voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t        this.voice0 = new Tone.MonoSynth(options.voice0);\n\t        this.voice0.volume.value = -10;\n\t        /**\n\t\t\t *  the second voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t        this.voice1 = new Tone.MonoSynth(options.voice1);\n\t        this.voice1.volume.value = -10;\n\t        /**\n\t\t\t *  The vibrato LFO. \n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._vibrato = new Tone.LFO(options.vibratoRate, -50, 50);\n\t        this._vibrato.start();\n\t        /**\n\t\t\t * the vibrato frequency\n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.vibratoRate = this._vibrato.frequency;\n\t        /**\n\t\t\t *  the vibrato gain\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._vibratoGain = new Tone.Gain(options.vibratoAmount, Tone.Type.Positive);\n\t        /**\n\t\t\t * The amount of vibrato\n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t */\n\t        this.vibratoAmount = this._vibratoGain.gain;\n\t        /**\n\t\t\t *  the frequency control\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * duoSynth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        //control the two voices frequency\n\t        this.frequency.connect(this.voice0.frequency);\n\t        this.frequency.chain(this.harmonicity, this.voice1.frequency);\n\t        this._vibrato.connect(this._vibratoGain);\n\t        this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\t        this.voice0.connect(this.output);\n\t        this.voice1.connect(this.output);\n\t        this._readOnly([\n\t            'voice0',\n\t            'voice1',\n\t            'frequency',\n\t            'vibratoAmount',\n\t            'vibratoRate'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.DuoSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.DuoSynth.defaults = {\n\t        'vibratoAmount': 0.5,\n\t        'vibratoRate': 5,\n\t        'harmonicity': 1.5,\n\t        'voice0': {\n\t            'volume': -10,\n\t            'portamento': 0,\n\t            'oscillator': { 'type': 'sine' },\n\t            'filterEnvelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            },\n\t            'envelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            }\n\t        },\n\t        'voice1': {\n\t            'volume': -10,\n\t            'portamento': 0,\n\t            'oscillator': { 'type': 'sine' },\n\t            'filterEnvelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            },\n\t            'envelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelopes\n\t\t *  \n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.DuoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.voice0.envelope.triggerAttack(time, velocity);\n\t        this.voice1.envelope.triggerAttack(time, velocity);\n\t        this.voice0.filterEnvelope.triggerAttack(time);\n\t        this.voice1.filterEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelopes\n\t\t *  \n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.DuoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.voice0.triggerRelease(time);\n\t        this.voice1.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t */\n\t    Tone.DuoSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'voice0',\n\t            'voice1',\n\t            'frequency',\n\t            'vibratoAmount',\n\t            'vibratoRate'\n\t        ]);\n\t        this.voice0.dispose();\n\t        this.voice0 = null;\n\t        this.voice1.dispose();\n\t        this.voice1 = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._vibratoGain.dispose();\n\t        this._vibratoGain = null;\n\t        this._vibrato = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this.vibratoAmount.dispose();\n\t        this.vibratoAmount = null;\n\t        this.vibratoRate = null;\n\t        return this;\n\t    };\n\t    return Tone.DuoSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n\t\t *          the frequency of a second Tone.Synth. A lot of spectral content \n\t\t *          can be explored using the modulationIndex parameter. Read more about\n\t\t *          frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth\n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var fmSynth = new Tone.FMSynth().toMaster();\n\t\t * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t\t */\n\t    Tone.FMSynth = function (options) {\n\t        options = Tone.defaultArg(options, Tone.FMSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The carrier voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Synth(options.carrier);\n\t        this._carrier.volume.value = -10;\n\t        /**\n\t\t\t *  The carrier's oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.oscillator = this._carrier.oscillator;\n\t        /**\n\t\t\t *  The carrier's envelope\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t        /**\n\t\t\t *  The modulator voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Synth(options.modulator);\n\t        this._modulator.volume.value = -10;\n\t        /**\n\t\t\t *  The modulator's oscillator which is applied\n\t\t\t *  to the amplitude of the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t        /**\n\t\t\t *  The modulator's envelope\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  The modulation index which essentially the depth or amount of the modulation. It is the\n\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t\t\t *  modulating signal (ma) -- as in ma/mf.\n\t\t\t *\t@type {Positive}\n\t\t\t *\t@signal\n\t\t\t */\n\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t        this.modulationIndex.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //control the two voices frequency\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t        this._modulator.connect(this._modulationNode.gain);\n\t        this._modulationNode.connect(this._carrier.frequency);\n\t        this._carrier.connect(this.output);\n\t        this._readOnly([\n\t            'frequency',\n\t            'harmonicity',\n\t            'modulationIndex',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FMSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FMSynth.defaults = {\n\t        'harmonicity': 3,\n\t        'modulationIndex': 10,\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.01,\n\t            'decay': 0.01,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        },\n\t        'modulation': { 'type': 'square' },\n\t        'modulationEnvelope': {\n\t            'attack': 0.5,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t * \ttrigger the attack portion of the note\n\t\t *\n\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t *  @param {number} [velocity=1] the velocity of the note\n\t\t *  @returns {Tone.FMSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.FMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.modulationEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  trigger the release portion of the note\n\t\t *\n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.FMSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.FMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        this.modulationEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FMSynth} this\n\t\t */\n\t    Tone.FMSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'harmonicity',\n\t            'modulationIndex',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.modulationIndex.dispose();\n\t        this.modulationIndex = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.oscillator = null;\n\t        this.envelope = null;\n\t        this.modulationEnvelope = null;\n\t        this.modulation = null;\n\t        return this;\n\t    };\n\t    return Tone.FMSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.MembraneSynth makes kick and tom sounds using a single oscillator\n\t\t *          with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n\t\t *          is routed through a Tone.AmplitudeEnvelope to the output. The drum\n\t\t *          quality of the sound comes from the frequency envelope applied\n\t\t *          during during Tone.MembraneSynth.triggerAttack(note). The frequency\n\t\t *          envelope starts at <code>note * .octaves</code> and ramps to \n\t\t *          <code>note</code> over the duration of <code>.pitchDecay</code>. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.MembraneSynth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C2\", \"8n\");\n\t\t */\n\t    Tone.MembraneSynth = function (options) {\n\t        options = Tone.defaultArg(options, Tone.MembraneSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator).start();\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        /**\n\t\t\t *  The number of octaves the pitch envelope ramps.\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this.octaves = options.octaves;\n\t        /**\n\t\t\t *  The amount of time the frequency envelope takes. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.pitchDecay = options.pitchDecay;\n\t        this.oscillator.chain(this.envelope, this.output);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MembraneSynth, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MembraneSynth.defaults = {\n\t        'pitchDecay': 0.05,\n\t        'octaves': 10,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 0.4,\n\t            'sustain': 0.01,\n\t            'release': 1.4,\n\t            'attackCurve': 'exponential'\n\t        }\n\t    };\n\t    /**\n\t\t *  Trigger the note at the given time with the given velocity. \n\t\t *  \n\t\t *  @param  {Frequency} note     the note\n\t\t *  @param  {Time} [time=now]     the time, if not given is now\n\t\t *  @param  {number} [velocity=1] velocity defaults to 1\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t *  @example\n\t\t *  kick.triggerAttack(60);\n\t\t */\n\t    Tone.MembraneSynth.prototype.triggerAttack = function (note, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        note = this.toFrequency(note);\n\t        var maxNote = note * this.octaves;\n\t        this.oscillator.frequency.setValueAtTime(maxNote, time);\n\t        this.oscillator.frequency.exponentialRampToValueAtTime(note, time + this.toSeconds(this.pitchDecay));\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of the note.\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t */\n\t    Tone.MembraneSynth.prototype.triggerRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t */\n\t    Tone.MembraneSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.MembraneSynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  Inharmonic ratio of frequencies based on the Roland TR-808\n\t\t *  Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var inharmRatios = [\n\t        1,\n\t        1.483,\n\t        1.932,\n\t        2.546,\n\t        2.63,\n\t        3.897\n\t    ];\n\t    /**\n\t\t *  @class  A highly inharmonic and spectrally complex source with a highpass filter\n\t\t *          and amplitude envelope which is good for making metalophone sounds. Based\n\t\t *          on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n\t\t *          Inspiration from [Sound on Sound](https://web.archive.org/web/20160610143924/https://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] The options availble for the synth\n\t\t *                             see defaults below\n\t\t */\n\t    Tone.MetalSynth = function (options) {\n\t        options = Tone.defaultArg(options, Tone.MetalSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The frequency of the cymbal\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The array of FMOscillators\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillators = [];\n\t        /**\n\t\t\t *  The frequency multipliers\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._freqMultipliers = [];\n\t        /**\n\t\t\t *  The amplitude for the body\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitue = new Tone.Gain(0).connect(this.output);\n\t        /**\n\t\t\t *  highpass the output\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._highpass = new Tone.Filter({\n\t            'type': 'highpass',\n\t            'Q': -3.0102999566398125\n\t        }).connect(this._amplitue);\n\t        /**\n\t\t\t *  The number of octaves the highpass\n\t\t\t *  filter frequency ramps\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  Scale the body envelope\n\t\t\t *  for the bandpass\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filterFreqScaler = new Tone.Scale(options.resonance, 7000);\n\t        /**\n\t\t\t *  The envelope which is connected both to the\n\t\t\t *  amplitude and highpass filter's cutoff frequency\n\t\t\t *  @type  {Tone.Envelope}\n\t\t\t */\n\t        this.envelope = new Tone.Envelope({\n\t            'attack': options.envelope.attack,\n\t            'attackCurve': 'linear',\n\t            'decay': options.envelope.decay,\n\t            'sustain': 0,\n\t            'release': options.envelope.release\n\t        }).chain(this._filterFreqScaler, this._highpass.frequency);\n\t        this.envelope.connect(this._amplitue.gain);\n\t        for (var i = 0; i < inharmRatios.length; i++) {\n\t            var osc = new Tone.FMOscillator({\n\t                'type': 'square',\n\t                'modulationType': 'square',\n\t                'harmonicity': options.harmonicity,\n\t                'modulationIndex': options.modulationIndex\n\t            });\n\t            osc.connect(this._highpass).start();\n\t            this._oscillators[i] = osc;\n\t            var mult = new Tone.Multiply(inharmRatios[i]);\n\t            this._freqMultipliers[i] = mult;\n\t            this.frequency.chain(mult, osc.frequency);\n\t        }\n\t        //set the octaves\n\t        this.octaves = options.octaves;\n\t    };\n\t    Tone.extend(Tone.MetalSynth, Tone.Instrument);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MetalSynth.defaults = {\n\t        'frequency': 200,\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 1.4,\n\t            'release': 0.2\n\t        },\n\t        'harmonicity': 5.1,\n\t        'modulationIndex': 32,\n\t        'resonance': 4000,\n\t        'octaves': 1.5\n\t    };\n\t    /**\n\t\t *  Trigger the attack.\n\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t *  @param  {NormalRange}  [velocity=1]  The velocity that the envelope should be triggered at.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerAttack = function (time, vel) {\n\t        time = this.toSeconds(time);\n\t        vel = Tone.defaultArg(vel, 1);\n\t        this.envelope.triggerAttack(time, vel);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release of the envelope.\n\t\t *  @param  {Time}  time      When the release should be triggered.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and release of the envelope after the given\n\t\t *  duration.\n\t\t *  @param  {Time}  duration  The duration before triggering the release\n\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t *  @param  {NormalRange}  [velocity=1]  The velocity that the envelope should be triggered at.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The modulationIndex of the oscillators which make up the source.\n\t\t *  see Tone.FMOscillator.modulationIndex\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Positive}\n\t\t *  @name  modulationIndex\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'modulationIndex', {\n\t        get: function () {\n\t            return this._oscillators[0].modulationIndex.value;\n\t        },\n\t        set: function (val) {\n\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t                this._oscillators[i].modulationIndex.value = val;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The harmonicity of the oscillators which make up the source.\n\t\t *  see Tone.FMOscillator.harmonicity\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Positive}\n\t\t *  @name  harmonicity\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'harmonicity', {\n\t        get: function () {\n\t            return this._oscillators[0].harmonicity.value;\n\t        },\n\t        set: function (val) {\n\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t                this._oscillators[i].harmonicity.value = val;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The frequency of the highpass filter attached to the envelope\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Frequency}\n\t\t *  @name  resonance\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'resonance', {\n\t        get: function () {\n\t            return this._filterFreqScaler.min;\n\t        },\n\t        set: function (val) {\n\t            this._filterFreqScaler.min = val;\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of octaves above the \"resonance\" frequency\n\t\t *  that the filter ramps during the attack/decay envelope\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Number}\n\t\t *  @name  octaves\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octs) {\n\t            this._octaves = octs;\n\t            this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, octs);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.MetalSynth} this\n\t\t */\n\t    Tone.MetalSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t            this._oscillators[i].dispose();\n\t            this._freqMultipliers[i].dispose();\n\t        }\n\t        this._oscillators = null;\n\t        this._freqMultipliers = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._filterFreqScaler.dispose();\n\t        this._filterFreqScaler = null;\n\t        this._amplitue.dispose();\n\t        this._amplitue = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this._highpass.dispose();\n\t        this._highpass = null;\n\t    };\n\t    return Tone.MetalSynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  BufferSource polyfill\n\t\t */\n\t    if (window.AudioBufferSourceNode && !AudioBufferSourceNode.prototype.start) {\n\t        AudioBufferSourceNode.prototype.start = AudioBufferSourceNode.prototype.noteGrainOn;\n\t        AudioBufferSourceNode.prototype.stop = AudioBufferSourceNode.prototype.noteOff;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the native BufferSourceNode.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n\t\t *  @param  {Function}  onload  The callback to invoke when the\n\t\t *                               buffer is done playing.\n\t\t */\n\t    Tone.BufferSource = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'buffer',\n\t            'onload'\n\t        ], Tone.BufferSource);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The callback to invoke after the\n\t\t\t *  buffer source is done playing.\n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.onended = options.onended;\n\t        /**\n\t\t\t *  The time that the buffer was started.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startTime = -1;\n\t        /**\n\t\t\t *  The time that the buffer is scheduled to stop.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stopTime = -1;\n\t        /**\n\t\t\t *  The gain node which envelopes the BufferSource\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gainNode = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  The buffer source\n\t\t\t *  @type  {AudioBufferSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._source = this.context.createBufferSource();\n\t        this._source.connect(this._gainNode);\n\t        /**\n\t\t\t * The private buffer instance\n\t\t\t * @type {Tone.Buffer}\n\t\t\t * @private\n\t\t\t */\n\t        this._buffer = new Tone.Buffer(options.buffer, options.onload);\n\t        /**\n\t\t\t *  The playbackRate of the buffer\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.playbackRate = new Tone.Param(this._source.playbackRate, Tone.Type.Positive);\n\t        /**\n\t\t\t *  The fadeIn time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeIn = options.fadeIn;\n\t        /**\n\t\t\t *  The fadeOut time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeOut = options.fadeOut;\n\t        /**\n\t\t\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t\t\t * @type {String}\n\t\t\t */\n\t        this.curve = options.curve;\n\t        /**\n\t\t\t *  The value that the buffer ramps to\n\t\t\t *  @type {Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = 1;\n\t        /**\n\t\t\t * The onended timeout\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._onendedTimeout = -1;\n\t        //set some values initially\n\t        this.loop = options.loop;\n\t        this.loopStart = options.loopStart;\n\t        this.loopEnd = options.loopEnd;\n\t        this.playbackRate.value = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.BufferSource, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.BufferSource.defaults = {\n\t        'onended': Tone.noOp,\n\t        'onload': Tone.noOp,\n\t        'loop': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0,\n\t        'curve': 'linear',\n\t        'playbackRate': 1\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.BufferSource#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'state', {\n\t        get: function () {\n\t            var now = this.now();\n\t            if (this._startTime !== -1 && now >= this._startTime && now < this._stopTime) {\n\t                return Tone.State.Started;\n\t            } else {\n\t                return Tone.State.Stopped;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the buffer\n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at.\n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length\n\t\t *                                of the sample (minus any offset)\n\t\t *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.\n\t\t *  @param  {Time=}  fadeInTime  The optional fadeIn ramp time.\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.start = function (time, offset, duration, gain, fadeInTime) {\n\t        if (this._startTime !== -1) {\n\t            throw new Error('Tone.BufferSource can only be started once.');\n\t        }\n\t        if (this.buffer.loaded) {\n\t            time = this.toSeconds(time);\n\t            //if it's a loop the default offset is the loopstart point\n\t            if (this.loop) {\n\t                offset = Tone.defaultArg(offset, this.loopStart);\n\t            } else {\n\t                //otherwise the default offset is 0\n\t                offset = Tone.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toSeconds(offset);\n\t            gain = Tone.defaultArg(gain, 1);\n\t            this._gain = gain;\n\t            fadeInTime = this.toSeconds(Tone.defaultArg(fadeInTime, this.fadeIn));\n\t            this.fadeIn = fadeInTime;\n\t            if (fadeInTime > 0) {\n\t                this._gainNode.gain.setValueAtTime(0, time);\n\t                if (this.curve === 'linear') {\n\t                    this._gainNode.gain.linearRampToValueAtTime(this._gain, time + fadeInTime);\n\t                } else {\n\t                    this._gainNode.gain.setTargetAtTime(this._gain, time, this._gainNode.gain.getTimeConstant(fadeInTime));\n\t                }\n\t            } else {\n\t                this._gainNode.gain.setValueAtTime(gain, time);\n\t            }\n\t            this._startTime = time;\n\t            var computedDur = this.toSeconds(Tone.defaultArg(duration, this.buffer.duration - offset));\n\t            computedDur = Math.max(computedDur, 0);\n\t            if (!this.loop || this.loop && !Tone.isUndef(duration)) {\n\t                //clip the duration when not looping\n\t                if (!this.loop) {\n\t                    computedDur = Math.min(computedDur, this.buffer.duration - offset);\n\t                }\n\t                this.stop(time + computedDur, this.fadeOut);\n\t            }\n\t            //start the buffer source\n\t            if (this.loop) {\n\t                //modify the offset if it's greater than the loop time\n\t                var loopEnd = this.loopEnd || this.buffer.duration;\n\t                var loopStart = this.loopStart;\n\t                var loopDuration = loopEnd - loopStart;\n\t                //move the offset back\n\t                if (offset > loopEnd) {\n\t                    offset = (offset - loopStart) % loopDuration + loopStart;\n\t                }\n\t            }\n\t            this._source.buffer = this.buffer.get();\n\t            this._source.loopEnd = this.loopEnd || this.buffer.duration;\n\t            Tone.isPast(time);\n\t            this._source.start(time, offset);\n\t        } else {\n\t            throw new Error('Tone.BufferSource: buffer is either not set or not loaded.');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the buffer. Optionally add a ramp time to fade the\n\t\t *  buffer out.\n\t\t *  @param  {Time=}  time         The time the buffer should stop.\n\t\t *  @param  {Time=}  fadeOutTime  How long the gain should fade out for\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.stop = function (time, fadeOutTime) {\n\t        if (this.buffer.loaded) {\n\t            time = this.toSeconds(time);\n\t            //if this is before the previous stop\n\t            if (this._stopTime === -1 || this._stopTime > time) {\n\t                //stop if it's schedule before the start time\n\t                if (time <= this._startTime) {\n\t                    this._gainNode.gain.cancelScheduledValues(time);\n\t                    this._gainNode.gain.value = 0;\n\t                    return this;\n\t                }\n\t                time = Math.max(this._startTime + this.fadeIn + this.sampleTime, time);\n\t                //cancel the previous curve\n\t                this._gainNode.gain.cancelScheduledValues(time);\n\t                this._stopTime = time;\n\t                //the fadeOut time\n\t                fadeOutTime = this.toSeconds(Tone.defaultArg(fadeOutTime, this.fadeOut));\n\t                //set a new one\n\t                var heldDuration = Math.min(time - this._startTime - this.fadeIn - this.sampleTime, this.buffer.duration);\n\t                fadeOutTime = Math.min(heldDuration, fadeOutTime);\n\t                var startFade = time - fadeOutTime;\n\t                if (fadeOutTime > this.sampleTime) {\n\t                    this._gainNode.gain.setValueAtTime(this._gain, startFade);\n\t                    if (this.curve === 'linear') {\n\t                        this._gainNode.gain.linearRampToValueAtTime(0, time);\n\t                    } else {\n\t                        this._gainNode.gain.setTargetAtTime(0, startFade, this._gainNode.gain.getTimeConstant(fadeOutTime));\n\t                    }\n\t                } else {\n\t                    this._gainNode.gain.setValueAtTime(0, time);\n\t                }\n\t                Tone.context.clearTimeout(this._onendedTimeout);\n\t                this._onendedTimeout = Tone.context.setTimeout(this._onended.bind(this), this._stopTime - this.now());\n\t            }\n\t        } else {\n\t            throw new Error('Tone.BufferSource: buffer is either not set or not loaded.');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Internal callback when the buffer is ended.\n\t\t *  Invokes `onended` and disposes the node.\n\t\t *  @private\n\t\t */\n\t    Tone.BufferSource.prototype._onended = function () {\n\t        this.onended(this);\n\t    };\n\t    /**\n\t\t * If loop is true, the loop will start at this position.\n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._source.loopStart;\n\t        },\n\t        set: function (loopStart) {\n\t            this._source.loopStart = this.toSeconds(loopStart);\n\t        }\n\t    });\n\t    /**\n\t\t * If loop is true, the loop will end at this position.\n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._source.loopEnd;\n\t        },\n\t        set: function (loopEnd) {\n\t            this._source.loopEnd = this.toSeconds(loopEnd);\n\t        }\n\t    });\n\t    /**\n\t\t * The audio buffer belonging to the player.\n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Tone.Buffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer;\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t        }\n\t    });\n\t    /**\n\t\t * If the buffer should loop once it's over.\n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Boolean}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loop', {\n\t        get: function () {\n\t            return this._source.loop;\n\t        },\n\t        set: function (loop) {\n\t            this._source.loop = loop;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.onended = null;\n\t        this._source.disconnect();\n\t        this._source = null;\n\t        this._gainNode.dispose();\n\t        this._gainNode = null;\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        this._startTime = -1;\n\t        this.playbackRate = null;\n\t        Tone.context.clearTimeout(this._onendedTimeout);\n\t        return this;\n\t    };\n\t    return Tone.BufferSource;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.\n\t\t *          Tone.Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n\t\t *          colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {string} type the noise type (white|pink|brown)\n\t\t *  @example\n\t\t * //initialize the noise and start\n\t\t * var noise = new Tone.Noise(\"pink\").start();\n\t\t * \n\t\t * //make an autofilter to shape the noise\n\t\t * var autoFilter = new Tone.AutoFilter({\n\t\t * \t\"frequency\" : \"8m\", \n\t\t * \t\"min\" : 800, \n\t\t * \t\"max\" : 15000\n\t\t * }).connect(Tone.Master);\n\t\t * \n\t\t * //connect the noise\n\t\t * noise.connect(autoFilter);\n\t\t * //start the autofilter LFO\n\t\t * autoFilter.start()\n\t\t */\n\t    Tone.Noise = function () {\n\t        var options = Tone.defaults(arguments, ['type'], Tone.Noise);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t        this._source = null;\n\t        /**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {AudioBuffer}\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The playback rate of the noise. Affects\n\t\t\t *  the \"frequency\" of the noise.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.Noise, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Noise.defaults = {\n\t        'type': 'white',\n\t        'playbackRate': 1\n\t    };\n\t    /**\n\t\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\". \n\t\t * @memberOf Tone.Noise#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * noise.type = \"white\";\n\t\t */\n\t    Object.defineProperty(Tone.Noise.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            if (this._type !== type) {\n\t                if (type in _noiseBuffers) {\n\t                    this._type = type;\n\t                    //if it's playing, stop and restart it\n\t                    if (this.state === Tone.State.Started) {\n\t                        var now = this.now();\n\t                        this._stop(now);\n\t                        this._start(now);\n\t                    }\n\t                } else {\n\t                    throw new TypeError('Tone.Noise: invalid type: ' + type);\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The playback rate of the noise. Affects\n\t\t *  the \"frequency\" of the noise.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */\n\t    Object.defineProperty(Tone.Noise.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            if (this._source) {\n\t                this._source.playbackRate.value = rate;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  internal start method\n\t\t *\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.Noise.prototype._start = function (time) {\n\t        var buffer = _noiseBuffers[this._type];\n\t        this._source = new Tone.BufferSource(buffer).connect(this.output);\n\t        this._source.loop = true;\n\t        this._source.playbackRate.value = this._playbackRate;\n\t        this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t    };\n\t    /**\n\t\t *  internal stop method\n\t\t *\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.Noise.prototype._stop = function (time) {\n\t        if (this._source) {\n\t            this._source.stop(this.toSeconds(time));\n\t            this._source = null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Noise} this\n\t\t */\n\t    Tone.Noise.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._source !== null) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // THE BUFFERS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //Noise buffer stats\n\t    var bufferLength = 44100 * 5;\n\t    var channels = 2;\n\t    /**\n\t\t *\tThe noise arrays. Generated on initialization.\n\t\t *  borrowed heavily from https://github.com/zacharydenton/noise.js \n\t\t *  (c) 2013 Zach Denton (MIT)\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t */\n\t    var _noiseArrays = {\n\t        'pink': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                var b0, b1, b2, b3, b4, b5, b6;\n\t                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    var white = Math.random() * 2 - 1;\n\t                    b0 = 0.99886 * b0 + white * 0.0555179;\n\t                    b1 = 0.99332 * b1 + white * 0.0750759;\n\t                    b2 = 0.969 * b2 + white * 0.153852;\n\t                    b3 = 0.8665 * b3 + white * 0.3104856;\n\t                    b4 = 0.55 * b4 + white * 0.5329522;\n\t                    b5 = -0.7616 * b5 - white * 0.016898;\n\t                    channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t                    channel[i] *= 0.11;\n\t                    // (roughly) compensate for gain\n\t                    b6 = white * 0.115926;\n\t                }\n\t            }\n\t            return buffer;\n\t        }(),\n\t        'brown': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                var lastOut = 0;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    var white = Math.random() * 2 - 1;\n\t                    channel[i] = (lastOut + 0.02 * white) / 1.02;\n\t                    lastOut = channel[i];\n\t                    channel[i] *= 3.5;    // (roughly) compensate for gain\n\t                }\n\t            }\n\t            return buffer;\n\t        }(),\n\t        'white': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    channel[i] = Math.random() * 2 - 1;\n\t                }\n\t            }\n\t            return buffer;\n\t        }()\n\t    };\n\t    /**\n\t\t *\tstatic noise buffers\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Tone.Buffer}\n\t\t */\n\t    var _noiseBuffers = {};\n\t    //create the Tone.Buffers\n\t    function createBuffers() {\n\t        for (var type in _noiseArrays) {\n\t            _noiseBuffers[type] = new Tone.Buffer().fromArray(_noiseArrays[type]);\n\t        }\n\t    }\n\t    //create the noise buffers\n\t    Tone.getContext(createBuffers);\n\t    Tone.Context.on('init', createBuffers);\n\t    return Tone.Noise;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter), \n\t\t *          and two envelopes (Tone.Envelop). One envelope controls the amplitude\n\t\t *          of the noise and the other is controls the cutoff frequency of the filter. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t * @example\n\t\t * var noiseSynth = new Tone.NoiseSynth().toMaster();\n\t\t * noiseSynth.triggerAttackRelease(\"8n\");\n\t\t */\n\t    Tone.NoiseSynth = function (options) {\n\t        //get the defaults\n\t        options = Tone.defaultArg(options, Tone.NoiseSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The noise source.\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @example\n\t\t\t * noiseSynth.set(\"noise.type\", \"brown\");\n\t\t\t */\n\t        this.noise = new Tone.Noise();\n\t        /**\n\t\t\t *  The amplitude envelope. \n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the noise to the output\n\t        this.noise.chain(this.envelope, this.output);\n\t        //start the noise\n\t        this.noise.start();\n\t        this._readOnly([\n\t            'noise',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.NoiseSynth, Tone.Instrument);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.NoiseSynth.defaults = {\n\t        'noise': { 'type': 'white' },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0\n\t        }\n\t    };\n\t    /**\n\t\t *  Start the attack portion of the envelopes. Unlike other \n\t\t *  instruments, Tone.NoiseSynth doesn't have a note. \n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t *  @example\n\t\t * noiseSynth.triggerAttack();\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the release portion of the envelopes.\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and then the release. \n\t\t *  @param  {Time} duration the duration of the note\n\t\t *  @param  {Time} [time=now]     the time of the attack\n\t\t *  @param  {number} [velocity=1] the velocity\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'noise',\n\t            'envelope'\n\t        ]);\n\t        this.noise.dispose();\n\t        this.noise = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.NoiseSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Karplus-String string synthesis. Often out of tune. \n\t\t *         Will change when the AudioWorkerNode is available across\n\t\t *         browsers. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] see the defaults\n\t\t *  @example\n\t\t * var plucky = new Tone.PluckSynth().toMaster();\n\t\t * plucky.triggerAttack(\"C4\");\n\t\t */\n\t    Tone.PluckSynth = function (options) {\n\t        options = Tone.defaultArg(options, Tone.PluckSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @private\n\t\t\t */\n\t        this._noise = new Tone.Noise('pink');\n\t        /**\n\t\t\t *  The amount of noise at the attack. \n\t\t\t *  Nominal range of [0.1, 20]\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this.attackNoise = options.attackNoise;\n\t        /**\n\t\t\t *  the LFCF\n\t\t\t *  @type {Tone.LowpassCombFilter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfcf = new Tone.LowpassCombFilter({\n\t            'resonance': options.resonance,\n\t            'dampening': options.dampening\n\t        });\n\t        /**\n\t\t\t *  The resonance control. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._lfcf.resonance;\n\t        /**\n\t\t\t *  The dampening control. i.e. the lowpass filter frequency of the comb filter\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = this._lfcf.dampening;\n\t        //connections\n\t        this._noise.connect(this._lfcf);\n\t        this._lfcf.connect(this.output);\n\t        this._readOnly([\n\t            'resonance',\n\t            'dampening'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PluckSynth, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PluckSynth.defaults = {\n\t        'attackNoise': 1,\n\t        'dampening': 4000,\n\t        'resonance': 0.9\n\t    };\n\t    /**\n\t\t *  Trigger the note. \n\t\t *  @param {Frequency} note The note to trigger.\n\t\t *  @param {Time} [time=now] When the note should be triggered.\n\t\t *  @returns {Tone.PluckSynth} this\n\t\t */\n\t    Tone.PluckSynth.prototype.triggerAttack = function (note, time) {\n\t        note = this.toFrequency(note);\n\t        time = this.toSeconds(time);\n\t        var delayAmount = 1 / note;\n\t        this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\t        this._noise.start(time);\n\t        this._noise.stop(time + delayAmount * this.attackNoise);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.PluckSynth} this\n\t\t */\n\t    Tone.PluckSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._noise.dispose();\n\t        this._lfcf.dispose();\n\t        this._noise = null;\n\t        this._lfcf = null;\n\t        this._writable([\n\t            'resonance',\n\t            'dampening'\n\t        ]);\n\t        this.dampening = null;\n\t        this.resonance = null;\n\t        return this;\n\t    };\n\t    return Tone.PluckSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.PolySynth handles voice creation and allocation for any\n\t\t *          instruments passed in as the second paramter. PolySynth is \n\t\t *          not a synthesizer by itself, it merely manages voices of \n\t\t *          one of the other types of synths, allowing any of the \n\t\t *          monophonic synthesizers to be polyphonic. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {number|Object} [polyphony=4] The number of voices to create\n\t\t *  @param {function} [voice=Tone.Synth] The constructor of the voices\n\t\t *                                            uses Tone.Synth by default. \n\t\t *  @example\n\t\t * //a polysynth composed of 6 Voices of Synth\n\t\t * var synth = new Tone.PolySynth(6, Tone.Synth).toMaster();\n\t\t * //set the attributes using the set interface\n\t\t * synth.set(\"detune\", -1200);\n\t\t * //play a chord\n\t\t * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], \"4n\");\n\t\t */\n\t    Tone.PolySynth = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'polyphony',\n\t            'voice'\n\t        ], Tone.PolySynth);\n\t        Tone.Instrument.call(this, options);\n\t        options = Tone.defaultArg(options, Tone.Instrument.defaults);\n\t        //max polyphony\n\t        options.polyphony = Math.min(Tone.PolySynth.MAX_POLYPHONY, options.polyphony);\n\t        /**\n\t\t\t *  the array of voices\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.voices = new Array(options.polyphony);\n\t        /**\n\t\t\t *  The queue of voices with data about last trigger\n\t\t\t *  and the triggered note\n\t\t\t *  @private\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this._triggers = new Array(options.polyphony);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        this._readOnly('detune');\n\t        //create the voices\n\t        for (var i = 0; i < options.polyphony; i++) {\n\t            var v = new options.voice(arguments[2], arguments[3]);\n\t            this.voices[i] = v;\n\t            v.connect(this.output);\n\t            if (v.hasOwnProperty('detune')) {\n\t                this.detune.connect(v.detune);\n\t            }\n\t            this._triggers[i] = {\n\t                release: -1,\n\t                note: null,\n\t                voice: v\n\t            };\n\t        }\n\t    };\n\t    Tone.extend(Tone.PolySynth, Tone.Instrument);\n\t    /**\n\t\t *  the defaults\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PolySynth.defaults = {\n\t        'polyphony': 4,\n\t        'volume': 0,\n\t        'detune': 0,\n\t        'voice': Tone.Synth\n\t    };\n\t    /**\n\t\t *  Trigger the attack portion of the note\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} [time=now]  The start time of the note.\n\t\t *  @param {number} [velocity=1] The velocity of the note.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * //trigger a chord immediately with a velocity of 0.2\n\t\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"], undefined, 0.2);\n\t\t */\n\t    Tone.PolySynth.prototype.triggerAttack = function (notes, time, velocity) {\n\t        if (!Array.isArray(notes)) {\n\t            notes = [notes];\n\t        }\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < notes.length; i++) {\n\t            var val = notes[i];\n\t            //trigger the oldest voice\n\t            var oldest = this._triggers[0];\n\t            var oldestIndex = 0;\n\t            for (var j = 1; j < this._triggers.length; j++) {\n\t                if (this._triggers[j].release < oldest.release) {\n\t                    oldest = this._triggers[j];\n\t                    oldestIndex = j;\n\t                }\n\t            }\n\t            oldest.release = Infinity;\n\t            oldest.note = JSON.stringify(val);\n\t            oldest.voice.triggerAttack(val, time, velocity);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and release after the specified duration\n\t\t *  \n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} duration the duration of the note\n\t\t *  @param  {Time} [time=now]     if no time is given, defaults to now\n\t\t *  @param  {number} [velocity=1] the velocity of the attack (0-1)\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * //trigger a chord for a duration of a half note \n\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], \"2n\");\n\t\t *  @example\n\t\t * //can pass in an array of durations as well\n\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], [\"2n\", \"4n\", \"4n\"]);\n\t\t */\n\t    Tone.PolySynth.prototype.triggerAttackRelease = function (notes, duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.triggerAttack(notes, time, velocity);\n\t        if (Tone.isArray(duration) && Tone.isArray(notes)) {\n\t            for (var i = 0; i < notes.length; i++) {\n\t                var d = duration[Math.min(i, duration.length - 1)];\n\t                this.triggerRelease(notes[i], time + this.toSeconds(d));\n\t            }\n\t        } else {\n\t            this.triggerRelease(notes, time + this.toSeconds(duration));\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release of the note. Unlike monophonic instruments, \n\t\t *  a note (or array of notes) needs to be passed in as the first argument.\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} [time=now]  When the release will be triggered. \n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * poly.triggerRelease([\"Ab3\", \"C4\", \"F5\"], \"+2n\");\n\t\t */\n\t    Tone.PolySynth.prototype.triggerRelease = function (notes, time) {\n\t        if (!Array.isArray(notes)) {\n\t            notes = [notes];\n\t        }\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < notes.length; i++) {\n\t            //get the voice\n\t            var stringified = JSON.stringify(notes[i]);\n\t            for (var v = 0; v < this._triggers.length; v++) {\n\t                var desc = this._triggers[v];\n\t                if (desc.note === stringified && desc.release > time) {\n\t                    desc.voice.triggerRelease(time);\n\t                    desc.release = time;\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set a member/attribute of the voices. \n\t\t *  @param {Object|string} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * poly.set({\n\t\t * \t\"filter\" : {\n\t\t * \t\t\"type\" : \"highpass\"\n\t\t * \t},\n\t\t * \t\"envelope\" : {\n\t\t * \t\t\"attack\" : 0.25\n\t\t * \t}\n\t\t * });\n\t\t */\n\t    Tone.PolySynth.prototype.set = function (params, value, rampTime) {\n\t        for (var i = 0; i < this.voices.length; i++) {\n\t            this.voices[i].set(params, value, rampTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the synth's attributes. Given no arguments get\n\t\t *  will return all available object properties and their corresponding\n\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t *  to access deeper properties.\n\t\t *  @param {Array=} params the parameters to get, otherwise will return \n\t\t *  \t\t\t\t\t   all available.\n\t\t */\n\t    Tone.PolySynth.prototype.get = function (params) {\n\t        return this.voices[0].get(params);\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of all the currently active voices.\n\t\t *  @param {Time} [time=now] When the notes should be released.\n\t\t *  @return {Tone.PolySynth} this\n\t\t */\n\t    Tone.PolySynth.prototype.releaseAll = function (time) {\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < this._triggers.length; i++) {\n\t            var desc = this._triggers[i];\n\t            if (desc.release > time) {\n\t                desc.release = time;\n\t                desc.voice.triggerRelease(time);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t */\n\t    Tone.PolySynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        for (var i = 0; i < this.voices.length; i++) {\n\t            this.voices[i].dispose();\n\t            this.voices[i] = null;\n\t        }\n\t        this._writable('detune');\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.voices = null;\n\t        this._triggers = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The maximum number of notes that can be allocated \n\t\t *  to a polysynth. \n\t\t *  @type  {Number}\n\t\t *  @static\n\t\t */\n\t    Tone.PolySynth.MAX_POLYPHONY = 20;\n\t    return Tone.PolySynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * @class Automatically interpolates between a set of pitched samples. Pass in an object which maps the note's pitch or midi value to the url, then you can trigger the attack and release of that note like other instruments. By automatically repitching the samples, it is possible to play pitches which were not explicitly included which can save loading time.\n\t\t *        For sample or buffer playback where repitching is not necessary, use [Tone.Player](https://tonejs.github.io/docs/Player).\n\t\t * @param {Object} samples An object of samples mapping either Midi\n\t\t *                         Note Numbers or Scientific Pitch Notation\n\t\t *                         to the url of that sample.\n\t\t * @example\n\t\t * var sampler = new Tone.Sampler({\n\t\t * \t\"C3\" : \"path/to/C3.mp3\",\n\t\t * \t\"D#3\" : \"path/to/Dsharp3.mp3\",\n\t\t * \t\"F#3\" : \"path/to/Fsharp3.mp3\",\n\t\t * \t\"A3\" : \"path/to/A3.mp3\",\n\t\t * }, function(){\n\t\t * \t//sampler will repitch the closest sample\n\t\t * \tsampler.triggerAttack(\"D3\")\n\t\t * })\n\t\t * @extends {Tone.Instrument}\n\t\t */\n\t    Tone.Sampler = function (urls) {\n\t        // shift arguments over one. Those are the remainder of the options\n\t        var args = Array.prototype.slice.call(arguments);\n\t        args.shift();\n\t        var options = Tone.defaults(args, [\n\t            'onload',\n\t            'baseUrl'\n\t        ], Tone.Sampler);\n\t        Tone.Instrument.call(this, options);\n\t        var urlMap = {};\n\t        for (var note in urls) {\n\t            if (Tone.isNote(note)) {\n\t                //convert the note name to MIDI\n\t                var mid = Tone.Frequency(note).toMidi();\n\t                urlMap[mid] = urls[note];\n\t            } else if (!isNaN(parseFloat(note))) {\n\t                //otherwise if it's numbers assume it's midi\n\t                urlMap[note] = urls[note];\n\t            } else {\n\t                throw new Error('Tone.Sampler: url keys must be the note\\'s pitch');\n\t            }\n\t        }\n\t        /**\n\t\t\t * The stored and loaded buffers\n\t\t\t * @type {Tone.Buffers}\n\t\t\t * @private\n\t\t\t */\n\t        this._buffers = new Tone.Buffers(urlMap, options.onload, options.baseUrl);\n\t        /**\n\t\t\t * The object of all currently playing BufferSources\n\t\t\t * @type {Object}\n\t\t\t * @private\n\t\t\t */\n\t        this._activeSources = {};\n\t        /**\n\t\t\t * The envelope applied to the beginning of the sample.\n\t\t\t * @type {Time}\n\t\t\t */\n\t        this.attack = options.attack;\n\t        /**\n\t\t\t * The envelope applied to the end of the envelope.\n\t\t\t * @type {Time}\n\t\t\t */\n\t        this.release = options.release;\n\t    };\n\t    Tone.extend(Tone.Sampler, Tone.Instrument);\n\t    /**\n\t\t * The defaults\n\t\t * @const\n\t\t * @type {Object}\n\t\t */\n\t    Tone.Sampler.defaults = {\n\t        attack: 0,\n\t        release: 0.1,\n\t        onload: Tone.noOp,\n\t        baseUrl: ''\n\t    };\n\t    /**\n\t\t * Returns the difference in steps between the given midi note at the closets sample.\n\t\t * @param  {Midi} midi\n\t\t * @return {Interval}\n\t\t * @private\n\t\t */\n\t    Tone.Sampler.prototype._findClosest = function (midi) {\n\t        var MAX_INTERVAL = 24;\n\t        var interval = 0;\n\t        while (interval < MAX_INTERVAL) {\n\t            // check above and below\n\t            if (this._buffers.has(midi + interval)) {\n\t                return -interval;\n\t            } else if (this._buffers.has(midi - interval)) {\n\t                return interval;\n\t            }\n\t            interval++;\n\t        }\n\t        return null;\n\t    };\n\t    /**\n\t\t * @param  {Frequency} note     The note to play\n\t\t * @param  {Time=} time     When to play the note\n\t\t * @param  {NormalRange=} velocity The velocity to play the sample back.\n\t\t * @return {Tone.Sampler}          this\n\t\t */\n\t    Tone.Sampler.prototype.triggerAttack = function (note, time, velocity) {\n\t        var midi = Tone.Frequency(note).toMidi();\n\t        // find the closest note pitch\n\t        var difference = this._findClosest(midi);\n\t        if (difference !== null) {\n\t            var closestNote = midi - difference;\n\t            var buffer = this._buffers.get(closestNote);\n\t            // play that note\n\t            var source = new Tone.BufferSource({\n\t                'buffer': buffer,\n\t                'playbackRate': Tone.intervalToFrequencyRatio(difference),\n\t                'fadeIn': this.attack,\n\t                'fadeOut': this.release,\n\t                'curve': 'exponential'\n\t            }).connect(this.output);\n\t            source.start(time, 0, buffer.duration, velocity);\n\t            // add it to the active sources\n\t            if (!Tone.isArray(this._activeSources[midi])) {\n\t                this._activeSources[midi] = [];\n\t            }\n\t            this._activeSources[midi].push({\n\t                note: midi,\n\t                source: source\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * @param  {Frequency} note     The note to release.\n\t\t * @param  {Time=} time     \tWhen to release the note.\n\t\t * @return {Tone.Sampler}\tthis\n\t\t */\n\t    Tone.Sampler.prototype.triggerRelease = function (note, time) {\n\t        var midi = Tone.Frequency(note).toMidi();\n\t        // find the note\n\t        if (this._activeSources[midi] && this._activeSources[midi].length) {\n\t            var source = this._activeSources[midi].shift().source;\n\t            time = this.toSeconds(time);\n\t            source.stop(time + this.release, this.release);\n\t        }\n\t    };\n\t    /**\n\t\t * Invoke the attack phase, then after the duration, invoke the release.\n\t\t * @param  {Frequency} note     The note to play\n\t\t * @param  {Time} duration The time the note should be held\n\t\t * @param  {Time=} time     When to start the attack\n\t\t * @param  {NormalRange} [velocity=1] The velocity of the attack\n\t\t * @return {Tone.Sampler}          this\n\t\t */\n\t    Tone.Sampler.prototype.triggerAttackRelease = function (note, duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(note, time, velocity);\n\t        this.triggerRelease(note, time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add a note to the sampler.\n\t\t *  @param  {Note|Midi}   note      The buffer's pitch.\n\t\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,\n\t\t *                                                 or a buffer which will be added\n\t\t *                                                 with the given name.\n\t\t *  @param  {Function=}  callback  The callback to invoke\n\t\t *                                 when the url is loaded.\n\t\t */\n\t    Tone.Sampler.prototype.add = function (note, url, callback) {\n\t        if (Tone.isNote(note)) {\n\t            //convert the note name to MIDI\n\t            var mid = Tone.Frequency(note).toMidi();\n\t            this._buffers.add(mid, url, callback);\n\t        } else if (!isNaN(parseFloat(note))) {\n\t            //otherwise if it's numbers assume it's midi\n\t            this._buffers.add(note, url, callback);\n\t        } else {\n\t            throw new Error('Tone.Sampler: note must be the note\\'s pitch. Instead got ' + note);\n\t        }\n\t    };\n\t    /**\n\t\t * If the buffers are loaded or not\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'loaded', {\n\t        get: function () {\n\t            return this._buffers.loaded;\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up\n\t\t * @return {Tone.Sampler} this\n\t\t */\n\t    Tone.Sampler.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._buffers.dispose();\n\t        this._buffers = null;\n\t        for (var midi in this._activeSources) {\n\t            this._activeSources[midi].forEach(function (event) {\n\t                event.source.dispose();\n\t            });\n\t        }\n\t        this._activeSources = null;\n\t        return this;\n\t    };\n\t    return Tone.Sampler;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. \n\t\t *         See also Tone.AudioToGain. \n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t * var g2a = new Tone.GainToAudio();\n\t\t */\n\t    Tone.GainToAudio = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t            return Math.abs(x) * 2 - 1;\n\t        });\n\t    };\n\t    Tone.extend(Tone.GainToAudio, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.GainToAudio} this\n\t\t */\n\t    Tone.GainToAudio.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._norm.dispose();\n\t        this._norm = null;\n\t        return this;\n\t    };\n\t    return Tone.GainToAudio;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Normalize takes an input min and max and maps it linearly to NormalRange [0,1]\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {number} inputMin the min input value\n\t\t *  @param {number} inputMax the max input value\n\t\t *  @example\n\t\t * var norm = new Tone.Normalize(2, 4);\n\t\t * var sig = new Tone.Signal(3).connect(norm);\n\t\t * //output of norm is 0.5. \n\t\t */\n\t    Tone.Normalize = function (inputMin, inputMax) {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  the min input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputMin = Tone.defaultArg(inputMin, 0);\n\t        /**\n\t\t\t *  the max input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputMax = Tone.defaultArg(inputMax, 1);\n\t        /**\n\t\t\t *  subtract the min from the input\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sub = this.input = new Tone.Add(0);\n\t        /**\n\t\t\t *  divide by the difference between the input and output\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._div = this.output = new Tone.Multiply(1);\n\t        this._sub.connect(this._div);\n\t        this._setRange();\n\t    };\n\t    Tone.extend(Tone.Normalize, Tone.SignalBase);\n\t    /**\n\t\t * The minimum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.Normalize.prototype, 'min', {\n\t        get: function () {\n\t            return this._inputMin;\n\t        },\n\t        set: function (min) {\n\t            this._inputMin = min;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.Normalize.prototype, 'max', {\n\t        get: function () {\n\t            return this._inputMax;\n\t        },\n\t        set: function (max) {\n\t            this._inputMax = max;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t    Tone.Normalize.prototype._setRange = function () {\n\t        this._sub.value = -this._inputMin;\n\t        this._div.value = 1 / (this._inputMax - this._inputMin);\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Normalize} this\n\t\t */\n\t    Tone.Normalize.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._sub.dispose();\n\t        this._sub = null;\n\t        this._div.dispose();\n\t        this._div = null;\n\t        return this;\n\t    };\n\t    return Tone.Normalize;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * @class Tone.TransportTimelineSignal extends Tone.TimelineSignal, but adds the ability to synchronize the signal to the signal to the Tone.Transport\n\t\t * @extends {Tone.TimelineSignal}\n\t\t */\n\t    Tone.TransportTimelineSignal = function () {\n\t        Tone.TimelineSignal.apply(this, arguments);\n\t        /**\n\t\t\t * The real signal output\n\t\t\t * @type {Tone.Signal}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this._outputSig = new Tone.Signal(this._initial);\n\t        /**\n\t\t\t * Keep track of the last value. (small optimization)\n\t\t\t * @private\n\t\t\t * @type {Number}\n\t\t\t */\n\t        this._lastVal = this.value;\n\t        /**\n\t\t\t * The event id of the tick update loop\n\t\t\t * @private\n\t\t\t * @type {Number}\n\t\t\t */\n\t        this._synced = Tone.Transport.scheduleRepeat(this._onTick.bind(this), '1i');\n\t        /**\n\t\t\t * A bound version of the anchor value methods\n\t\t\t * @type {Function}\n\t\t\t * @private\n\t\t\t */\n\t        this._bindAnchorValue = this._anchorValue.bind(this);\n\t        Tone.Transport.on('start stop pause', this._bindAnchorValue);\n\t        this._events.memory = Infinity;\n\t    };\n\t    Tone.extend(Tone.TransportTimelineSignal, Tone.TimelineSignal);\n\t    /**\n\t\t * Callback which is invoked every tick.\n\t\t * @private\n\t\t * @param  {Number} time\n\t\t * @return {Tone.TransportTimelineSignal}      this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype._onTick = function (time) {\n\t        var val = this.getValueAtTime(Tone.Transport.seconds);\n\t        if (this._lastVal !== val) {\n\t            this._lastVal = val;\n\t            //approximate ramp curves with linear ramps\n\t            this._outputSig.linearRampToValueAtTime(val, time);\n\t        }\n\t    };\n\t    /**\n\t\t * Anchor the value at the start and stop of the Transport\n\t\t * @param  {Number} time The time of the event\n\t\t * @return {Tone.TransportTimelineSignal}      this\n\t\t * @private\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype._anchorValue = function (time) {\n\t        var val = this.getValueAtTime(Tone.Transport.ticks);\n\t        this._lastVal = val;\n\t        this._outputSig.cancelScheduledValues(time);\n\t        this._outputSig.setValueAtTime(val, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {TransportTime}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.getValueAtTime = function (time) {\n\t        time = this.toTicks(time);\n\t        return Tone.TimelineSignal.prototype.getValueAtTime.call(this, time);\n\t    };\n\t    /**\n\t\t * Set the output of the signal at the given time\n\t\t * @param  {Number} value The value to change to at the given time\n\t\t * @param  {TransportTime} time  The time to change the signal\n\t\t * @return {Tone.TransportTimelineSignal}       this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.setValueAtTime = function (value, time) {\n\t        time = this.toTicks(time);\n\t        Tone.TimelineSignal.prototype.setValueAtTime.call(this, value, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Linear ramp to the given value from the previous scheduled point to the given value\n\t\t * @param  {Number} value The value to change to at the given time\n\t\t * @param  {TransportTime} time  The time to change the signal\n\t\t * @return {Tone.TransportTimelineSignal}       this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.linearRampToValueAtTime = function (value, time) {\n\t        time = this.toTicks(time);\n\t        Tone.TimelineSignal.prototype.linearRampToValueAtTime.call(this, value, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Exponential ramp to the given value from the previous scheduled point to the given value\n\t\t * @param  {Number} value The value to change to at the given time\n\t\t * @param  {TransportTime} time  The time to change the signal\n\t\t * @return {Tone.TransportTimelineSignal}       this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.exponentialRampToValueAtTime = function (value, time) {\n\t        time = this.toTicks(time);\n\t        Tone.TimelineSignal.prototype.exponentialRampToValueAtTime.call(this, value, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value\n\t\t *  @param {TransportTime} startTime\n\t\t *  @param {number} timeConstant\n\t\t * @return {Tone.TransportTimelineSignal}       this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        startTime = this.toTicks(startTime);\n\t        Tone.TimelineSignal.prototype.setTargetAtTime.call(this, value, startTime, timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or\n\t\t *  equal to startTime.\n\t\t *  @param  {TransportTime} startTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.cancelScheduledValues = function (startTime) {\n\t        startTime = this.toTicks(startTime);\n\t        Tone.TimelineSignal.prototype.cancelScheduledValues.call(this, startTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set an array of arbitrary values starting at the given time for the given duration.\n\t\t *  @param {Float32Array} values\n\t\t *  @param {Time} startTime\n\t\t *  @param {Time} duration\n\t\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {\n\t        startTime = this.toTicks(startTime);\n\t        duration = this.toTicks(duration);\n\t        Tone.TimelineSignal.prototype.setValueCurveAtTime.call(this, values, startTime, duration, scaling);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Dispose and disconnect\n\t\t * @return {Tone.TransportTimelineSignal} this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.dispose = function () {\n\t        Tone.Transport.clear(this._synced);\n\t        Tone.Transport.off('start stop pause', this._syncedCallback);\n\t        this._events.cancel(0);\n\t        Tone.TimelineSignal.prototype.dispose.call(this);\n\t        this._outputSig.dispose();\n\t        this._outputSig = null;\n\t    };\n\t    return Tone.TransportTimelineSignal;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * @class Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n\t\t *        Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n\t\t *        amount of time each small chunk of audio is played for and the overlap is the\n\t\t *        amount of crossfading transition time between successive grains.\n\t\t * @extends {Tone.Source}\n\t\t * @param {String|Tone.Buffer} url\tThe url to load, or the Tone.Buffer to play.\n\t\t * @param {Function=} callback The callback to invoke after the url is loaded.\n\t\t */\n\t    Tone.GrainPlayer = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.GrainPlayer);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The audio buffer belonging to the player.\n\t\t\t *  @type  {Tone.Buffer}\n\t\t\t */\n\t        this.buffer = new Tone.Buffer(options.url, options.onload);\n\t        /**\n\t\t\t *  Create a repeating tick to schedule\n\t\t\t *  the grains.\n\t\t\t *  @type  {Tone.Clock}\n\t\t\t *  @private\n\t\t\t */\n\t        this._clock = new Tone.Clock(this._tick.bind(this), options.grainSize);\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = 0;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = 0;\n\t        /**\n\t\t\t * All of the currently playing BufferSources\n\t\t\t * @type {Array}\n\t\t\t * @private\n\t\t\t */\n\t        this._activeSources = [];\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._grainSize = options.grainSize;\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Number}\n\t\t\t */\n\t        this._overlap = options.overlap;\n\t        /**\n\t\t\t *  Adjust the pitch independently of the playbackRate.\n\t\t\t *  @type  {Cents}\n\t\t\t */\n\t        this.detune = options.detune;\n\t        //setup\n\t        this.overlap = options.overlap;\n\t        this.loop = options.loop;\n\t        this.playbackRate = options.playbackRate;\n\t        this.grainSize = options.grainSize;\n\t        this.loopStart = options.loopStart;\n\t        this.loopEnd = options.loopEnd;\n\t        this.reverse = options.reverse;\n\t        this._clock.on('stop', this._onstop.bind(this));\n\t    };\n\t    Tone.extend(Tone.GrainPlayer, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.GrainPlayer.defaults = {\n\t        'onload': Tone.noOp,\n\t        'overlap': 0.1,\n\t        'grainSize': 0.2,\n\t        'playbackRate': 1,\n\t        'detune': 0,\n\t        'loop': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t *  and/or duration which will play the buffer from a position\n\t\t *  within the buffer for the given duration.\n\t\t *\n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at.\n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length\n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.GrainPlayer} this\n\t\t *  @memberOf Tone.GrainPlayer#\n\t\t *  @method start\n\t\t *  @name start\n\t\t */\n\t    /**\n\t\t *  Internal start method\n\t\t *  @param {Time} time\n\t\t *  @param {Time} offset\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._start = function (time, offset, duration) {\n\t        offset = Tone.defaultArg(offset, 0);\n\t        offset = this.toSeconds(offset);\n\t        time = this.toSeconds(time);\n\t        this._offset = offset;\n\t        this._clock.start(time);\n\t        if (duration) {\n\t            this.stop(time + this.toSeconds(duration));\n\t        }\n\t    };\n\t    /**\n\t\t *  Internal start method\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._stop = function (time) {\n\t        this._clock.stop(time);\n\t    };\n\t    /**\n\t\t * Invoked when the clock is stopped\n\t\t * @param  {Number} time\n\t\t * @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._onstop = function (time) {\n\t        //stop the players\n\t        this._activeSources.forEach(function (source) {\n\t            source.stop(time, 0);\n\t        });\n\t    };\n\t    /**\n\t\t *  Invoked on each clock tick. scheduled a new\n\t\t *  grain at this time.\n\t\t *  @param  {Time}  time\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._tick = function (time) {\n\t        var fadeIn = this._offset < this._overlap ? 0 : this._overlap;\n\t        var source = new Tone.BufferSource({\n\t            'buffer': this.buffer,\n\t            'fadeIn': fadeIn,\n\t            'fadeOut': this._overlap,\n\t            'loop': this.loop,\n\t            'loopStart': this._loopStart,\n\t            'loopEnd': this._loopEnd,\n\t            'playbackRate': Tone.intervalToFrequencyRatio(this.detune / 100)\n\t        }).connect(this.output);\n\t        source.start(time, this._offset);\n\t        this._offset += this.grainSize;\n\t        source.stop(time + this.grainSize);\n\t        //add it to the active sources\n\t        this._activeSources.push(source);\n\t        //remove it when it's done\n\t        source.onended = function () {\n\t            var index = this._activeSources.indexOf(source);\n\t            if (index !== -1) {\n\t                this._activeSources.splice(index, 1);\n\t            }\n\t        }.bind(this);\n\t    };\n\t    /**\n\t\t *  Jump to a specific time and play it.\n\t\t *  @param  {Time}  offset  The offset to jump to.\n\t\t *  @param {Time=} time When to make the jump.\n\t\t *  @return  {Tone.GrainPlayer}  this\n\t\t */\n\t    Tone.GrainPlayer.prototype.seek = function (offset, time) {\n\t        this._offset = this.toSeconds(offset);\n\t        this._tick(this.toSeconds(time));\n\t        return this;\n\t    };\n\t    /**\n\t\t * The playback rate of the sample\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Positive}\n\t\t * @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this.grainSize = this._grainSize;\n\t        }\n\t    });\n\t    /**\n\t\t * The loop start time.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._loopStart;\n\t        },\n\t        set: function (time) {\n\t            this._loopStart = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * The loop end time.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._loopEnd;\n\t        },\n\t        set: function (time) {\n\t            this._loopEnd = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'reverse', {\n\t        get: function () {\n\t            return this.buffer.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this.buffer.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t * The size of each chunk of audio that the\n\t\t * buffer is chopped into and played back at.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name grainSize\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'grainSize', {\n\t        get: function () {\n\t            return this._grainSize;\n\t        },\n\t        set: function (size) {\n\t            this._grainSize = this.toSeconds(size);\n\t            this._clock.frequency.value = this._playbackRate / this._grainSize;\n\t        }\n\t    });\n\t    /**\n\t\t * This is the duration of the cross-fade between\n\t\t * sucessive grains.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name overlap\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'overlap', {\n\t        get: function () {\n\t            return this._overlap;\n\t        },\n\t        set: function (time) {\n\t            this._overlap = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up\n\t\t * @return {Tone.GrainPlayer} this\n\t\t */\n\t    Tone.GrainPlayer.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this.buffer.dispose();\n\t        this.buffer = null;\n\t        this._clock.dispose();\n\t        this._clock = null;\n\t        this._activeSources.forEach(function (source) {\n\t            source.dispose();\n\t        });\n\t        this._activeSources = null;\n\t        return this;\n\t    };\n\t    return Tone.GrainPlayer;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Player is an audio file player with start, loop, and stop functions.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Source} \n\t\t *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from\n\t\t *                                  which to load the AudioBuffer\n\t\t *  @param {function=} onload The function to invoke when the buffer is loaded. \n\t\t *                            Recommended to use Tone.Buffer.on('load') instead.\n\t\t *  @example\n\t\t * var player = new Tone.Player(\"./path/to/sample.mp3\").toMaster();\n\t\t * //play as soon as the buffer is loaded\n\t\t * player.autostart = true;\n\t\t */\n\t    Tone.Player = function (url) {\n\t        var options;\n\t        if (url instanceof Tone.Buffer) {\n\t            url = url.get();\n\t            options = Tone.Player.defaults;\n\t        } else {\n\t            options = Tone.defaults(arguments, [\n\t                'url',\n\t                'onload'\n\t            ], Tone.Player);\n\t        }\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t        this._source = null;\n\t        /**\n\t\t\t *  If the file should play as soon\n\t\t\t *  as the buffer is loaded. \n\t\t\t *  @type {boolean}\n\t\t\t *  @example\n\t\t\t * //will play as soon as it's loaded\n\t\t\t * var player = new Tone.Player({\n\t\t\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t\t\t * \t\"autostart\" : true,\n\t\t\t * }).toMaster();\n\t\t\t */\n\t        this.autostart = options.autostart;\n\t        /**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t */\n\t        this._buffer = new Tone.Buffer({\n\t            'url': options.url,\n\t            'onload': this._onload.bind(this, options.onload),\n\t            'reverse': options.reverse\n\t        });\n\t        if (url instanceof AudioBuffer) {\n\t            this._buffer.set(url);\n\t        }\n\t        /**\n\t\t\t *  if the buffer should loop once it's over\n\t\t\t *  @type {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  if 'loop' is true, the loop will start at this position\n\t\t\t *  @type {Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = options.loopStart;\n\t        /**\n\t\t\t *  if 'loop' is true, the loop will end at this position\n\t\t\t *  @type {Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = options.loopEnd;\n\t        /**\n\t\t\t *  the playback rate\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  Enabling retrigger will allow a player to be restarted\n\t\t\t *  before the the previous 'start' is done playing. Otherwise, \n\t\t\t *  successive calls to Tone.Player.start will only start\n\t\t\t *  the sample if it had played all the way through. \n\t\t\t *  @type {boolean}\n\t\t\t */\n\t        this.retrigger = options.retrigger;\n\t        /**\n\t\t\t *  The fadeIn time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeIn = options.fadeIn;\n\t        /**\n\t\t\t *  The fadeOut time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeOut = options.fadeOut;\n\t    };\n\t    Tone.extend(Tone.Player, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Player.defaults = {\n\t        'onload': Tone.noOp,\n\t        'playbackRate': 1,\n\t        'loop': false,\n\t        'autostart': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'retrigger': false,\n\t        'reverse': false,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0\n\t    };\n\t    /**\n\t\t *  Load the audio file as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads. \n\t\t *  Note: this does not need to be called if a url\n\t\t *  was passed in to the constructor. Only use this\n\t\t *  if you want to manually load a new url. \n\t\t * @param {string} url The url of the buffer to load.\n\t\t *                     Filetype support depends on the\n\t\t *                     browser.\n\t\t *  @param  {function=} callback The function to invoke once\n\t\t *                               the sample is loaded.\n\t\t *  @returns {Promise}\n\t\t */\n\t    Tone.Player.prototype.load = function (url, callback) {\n\t        return this._buffer.load(url, this._onload.bind(this, callback));\n\t    };\n\t    /**\n\t\t * Internal callback when the buffer is loaded.\n\t\t * @private\n\t\t */\n\t    Tone.Player.prototype._onload = function (callback) {\n\t        callback = Tone.defaultArg(callback, Tone.noOp);\n\t        callback(this);\n\t        if (this.autostart) {\n\t            this.start();\n\t        }\n\t    };\n\t    /**\n\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t *  and/or duration which will play the buffer from a position\n\t\t *  within the buffer for the given duration. \n\t\t *  \n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.Player} this\n\t\t *  @memberOf Tone.Player#\n\t\t *  @method start\n\t\t *  @name start\n\t\t */\n\t    /**\n\t\t *  Internal start method\n\t\t *  @private\n\t\t */\n\t    Tone.Player.prototype._start = function (startTime, offset, duration) {\n\t        //if it's a loop the default offset is the loopstart point\n\t        if (this._loop) {\n\t            offset = Tone.defaultArg(offset, this._loopStart);\n\t        } else {\n\t            //otherwise the default offset is 0\n\t            offset = Tone.defaultArg(offset, 0);\n\t        }\n\t        //compute the values in seconds\n\t        offset = this.toSeconds(offset);\n\t        duration = Tone.defaultArg(duration, Math.max(this._buffer.duration - offset, 0));\n\t        duration = this.toSeconds(duration);\n\t        startTime = this.toSeconds(startTime);\n\t        // //make the source\n\t        this._source = new Tone.BufferSource({\n\t            'buffer': this._buffer,\n\t            'loop': this._loop,\n\t            'loopStart': this._loopStart,\n\t            'loopEnd': this._loopEnd,\n\t            'playbackRate': this._playbackRate,\n\t            'fadeIn': this.fadeIn,\n\t            'fadeOut': this.fadeOut\n\t        }).connect(this.output);\n\t        //set the looping properties\n\t        if (!this._loop && !this._synced) {\n\t            //if it's not looping, set the state change at the end of the sample\n\t            this._state.setStateAtTime(Tone.State.Stopped, startTime + duration);\n\t        }\n\t        //start it\n\t        if (this._loop) {\n\t            this._source.start(startTime, offset);\n\t        } else {\n\t            this._source.start(startTime, offset, duration);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop playback.\n\t\t *  @private\n\t\t *  @param  {Time} [time=now]\n\t\t *  @returns {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype._stop = function (time) {\n\t        if (this._source) {\n\t            this._source.stop(this.toSeconds(time));\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Seek to a specific time in the player's buffer. If the \n\t\t *  source is no longer playing at that time, it will stop.\n\t\t *  If you seek to a time that \n\t\t *  @param {Time} offset The time to seek to.\n\t\t *  @param {Time=} time The time for the seek event to occur.\n\t\t *  @return {Tone.Player} this\n\t\t *  @example\n\t\t * source.start(0.2);\n\t\t * source.stop(0.4);\n\t\t */\n\t    Tone.Player.prototype.seek = function (offset, time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            offset = this.toSeconds(offset);\n\t            // if it's currently playing, stop it\n\t            this._stop(time);\n\t            //restart it at the given time\n\t            this._start(time, offset);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the loop start and end. Will only loop if loop is \n\t\t *  set to true. \n\t\t *  @param {Time} loopStart The loop end time\n\t\t *  @param {Time} loopEnd The loop end time\n\t\t *  @returns {Tone.Player} this\n\t\t *  @example\n\t\t * //loop 0.1 seconds of the file. \n\t\t * player.setLoopPoints(0.2, 0.3);\n\t\t * player.loop = true;\n\t\t */\n\t    Tone.Player.prototype.setLoopPoints = function (loopStart, loopEnd) {\n\t        this.loopStart = loopStart;\n\t        this.loopEnd = loopEnd;\n\t        return this;\n\t    };\n\t    /**\n\t\t * If loop is true, the loop will start at this position. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._loopStart;\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = loopStart;\n\t            if (this._source) {\n\t                this._source.loopStart = this.toSeconds(loopStart);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * If loop is true, the loop will end at this position.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._loopEnd;\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = loopEnd;\n\t            if (this._source) {\n\t                this._source.loopEnd = this.toSeconds(loopEnd);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The audio buffer belonging to the player. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {Tone.Buffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer;\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t        }\n\t    });\n\t    /**\n\t\t * If the buffer should loop once it's over. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {boolean}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            if (this._source) {\n\t                this._source.loop = loop;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The playback speed. 1 is normal speed. This is not a signal because\n\t\t * Safari and iOS currently don't support playbackRate as a signal.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {number}\n\t\t * @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            if (this._source) {\n\t                this._source.playbackRate.value = rate;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.Player#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'reverse', {\n\t        get: function () {\n\t            return this._buffer.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this._buffer.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t * If all the buffer is loaded\n\t\t * @memberOf Tone.Player#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loaded', {\n\t        get: function () {\n\t            return this._buffer.loaded;\n\t        }\n\t    });\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._source !== null) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    return Tone.Player;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Players combines multiple [Tone.Player](Player) objects.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Object} urls An object mapping a name to a url.\n\t\t *  @param {function=} onload The function to invoke when the buffer is loaded.\n\t\t */\n\t    Tone.Players = function (urls) {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        args.shift();\n\t        var options = Tone.defaults(args, ['onload'], Tone.Players);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        //make the output explicitly stereo\n\t        this._volume.output.output.channelCount = 2;\n\t        this._volume.output.output.channelCountMode = 'explicit';\n\t        //mute initially\n\t        this.mute = options.mute;\n\t        /**\n\t\t\t * The container of all of the players\n\t\t\t * @type {Object}\n\t\t\t * @private\n\t\t\t */\n\t        this._players = {};\n\t        /**\n\t\t\t * The loading count\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._loadingCount = 0;\n\t        /**\n\t\t\t * private holder of the fadeIn time\n\t\t\t * @type {Time}\n\t\t\t * @private\n\t\t\t */\n\t        this._fadeIn = options.fadeIn;\n\t        /**\n\t\t\t * private holder of the fadeOut time\n\t\t\t * @type {Time}\n\t\t\t * @private\n\t\t\t */\n\t        this._fadeOut = options.fadeOut;\n\t        //add all of the players\n\t        for (var name in urls) {\n\t            this._loadingCount++;\n\t            this.add(name, urls[name], this._bufferLoaded.bind(this, options.onload));\n\t        }\n\t    };\n\t    Tone.extend(Tone.Players, Tone.AudioNode);\n\t    /**\n\t\t * The default values\n\t\t * @type {Object}\n\t\t */\n\t    Tone.Players.defaults = {\n\t        'volume': 0,\n\t        'mute': false,\n\t        'onload': Tone.noOp,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0\n\t    };\n\t    /**\n\t\t *  A buffer was loaded. decrement the counter.\n\t\t *  @param  {Function}  callback\n\t\t *  @private\n\t\t */\n\t    Tone.Players.prototype._bufferLoaded = function (callback) {\n\t        this._loadingCount--;\n\t        if (this._loadingCount === 0 && callback) {\n\t            callback(this);\n\t        }\n\t    };\n\t    /**\n\t\t * Mute the output.\n\t\t * @memberOf Tone.Source#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * source.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Players.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t * The fadeIn time of the amplitude envelope.\n\t\t * @memberOf Tone.Source#\n\t\t * @type {Time}\n\t\t * @name fadeIn\n\t\t */\n\t    Object.defineProperty(Tone.Players.prototype, 'fadeIn', {\n\t        get: function () {\n\t            return this._fadeIn;\n\t        },\n\t        set: function (fadeIn) {\n\t            this._fadeIn = fadeIn;\n\t            this._forEach(function (player) {\n\t                player.fadeIn = fadeIn;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The fadeOut time of the amplitude envelope.\n\t\t * @memberOf Tone.Source#\n\t\t * @type {Time}\n\t\t * @name fadeOut\n\t\t */\n\t    Object.defineProperty(Tone.Players.prototype, 'fadeOut', {\n\t        get: function () {\n\t            return this._fadeOut;\n\t        },\n\t        set: function (fadeOut) {\n\t            this._fadeOut = fadeOut;\n\t            this._forEach(function (player) {\n\t                player.fadeOut = fadeOut;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The state of the players object. Returns \"started\" if any of the players are playing.\n\t\t * @memberOf Tone.Players#\n\t\t * @type {String}\n\t\t * @name state\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Players.prototype, 'state', {\n\t        get: function () {\n\t            var playing = false;\n\t            this._forEach(function (player) {\n\t                playing = playing || player.state === Tone.State.Started;\n\t            });\n\t            return playing ? Tone.State.Started : Tone.State.Stopped;\n\t        }\n\t    });\n\t    /**\n\t\t *  True if the buffers object has a buffer by that name.\n\t\t *  @param  {String|Number}  name  The key or index of the\n\t\t *                                 buffer.\n\t\t *  @return  {Boolean}\n\t\t */\n\t    Tone.Players.prototype.has = function (name) {\n\t        return this._players.hasOwnProperty(name);\n\t    };\n\t    /**\n\t\t *  Get a player by name.\n\t\t *  @param  {String}  name  The players name as defined in\n\t\t *                          the constructor object or `add` method.\n\t\t *  @return  {Tone.Player}\n\t\t */\n\t    Tone.Players.prototype.get = function (name) {\n\t        if (this.has(name)) {\n\t            return this._players[name];\n\t        } else {\n\t            throw new Error('Tone.Players: no player named ' + name);\n\t        }\n\t    };\n\t    /**\n\t\t * Iterate over all of the players\n\t\t * @param  {Function} callback\n\t\t * @return {Tone.Players}            this\n\t\t * @private\n\t\t */\n\t    Tone.Players.prototype._forEach = function (callback) {\n\t        for (var playerName in this._players) {\n\t            callback(this._players[playerName], playerName);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * If all the buffers are loaded or not\n\t\t * @memberOf Tone.Players#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Players.prototype, 'loaded', {\n\t        get: function () {\n\t            var isLoaded = true;\n\t            this._forEach(function (player) {\n\t                isLoaded = isLoaded && player.loaded;\n\t            });\n\t            return isLoaded;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a player by name and url to the Players\n\t\t *  @param  {String}    name      A unique name to give the player\n\t\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,\n\t\t *                                                 or a buffer which will be added\n\t\t *                                                 with the given name.\n\t\t *  @param  {Function=}  callback  The callback to invoke\n\t\t *                                 when the url is loaded.\n\t\t */\n\t    Tone.Players.prototype.add = function (name, url, callback) {\n\t        this._players[name] = new Tone.Player(url, callback).connect(this.output);\n\t        this._players[name].fadeIn = this._fadeIn;\n\t        this._players[name].fadeOut = this._fadeOut;\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop all of the players at the given time\n\t\t * @param {Time} time The time to stop all of the players.\n\t\t * @return {Tone.Players} this\n\t\t */\n\t    Tone.Players.prototype.stopAll = function (time) {\n\t        this._forEach(function (player) {\n\t            player.stop(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Players} this\n\t\t */\n\t    Tone.Players.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this._writable('volume');\n\t        this.volume = null;\n\t        this.output = null;\n\t        this._forEach(function (player) {\n\t            player.dispose();\n\t        });\n\t        this._players = null;\n\t        return this;\n\t    };\n\t    return Tone.Players;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.UserMedia uses MediaDevices.getUserMedia to open up\n\t\t *          and external microphone or audio input. Check\n\t\t *          [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n\t\t *          to see which browsers are supported. Access to an external input\n\t\t *          is limited to secure (HTTPS) connections.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Decibels=} volume The level of the input\n\t\t *  @example\n\t\t * //list the inputs and open the third one\n\t\t * var motu = new Tone.UserMedia();\n\t\t *\n\t\t * //opening the input asks the user to activate their mic\n\t\t * motu.open().then(function(){\n\t\t * \t//opening is activates the microphone\n\t\t * \t//starting lets audio through\n\t\t * \tmotu.start(10);\n\t\t * });\n\t\t */\n\t    Tone.UserMedia = function () {\n\t        var options = Tone.defaults(arguments, ['volume'], Tone.UserMedia);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The MediaStreamNode\n\t\t\t *  @type {MediaStreamAudioSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mediaStream = null;\n\t        /**\n\t\t\t *  The media stream created by getUserMedia.\n\t\t\t *  @type {LocalMediaStream}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stream = null;\n\t        /**\n\t\t\t *  The open device\n\t\t\t *  @type  {MediaDeviceInfo}\n\t\t\t *  @private\n\t\t\t */\n\t        this._device = null;\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * input.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.UserMedia, Tone.AudioNode);\n\t    /**\n\t\t * the default parameters\n\t\t * @type {Object}\n\t\t */\n\t    Tone.UserMedia.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Open the media stream. If a string is passed in, it is assumed\n\t\t *  to be the label or id of the stream, if a number is passed in,\n\t\t *  it is the input number of the stream.\n\t\t *  @param  {String|Number} [labelOrId=\"default\"] The label or id of the audio input media device.\n\t\t *                                                With no argument, the default stream is opened.\n\t\t *  @return {Promise} The promise is resolved when the stream is open.\n\t\t */\n\t    Tone.UserMedia.prototype.open = function (labelOrId) {\n\t        labelOrId = Tone.defaultArg(labelOrId, 'default');\n\t        return Tone.UserMedia.enumerateDevices().then(function (devices) {\n\t            var device;\n\t            if (Tone.isNumber(labelOrId)) {\n\t                device = devices[labelOrId];\n\t            } else {\n\t                device = devices.find(function (device) {\n\t                    return device.label === labelOrId || device.deviceId === labelOrId;\n\t                });\n\t                //didn't find a matching device\n\t                if (!device) {\n\t                    throw new Error('Tone.UserMedia: no matching device: ' + labelOrId);\n\t                }\n\t            }\n\t            this._device = device;\n\t            //do getUserMedia\n\t            var constraints = {\n\t                audio: {\n\t                    'deviceId': device.deviceId,\n\t                    'echoCancellation': false,\n\t                    'sampleRate': this.context.sampleRate\n\t                }\n\t            };\n\t            return navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n\t                //start a new source only if the previous one is closed\n\t                if (!this._stream) {\n\t                    this._stream = stream;\n\t                    //Wrap a MediaStreamSourceNode around the live input stream.\n\t                    this._mediaStream = this.context.createMediaStreamSource(stream);\n\t                    //Connect the MediaStreamSourceNode to a gate gain node\n\t                    this._mediaStream.connect(this.output);\n\t                }\n\t                return this;\n\t            }.bind(this));\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Close the media stream\n\t\t *  @return {Tone.UserMedia} this\n\t\t */\n\t    Tone.UserMedia.prototype.close = function () {\n\t        if (this._stream) {\n\t            this._stream.getAudioTracks().forEach(function (track) {\n\t                track.stop();\n\t            });\n\t            this._stream = null;\n\t            //remove the old media stream\n\t            this._mediaStream.disconnect();\n\t            this._mediaStream = null;\n\t        }\n\t        this._device = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns a promise which resolves with the list of audio input devices available.\n\t\t *  @return {Promise} The promise that is resolved with the devices\n\t\t *  @static\n\t\t *  @example\n\t\t * Tone.UserMedia.enumerateDevices().then(function(devices){\n\t\t * \tconsole.log(devices)\n\t\t * })\n\t\t */\n\t    Tone.UserMedia.enumerateDevices = function () {\n\t        return navigator.mediaDevices.enumerateDevices().then(function (devices) {\n\t            return devices.filter(function (device) {\n\t                return device.kind === 'audioinput';\n\t            });\n\t        });\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, \"started\" when the microphone is open\n\t\t *  and \"stopped\" when the mic is closed.\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'state', {\n\t        get: function () {\n\t            return this._stream && this._stream.active ? Tone.State.Started : Tone.State.Stopped;\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns an identifier for the represented device that is\n\t\t * \tpersisted across sessions. It is un-guessable by other applications and\n\t\t * \tunique to the origin of the calling application. It is reset when the\n\t\t * \tuser clears cookies (for Private Browsing, a different identifier is\n\t\t * \tused that is not persisted across sessions). Returns undefined when the\n\t\t * \tdevice is not open.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name deviceId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'deviceId', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.deviceId;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns a group identifier. Two devices have the\n\t\t * \tsame group identifier if they belong to the same physical device.\n\t\t * \tReturns undefined when the device is not open.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name groupId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'groupId', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.groupId;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns a label describing this device (for example \"Built-in Microphone\").\n\t\t * \tReturns undefined when the device is not open or label is not available\n\t\t * \tbecause of permissions.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name groupId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'label', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.label;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output.\n\t\t * @memberOf Tone.UserMedia#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * userMedia.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up.\n\t\t * @return {Tone.UserMedia} this\n\t\t */\n\t    Tone.UserMedia.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.close();\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  If getUserMedia is supported by the browser.\n\t\t *  @type  {Boolean}\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name supported\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia, 'supported', {\n\t        get: function () {\n\t            return !Tone.isUndef(navigator.mediaDevices) && Tone.isFunction(navigator.mediaDevices.getUserMedia);\n\t        }\n\t    });\n\t    return Tone.UserMedia;\n\t});\n\t\n\treturn Tone;\n}));\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(24);\nmodule.exports = __webpack_require__(29);\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n\n\nif (typeof Promise === 'undefined') {\n  // Rejection tracking prevents a common issue where React gets into an\n  // inconsistent state due to an error, but it gets swallowed by a Promise,\n  // and the user has no idea what causes React's erratic future behavior.\n  __webpack_require__(25).enable();\n  window.Promise = __webpack_require__(27);\n}\n\n// fetch() polyfill for making API calls.\n__webpack_require__(28);\n\n// Object.assign() is commonly used with React.\n// It will use the native implementation if it's present and isn't buggy.\nObject.assign = __webpack_require__(2);\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar Promise = __webpack_require__(7);\n\nvar DEFAULT_WHITELIST = [\n  ReferenceError,\n  TypeError,\n  RangeError\n];\n\nvar enabled = false;\nexports.disable = disable;\nfunction disable() {\n  enabled = false;\n  Promise._47 = null;\n  Promise._71 = null;\n}\n\nexports.enable = enable;\nfunction enable(options) {\n  options = options || {};\n  if (enabled) disable();\n  enabled = true;\n  var id = 0;\n  var displayId = 0;\n  var rejections = {};\n  Promise._47 = function (promise) {\n    if (\n      promise._83 === 2 && // IS REJECTED\n      rejections[promise._56]\n    ) {\n      if (rejections[promise._56].logged) {\n        onHandled(promise._56);\n      } else {\n        clearTimeout(rejections[promise._56].timeout);\n      }\n      delete rejections[promise._56];\n    }\n  };\n  Promise._71 = function (promise, err) {\n    if (promise._75 === 0) { // not yet handled\n      promise._56 = id++;\n      rejections[promise._56] = {\n        displayId: null,\n        error: err,\n        timeout: setTimeout(\n          onUnhandled.bind(null, promise._56),\n          // For reference errors and type errors, this almost always\n          // means the programmer made a mistake, so log them after just\n          // 100ms\n          // otherwise, wait 2 seconds to see if they get handled\n          matchWhitelist(err, DEFAULT_WHITELIST)\n            ? 100\n            : 2000\n        ),\n        logged: false\n      };\n    }\n  };\n  function onUnhandled(id) {\n    if (\n      options.allRejections ||\n      matchWhitelist(\n        rejections[id].error,\n        options.whitelist || DEFAULT_WHITELIST\n      )\n    ) {\n      rejections[id].displayId = displayId++;\n      if (options.onUnhandled) {\n        rejections[id].logged = true;\n        options.onUnhandled(\n          rejections[id].displayId,\n          rejections[id].error\n        );\n      } else {\n        rejections[id].logged = true;\n        logError(\n          rejections[id].displayId,\n          rejections[id].error\n        );\n      }\n    }\n  }\n  function onHandled(id) {\n    if (rejections[id].logged) {\n      if (options.onHandled) {\n        options.onHandled(rejections[id].displayId, rejections[id].error);\n      } else if (!rejections[id].onUnhandled) {\n        console.warn(\n          'Promise Rejection Handled (id: ' + rejections[id].displayId + '):'\n        );\n        console.warn(\n          '  This means you can ignore any previous messages of the form \"Possible Unhandled Promise Rejection\" with id ' +\n          rejections[id].displayId + '.'\n        );\n      }\n    }\n  }\n}\n\nfunction logError(id, error) {\n  console.warn('Possible Unhandled Promise Rejection (id: ' + id + '):');\n  var errStr = (error && (error.stack || error)) + '';\n  errStr.split('\\n').forEach(function (line) {\n    console.warn('  ' + line);\n  });\n}\n\nfunction matchWhitelist(error, list) {\n  return list.some(function (cls) {\n    return error instanceof cls;\n  });\n}\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\n// Use the fastest means possible to execute a task in its own turn, with\n// priority over other events including IO, animation, reflow, and redraw\n// events in browsers.\n//\n// An exception thrown by a task will permanently interrupt the processing of\n// subsequent tasks. The higher level `asap` function ensures that if an\n// exception is thrown by a task, that the task queue will continue flushing as\n// soon as possible, but if you use `rawAsap` directly, you are responsible to\n// either ensure that no exceptions are thrown from your task, or to manually\n// call `rawAsap.requestFlush` if an exception is thrown.\nmodule.exports = rawAsap;\nfunction rawAsap(task) {\n    if (!queue.length) {\n        requestFlush();\n        flushing = true;\n    }\n    // Equivalent to push, but avoids a function call.\n    queue[queue.length] = task;\n}\n\nvar queue = [];\n// Once a flush has been requested, no further calls to `requestFlush` are\n// necessary until the next `flush` completes.\nvar flushing = false;\n// `requestFlush` is an implementation-specific method that attempts to kick\n// off a `flush` event as quickly as possible. `flush` will attempt to exhaust\n// the event queue before yielding to the browser's own event loop.\nvar requestFlush;\n// The position of the next task to execute in the task queue. This is\n// preserved between calls to `flush` so that it can be resumed if\n// a task throws an exception.\nvar index = 0;\n// If a task schedules additional tasks recursively, the task queue can grow\n// unbounded. To prevent memory exhaustion, the task queue will periodically\n// truncate already-completed tasks.\nvar capacity = 1024;\n\n// The flush function processes all tasks that have been scheduled with\n// `rawAsap` unless and until one of those tasks throws an exception.\n// If a task throws an exception, `flush` ensures that its state will remain\n// consistent and will resume where it left off when called again.\n// However, `flush` does not make any arrangements to be called again if an\n// exception is thrown.\nfunction flush() {\n    while (index < queue.length) {\n        var currentIndex = index;\n        // Advance the index before calling the task. This ensures that we will\n        // begin flushing on the next task the task throws an error.\n        index = index + 1;\n        queue[currentIndex].call();\n        // Prevent leaking memory for long chains of recursive calls to `asap`.\n        // If we call `asap` within tasks scheduled by `asap`, the queue will\n        // grow, but to avoid an O(n) walk for every task we execute, we don't\n        // shift tasks off the queue after they have been executed.\n        // Instead, we periodically shift 1024 tasks off the queue.\n        if (index > capacity) {\n            // Manually shift all values starting at the index back to the\n            // beginning of the queue.\n            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {\n                queue[scan] = queue[scan + index];\n            }\n            queue.length -= index;\n            index = 0;\n        }\n    }\n    queue.length = 0;\n    index = 0;\n    flushing = false;\n}\n\n// `requestFlush` is implemented using a strategy based on data collected from\n// every available SauceLabs Selenium web driver worker at time of writing.\n// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593\n\n// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that\n// have WebKitMutationObserver but not un-prefixed MutationObserver.\n// Must use `global` or `self` instead of `window` to work in both frames and web\n// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.\n\n/* globals self */\nvar scope = typeof global !== \"undefined\" ? global : self;\nvar BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;\n\n// MutationObservers are desirable because they have high priority and work\n// reliably everywhere they are implemented.\n// They are implemented in all modern browsers.\n//\n// - Android 4-4.3\n// - Chrome 26-34\n// - Firefox 14-29\n// - Internet Explorer 11\n// - iPad Safari 6-7.1\n// - iPhone Safari 7-7.1\n// - Safari 6-7\nif (typeof BrowserMutationObserver === \"function\") {\n    requestFlush = makeRequestCallFromMutationObserver(flush);\n\n// MessageChannels are desirable because they give direct access to the HTML\n// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera\n// 11-12, and in web workers in many engines.\n// Although message channels yield to any queued rendering and IO tasks, they\n// would be better than imposing the 4ms delay of timers.\n// However, they do not work reliably in Internet Explorer or Safari.\n\n// Internet Explorer 10 is the only browser that has setImmediate but does\n// not have MutationObservers.\n// Although setImmediate yields to the browser's renderer, it would be\n// preferrable to falling back to setTimeout since it does not have\n// the minimum 4ms penalty.\n// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and\n// Desktop to a lesser extent) that renders both setImmediate and\n// MessageChannel useless for the purposes of ASAP.\n// https://github.com/kriskowal/q/issues/396\n\n// Timers are implemented universally.\n// We fall back to timers in workers in most engines, and in foreground\n// contexts in the following browsers.\n// However, note that even this simple case requires nuances to operate in a\n// broad spectrum of browsers.\n//\n// - Firefox 3-13\n// - Internet Explorer 6-9\n// - iPad Safari 4.3\n// - Lynx 2.8.7\n} else {\n    requestFlush = makeRequestCallFromTimer(flush);\n}\n\n// `requestFlush` requests that the high priority event queue be flushed as\n// soon as possible.\n// This is useful to prevent an error thrown in a task from stalling the event\n// queue if the exception handled by Node.jsâs\n// `process.on(\"uncaughtException\")` or by a domain.\nrawAsap.requestFlush = requestFlush;\n\n// To request a high priority event, we induce a mutation observer by toggling\n// the text of a text node between \"1\" and \"-1\".\nfunction makeRequestCallFromMutationObserver(callback) {\n    var toggle = 1;\n    var observer = new BrowserMutationObserver(callback);\n    var node = document.createTextNode(\"\");\n    observer.observe(node, {characterData: true});\n    return function requestCall() {\n        toggle = -toggle;\n        node.data = toggle;\n    };\n}\n\n// The message channel technique was discovered by Malte Ubl and was the\n// original foundation for this library.\n// http://www.nonblocking.io/2011/06/windownexttick.html\n\n// Safari 6.0.5 (at least) intermittently fails to create message ports on a\n// page's first load. Thankfully, this version of Safari supports\n// MutationObservers, so we don't need to fall back in that case.\n\n// function makeRequestCallFromMessageChannel(callback) {\n//     var channel = new MessageChannel();\n//     channel.port1.onmessage = callback;\n//     return function requestCall() {\n//         channel.port2.postMessage(0);\n//     };\n// }\n\n// For reasons explained above, we are also unable to use `setImmediate`\n// under any circumstances.\n// Even if we were, there is another bug in Internet Explorer 10.\n// It is not sufficient to assign `setImmediate` to `requestFlush` because\n// `setImmediate` must be called *by name* and therefore must be wrapped in a\n// closure.\n// Never forget.\n\n// function makeRequestCallFromSetImmediate(callback) {\n//     return function requestCall() {\n//         setImmediate(callback);\n//     };\n// }\n\n// Safari 6.0 has a problem where timers will get lost while the user is\n// scrolling. This problem does not impact ASAP because Safari 6.0 supports\n// mutation observers, so that implementation is used instead.\n// However, if we ever elect to use timers in Safari, the prevalent work-around\n// is to add a scroll event listener that calls for a flush.\n\n// `setTimeout` does not call the passed callback if the delay is less than\n// approximately 7 in web workers in Firefox 8 through 18, and sometimes not\n// even then.\n\nfunction makeRequestCallFromTimer(callback) {\n    return function requestCall() {\n        // We dispatch a timeout with a specified delay of 0 for engines that\n        // can reliably accommodate that request. This will usually be snapped\n        // to a 4 milisecond delay, but once we're flushing, there's no delay\n        // between events.\n        var timeoutHandle = setTimeout(handleTimer, 0);\n        // However, since this timer gets frequently dropped in Firefox\n        // workers, we enlist an interval handle that will try to fire\n        // an event 20 times per second until it succeeds.\n        var intervalHandle = setInterval(handleTimer, 50);\n\n        function handleTimer() {\n            // Whichever timer succeeds will cancel both timers and\n            // execute the callback.\n            clearTimeout(timeoutHandle);\n            clearInterval(intervalHandle);\n            callback();\n        }\n    };\n}\n\n// This is for `asap.js` only.\n// Its name will be periodically randomized to break any code that depends on\n// its existence.\nrawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;\n\n// ASAP was originally a nextTick shim included in Q. This was factored out\n// into this ASAP package. It was later adapted to RSVP which made further\n// amendments. These decisions, particularly to marginalize MessageChannel and\n// to capture the MutationObserver implementation in a closure, were integrated\n// back into ASAP proper.\n// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8)))\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n//This file contains the ES6 extensions to the core Promises/A+ API\n\nvar Promise = __webpack_require__(7);\n\nmodule.exports = Promise;\n\n/* Static Functions */\n\nvar TRUE = valuePromise(true);\nvar FALSE = valuePromise(false);\nvar NULL = valuePromise(null);\nvar UNDEFINED = valuePromise(undefined);\nvar ZERO = valuePromise(0);\nvar EMPTYSTRING = valuePromise('');\n\nfunction valuePromise(value) {\n  var p = new Promise(Promise._44);\n  p._83 = 1;\n  p._18 = value;\n  return p;\n}\nPromise.resolve = function (value) {\n  if (value instanceof Promise) return value;\n\n  if (value === null) return NULL;\n  if (value === undefined) return UNDEFINED;\n  if (value === true) return TRUE;\n  if (value === false) return FALSE;\n  if (value === 0) return ZERO;\n  if (value === '') return EMPTYSTRING;\n\n  if (typeof value === 'object' || typeof value === 'function') {\n    try {\n      var then = value.then;\n      if (typeof then === 'function') {\n        return new Promise(then.bind(value));\n      }\n    } catch (ex) {\n      return new Promise(function (resolve, reject) {\n        reject(ex);\n      });\n    }\n  }\n  return valuePromise(value);\n};\n\nPromise.all = function (arr) {\n  var args = Array.prototype.slice.call(arr);\n\n  return new Promise(function (resolve, reject) {\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n    function res(i, val) {\n      if (val && (typeof val === 'object' || typeof val === 'function')) {\n        if (val instanceof Promise && val.then === Promise.prototype.then) {\n          while (val._83 === 3) {\n            val = val._18;\n          }\n          if (val._83 === 1) return res(i, val._18);\n          if (val._83 === 2) reject(val._18);\n          val.then(function (val) {\n            res(i, val);\n          }, reject);\n          return;\n        } else {\n          var then = val.then;\n          if (typeof then === 'function') {\n            var p = new Promise(then.bind(val));\n            p.then(function (val) {\n              res(i, val);\n            }, reject);\n            return;\n          }\n        }\n      }\n      args[i] = val;\n      if (--remaining === 0) {\n        resolve(args);\n      }\n    }\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.reject = function (value) {\n  return new Promise(function (resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function (values) {\n  return new Promise(function (resolve, reject) {\n    values.forEach(function(value){\n      Promise.resolve(value).then(resolve, reject);\n    });\n  });\n};\n\n/* Prototype Methods */\n\nPromise.prototype['catch'] = function (onRejected) {\n  return this.then(null, onRejected);\n};\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports) {\n\n(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_dom__ = __webpack_require__(31);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_dom___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_dom__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__index_css__ = __webpack_require__(41);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__index_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__index_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__App__ = __webpack_require__(42);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__registerServiceWorker__ = __webpack_require__(82);\n__WEBPACK_IMPORTED_MODULE_1_react_dom___default.a.render(__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__App__[\"a\" /* default */],null),document.getElementById('root'));Object(__WEBPACK_IMPORTED_MODULE_4__registerServiceWorker__[\"a\" /* default */])();\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/*\n React v16.0.0\n react.production.min.js\n\n Copyright (c) 2013-present, Facebook, Inc.\n\n This source code is licensed under the MIT license found in the\n LICENSE file in the root directory of this source tree.\n*/\nvar f=__webpack_require__(2),p=__webpack_require__(9);__webpack_require__(10);var r=__webpack_require__(4);\nfunction t(a){for(var b=arguments.length-1,d=\"Minified React error #\"+a+\"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\\x3d\"+a,e=0;e<b;e++)d+=\"\\x26args[]\\x3d\"+encodeURIComponent(arguments[e+1]);b=Error(d+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\");b.name=\"Invariant Violation\";b.framesToPop=1;throw b;}\nvar u={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function v(a,b,d){this.props=a;this.context=b;this.refs=p;this.updater=d||u}v.prototype.isReactComponent={};v.prototype.setState=function(a,b){\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a?t(\"85\"):void 0;this.updater.enqueueSetState(this,a,b,\"setState\")};v.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};\nfunction w(a,b,d){this.props=a;this.context=b;this.refs=p;this.updater=d||u}function x(){}x.prototype=v.prototype;var y=w.prototype=new x;y.constructor=w;f(y,v.prototype);y.isPureReactComponent=!0;function z(a,b,d){this.props=a;this.context=b;this.refs=p;this.updater=d||u}var A=z.prototype=new x;A.constructor=z;f(A,v.prototype);A.unstable_isAsyncReactComponent=!0;A.render=function(){return this.props.children};\nvar B={Component:v,PureComponent:w,AsyncComponent:z},C={current:null},D=Object.prototype.hasOwnProperty,E=\"function\"===typeof Symbol&&Symbol[\"for\"]&&Symbol[\"for\"](\"react.element\")||60103,F={key:!0,ref:!0,__self:!0,__source:!0};function G(a,b,d,e,c,g,k){return{$$typeof:E,type:a,key:b,ref:d,props:k,_owner:g}}\nG.createElement=function(a,b,d){var e,c={},g=null,k=null,m=null,q=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=\"\"+b.key),m=void 0===b.__self?null:b.__self,q=void 0===b.__source?null:b.__source,b)D.call(b,e)&&!F.hasOwnProperty(e)&&(c[e]=b[e]);var l=arguments.length-2;if(1===l)c.children=d;else if(1<l){for(var h=Array(l),n=0;n<l;n++)h[n]=arguments[n+2];c.children=h}if(a&&a.defaultProps)for(e in l=a.defaultProps,l)void 0===c[e]&&(c[e]=l[e]);return G(a,g,k,m,q,C.current,c)};\nG.createFactory=function(a){var b=G.createElement.bind(null,a);b.type=a;return b};G.cloneAndReplaceKey=function(a,b){return G(a.type,b,a.ref,a._self,a._source,a._owner,a.props)};\nG.cloneElement=function(a,b,d){var e=f({},a.props),c=a.key,g=a.ref,k=a._self,m=a._source,q=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,q=C.current);void 0!==b.key&&(c=\"\"+b.key);if(a.type&&a.type.defaultProps)var l=a.type.defaultProps;for(h in b)D.call(b,h)&&!F.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==l?l[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=d;else if(1<h){l=Array(h);for(var n=0;n<h;n++)l[n]=arguments[n+2];e.children=l}return G(a.type,c,g,k,m,q,e)};\nG.isValidElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===E};var H=\"function\"===typeof Symbol&&Symbol.iterator,I=\"function\"===typeof Symbol&&Symbol[\"for\"]&&Symbol[\"for\"](\"react.element\")||60103;function escape(a){var b={\"\\x3d\":\"\\x3d0\",\":\":\"\\x3d2\"};return\"$\"+(\"\"+a).replace(/[=:]/g,function(a){return b[a]})}var J=/\\/+/g,K=[];\nfunction L(a,b,d,e){if(K.length){var c=K.pop();c.result=a;c.keyPrefix=b;c.func=d;c.context=e;c.count=0;return c}return{result:a,keyPrefix:b,func:d,context:e,count:0}}function M(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>K.length&&K.push(a)}\nfunction N(a,b,d,e){var c=typeof a;if(\"undefined\"===c||\"boolean\"===c)a=null;if(null===a||\"string\"===c||\"number\"===c||\"object\"===c&&a.$$typeof===I)return d(e,a,\"\"===b?\".\"+O(a,0):b),1;var g=0;b=\"\"===b?\".\":b+\":\";if(Array.isArray(a))for(var k=0;k<a.length;k++){c=a[k];var m=b+O(c,k);g+=N(c,m,d,e)}else if(m=H&&a[H]||a[\"@@iterator\"],\"function\"===typeof m)for(a=m.call(a),k=0;!(c=a.next()).done;)c=c.value,m=b+O(c,k++),g+=N(c,m,d,e);else\"object\"===c&&(d=\"\"+a,t(\"31\",\"[object Object]\"===d?\"object with keys {\"+\nObject.keys(a).join(\", \")+\"}\":d,\"\"));return g}function O(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function P(a,b){a.func.call(a.context,b,a.count++)}function Q(a,b,d){var e=a.result,c=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?R(a,e,d,r.thatReturnsArgument):null!=a&&(G.isValidElement(a)&&(a=G.cloneAndReplaceKey(a,c+(!a.key||b&&b.key===a.key?\"\":(\"\"+a.key).replace(J,\"$\\x26/\")+\"/\")+d)),e.push(a))}\nfunction R(a,b,d,e,c){var g=\"\";null!=d&&(g=(\"\"+d).replace(J,\"$\\x26/\")+\"/\");b=L(b,g,e,c);null==a||N(a,\"\",Q,b);M(b)}var S={forEach:function(a,b,d){if(null==a)return a;b=L(null,null,b,d);null==a||N(a,\"\",P,b);M(b)},map:function(a,b,d){if(null==a)return a;var e=[];R(a,e,null,b,d);return e},count:function(a){return null==a?0:N(a,\"\",r.thatReturnsNull,null)},toArray:function(a){var b=[];R(a,b,null,r.thatReturnsArgument);return b}};\nmodule.exports={Children:{map:S.map,forEach:S.forEach,count:S.count,toArray:S.toArray,only:function(a){G.isValidElement(a)?void 0:t(\"143\");return a}},Component:B.Component,PureComponent:B.PureComponent,unstable_AsyncComponent:B.AsyncComponent,createElement:G.createElement,cloneElement:G.cloneElement,isValidElement:G.isValidElement,createFactory:G.createFactory,version:\"16.0.0\",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:C,assign:f}};\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (false) {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (true) {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = __webpack_require__(32);\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/*\n React v16.0.0\n react-dom.production.min.js\n\n Copyright (c) 2013-present, Facebook, Inc.\n\n This source code is licensed under the MIT license found in the\n LICENSE file in the root directory of this source tree.\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\nvar aa=__webpack_require__(3);__webpack_require__(10);var l=__webpack_require__(33),n=__webpack_require__(2),ba=__webpack_require__(34),ca=__webpack_require__(4),da=__webpack_require__(9),ea=__webpack_require__(35),fa=__webpack_require__(36),ha=__webpack_require__(39),ia=__webpack_require__(40);\nfunction w(a){for(var b=arguments.length-1,c=\"Minified React error #\"+a+\"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\\x3d\"+a,d=0;d<b;d++)c+=\"\\x26args[]\\x3d\"+encodeURIComponent(arguments[d+1]);b=Error(c+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\");b.name=\"Invariant Violation\";b.framesToPop=1;throw b;}aa?void 0:w(\"227\");\nfunction ja(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}\nvar ka={Namespaces:{html:\"http://www.w3.org/1999/xhtml\",mathml:\"http://www.w3.org/1998/Math/MathML\",svg:\"http://www.w3.org/2000/svg\"},getIntrinsicNamespace:ja,getChildNamespace:function(a,b){return null==a||\"http://www.w3.org/1999/xhtml\"===a?ja(b):\"http://www.w3.org/2000/svg\"===a&&\"foreignObject\"===b?\"http://www.w3.org/1999/xhtml\":a}},la=null,oa={};\nfunction pa(){if(la)for(var a in oa){var b=oa[a],c=la.indexOf(a);-1<c?void 0:w(\"96\",a);if(!qa.plugins[c]){b.extractEvents?void 0:w(\"97\",a);qa.plugins[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;qa.eventNameDispatchConfigs.hasOwnProperty(h)?w(\"99\",h):void 0;qa.eventNameDispatchConfigs[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&ra(k[e],g,h);e=!0}else f.registrationName?(ra(f.registrationName,g,h),e=!0):e=!1;e?void 0:w(\"98\",d,a)}}}}\nfunction ra(a,b,c){qa.registrationNameModules[a]?w(\"100\",a):void 0;qa.registrationNameModules[a]=b;qa.registrationNameDependencies[a]=b.eventTypes[c].dependencies}\nvar qa={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},possibleRegistrationNames:null,injectEventPluginOrder:function(a){la?w(\"101\"):void 0;la=Array.prototype.slice.call(a);pa()},injectEventPluginsByName:function(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];oa.hasOwnProperty(c)&&oa[c]===d||(oa[c]?w(\"102\",c):void 0,oa[c]=d,b=!0)}b&&pa()}},sa=qa,ta={children:!0,dangerouslySetInnerHTML:!0,autoFocus:!0,defaultValue:!0,defaultChecked:!0,\ninnerHTML:!0,suppressContentEditableWarning:!0,style:!0};function ua(a,b){return(a&b)===b}\nvar wa={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,HAS_STRING_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(a){var b=wa,c=a.Properties||{},d=a.DOMAttributeNamespaces||{},e=a.DOMAttributeNames||{};a=a.DOMMutationMethods||{};for(var f in c){xa.properties.hasOwnProperty(f)?w(\"48\",f):void 0;var g=f.toLowerCase(),h=c[f];g={attributeName:g,attributeNamespace:null,propertyName:f,mutationMethod:null,mustUseProperty:ua(h,b.MUST_USE_PROPERTY),\nhasBooleanValue:ua(h,b.HAS_BOOLEAN_VALUE),hasNumericValue:ua(h,b.HAS_NUMERIC_VALUE),hasPositiveNumericValue:ua(h,b.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:ua(h,b.HAS_OVERLOADED_BOOLEAN_VALUE),hasStringBooleanValue:ua(h,b.HAS_STRING_BOOLEAN_VALUE)};1>=g.hasBooleanValue+g.hasNumericValue+g.hasOverloadedBooleanValue?void 0:w(\"50\",f);e.hasOwnProperty(f)&&(g.attributeName=e[f]);d.hasOwnProperty(f)&&(g.attributeNamespace=d[f]);a.hasOwnProperty(f)&&(g.mutationMethod=a[f]);xa.properties[f]=\ng}}},xa={ID_ATTRIBUTE_NAME:\"data-reactid\",ROOT_ATTRIBUTE_NAME:\"data-reactroot\",ATTRIBUTE_NAME_START_CHAR:\":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\",ATTRIBUTE_NAME_CHAR:\":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\",\nproperties:{},shouldSetAttribute:function(a,b){if(xa.isReservedProp(a)||!(\"o\"!==a[0]&&\"O\"!==a[0]||\"n\"!==a[1]&&\"N\"!==a[1]))return!1;if(null===b)return!0;switch(typeof b){case \"boolean\":return xa.shouldAttributeAcceptBooleanValue(a);case \"undefined\":case \"number\":case \"string\":case \"object\":return!0;default:return!1}},getPropertyInfo:function(a){return xa.properties.hasOwnProperty(a)?xa.properties[a]:null},shouldAttributeAcceptBooleanValue:function(a){if(xa.isReservedProp(a))return!0;var b=xa.getPropertyInfo(a);\nif(b)return b.hasBooleanValue||b.hasStringBooleanValue||b.hasOverloadedBooleanValue;a=a.toLowerCase().slice(0,5);return\"data-\"===a||\"aria-\"===a},isReservedProp:function(a){return ta.hasOwnProperty(a)},injection:wa},A=xa,E={IndeterminateComponent:0,FunctionalComponent:1,ClassComponent:2,HostRoot:3,HostPortal:4,HostComponent:5,HostText:6,CoroutineComponent:7,CoroutineHandlerPhase:8,YieldComponent:9,Fragment:10},F={ELEMENT_NODE:1,TEXT_NODE:3,COMMENT_NODE:8,DOCUMENT_NODE:9,DOCUMENT_FRAGMENT_NODE:11},\nya=E.HostComponent,za=E.HostText,Aa=F.ELEMENT_NODE,Ba=F.COMMENT_NODE,Ea=A.ID_ATTRIBUTE_NAME,Fa={hasCachedChildNodes:1},Ga=Math.random().toString(36).slice(2),Ha=\"__reactInternalInstance$\"+Ga,Ia=\"__reactEventHandlers$\"+Ga;function La(a){for(var b;b=a._renderedComponent;)a=b;return a}function Ma(a,b){a=La(a);a._hostNode=b;b[Ha]=a}\nfunction Na(a,b){if(!(a._flags&Fa.hasCachedChildNodes)){var c=a._renderedChildren;b=b.firstChild;var d;a:for(d in c)if(c.hasOwnProperty(d)){var e=c[d],f=La(e)._domID;if(0!==f){for(;null!==b;b=b.nextSibling){var g=b,h=f;if(g.nodeType===Aa&&g.getAttribute(Ea)===\"\"+h||g.nodeType===Ba&&g.nodeValue===\" react-text: \"+h+\" \"||g.nodeType===Ba&&g.nodeValue===\" react-empty: \"+h+\" \"){Ma(e,b);continue a}}w(\"32\",f)}}a._flags|=Fa.hasCachedChildNodes}}\nfunction Oa(a){if(a[Ha])return a[Ha];for(var b=[];!a[Ha];)if(b.push(a),a.parentNode)a=a.parentNode;else return null;var c=a[Ha];if(c.tag===ya||c.tag===za)return c;for(;a&&(c=a[Ha]);a=b.pop()){var d=c;b.length&&Na(c,a)}return d}\nvar G={getClosestInstanceFromNode:Oa,getInstanceFromNode:function(a){var b=a[Ha];if(b)return b.tag===ya||b.tag===za?b:b._hostNode===a?b:null;b=Oa(a);return null!=b&&b._hostNode===a?b:null},getNodeFromInstance:function(a){if(a.tag===ya||a.tag===za)return a.stateNode;void 0===a._hostNode?w(\"33\"):void 0;if(a._hostNode)return a._hostNode;for(var b=[];!a._hostNode;)b.push(a),a._hostParent?void 0:w(\"34\"),a=a._hostParent;for(;b.length;a=b.pop())Na(a,a._hostNode);return a._hostNode},precacheChildNodes:Na,\nprecacheNode:Ma,uncacheNode:function(a){var b=a._hostNode;b&&(delete b[Ha],a._hostNode=null)},precacheFiberNode:function(a,b){b[Ha]=a},getFiberCurrentPropsFromNode:function(a){return a[Ia]||null},updateFiberProps:function(a,b){a[Ia]=b}},Pa={remove:function(a){a._reactInternalFiber=void 0},get:function(a){return a._reactInternalFiber},has:function(a){return void 0!==a._reactInternalFiber},set:function(a,b){a._reactInternalFiber=b}},Qa={ReactCurrentOwner:aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner};\nfunction Ra(a){if(\"function\"===typeof a.getName)return a.getName();if(\"number\"===typeof a.tag){a=a.type;if(\"string\"===typeof a)return a;if(\"function\"===typeof a)return a.displayName||a.name}return null}var J={NoEffect:0,PerformedWork:1,Placement:2,Update:4,PlacementAndUpdate:6,Deletion:8,ContentReset:16,Callback:32,Err:64,Ref:128},Sa=E.HostComponent,Ta=E.HostRoot,Ua=E.HostPortal,Va=E.HostText,Wa=J.NoEffect,Xa=J.Placement;\nfunction Za(a){var b=a;if(a.alternate)for(;b[\"return\"];)b=b[\"return\"];else{if((b.effectTag&Xa)!==Wa)return 1;for(;b[\"return\"];)if(b=b[\"return\"],(b.effectTag&Xa)!==Wa)return 1}return b.tag===Ta?2:3}function $a(a){2!==Za(a)?w(\"188\"):void 0}\nfunction ab(a){var b=a.alternate;if(!b)return b=Za(a),3===b?w(\"188\"):void 0,1===b?null:a;for(var c=a,d=b;;){var e=c[\"return\"],f=e?e.alternate:null;if(!e||!f)break;if(e.child===f.child){for(var g=e.child;g;){if(g===c)return $a(e),a;if(g===d)return $a(e),b;g=g.sibling}w(\"188\")}if(c[\"return\"]!==d[\"return\"])c=e,d=f;else{g=!1;for(var h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}g?\nvoid 0:w(\"189\")}}c.alternate!==d?w(\"190\"):void 0}c.tag!==Ta?w(\"188\"):void 0;return c.stateNode.current===c?a:b}\nvar bb={isFiberMounted:function(a){return 2===Za(a)},isMounted:function(a){return(a=Pa.get(a))?2===Za(a):!1},findCurrentFiberUsingSlowPath:ab,findCurrentHostFiber:function(a){a=ab(a);if(!a)return null;for(var b=a;;){if(b.tag===Sa||b.tag===Va)return b;if(b.child)b.child[\"return\"]=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b[\"return\"]||b[\"return\"]===a)return null;b=b[\"return\"]}b.sibling[\"return\"]=b[\"return\"];b=b.sibling}}return null},findCurrentHostFiberWithNoPortals:function(a){a=ab(a);\nif(!a)return null;for(var b=a;;){if(b.tag===Sa||b.tag===Va)return b;if(b.child&&b.tag!==Ua)b.child[\"return\"]=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b[\"return\"]||b[\"return\"]===a)return null;b=b[\"return\"]}b.sibling[\"return\"]=b[\"return\"];b=b.sibling}}return null}},K={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,injection:{injectErrorUtils:function(a){\"function\"!==typeof a.invokeGuardedCallback?w(\"197\"):void 0;cb=a.invokeGuardedCallback}},invokeGuardedCallback:function(a,\nb,c,d,e,f,g,h,k){cb.apply(K,arguments)},invokeGuardedCallbackAndCatchFirstError:function(a,b,c,d,e,f,g,h,k){K.invokeGuardedCallback.apply(this,arguments);if(K.hasCaughtError()){var p=K.clearCaughtError();K._hasRethrowError||(K._hasRethrowError=!0,K._rethrowError=p)}},rethrowCaughtError:function(){return db.apply(K,arguments)},hasCaughtError:function(){return K._hasCaughtError},clearCaughtError:function(){if(K._hasCaughtError){var a=K._caughtError;K._caughtError=null;K._hasCaughtError=!1;return a}w(\"198\")}};\nfunction cb(a,b,c,d,e,f,g,h,k){K._hasCaughtError=!1;K._caughtError=null;var p=Array.prototype.slice.call(arguments,3);try{b.apply(c,p)}catch(x){K._caughtError=x,K._hasCaughtError=!0}}function db(){if(K._hasRethrowError){var a=K._rethrowError;K._rethrowError=null;K._hasRethrowError=!1;throw a;}}var eb=K,fb;function gb(a,b,c,d){b=a.type||\"unknown-event\";a.currentTarget=hb.getNodeFromInstance(d);eb.invokeGuardedCallbackAndCatchFirstError(b,c,void 0,a);a.currentTarget=null}\nvar hb={isEndish:function(a){return\"topMouseUp\"===a||\"topTouchEnd\"===a||\"topTouchCancel\"===a},isMoveish:function(a){return\"topMouseMove\"===a||\"topTouchMove\"===a},isStartish:function(a){return\"topMouseDown\"===a||\"topTouchStart\"===a},executeDirectDispatch:function(a){var b=a._dispatchListeners,c=a._dispatchInstances;Array.isArray(b)?w(\"103\"):void 0;a.currentTarget=b?hb.getNodeFromInstance(c):null;b=b?b(a):null;a.currentTarget=null;a._dispatchListeners=null;a._dispatchInstances=null;return b},executeDispatchesInOrder:function(a,\nb){var c=a._dispatchListeners,d=a._dispatchInstances;if(Array.isArray(c))for(var e=0;e<c.length&&!a.isPropagationStopped();e++)gb(a,b,c[e],d[e]);else c&&gb(a,b,c,d);a._dispatchListeners=null;a._dispatchInstances=null},executeDispatchesInOrderStopAtTrue:function(a){a:{var b=a._dispatchListeners;var c=a._dispatchInstances;if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++){if(b[d](a,c[d])){b=c[d];break a}}else if(b&&b(a,c)){b=c;break a}b=null}a._dispatchInstances=null;a._dispatchListeners=\nnull;return b},hasDispatches:function(a){return!!a._dispatchListeners},getFiberCurrentPropsFromNode:function(a){return fb.getFiberCurrentPropsFromNode(a)},getInstanceFromNode:function(a){return fb.getInstanceFromNode(a)},getNodeFromInstance:function(a){return fb.getNodeFromInstance(a)},injection:{injectComponentTree:function(a){fb=a}}},ib=hb,jb=null,kb=null,lb=null;\nfunction mb(a){if(a=ib.getInstanceFromNode(a))if(\"number\"===typeof a.tag){jb&&\"function\"===typeof jb.restoreControlledState?void 0:w(\"194\");var b=ib.getFiberCurrentPropsFromNode(a.stateNode);jb.restoreControlledState(a.stateNode,a.type,b)}else\"function\"!==typeof a.restoreControlledState?w(\"195\"):void 0,a.restoreControlledState()}\nvar nb={injection:{injectFiberControlledHostComponent:function(a){jb=a}},enqueueStateRestore:function(a){kb?lb?lb.push(a):lb=[a]:kb=a},restoreStateIfNeeded:function(){if(kb){var a=kb,b=lb;lb=kb=null;mb(a);if(b)for(a=0;a<b.length;a++)mb(b[a])}}};function ob(a,b,c,d,e,f){return a(b,c,d,e,f)}function pb(a,b){return a(b)}function qb(a,b){return pb(a,b)}\nvar rb=!1,sb={batchedUpdates:function(a,b){if(rb)return ob(qb,a,b);rb=!0;try{return ob(qb,a,b)}finally{rb=!1,nb.restoreStateIfNeeded()}},injection:{injectStackBatchedUpdates:function(a){ob=a},injectFiberBatchedUpdates:function(a){pb=a}}},tb=F.TEXT_NODE;function ub(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return a.nodeType===tb?a.parentNode:a}var vb=E.HostRoot,wb=[];\nfunction xb(a){var b=a.targetInst;do{if(!b){a.ancestors.push(b);break}var c=b;if(\"number\"===typeof c.tag){for(;c[\"return\"];)c=c[\"return\"];c=c.tag!==vb?null:c.stateNode.containerInfo}else{for(;c._hostParent;)c=c._hostParent;c=G.getNodeFromInstance(c).parentNode}if(!c)break;a.ancestors.push(b);b=G.getClosestInstanceFromNode(c)}while(b);for(c=0;c<a.ancestors.length;c++)b=a.ancestors[c],yb._handleTopLevel(a.topLevelType,b,a.nativeEvent,ub(a.nativeEvent))}\nvar yb={_enabled:!0,_handleTopLevel:null,setHandleTopLevel:function(a){yb._handleTopLevel=a},setEnabled:function(a){yb._enabled=!!a},isEnabled:function(){return yb._enabled},trapBubbledEvent:function(a,b,c){return c?ba.listen(c,b,yb.dispatchEvent.bind(null,a)):null},trapCapturedEvent:function(a,b,c){return c?ba.capture(c,b,yb.dispatchEvent.bind(null,a)):null},dispatchEvent:function(a,b){if(yb._enabled){var c=ub(b);c=G.getClosestInstanceFromNode(c);null===c||\"number\"!==typeof c.tag||bb.isFiberMounted(c)||\n(c=null);if(wb.length){var d=wb.pop();d.topLevelType=a;d.nativeEvent=b;d.targetInst=c;a=d}else a={topLevelType:a,nativeEvent:b,targetInst:c,ancestors:[]};try{sb.batchedUpdates(xb,a)}finally{a.topLevelType=null,a.nativeEvent=null,a.targetInst=null,a.ancestors.length=0,10>wb.length&&wb.push(a)}}}},L=yb;function Cb(a,b){null==b?w(\"30\"):void 0;if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}\nfunction Db(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var Eb=null;function Fb(a,b){a&&(ib.executeDispatchesInOrder(a,b),a.isPersistent()||a.constructor.release(a))}function Gb(a){return Fb(a,!0)}function Hb(a){return Fb(a,!1)}\nfunction Ib(a,b,c){switch(a){case \"onClick\":case \"onClickCapture\":case \"onDoubleClick\":case \"onDoubleClickCapture\":case \"onMouseDown\":case \"onMouseDownCapture\":case \"onMouseMove\":case \"onMouseMoveCapture\":case \"onMouseUp\":case \"onMouseUpCapture\":return!(!c.disabled||\"button\"!==b&&\"input\"!==b&&\"select\"!==b&&\"textarea\"!==b);default:return!1}}\nvar Jb={injection:{injectEventPluginOrder:sa.injectEventPluginOrder,injectEventPluginsByName:sa.injectEventPluginsByName},getListener:function(a,b){if(\"number\"===typeof a.tag){var c=a.stateNode;if(!c)return null;var d=ib.getFiberCurrentPropsFromNode(c);if(!d)return null;c=d[b];if(Ib(b,a.type,d))return null}else{d=a._currentElement;if(\"string\"===typeof d||\"number\"===typeof d||!a._rootNodeID)return null;a=d.props;c=a[b];if(Ib(b,d.type,a))return null}c&&\"function\"!==typeof c?w(\"231\",b,typeof c):void 0;\nreturn c},extractEvents:function(a,b,c,d){for(var e,f=sa.plugins,g=0;g<f.length;g++){var h=f[g];h&&(h=h.extractEvents(a,b,c,d))&&(e=Cb(e,h))}return e},enqueueEvents:function(a){a&&(Eb=Cb(Eb,a))},processEventQueue:function(a){var b=Eb;Eb=null;a?Db(b,Gb):Db(b,Hb);Eb?w(\"95\"):void 0;eb.rethrowCaughtError()}},Kb;l.canUseDOM&&(Kb=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature(\"\",\"\"));\nfunction Lb(a,b){if(!l.canUseDOM||b&&!(\"addEventListener\"in document))return!1;b=\"on\"+a;var c=b in document;c||(c=document.createElement(\"div\"),c.setAttribute(b,\"return;\"),c=\"function\"===typeof c[b]);!c&&Kb&&\"wheel\"===a&&(c=document.implementation.hasFeature(\"Events.wheel\",\"3.0\"));return c}function Mb(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c[\"Webkit\"+a]=\"webkit\"+b;c[\"Moz\"+a]=\"moz\"+b;c[\"ms\"+a]=\"MS\"+b;c[\"O\"+a]=\"o\"+b.toLowerCase();return c}\nvar Nb={animationend:Mb(\"Animation\",\"AnimationEnd\"),animationiteration:Mb(\"Animation\",\"AnimationIteration\"),animationstart:Mb(\"Animation\",\"AnimationStart\"),transitionend:Mb(\"Transition\",\"TransitionEnd\")},Ob={},Pb={};l.canUseDOM&&(Pb=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete Nb.animationend.animation,delete Nb.animationiteration.animation,delete Nb.animationstart.animation),\"TransitionEvent\"in window||delete Nb.transitionend.transition);\nfunction Qb(a){if(Ob[a])return Ob[a];if(!Nb[a])return a;var b=Nb[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Pb)return Ob[a]=b[c];return\"\"}\nvar Rb={topAbort:\"abort\",topAnimationEnd:Qb(\"animationend\")||\"animationend\",topAnimationIteration:Qb(\"animationiteration\")||\"animationiteration\",topAnimationStart:Qb(\"animationstart\")||\"animationstart\",topBlur:\"blur\",topCancel:\"cancel\",topCanPlay:\"canplay\",topCanPlayThrough:\"canplaythrough\",topChange:\"change\",topClick:\"click\",topClose:\"close\",topCompositionEnd:\"compositionend\",topCompositionStart:\"compositionstart\",topCompositionUpdate:\"compositionupdate\",topContextMenu:\"contextmenu\",topCopy:\"copy\",\ntopCut:\"cut\",topDoubleClick:\"dblclick\",topDrag:\"drag\",topDragEnd:\"dragend\",topDragEnter:\"dragenter\",topDragExit:\"dragexit\",topDragLeave:\"dragleave\",topDragOver:\"dragover\",topDragStart:\"dragstart\",topDrop:\"drop\",topDurationChange:\"durationchange\",topEmptied:\"emptied\",topEncrypted:\"encrypted\",topEnded:\"ended\",topError:\"error\",topFocus:\"focus\",topInput:\"input\",topKeyDown:\"keydown\",topKeyPress:\"keypress\",topKeyUp:\"keyup\",topLoadedData:\"loadeddata\",topLoad:\"load\",topLoadedMetadata:\"loadedmetadata\",topLoadStart:\"loadstart\",\ntopMouseDown:\"mousedown\",topMouseMove:\"mousemove\",topMouseOut:\"mouseout\",topMouseOver:\"mouseover\",topMouseUp:\"mouseup\",topPaste:\"paste\",topPause:\"pause\",topPlay:\"play\",topPlaying:\"playing\",topProgress:\"progress\",topRateChange:\"ratechange\",topScroll:\"scroll\",topSeeked:\"seeked\",topSeeking:\"seeking\",topSelectionChange:\"selectionchange\",topStalled:\"stalled\",topSuspend:\"suspend\",topTextInput:\"textInput\",topTimeUpdate:\"timeupdate\",topToggle:\"toggle\",topTouchCancel:\"touchcancel\",topTouchEnd:\"touchend\",topTouchMove:\"touchmove\",\ntopTouchStart:\"touchstart\",topTransitionEnd:Qb(\"transitionend\")||\"transitionend\",topVolumeChange:\"volumechange\",topWaiting:\"waiting\",topWheel:\"wheel\"},Sb={},Tb=0,Ub=\"_reactListenersID\"+(\"\"+Math.random()).slice(2);function Vb(a){Object.prototype.hasOwnProperty.call(a,Ub)||(a[Ub]=Tb++,Sb[a[Ub]]={});return Sb[a[Ub]]}\nvar M=n({},{handleTopLevel:function(a,b,c,d){a=Jb.extractEvents(a,b,c,d);Jb.enqueueEvents(a);Jb.processEventQueue(!1)}},{setEnabled:function(a){L&&L.setEnabled(a)},isEnabled:function(){return!(!L||!L.isEnabled())},listenTo:function(a,b){var c=Vb(b);a=sa.registrationNameDependencies[a];for(var d=0;d<a.length;d++){var e=a[d];c.hasOwnProperty(e)&&c[e]||(\"topWheel\"===e?Lb(\"wheel\")?L.trapBubbledEvent(\"topWheel\",\"wheel\",b):Lb(\"mousewheel\")?L.trapBubbledEvent(\"topWheel\",\"mousewheel\",b):L.trapBubbledEvent(\"topWheel\",\n\"DOMMouseScroll\",b):\"topScroll\"===e?L.trapCapturedEvent(\"topScroll\",\"scroll\",b):\"topFocus\"===e||\"topBlur\"===e?(L.trapCapturedEvent(\"topFocus\",\"focus\",b),L.trapCapturedEvent(\"topBlur\",\"blur\",b),c.topBlur=!0,c.topFocus=!0):\"topCancel\"===e?(Lb(\"cancel\",!0)&&L.trapCapturedEvent(\"topCancel\",\"cancel\",b),c.topCancel=!0):\"topClose\"===e?(Lb(\"close\",!0)&&L.trapCapturedEvent(\"topClose\",\"close\",b),c.topClose=!0):Rb.hasOwnProperty(e)&&L.trapBubbledEvent(e,Rb[e],b),c[e]=!0)}},isListeningToAllDependencies:function(a,\nb){b=Vb(b);a=sa.registrationNameDependencies[a];for(var c=0;c<a.length;c++){var d=a[c];if(!b.hasOwnProperty(d)||!b[d])return!1}return!0},trapBubbledEvent:function(a,b,c){return L.trapBubbledEvent(a,b,c)},trapCapturedEvent:function(a,b,c){return L.trapCapturedEvent(a,b,c)}}),Wb={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,\nflexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Xb=[\"Webkit\",\"ms\",\"Moz\",\"O\"];\nObject.keys(Wb).forEach(function(a){Xb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);Wb[b]=Wb[a]})});\nvar Yb={isUnitlessNumber:Wb,shorthandPropertyExpansions:{background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,\nborderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}}},Zb=Yb.isUnitlessNumber,$b=!1;if(l.canUseDOM){var ac=document.createElement(\"div\").style;try{ac.font=\"\"}catch(a){$b=!0}}\nvar bc={createDangerousStringForStyles:function(){},setValueForStyles:function(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf(\"--\");var e=c;var f=b[c];e=null==f||\"boolean\"===typeof f||\"\"===f?\"\":d||\"number\"!==typeof f||0===f||Zb.hasOwnProperty(e)&&Zb[e]?(\"\"+f).trim():f+\"px\";\"float\"===c&&(c=\"cssFloat\");if(d)a.setProperty(c,e);else if(e)a[c]=e;else if(d=$b&&Yb.shorthandPropertyExpansions[c])for(var g in d)a[g]=\"\";else a[c]=\"\"}}},cc=new RegExp(\"^[\"+A.ATTRIBUTE_NAME_START_CHAR+\n\"][\"+A.ATTRIBUTE_NAME_CHAR+\"]*$\"),dc={},ec={};function fc(a){if(ec.hasOwnProperty(a))return!0;if(dc.hasOwnProperty(a))return!1;if(cc.test(a))return ec[a]=!0;dc[a]=!0;return!1}\nvar gc={setAttributeForID:function(a,b){a.setAttribute(A.ID_ATTRIBUTE_NAME,b)},setAttributeForRoot:function(a){a.setAttribute(A.ROOT_ATTRIBUTE_NAME,\"\")},getValueForProperty:function(){},getValueForAttribute:function(){},setValueForProperty:function(a,b,c){var d=A.getPropertyInfo(b);if(d&&A.shouldSetAttribute(b,c)){var e=d.mutationMethod;e?e(a,c):null==c||d.hasBooleanValue&&!c||d.hasNumericValue&&isNaN(c)||d.hasPositiveNumericValue&&1>c||d.hasOverloadedBooleanValue&&!1===c?gc.deleteValueForProperty(a,\nb):d.mustUseProperty?a[d.propertyName]=c:(b=d.attributeName,(e=d.attributeNamespace)?a.setAttributeNS(e,b,\"\"+c):d.hasBooleanValue||d.hasOverloadedBooleanValue&&!0===c?a.setAttribute(b,\"\"):a.setAttribute(b,\"\"+c))}else gc.setValueForAttribute(a,b,A.shouldSetAttribute(b,c)?c:null)},setValueForAttribute:function(a,b,c){fc(b)&&(null==c?a.removeAttribute(b):a.setAttribute(b,\"\"+c))},deleteValueForAttribute:function(a,b){a.removeAttribute(b)},deleteValueForProperty:function(a,b){var c=A.getPropertyInfo(b);\nc?(b=c.mutationMethod)?b(a,void 0):c.mustUseProperty?a[c.propertyName]=c.hasBooleanValue?!1:\"\":a.removeAttribute(c.attributeName):a.removeAttribute(b)}},hc=gc,ic=Qa.ReactDebugCurrentFrame;function jc(){return null}\nvar kc={current:null,phase:null,resetCurrentFiber:function(){ic.getCurrentStack=null;kc.current=null;kc.phase=null},setCurrentFiber:function(a,b){ic.getCurrentStack=jc;kc.current=a;kc.phase=b},getCurrentFiberOwnerName:function(){return null},getCurrentFiberStackAddendum:jc},lc=kc,mc={getHostProps:function(a,b){var c=b.value,d=b.checked;return n({type:void 0,step:void 0,min:void 0,max:void 0},b,{defaultChecked:void 0,defaultValue:void 0,value:null!=c?c:a._wrapperState.initialValue,checked:null!=d?\nd:a._wrapperState.initialChecked})},initWrapperState:function(a,b){var c=b.defaultValue;a._wrapperState={initialChecked:null!=b.checked?b.checked:b.defaultChecked,initialValue:null!=b.value?b.value:c,controlled:\"checkbox\"===b.type||\"radio\"===b.type?null!=b.checked:null!=b.value}},updateWrapper:function(a,b){var c=b.checked;null!=c&&hc.setValueForProperty(a,\"checked\",c||!1);c=b.value;if(null!=c)if(0===c&&\"\"===a.value)a.value=\"0\";else if(\"number\"===b.type){if(b=parseFloat(a.value)||0,c!=b||c==b&&a.value!=\nc)a.value=\"\"+c}else a.value!==\"\"+c&&(a.value=\"\"+c);else null==b.value&&null!=b.defaultValue&&a.defaultValue!==\"\"+b.defaultValue&&(a.defaultValue=\"\"+b.defaultValue),null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)},postMountWrapper:function(a,b){switch(b.type){case \"submit\":case \"reset\":break;case \"color\":case \"date\":case \"datetime\":case \"datetime-local\":case \"month\":case \"time\":case \"week\":a.value=\"\";a.value=a.defaultValue;break;default:a.value=a.value}b=a.name;\"\"!==\nb&&(a.name=\"\");a.defaultChecked=!a.defaultChecked;a.defaultChecked=!a.defaultChecked;\"\"!==b&&(a.name=b)},restoreControlledState:function(a,b){mc.updateWrapper(a,b);var c=b.name;if(\"radio\"===b.type&&null!=c){for(b=a;b.parentNode;)b=b.parentNode;c=b.querySelectorAll(\"input[name\\x3d\"+JSON.stringify(\"\"+c)+'][type\\x3d\"radio\"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=G.getFiberCurrentPropsFromNode(d);e?void 0:w(\"90\");mc.updateWrapper(d,e)}}}}},qc=mc;\nfunction rc(a){var b=\"\";aa.Children.forEach(a,function(a){null==a||\"string\"!==typeof a&&\"number\"!==typeof a||(b+=a)});return b}var sc={validateProps:function(){},postMountWrapper:function(a,b){null!=b.value&&a.setAttribute(\"value\",b.value)},getHostProps:function(a,b){a=n({children:void 0},b);if(b=rc(b.children))a.children=b;return a}};\nfunction tc(a,b,c){a=a.options;if(b){b={};for(var d=0;d<c.length;d++)b[\"$\"+c[d]]=!0;for(c=0;c<a.length;c++)d=b.hasOwnProperty(\"$\"+a[c].value),a[c].selected!==d&&(a[c].selected=d)}else{c=\"\"+c;b=null;for(d=0;d<a.length;d++){if(a[d].value===c){a[d].selected=!0;return}null!==b||a[d].disabled||(b=a[d])}null!==b&&(b.selected=!0)}}\nvar uc={getHostProps:function(a,b){return n({},b,{value:void 0})},initWrapperState:function(a,b){var c=b.value;a._wrapperState={initialValue:null!=c?c:b.defaultValue,wasMultiple:!!b.multiple}},postMountWrapper:function(a,b){a.multiple=!!b.multiple;var c=b.value;null!=c?tc(a,!!b.multiple,c):null!=b.defaultValue&&tc(a,!!b.multiple,b.defaultValue)},postUpdateWrapper:function(a,b){a._wrapperState.initialValue=void 0;var c=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!b.multiple;var d=b.value;\nnull!=d?tc(a,!!b.multiple,d):c!==!!b.multiple&&(null!=b.defaultValue?tc(a,!!b.multiple,b.defaultValue):tc(a,!!b.multiple,b.multiple?[]:\"\"))},restoreControlledState:function(a,b){var c=b.value;null!=c&&tc(a,!!b.multiple,c)}},vc={getHostProps:function(a,b){null!=b.dangerouslySetInnerHTML?w(\"91\"):void 0;return n({},b,{value:void 0,defaultValue:void 0,children:\"\"+a._wrapperState.initialValue})},initWrapperState:function(a,b){var c=b.value,d=c;null==c&&(c=b.defaultValue,b=b.children,null!=b&&(null!=c?\nw(\"92\"):void 0,Array.isArray(b)&&(1>=b.length?void 0:w(\"93\"),b=b[0]),c=\"\"+b),null==c&&(c=\"\"),d=c);a._wrapperState={initialValue:\"\"+d}},updateWrapper:function(a,b){var c=b.value;null!=c&&(c=\"\"+c,c!==a.value&&(a.value=c),null==b.defaultValue&&(a.defaultValue=c));null!=b.defaultValue&&(a.defaultValue=b.defaultValue)},postMountWrapper:function(a){var b=a.textContent;b===a._wrapperState.initialValue&&(a.value=b)},restoreControlledState:function(a,b){vc.updateWrapper(a,b)}},wc=vc,xc=n({menuitem:!0},{area:!0,\nbase:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function yc(a,b){b&&(xc[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML?w(\"137\",a,\"\"):void 0),null!=b.dangerouslySetInnerHTML&&(null!=b.children?w(\"60\"):void 0,\"object\"===typeof b.dangerouslySetInnerHTML&&\"__html\"in b.dangerouslySetInnerHTML?void 0:w(\"61\")),null!=b.style&&\"object\"!==typeof b.style?w(\"62\",\"\"):void 0)}\nfunction zc(a){var b=a.type;return(a=a.nodeName)&&\"input\"===a.toLowerCase()&&(\"checkbox\"===b||\"radio\"===b)}\nfunction Ac(a){var b=zc(a)?\"checked\":\"value\",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=\"\"+a[b];if(!a.hasOwnProperty(b)&&\"function\"===typeof c.get&&\"function\"===typeof c.set)return Object.defineProperty(a,b,{enumerable:c.enumerable,configurable:!0,get:function(){return c.get.call(this)},set:function(a){d=\"\"+a;c.set.call(this,a)}}),{getValue:function(){return d},setValue:function(a){d=\"\"+a},stopTracking:function(){a._valueTracker=null;delete a[b]}}}\nvar Bc={_getTrackerFromNode:function(a){return a._valueTracker},track:function(a){a._valueTracker||(a._valueTracker=Ac(a))},updateValueIfChanged:function(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d=\"\";a&&(d=zc(a)?a.checked?\"true\":\"false\":a.value);a=d;return a!==c?(b.setValue(a),!0):!1},stopTracking:function(a){(a=a._valueTracker)&&a.stopTracking()}};\nfunction Cc(a,b){if(-1===a.indexOf(\"-\"))return\"string\"===typeof b.is;switch(a){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":return!1;default:return!0}}\nvar Dc=ka.Namespaces,Ec,Fc=function(a){return\"undefined\"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==Dc.svg||\"innerHTML\"in a)a.innerHTML=b;else for(Ec=Ec||document.createElement(\"div\"),Ec.innerHTML=\"\\x3csvg\\x3e\"+b+\"\\x3c/svg\\x3e\",b=Ec.firstChild;b.firstChild;)a.appendChild(b.firstChild)}),Gc=/[\"'&<>]/,Hc=F.TEXT_NODE;\nfunction Ic(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&c.nodeType===Hc){c.nodeValue=b;return}}a.textContent=b}\nl.canUseDOM&&(\"textContent\"in document.documentElement||(Ic=function(a,b){if(a.nodeType===Hc)a.nodeValue=b;else{if(\"boolean\"===typeof b||\"number\"===typeof b)b=\"\"+b;else{b=\"\"+b;var c=Gc.exec(b);if(c){var d=\"\",e,f=0;for(e=c.index;e<b.length;e++){switch(b.charCodeAt(e)){case 34:c=\"\\x26quot;\";break;case 38:c=\"\\x26amp;\";break;case 39:c=\"\\x26#x27;\";break;case 60:c=\"\\x26lt;\";break;case 62:c=\"\\x26gt;\";break;default:continue}f!==e&&(d+=b.substring(f,e));f=e+1;d+=c}b=f!==e?d+b.substring(f,e):d}}Fc(a,b)}}));\nvar Jc=Ic,Kc=lc.getCurrentFiberOwnerName,Lc=F.DOCUMENT_NODE,Mc=F.DOCUMENT_FRAGMENT_NODE,Nc=M.listenTo,Oc=sa.registrationNameModules,Pc=ka.Namespaces.html,Qc=ka.getIntrinsicNamespace;function Rc(a,b){Nc(b,a.nodeType===Lc||a.nodeType===Mc?a:a.ownerDocument)}\nvar Sc={topAbort:\"abort\",topCanPlay:\"canplay\",topCanPlayThrough:\"canplaythrough\",topDurationChange:\"durationchange\",topEmptied:\"emptied\",topEncrypted:\"encrypted\",topEnded:\"ended\",topError:\"error\",topLoadedData:\"loadeddata\",topLoadedMetadata:\"loadedmetadata\",topLoadStart:\"loadstart\",topPause:\"pause\",topPlay:\"play\",topPlaying:\"playing\",topProgress:\"progress\",topRateChange:\"ratechange\",topSeeked:\"seeked\",topSeeking:\"seeking\",topStalled:\"stalled\",topSuspend:\"suspend\",topTimeUpdate:\"timeupdate\",topVolumeChange:\"volumechange\",\ntopWaiting:\"waiting\"},N={createElement:function(a,b,c,d){c=c.nodeType===Lc?c:c.ownerDocument;d===Pc&&(d=Qc(a));d===Pc?\"script\"===a?(a=c.createElement(\"div\"),a.innerHTML=\"\\x3cscript\\x3e\\x3c/script\\x3e\",a=a.removeChild(a.firstChild)):a=\"string\"===typeof b.is?c.createElement(a,{is:b.is}):c.createElement(a):a=c.createElementNS(d,a);return a},createTextNode:function(a,b){return(b.nodeType===Lc?b:b.ownerDocument).createTextNode(a)},setInitialProperties:function(a,b,c,d){var e=Cc(b,c);switch(b){case \"iframe\":case \"object\":M.trapBubbledEvent(\"topLoad\",\n\"load\",a);var f=c;break;case \"video\":case \"audio\":for(f in Sc)Sc.hasOwnProperty(f)&&M.trapBubbledEvent(f,Sc[f],a);f=c;break;case \"source\":M.trapBubbledEvent(\"topError\",\"error\",a);f=c;break;case \"img\":case \"image\":M.trapBubbledEvent(\"topError\",\"error\",a);M.trapBubbledEvent(\"topLoad\",\"load\",a);f=c;break;case \"form\":M.trapBubbledEvent(\"topReset\",\"reset\",a);M.trapBubbledEvent(\"topSubmit\",\"submit\",a);f=c;break;case \"details\":M.trapBubbledEvent(\"topToggle\",\"toggle\",a);f=c;break;case \"input\":qc.initWrapperState(a,\nc);f=qc.getHostProps(a,c);M.trapBubbledEvent(\"topInvalid\",\"invalid\",a);Rc(d,\"onChange\");break;case \"option\":sc.validateProps(a,c);f=sc.getHostProps(a,c);break;case \"select\":uc.initWrapperState(a,c);f=uc.getHostProps(a,c);M.trapBubbledEvent(\"topInvalid\",\"invalid\",a);Rc(d,\"onChange\");break;case \"textarea\":wc.initWrapperState(a,c);f=wc.getHostProps(a,c);M.trapBubbledEvent(\"topInvalid\",\"invalid\",a);Rc(d,\"onChange\");break;default:f=c}yc(b,f,Kc);var g=f,h;for(h in g)if(g.hasOwnProperty(h)){var k=g[h];\"style\"===\nh?bc.setValueForStyles(a,k):\"dangerouslySetInnerHTML\"===h?(k=k?k.__html:void 0,null!=k&&Fc(a,k)):\"children\"===h?\"string\"===typeof k?Jc(a,k):\"number\"===typeof k&&Jc(a,\"\"+k):\"suppressContentEditableWarning\"!==h&&(Oc.hasOwnProperty(h)?null!=k&&Rc(d,h):e?hc.setValueForAttribute(a,h,k):null!=k&&hc.setValueForProperty(a,h,k))}switch(b){case \"input\":Bc.track(a);qc.postMountWrapper(a,c);break;case \"textarea\":Bc.track(a);wc.postMountWrapper(a,c);break;case \"option\":sc.postMountWrapper(a,c);break;case \"select\":uc.postMountWrapper(a,\nc);break;default:\"function\"===typeof f.onClick&&(a.onclick=ca)}},diffProperties:function(a,b,c,d,e){var f=null;switch(b){case \"input\":c=qc.getHostProps(a,c);d=qc.getHostProps(a,d);f=[];break;case \"option\":c=sc.getHostProps(a,c);d=sc.getHostProps(a,d);f=[];break;case \"select\":c=uc.getHostProps(a,c);d=uc.getHostProps(a,d);f=[];break;case \"textarea\":c=wc.getHostProps(a,c);d=wc.getHostProps(a,d);f=[];break;default:\"function\"!==typeof c.onClick&&\"function\"===typeof d.onClick&&(a.onclick=ca)}yc(b,d,Kc);\nvar g,h;a=null;for(g in c)if(!d.hasOwnProperty(g)&&c.hasOwnProperty(g)&&null!=c[g])if(\"style\"===g)for(h in b=c[g],b)b.hasOwnProperty(h)&&(a||(a={}),a[h]=\"\");else\"dangerouslySetInnerHTML\"!==g&&\"children\"!==g&&\"suppressContentEditableWarning\"!==g&&(Oc.hasOwnProperty(g)?f||(f=[]):(f=f||[]).push(g,null));for(g in d){var k=d[g];b=null!=c?c[g]:void 0;if(d.hasOwnProperty(g)&&k!==b&&(null!=k||null!=b))if(\"style\"===g)if(b){for(h in b)!b.hasOwnProperty(h)||k&&k.hasOwnProperty(h)||(a||(a={}),a[h]=\"\");for(h in k)k.hasOwnProperty(h)&&\nb[h]!==k[h]&&(a||(a={}),a[h]=k[h])}else a||(f||(f=[]),f.push(g,a)),a=k;else\"dangerouslySetInnerHTML\"===g?(k=k?k.__html:void 0,b=b?b.__html:void 0,null!=k&&b!==k&&(f=f||[]).push(g,\"\"+k)):\"children\"===g?b===k||\"string\"!==typeof k&&\"number\"!==typeof k||(f=f||[]).push(g,\"\"+k):\"suppressContentEditableWarning\"!==g&&(Oc.hasOwnProperty(g)?(null!=k&&Rc(e,g),f||b===k||(f=[])):(f=f||[]).push(g,k))}a&&(f=f||[]).push(\"style\",a);return f},updateProperties:function(a,b,c,d,e){Cc(c,d);d=Cc(c,e);for(var f=0;f<b.length;f+=\n2){var g=b[f],h=b[f+1];\"style\"===g?bc.setValueForStyles(a,h):\"dangerouslySetInnerHTML\"===g?Fc(a,h):\"children\"===g?Jc(a,h):d?null!=h?hc.setValueForAttribute(a,g,h):hc.deleteValueForAttribute(a,g):null!=h?hc.setValueForProperty(a,g,h):hc.deleteValueForProperty(a,g)}switch(c){case \"input\":qc.updateWrapper(a,e);Bc.updateValueIfChanged(a);break;case \"textarea\":wc.updateWrapper(a,e);break;case \"select\":uc.postUpdateWrapper(a,e)}},diffHydratedProperties:function(a,b,c,d,e){switch(b){case \"iframe\":case \"object\":M.trapBubbledEvent(\"topLoad\",\n\"load\",a);break;case \"video\":case \"audio\":for(var f in Sc)Sc.hasOwnProperty(f)&&M.trapBubbledEvent(f,Sc[f],a);break;case \"source\":M.trapBubbledEvent(\"topError\",\"error\",a);break;case \"img\":case \"image\":M.trapBubbledEvent(\"topError\",\"error\",a);M.trapBubbledEvent(\"topLoad\",\"load\",a);break;case \"form\":M.trapBubbledEvent(\"topReset\",\"reset\",a);M.trapBubbledEvent(\"topSubmit\",\"submit\",a);break;case \"details\":M.trapBubbledEvent(\"topToggle\",\"toggle\",a);break;case \"input\":qc.initWrapperState(a,c);M.trapBubbledEvent(\"topInvalid\",\n\"invalid\",a);Rc(e,\"onChange\");break;case \"option\":sc.validateProps(a,c);break;case \"select\":uc.initWrapperState(a,c);M.trapBubbledEvent(\"topInvalid\",\"invalid\",a);Rc(e,\"onChange\");break;case \"textarea\":wc.initWrapperState(a,c),M.trapBubbledEvent(\"topInvalid\",\"invalid\",a),Rc(e,\"onChange\")}yc(b,c,Kc);d=null;for(var g in c)c.hasOwnProperty(g)&&(f=c[g],\"children\"===g?\"string\"===typeof f?a.textContent!==f&&(d=[\"children\",f]):\"number\"===typeof f&&a.textContent!==\"\"+f&&(d=[\"children\",\"\"+f]):Oc.hasOwnProperty(g)&&\nnull!=f&&Rc(e,g));switch(b){case \"input\":Bc.track(a);qc.postMountWrapper(a,c);break;case \"textarea\":Bc.track(a);wc.postMountWrapper(a,c);break;case \"select\":case \"option\":break;default:\"function\"===typeof c.onClick&&(a.onclick=ca)}return d},diffHydratedText:function(a,b){return a.nodeValue!==b},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(a,\nb,c){switch(b){case \"input\":qc.restoreControlledState(a,c);break;case \"textarea\":wc.restoreControlledState(a,c);break;case \"select\":uc.restoreControlledState(a,c)}}},Tc=void 0;\nif(l.canUseDOM)if(\"function\"!==typeof requestIdleCallback){var Uc=null,Vc=null,Wc=!1,Xc=!1,Yc=0,Zc=33,$c=33,ad={timeRemaining:\"object\"===typeof performance&&\"function\"===typeof performance.now?function(){return Yc-performance.now()}:function(){return Yc-Date.now()}},bd=\"__reactIdleCallback$\"+Math.random().toString(36).slice(2);window.addEventListener(\"message\",function(a){a.source===window&&a.data===bd&&(Wc=!1,a=Vc,Vc=null,null!==a&&a(ad))},!1);var cd=function(a){Xc=!1;var b=a-Yc+$c;b<$c&&Zc<$c?(8>\nb&&(b=8),$c=b<Zc?Zc:b):Zc=b;Yc=a+$c;Wc||(Wc=!0,window.postMessage(bd,\"*\"));b=Uc;Uc=null;null!==b&&b(a)};Tc=function(a){Vc=a;Xc||(Xc=!0,requestAnimationFrame(cd));return 0}}else Tc=requestIdleCallback;else Tc=function(a){setTimeout(function(){a({timeRemaining:function(){return Infinity}})});return 0};\nvar dd={rIC:Tc},ed={enableAsyncSubtreeAPI:!0},Q={NoWork:0,SynchronousPriority:1,TaskPriority:2,HighPriority:3,LowPriority:4,OffscreenPriority:5},fd=J.Callback,gd=Q.NoWork,hd=Q.SynchronousPriority,id=Q.TaskPriority,jd=E.ClassComponent,kd=E.HostRoot,md=void 0,nd=void 0;function od(a,b){return a!==id&&a!==hd||b!==id&&b!==hd?a===gd&&b!==gd?-255:a!==gd&&b===gd?255:a-b:0}function pd(){return{first:null,last:null,hasForceUpdate:!1,callbackList:null}}\nfunction qd(a,b,c,d){null!==c?c.next=b:(b.next=a.first,a.first=b);null!==d?b.next=d:a.last=b}function rd(a,b){b=b.priorityLevel;var c=null;if(null!==a.last&&0>=od(a.last.priorityLevel,b))c=a.last;else for(a=a.first;null!==a&&0>=od(a.priorityLevel,b);)c=a,a=a.next;return c}\nfunction sd(a,b){var c=a.alternate,d=a.updateQueue;null===d&&(d=a.updateQueue=pd());null!==c?(a=c.updateQueue,null===a&&(a=c.updateQueue=pd())):a=null;md=d;nd=a!==d?a:null;var e=md;c=nd;var f=rd(e,b),g=null!==f?f.next:e.first;if(null===c)return qd(e,b,f,g),null;d=rd(c,b);a=null!==d?d.next:c.first;qd(e,b,f,g);if(g===a&&null!==g||f===d&&null!==f)return null===d&&(c.first=b),null===a&&(c.last=null),null;b={priorityLevel:b.priorityLevel,partialState:b.partialState,callback:b.callback,isReplace:b.isReplace,\nisForced:b.isForced,isTopLevelUnmount:b.isTopLevelUnmount,next:null};qd(c,b,d,a);return b}function td(a,b,c,d){a=a.partialState;return\"function\"===typeof a?a.call(b,c,d):a}\nvar ud={addUpdate:function(a,b,c,d){sd(a,{priorityLevel:d,partialState:b,callback:c,isReplace:!1,isForced:!1,isTopLevelUnmount:!1,next:null})},addReplaceUpdate:function(a,b,c,d){sd(a,{priorityLevel:d,partialState:b,callback:c,isReplace:!0,isForced:!1,isTopLevelUnmount:!1,next:null})},addForceUpdate:function(a,b,c){sd(a,{priorityLevel:c,partialState:null,callback:b,isReplace:!1,isForced:!0,isTopLevelUnmount:!1,next:null})},getUpdatePriority:function(a){var b=a.updateQueue;return null===b||a.tag!==\njd&&a.tag!==kd?gd:null!==b.first?b.first.priorityLevel:gd},addTopLevelUpdate:function(a,b,c,d){var e=null===b.element;b={priorityLevel:d,partialState:b,callback:c,isReplace:!1,isForced:!1,isTopLevelUnmount:e,next:null};a=sd(a,b);e&&(e=md,c=nd,null!==e&&null!==b.next&&(b.next=null,e.last=b),null!==c&&null!==a&&null!==a.next&&(a.next=null,c.last=b))},beginUpdateQueue:function(a,b,c,d,e,f,g){null!==a&&a.updateQueue===c&&(c=b.updateQueue={first:c.first,last:c.last,callbackList:null,hasForceUpdate:!1});\na=c.callbackList;for(var h=c.hasForceUpdate,k=!0,p=c.first;null!==p&&0>=od(p.priorityLevel,g);){c.first=p.next;null===c.first&&(c.last=null);var x;if(p.isReplace)e=td(p,d,e,f),k=!0;else if(x=td(p,d,e,f))e=k?n({},e,x):n(e,x),k=!1;p.isForced&&(h=!0);null===p.callback||p.isTopLevelUnmount&&null!==p.next||(a=null!==a?a:[],a.push(p.callback),b.effectTag|=fd);p=p.next}c.callbackList=a;c.hasForceUpdate=h;null!==c.first||null!==a||h||(b.updateQueue=null);return e},commitCallbacks:function(a,b,c){a=b.callbackList;\nif(null!==a)for(b.callbackList=null,b=0;b<a.length;b++){var d=a[b];\"function\"!==typeof d?w(\"191\",d):void 0;d.call(c)}}},vd=[],wd=-1,xd={createCursor:function(a){return{current:a}},isEmpty:function(){return-1===wd},pop:function(a){0>wd||(a.current=vd[wd],vd[wd]=null,wd--)},push:function(a,b){wd++;vd[wd]=a.current;a.current=b},reset:function(){for(;-1<wd;)vd[wd]=null,wd--}},yd=bb.isFiberMounted,zd=E.ClassComponent,Ad=E.HostRoot,Bd=xd.createCursor,Cd=xd.pop,Dd=xd.push,Ed=Bd(da),Fd=Bd(!1),Ld=da;\nfunction Md(a,b,c){a=a.stateNode;a.__reactInternalMemoizedUnmaskedChildContext=b;a.__reactInternalMemoizedMaskedChildContext=c}function Nd(a){return a.tag===zd&&null!=a.type.childContextTypes}function Od(a,b){var c=a.stateNode,d=a.type.childContextTypes;if(\"function\"!==typeof c.getChildContext)return b;c=c.getChildContext();for(var e in c)e in d?void 0:w(\"108\",Ra(a)||\"Unknown\",e);return n({},b,c)}\nvar R={getUnmaskedContext:function(a){return Nd(a)?Ld:Ed.current},cacheContext:Md,getMaskedContext:function(a,b){var c=a.type.contextTypes;if(!c)return da;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&Md(a,b,e);return e},hasContextChanged:function(){return Fd.current},isContextConsumer:function(a){return a.tag===zd&&null!=a.type.contextTypes},isContextProvider:Nd,popContextProvider:function(a){Nd(a)&&\n(Cd(Fd,a),Cd(Ed,a))},popTopLevelContextObject:function(a){Cd(Fd,a);Cd(Ed,a)},pushTopLevelContextObject:function(a,b,c){null!=Ed.cursor?w(\"168\"):void 0;Dd(Ed,b,a);Dd(Fd,c,a)},processChildContext:Od,pushContextProvider:function(a){if(!Nd(a))return!1;var b=a.stateNode;b=b&&b.__reactInternalMemoizedMergedChildContext||da;Ld=Ed.current;Dd(Ed,b,a);Dd(Fd,Fd.current,a);return!0},invalidateContextProvider:function(a,b){var c=a.stateNode;c?void 0:w(\"169\");if(b){var d=Od(a,Ld,!0);c.__reactInternalMemoizedMergedChildContext=\nd;Cd(Fd,a);Cd(Ed,a);Dd(Ed,d,a)}else Cd(Fd,a);Dd(Fd,b,a)},resetContext:function(){Ld=da;Ed.current=da;Fd.current=!1},findCurrentUnmaskedContext:function(a){for(yd(a)&&a.tag===zd?void 0:w(\"170\");a.tag!==Ad;){if(Nd(a))return a.stateNode.__reactInternalMemoizedMergedChildContext;(a=a[\"return\"])?void 0:w(\"171\")}return a.stateNode.context}},Pd={NoContext:0,AsyncUpdates:1},Qd=E.IndeterminateComponent,Rd=E.ClassComponent,Sd=E.HostRoot,Td=E.HostComponent,Ud=E.HostText,Vd=E.HostPortal,Wd=E.CoroutineComponent,\nXd=E.YieldComponent,Yd=E.Fragment,Zd=Q.NoWork,$d=Pd.NoContext,ae=J.NoEffect;function be(a,b,c){this.tag=a;this.key=b;this.stateNode=this.type=null;this.sibling=this.child=this[\"return\"]=null;this.index=0;this.memoizedState=this.updateQueue=this.memoizedProps=this.pendingProps=this.ref=null;this.internalContextTag=c;this.effectTag=ae;this.lastEffect=this.firstEffect=this.nextEffect=null;this.pendingWorkPriority=Zd;this.alternate=null}\nfunction ce(a,b,c){var d=void 0;\"function\"===typeof a?(d=a.prototype&&a.prototype.isReactComponent?new be(Rd,b,c):new be(Qd,b,c),d.type=a):\"string\"===typeof a?(d=new be(Td,b,c),d.type=a):\"object\"===typeof a&&null!==a&&\"number\"===typeof a.tag?d=a:w(\"130\",null==a?a:typeof a,\"\");return d}\nvar de={createWorkInProgress:function(a,b){var c=a.alternate;null===c?(c=new be(a.tag,a.key,a.internalContextTag),c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.effectTag=ae,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.pendingWorkPriority=b;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c},createHostRootFiber:function(){return new be(Sd,null,$d)},\ncreateFiberFromElement:function(a,b,c){b=ce(a.type,a.key,b,null);b.pendingProps=a.props;b.pendingWorkPriority=c;return b},createFiberFromFragment:function(a,b,c){b=new be(Yd,null,b);b.pendingProps=a;b.pendingWorkPriority=c;return b},createFiberFromText:function(a,b,c){b=new be(Ud,null,b);b.pendingProps=a;b.pendingWorkPriority=c;return b},createFiberFromElementType:ce,createFiberFromHostInstanceForDeletion:function(){var a=new be(Td,null,$d);a.type=\"DELETED\";return a},createFiberFromCoroutine:function(a,\nb,c){b=new be(Wd,a.key,b);b.type=a.handler;b.pendingProps=a;b.pendingWorkPriority=c;return b},createFiberFromYield:function(a,b){return new be(Xd,null,b)},createFiberFromPortal:function(a,b,c){b=new be(Vd,a.key,b);b.pendingProps=a.children||[];b.pendingWorkPriority=c;b.stateNode={containerInfo:a.containerInfo,implementation:a.implementation};return b},largerPriority:function(a,b){return a!==Zd&&(b===Zd||b>a)?a:b}},ee=de.createHostRootFiber,fe=E.IndeterminateComponent,ge=E.FunctionalComponent,he=E.ClassComponent,\nie=E.HostComponent,je,ke;\"function\"===typeof Symbol&&Symbol[\"for\"]?(je=Symbol[\"for\"](\"react.coroutine\"),ke=Symbol[\"for\"](\"react.yield\")):(je=60104,ke=60105);\nvar le={createCoroutine:function(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:je,key:null==d?null:\"\"+d,children:a,handler:b,props:c}},createYield:function(a){return{$$typeof:ke,value:a}},isCoroutine:function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===je},isYield:function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===ke},REACT_YIELD_TYPE:ke,REACT_COROUTINE_TYPE:je},me=\"function\"===typeof Symbol&&Symbol[\"for\"]&&Symbol[\"for\"](\"react.portal\")||\n60106,ne={createPortal:function(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:me,key:null==d?null:\"\"+d,children:a,containerInfo:b,implementation:c}},isPortal:function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===me},REACT_PORTAL_TYPE:me},oe=le.REACT_COROUTINE_TYPE,pe=le.REACT_YIELD_TYPE,qe=ne.REACT_PORTAL_TYPE,re=de.createWorkInProgress,se=de.createFiberFromElement,te=de.createFiberFromFragment,ue=de.createFiberFromText,ve=de.createFiberFromCoroutine,\nwe=de.createFiberFromYield,xe=de.createFiberFromPortal,ye=Array.isArray,ze=E.FunctionalComponent,Ae=E.ClassComponent,Be=E.HostText,Ce=E.HostPortal,De=E.CoroutineComponent,Ee=E.YieldComponent,Fe=E.Fragment,Ge=J.NoEffect,He=J.Placement,Ie=J.Deletion,Je=\"function\"===typeof Symbol&&Symbol.iterator,Ke=\"function\"===typeof Symbol&&Symbol[\"for\"]&&Symbol[\"for\"](\"react.element\")||60103;\nfunction Le(a){if(null===a||\"undefined\"===typeof a)return null;a=Je&&a[Je]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}\nfunction Me(a,b){var c=b.ref;if(null!==c&&\"function\"!==typeof c){if(b._owner){b=b._owner;var d=void 0;b&&(\"number\"===typeof b.tag?(b.tag!==Ae?w(\"110\"):void 0,d=b.stateNode):d=b.getPublicInstance());d?void 0:w(\"147\",c);var e=\"\"+c;if(null!==a&&null!==a.ref&&a.ref._stringRef===e)return a.ref;a=function(a){var b=d.refs===da?d.refs={}:d.refs;null===a?delete b[e]:b[e]=a};a._stringRef=e;return a}\"string\"!==typeof c?w(\"148\"):void 0;b._owner?void 0:w(\"149\",c)}return c}\nfunction Ne(a,b){\"textarea\"!==a.type&&w(\"31\",\"[object Object]\"===Object.prototype.toString.call(b)?\"object with keys {\"+Object.keys(b).join(\", \")+\"}\":b,\"\")}\nfunction Oe(a,b){function c(c,d){if(b){if(!a){if(null===d.alternate)return;d=d.alternate}var m=c.lastEffect;null!==m?(m.nextEffect=d,c.lastEffect=d):c.firstEffect=c.lastEffect=d;d.nextEffect=null;d.effectTag=Ie}}function d(a,d){if(!b)return null;for(;null!==d;)c(a,d),d=d.sibling;return null}function e(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function f(b,c){if(a)return b=re(b,c),b.index=0,b.sibling=null,b;b.pendingWorkPriority=c;b.effectTag=Ge;\nb.index=0;b.sibling=null;return b}function g(a,c,d){a.index=d;if(!b)return c;d=a.alternate;if(null!==d)return d=d.index,d<c?(a.effectTag=He,c):d;a.effectTag=He;return c}function h(a){b&&null===a.alternate&&(a.effectTag=He);return a}function k(a,b,c,d){if(null===b||b.tag!==Be)return c=ue(c,a.internalContextTag,d),c[\"return\"]=a,c;b=f(b,d);b.pendingProps=c;b[\"return\"]=a;return b}function p(a,b,c,d){if(null===b||b.type!==c.type)return d=se(c,a.internalContextTag,d),d.ref=Me(b,c),d[\"return\"]=a,d;d=f(b,\nd);d.ref=Me(b,c);d.pendingProps=c.props;d[\"return\"]=a;return d}function x(a,b,c,d){if(null===b||b.tag!==De)return c=ve(c,a.internalContextTag,d),c[\"return\"]=a,c;b=f(b,d);b.pendingProps=c;b[\"return\"]=a;return b}function S(a,b,c,d){if(null===b||b.tag!==Ee)return b=we(c,a.internalContextTag,d),b.type=c.value,b[\"return\"]=a,b;b=f(b,d);b.type=c.value;b[\"return\"]=a;return b}function D(a,b,c,d){if(null===b||b.tag!==Ce||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return c=\nxe(c,a.internalContextTag,d),c[\"return\"]=a,c;b=f(b,d);b.pendingProps=c.children||[];b[\"return\"]=a;return b}function y(a,b,c,d){if(null===b||b.tag!==Fe)return c=te(c,a.internalContextTag,d),c[\"return\"]=a,c;b=f(b,d);b.pendingProps=c;b[\"return\"]=a;return b}function B(a,b,c){if(\"string\"===typeof b||\"number\"===typeof b)return b=ue(\"\"+b,a.internalContextTag,c),b[\"return\"]=a,b;if(\"object\"===typeof b&&null!==b){switch(b.$$typeof){case Ke:return c=se(b,a.internalContextTag,c),c.ref=Me(null,b),c[\"return\"]=\na,c;case oe:return b=ve(b,a.internalContextTag,c),b[\"return\"]=a,b;case pe:return c=we(b,a.internalContextTag,c),c.type=b.value,c[\"return\"]=a,c;case qe:return b=xe(b,a.internalContextTag,c),b[\"return\"]=a,b}if(ye(b)||Le(b))return b=te(b,a.internalContextTag,c),b[\"return\"]=a,b;Ne(a,b)}return null}function H(a,b,c,d){var e=null!==b?b.key:null;if(\"string\"===typeof c||\"number\"===typeof c)return null!==e?null:k(a,b,\"\"+c,d);if(\"object\"===typeof c&&null!==c){switch(c.$$typeof){case Ke:return c.key===e?p(a,\nb,c,d):null;case oe:return c.key===e?x(a,b,c,d):null;case pe:return null===e?S(a,b,c,d):null;case qe:return c.key===e?D(a,b,c,d):null}if(ye(c)||Le(c))return null!==e?null:y(a,b,c,d);Ne(a,c)}return null}function C(a,b,c,d,e){if(\"string\"===typeof d||\"number\"===typeof d)return a=a.get(c)||null,k(b,a,\"\"+d,e);if(\"object\"===typeof d&&null!==d){switch(d.$$typeof){case Ke:return a=a.get(null===d.key?c:d.key)||null,p(b,a,d,e);case oe:return a=a.get(null===d.key?c:d.key)||null,x(b,a,d,e);case pe:return a=a.get(c)||\nnull,S(b,a,d,e);case qe:return a=a.get(null===d.key?c:d.key)||null,D(b,a,d,e)}if(ye(d)||Le(d))return a=a.get(c)||null,y(b,a,d,e);Ne(b,d)}return null}function Ca(a,f,h,k){for(var m=null,t=null,q=f,r=f=0,p=null;null!==q&&r<h.length;r++){q.index>r?(p=q,q=null):p=q.sibling;var v=H(a,q,h[r],k);if(null===v){null===q&&(q=p);break}b&&q&&null===v.alternate&&c(a,q);f=g(v,f,r);null===t?m=v:t.sibling=v;t=v;q=p}if(r===h.length)return d(a,q),m;if(null===q){for(;r<h.length;r++)if(q=B(a,h[r],k))f=g(q,f,r),null===\nt?m=q:t.sibling=q,t=q;return m}for(q=e(a,q);r<h.length;r++)if(p=C(q,a,r,h[r],k)){if(b&&null!==p.alternate)q[\"delete\"](null===p.key?r:p.key);f=g(p,f,r);null===t?m=p:t.sibling=p;t=p}b&&q.forEach(function(b){return c(a,b)});return m}function r(a,f,h,r){var m=Le(h);\"function\"!==typeof m?w(\"150\"):void 0;h=m.call(h);null==h?w(\"151\"):void 0;for(var t=m=null,q=f,k=f=0,p=null,v=h.next();null!==q&&!v.done;k++,v=h.next()){q.index>k?(p=q,q=null):p=q.sibling;var V=H(a,q,v.value,r);if(null===V){q||(q=p);break}b&&\nq&&null===V.alternate&&c(a,q);f=g(V,f,k);null===t?m=V:t.sibling=V;t=V;q=p}if(v.done)return d(a,q),m;if(null===q){for(;!v.done;k++,v=h.next())v=B(a,v.value,r),null!==v&&(f=g(v,f,k),null===t?m=v:t.sibling=v,t=v);return m}for(q=e(a,q);!v.done;k++,v=h.next())if(v=C(q,a,k,v.value,r),null!==v){if(b&&null!==v.alternate)q[\"delete\"](null===v.key?k:v.key);f=g(v,f,k);null===t?m=v:t.sibling=v;t=v}b&&q.forEach(function(b){return c(a,b)});return m}return function(a,b,e,g){var m=\"object\"===typeof e&&null!==e;if(m)switch(e.$$typeof){case Ke:a:{var C=\ne.key;for(m=b;null!==m;){if(m.key===C)if(m.type===e.type){d(a,m.sibling);b=f(m,g);b.ref=Me(m,e);b.pendingProps=e.props;b[\"return\"]=a;a=b;break a}else{d(a,m);break}else c(a,m);m=m.sibling}g=se(e,a.internalContextTag,g);g.ref=Me(b,e);g[\"return\"]=a;a=g}return h(a);case oe:a:{for(m=e.key;null!==b;){if(b.key===m)if(b.tag===De){d(a,b.sibling);b=f(b,g);b.pendingProps=e;b[\"return\"]=a;a=b;break a}else{d(a,b);break}else c(a,b);b=b.sibling}e=ve(e,a.internalContextTag,g);e[\"return\"]=a;a=e}return h(a);case pe:a:{if(null!==\nb)if(b.tag===Ee){d(a,b.sibling);b=f(b,g);b.type=e.value;b[\"return\"]=a;a=b;break a}else d(a,b);b=we(e,a.internalContextTag,g);b.type=e.value;b[\"return\"]=a;a=b}return h(a);case qe:a:{for(m=e.key;null!==b;){if(b.key===m)if(b.tag===Ce&&b.stateNode.containerInfo===e.containerInfo&&b.stateNode.implementation===e.implementation){d(a,b.sibling);b=f(b,g);b.pendingProps=e.children||[];b[\"return\"]=a;a=b;break a}else{d(a,b);break}else c(a,b);b=b.sibling}e=xe(e,a.internalContextTag,g);e[\"return\"]=a;a=e}return h(a)}if(\"string\"===\ntypeof e||\"number\"===typeof e)return e=\"\"+e,null!==b&&b.tag===Be?(d(a,b.sibling),b=f(b,g),b.pendingProps=e,b[\"return\"]=a,a=b):(d(a,b),e=ue(e,a.internalContextTag,g),e[\"return\"]=a,a=e),h(a);if(ye(e))return Ca(a,b,e,g);if(Le(e))return r(a,b,e,g);m&&Ne(a,e);if(\"undefined\"===typeof e)switch(a.tag){case Ae:case ze:e=a.type,w(\"152\",e.displayName||e.name||\"Component\")}return d(a,b)}}\nvar Pe=Oe(!0,!0),Qe=Oe(!1,!0),Re=Oe(!1,!1),Se={reconcileChildFibers:Pe,reconcileChildFibersInPlace:Qe,mountChildFibersInPlace:Re,cloneChildFibers:function(a,b){null!==a&&b.child!==a.child?w(\"153\"):void 0;if(null!==b.child){a=b.child;var c=re(a,a.pendingWorkPriority);c.pendingProps=a.pendingProps;b.child=c;for(c[\"return\"]=b;null!==a.sibling;)a=a.sibling,c=c.sibling=re(a,a.pendingWorkPriority),c.pendingProps=a.pendingProps,c[\"return\"]=b;c.sibling=null}}},Te=J.Update,Ue=Pd.AsyncUpdates,Ve=R.cacheContext,\nWe=R.getMaskedContext,Xe=R.getUnmaskedContext,Ye=R.isContextConsumer,Ze=ud.addUpdate,$e=ud.addReplaceUpdate,af=ud.addForceUpdate,bf=ud.beginUpdateQueue,cf=R.hasContextChanged,df=bb.isMounted;\nfunction ef(a,b,c,d){function e(a,b){b.updater=f;a.stateNode=b;Pa.set(b,a)}var f={isMounted:df,enqueueSetState:function(c,d,e){c=Pa.get(c);var f=b(c,!1);Ze(c,d,void 0===e?null:e,f);a(c,f)},enqueueReplaceState:function(c,d,e){c=Pa.get(c);var f=b(c,!1);$e(c,d,void 0===e?null:e,f);a(c,f)},enqueueForceUpdate:function(c,d){c=Pa.get(c);var e=b(c,!1);af(c,void 0===d?null:d,e);a(c,e)}};return{adoptClassInstance:e,constructClassInstance:function(a,b){var c=a.type,d=Xe(a),f=Ye(a),g=f?We(a,d):da;b=new c(b,g);\ne(a,b);f&&Ve(a,d,g);return b},mountClassInstance:function(a,b){var c=a.alternate,d=a.stateNode,e=d.state||null,g=a.pendingProps;g?void 0:w(\"158\");var h=Xe(a);d.props=g;d.state=e;d.refs=da;d.context=We(a,h);ed.enableAsyncSubtreeAPI&&null!=a.type&&null!=a.type.prototype&&!0===a.type.prototype.unstable_isAsyncReactComponent&&(a.internalContextTag|=Ue);\"function\"===typeof d.componentWillMount&&(h=d.state,d.componentWillMount(),h!==d.state&&f.enqueueReplaceState(d,d.state,null),h=a.updateQueue,null!==\nh&&(d.state=bf(c,a,h,d,e,g,b)));\"function\"===typeof d.componentDidMount&&(a.effectTag|=Te)},updateClassInstance:function(a,b,e){var g=b.stateNode;g.props=b.memoizedProps;g.state=b.memoizedState;var h=b.memoizedProps,k=b.pendingProps;k||(k=h,null==k?w(\"159\"):void 0);var D=g.context,y=Xe(b);y=We(b,y);\"function\"!==typeof g.componentWillReceiveProps||h===k&&D===y||(D=g.state,g.componentWillReceiveProps(k,y),g.state!==D&&f.enqueueReplaceState(g,g.state,null));D=b.memoizedState;e=null!==b.updateQueue?bf(a,\nb,b.updateQueue,g,D,k,e):D;if(!(h!==k||D!==e||cf()||null!==b.updateQueue&&b.updateQueue.hasForceUpdate))return\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&D===a.memoizedState||(b.effectTag|=Te),!1;var B=k;if(null===h||null!==b.updateQueue&&b.updateQueue.hasForceUpdate)B=!0;else{var H=b.stateNode,C=b.type;B=\"function\"===typeof H.shouldComponentUpdate?H.shouldComponentUpdate(B,e,y):C.prototype&&C.prototype.isPureReactComponent?!ea(h,B)||!ea(D,e):!0}B?(\"function\"===typeof g.componentWillUpdate&&\ng.componentWillUpdate(k,e,y),\"function\"===typeof g.componentDidUpdate&&(b.effectTag|=Te)):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&D===a.memoizedState||(b.effectTag|=Te),c(b,k),d(b,e));g.props=k;g.state=e;g.context=y;return B}}}\nvar ff=Se.mountChildFibersInPlace,gf=Se.reconcileChildFibers,hf=Se.reconcileChildFibersInPlace,jf=Se.cloneChildFibers,kf=ud.beginUpdateQueue,lf=R.getMaskedContext,mf=R.getUnmaskedContext,nf=R.hasContextChanged,of=R.pushContextProvider,pf=R.pushTopLevelContextObject,qf=R.invalidateContextProvider,rf=E.IndeterminateComponent,sf=E.FunctionalComponent,tf=E.ClassComponent,uf=E.HostRoot,wf=E.HostComponent,xf=E.HostText,yf=E.HostPortal,zf=E.CoroutineComponent,Af=E.CoroutineHandlerPhase,Bf=E.YieldComponent,\nCf=E.Fragment,Df=Q.NoWork,Ef=Q.OffscreenPriority,Ff=J.PerformedWork,Gf=J.Placement,Hf=J.ContentReset,If=J.Err,Jf=J.Ref,Kf=Qa.ReactCurrentOwner;\nfunction Lf(a,b,c,d,e){function f(a,b,c){g(a,b,c,b.pendingWorkPriority)}function g(a,b,c,d){b.child=null===a?ff(b,b.child,c,d):a.child===b.child?gf(b,b.child,c,d):hf(b,b.child,c,d)}function h(a,b){var c=b.ref;null===c||a&&a.ref===c||(b.effectTag|=Jf)}function k(a,b,c,d){h(a,b);if(!c)return d&&qf(b,!1),x(a,b);c=b.stateNode;Kf.current=b;var e=c.render();b.effectTag|=Ff;f(a,b,e);b.memoizedState=c.state;b.memoizedProps=c.props;d&&qf(b,!0);return b.child}function p(a){var b=a.stateNode;b.pendingContext?\npf(a,b.pendingContext,b.pendingContext!==b.context):b.context&&pf(a,b.context,!1);C(a,b.containerInfo)}function x(a,b){jf(a,b);return b.child}function S(a,b){switch(b.tag){case uf:p(b);break;case tf:of(b);break;case yf:C(b,b.stateNode.containerInfo)}return null}var D=a.shouldSetTextContent,y=a.useSyncScheduling,B=a.shouldDeprioritizeSubtree,H=b.pushHostContext,C=b.pushHostContainer,Ca=c.enterHydrationState,r=c.resetHydrationState,m=c.tryToClaimNextHydratableInstance;a=ef(d,e,function(a,b){a.memoizedProps=\nb},function(a,b){a.memoizedState=b});var t=a.adoptClassInstance,v=a.constructClassInstance,V=a.mountClassInstance,ld=a.updateClassInstance;return{beginWork:function(a,b,c){if(b.pendingWorkPriority===Df||b.pendingWorkPriority>c)return S(a,b);switch(b.tag){case rf:null!==a?w(\"155\"):void 0;var d=b.type,e=b.pendingProps,g=mf(b);g=lf(b,g);d=d(e,g);b.effectTag|=Ff;\"object\"===typeof d&&null!==d&&\"function\"===typeof d.render?(b.tag=tf,e=of(b),t(b,d),V(b,c),b=k(a,b,!0,e)):(b.tag=sf,f(a,b,d),b.memoizedProps=\ne,b=b.child);return b;case sf:a:{e=b.type;c=b.pendingProps;d=b.memoizedProps;if(nf())null===c&&(c=d);else if(null===c||d===c){b=x(a,b);break a}d=mf(b);d=lf(b,d);e=e(c,d);b.effectTag|=Ff;f(a,b,e);b.memoizedProps=c;b=b.child}return b;case tf:return e=of(b),d=void 0,null===a?b.stateNode?w(\"153\"):(v(b,b.pendingProps),V(b,c),d=!0):d=ld(a,b,c),k(a,b,d,e);case uf:return p(b),d=b.updateQueue,null!==d?(e=b.memoizedState,d=kf(a,b,d,null,e,null,c),e===d?(r(),b=x(a,b)):(e=d.element,null!==a&&null!==a.child||\n!Ca(b)?(r(),f(a,b,e)):(b.effectTag|=Gf,b.child=ff(b,b.child,e,c)),b.memoizedState=d,b=b.child)):(r(),b=x(a,b)),b;case wf:H(b);null===a&&m(b);e=b.type;var q=b.memoizedProps;d=b.pendingProps;null===d&&(d=q,null===d?w(\"154\"):void 0);g=null!==a?a.memoizedProps:null;nf()||null!==d&&q!==d?(q=d.children,D(e,d)?q=null:g&&D(e,g)&&(b.effectTag|=Hf),h(a,b),c!==Ef&&!y&&B(e,d)?(b.pendingWorkPriority=Ef,b=null):(f(a,b,q),b.memoizedProps=d,b=b.child)):b=x(a,b);return b;case xf:return null===a&&m(b),a=b.pendingProps,\nnull===a&&(a=b.memoizedProps),b.memoizedProps=a,null;case Af:b.tag=zf;case zf:c=b.pendingProps;if(nf())null===c&&(c=a&&a.memoizedProps,null===c?w(\"154\"):void 0);else if(null===c||b.memoizedProps===c)c=b.memoizedProps;e=c.children;d=b.pendingWorkPriority;b.stateNode=null===a?ff(b,b.stateNode,e,d):a.child===b.child?gf(b,b.stateNode,e,d):hf(b,b.stateNode,e,d);b.memoizedProps=c;return b.stateNode;case Bf:return null;case yf:a:{C(b,b.stateNode.containerInfo);c=b.pendingWorkPriority;e=b.pendingProps;if(nf())null===\ne&&(e=a&&a.memoizedProps,null==e?w(\"154\"):void 0);else if(null===e||b.memoizedProps===e){b=x(a,b);break a}null===a?b.child=hf(b,b.child,e,c):f(a,b,e);b.memoizedProps=e;b=b.child}return b;case Cf:a:{c=b.pendingProps;if(nf())null===c&&(c=b.memoizedProps);else if(null===c||b.memoizedProps===c){b=x(a,b);break a}f(a,b,c);b.memoizedProps=c;b=b.child}return b;default:w(\"156\")}},beginFailedWork:function(a,b,c){switch(b.tag){case tf:of(b);break;case uf:p(b);break;default:w(\"157\")}b.effectTag|=If;null===a?\nb.child=null:b.child!==a.child&&(b.child=a.child);if(b.pendingWorkPriority===Df||b.pendingWorkPriority>c)return S(a,b);b.firstEffect=null;b.lastEffect=null;g(a,b,null,c);b.tag===tf&&(a=b.stateNode,b.memoizedProps=a.props,b.memoizedState=a.state);return b.child}}}\nvar Mf=Se.reconcileChildFibers,Nf=R.popContextProvider,Of=R.popTopLevelContextObject,Pf=E.IndeterminateComponent,Qf=E.FunctionalComponent,Rf=E.ClassComponent,Sf=E.HostRoot,Tf=E.HostComponent,Uf=E.HostText,Vf=E.HostPortal,Wf=E.CoroutineComponent,Xf=E.CoroutineHandlerPhase,Yf=E.YieldComponent,Zf=E.Fragment,ag=J.Placement,bg=J.Ref,cg=J.Update,dg=Q.OffscreenPriority;\nfunction eg(a,b,c){var d=a.createInstance,e=a.createTextInstance,f=a.appendInitialChild,g=a.finalizeInitialChildren,h=a.prepareUpdate,k=b.getRootHostContainer,p=b.popHostContext,x=b.getHostContext,S=b.popHostContainer,D=c.prepareToHydrateHostInstance,y=c.prepareToHydrateHostTextInstance,B=c.popHydrationState;return{completeWork:function(a,b,c){var r=b.pendingProps;if(null===r)r=b.memoizedProps;else if(b.pendingWorkPriority!==dg||c===dg)b.pendingProps=null;switch(b.tag){case Qf:return null;case Rf:return Nf(b),\nnull;case Sf:S(b);Of(b);r=b.stateNode;r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null);if(null===a||null===a.child)B(b),b.effectTag&=~ag;return null;case Tf:p(b);c=k();var m=b.type;if(null!==a&&null!=b.stateNode){var t=a.memoizedProps,C=b.stateNode,V=x();r=h(C,m,t,r,c,V);if(b.updateQueue=r)b.effectTag|=cg;a.ref!==b.ref&&(b.effectTag|=bg)}else{if(!r)return null===b.stateNode?w(\"166\"):void 0,null;a=x();if(B(b))D(b,c,a)&&(b.effectTag|=cg);else{a=d(m,r,c,a,b);a:for(t=b.child;null!==\nt;){if(t.tag===Tf||t.tag===Uf)f(a,t.stateNode);else if(t.tag!==Vf&&null!==t.child){t=t.child;continue}if(t===b)break a;for(;null===t.sibling;){if(null===t[\"return\"]||t[\"return\"]===b)break a;t=t[\"return\"]}t=t.sibling}g(a,m,r,c)&&(b.effectTag|=cg);b.stateNode=a}null!==b.ref&&(b.effectTag|=bg)}return null;case Uf:if(a&&null!=b.stateNode)a.memoizedProps!==r&&(b.effectTag|=cg);else{if(\"string\"!==typeof r)return null===b.stateNode?w(\"166\"):void 0,null;a=k();c=x();B(b)?y(b)&&(b.effectTag|=cg):b.stateNode=\ne(r,a,c,b)}return null;case Wf:(r=b.memoizedProps)?void 0:w(\"165\");b.tag=Xf;c=[];a:for((m=b.stateNode)&&(m[\"return\"]=b);null!==m;){if(m.tag===Tf||m.tag===Uf||m.tag===Vf)w(\"164\");else if(m.tag===Yf)c.push(m.type);else if(null!==m.child){m.child[\"return\"]=m;m=m.child;continue}for(;null===m.sibling;){if(null===m[\"return\"]||m[\"return\"]===b)break a;m=m[\"return\"]}m.sibling[\"return\"]=m[\"return\"];m=m.sibling}m=r.handler;r=m(r.props,c);b.child=Mf(b,null!==a?a.child:null,r,b.pendingWorkPriority);return b.child;\ncase Xf:return b.tag=Wf,null;case Yf:return null;case Zf:return null;case Vf:return b.effectTag|=cg,S(b),null;case Pf:w(\"167\");default:w(\"156\")}}}}var fg=null,gg=null;function hg(a){return function(b){try{return a(b)}catch(c){}}}\nvar ig={injectInternals:function(a){if(\"undefined\"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!b.supportsFiber)return!0;try{var c=b.inject(a);fg=hg(function(a){return b.onCommitFiberRoot(c,a)});gg=hg(function(a){return b.onCommitFiberUnmount(c,a)})}catch(d){}return!0},onCommitRoot:function(a){\"function\"===typeof fg&&fg(a)},onCommitUnmount:function(a){\"function\"===typeof gg&&gg(a)}},jg=E.ClassComponent,kg=E.HostRoot,lg=E.HostComponent,mg=E.HostText,ng=\nE.HostPortal,og=E.CoroutineComponent,pg=ud.commitCallbacks,qg=ig.onCommitUnmount,rg=J.Placement,sg=J.Update,tg=J.Callback,ug=J.ContentReset;\nfunction vg(a,b){function c(a){var c=a.ref;if(null!==c)try{c(null)}catch(t){b(a,t)}}function d(a){return a.tag===lg||a.tag===kg||a.tag===ng}function e(a){for(var b=a;;)if(g(b),null!==b.child&&b.tag!==ng)b.child[\"return\"]=b,b=b.child;else{if(b===a)break;for(;null===b.sibling;){if(null===b[\"return\"]||b[\"return\"]===a)return;b=b[\"return\"]}b.sibling[\"return\"]=b[\"return\"];b=b.sibling}}function f(a){for(var b=a,c=!1,d=void 0,f=void 0;;){if(!c){c=b[\"return\"];a:for(;;){null===c?w(\"160\"):void 0;switch(c.tag){case lg:d=\nc.stateNode;f=!1;break a;case kg:d=c.stateNode.containerInfo;f=!0;break a;case ng:d=c.stateNode.containerInfo;f=!0;break a}c=c[\"return\"]}c=!0}if(b.tag===lg||b.tag===mg)e(b),f?C(d,b.stateNode):H(d,b.stateNode);else if(b.tag===ng?d=b.stateNode.containerInfo:g(b),null!==b.child){b.child[\"return\"]=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b[\"return\"]||b[\"return\"]===a)return;b=b[\"return\"];b.tag===ng&&(c=!1)}b.sibling[\"return\"]=b[\"return\"];b=b.sibling}}function g(a){\"function\"===\ntypeof qg&&qg(a);switch(a.tag){case jg:c(a);var d=a.stateNode;if(\"function\"===typeof d.componentWillUnmount)try{d.props=a.memoizedProps,d.state=a.memoizedState,d.componentWillUnmount()}catch(t){b(a,t)}break;case lg:c(a);break;case og:e(a.stateNode);break;case ng:f(a)}}var h=a.commitMount,k=a.commitUpdate,p=a.resetTextContent,x=a.commitTextUpdate,S=a.appendChild,D=a.appendChildToContainer,y=a.insertBefore,B=a.insertInContainerBefore,H=a.removeChild,C=a.removeChildFromContainer,Ca=a.getPublicInstance;\nreturn{commitPlacement:function(a){a:{for(var b=a[\"return\"];null!==b;){if(d(b)){var c=b;break a}b=b[\"return\"]}w(\"160\");c=void 0}var e=b=void 0;switch(c.tag){case lg:b=c.stateNode;e=!1;break;case kg:b=c.stateNode.containerInfo;e=!0;break;case ng:b=c.stateNode.containerInfo;e=!0;break;default:w(\"161\")}c.effectTag&ug&&(p(b),c.effectTag&=~ug);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c[\"return\"]||d(c[\"return\"])){c=null;break a}c=c[\"return\"]}c.sibling[\"return\"]=c[\"return\"];for(c=c.sibling;c.tag!==\nlg&&c.tag!==mg;){if(c.effectTag&rg)continue b;if(null===c.child||c.tag===ng)continue b;else c.child[\"return\"]=c,c=c.child}if(!(c.effectTag&rg)){c=c.stateNode;break a}}for(var f=a;;){if(f.tag===lg||f.tag===mg)c?e?B(b,f.stateNode,c):y(b,f.stateNode,c):e?D(b,f.stateNode):S(b,f.stateNode);else if(f.tag!==ng&&null!==f.child){f.child[\"return\"]=f;f=f.child;continue}if(f===a)break;for(;null===f.sibling;){if(null===f[\"return\"]||f[\"return\"]===a)return;f=f[\"return\"]}f.sibling[\"return\"]=f[\"return\"];f=f.sibling}},\ncommitDeletion:function(a){f(a);a[\"return\"]=null;a.child=null;a.alternate&&(a.alternate.child=null,a.alternate[\"return\"]=null)},commitWork:function(a,b){switch(b.tag){case jg:break;case lg:var c=b.stateNode;if(null!=c){var d=b.memoizedProps;a=null!==a?a.memoizedProps:d;var e=b.type,f=b.updateQueue;b.updateQueue=null;null!==f&&k(c,f,e,a,d,b)}break;case mg:null===b.stateNode?w(\"162\"):void 0;c=b.memoizedProps;x(b.stateNode,null!==a?a.memoizedProps:c,c);break;case kg:break;case ng:break;default:w(\"163\")}},\ncommitLifeCycles:function(a,b){switch(b.tag){case jg:var c=b.stateNode;if(b.effectTag&sg)if(null===a)c.props=b.memoizedProps,c.state=b.memoizedState,c.componentDidMount();else{var d=a.memoizedProps;a=a.memoizedState;c.props=b.memoizedProps;c.state=b.memoizedState;c.componentDidUpdate(d,a)}b.effectTag&tg&&null!==b.updateQueue&&pg(b,b.updateQueue,c);break;case kg:a=b.updateQueue;null!==a&&pg(b,a,b.child&&b.child.stateNode);break;case lg:c=b.stateNode;null===a&&b.effectTag&sg&&h(c,b.type,b.memoizedProps,\nb);break;case mg:break;case ng:break;default:w(\"163\")}},commitAttachRef:function(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case lg:b(Ca(c));break;default:b(c)}}},commitDetachRef:function(a){a=a.ref;null!==a&&a(null)}}}var wg=xd.createCursor,xg=xd.pop,yg=xd.push,zg={};\nfunction Ag(a){function b(a){a===zg?w(\"174\"):void 0;return a}var c=a.getChildHostContext,d=a.getRootHostContext,e=wg(zg),f=wg(zg),g=wg(zg);return{getHostContext:function(){return b(e.current)},getRootHostContainer:function(){return b(g.current)},popHostContainer:function(a){xg(e,a);xg(f,a);xg(g,a)},popHostContext:function(a){f.current===a&&(xg(e,a),xg(f,a))},pushHostContainer:function(a,b){yg(g,b,a);b=d(b);yg(f,a,a);yg(e,b,a)},pushHostContext:function(a){var d=b(g.current),h=b(e.current);d=c(h,a.type,\nd);h!==d&&(yg(f,a,a),yg(e,d,a))},resetHostContainer:function(){e.current=zg;g.current=zg}}}var Bg=E.HostComponent,Cg=E.HostText,Dg=E.HostRoot,Eg=J.Deletion,Fg=J.Placement,Gg=de.createFiberFromHostInstanceForDeletion;\nfunction Hg(a){function b(a,b){var c=Gg();c.stateNode=b;c[\"return\"]=a;c.effectTag=Eg;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}function c(a,b){switch(a.tag){case Bg:return f(b,a.type,a.pendingProps);case Cg:return g(b,a.pendingProps);default:return!1}}function d(a){for(a=a[\"return\"];null!==a&&a.tag!==Bg&&a.tag!==Dg;)a=a[\"return\"];y=a}var e=a.shouldSetTextContent,f=a.canHydrateInstance,g=a.canHydrateTextInstance,h=a.getNextHydratableSibling,k=a.getFirstHydratableChild,\np=a.hydrateInstance,x=a.hydrateTextInstance,S=a.didNotHydrateInstance,D=a.didNotFindHydratableInstance;a=a.didNotFindHydratableTextInstance;if(!(f&&g&&h&&k&&p&&x&&S&&D&&a))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){w(\"175\")},prepareToHydrateHostTextInstance:function(){w(\"176\")},popHydrationState:function(){return!1}};var y=null,B=null,H=!1;return{enterHydrationState:function(a){B=\nk(a.stateNode.containerInfo);y=a;return H=!0},resetHydrationState:function(){B=y=null;H=!1},tryToClaimNextHydratableInstance:function(a){if(H){var d=B;if(d){if(!c(a,d)){d=h(d);if(!d||!c(a,d)){a.effectTag|=Fg;H=!1;y=a;return}b(y,B)}a.stateNode=d;y=a;B=k(d)}else a.effectTag|=Fg,H=!1,y=a}},prepareToHydrateHostInstance:function(a,b,c){b=p(a.stateNode,a.type,a.memoizedProps,b,c,a);a.updateQueue=b;return null!==b?!0:!1},prepareToHydrateHostTextInstance:function(a){return x(a.stateNode,a.memoizedProps,a)},\npopHydrationState:function(a){if(a!==y)return!1;if(!H)return d(a),H=!0,!1;var c=a.type;if(a.tag!==Bg||\"head\"!==c&&\"body\"!==c&&!e(c,a.memoizedProps))for(c=B;c;)b(a,c),c=h(c);d(a);B=y?h(a.stateNode):null;return!0}}}\nvar Ig=R.popContextProvider,Jg=xd.reset,Kg=Qa.ReactCurrentOwner,Lg=de.createWorkInProgress,Mg=de.largerPriority,Ng=ig.onCommitRoot,T=Q.NoWork,Og=Q.SynchronousPriority,U=Q.TaskPriority,Pg=Q.HighPriority,Qg=Q.LowPriority,Rg=Q.OffscreenPriority,Sg=Pd.AsyncUpdates,Tg=J.PerformedWork,Ug=J.Placement,Vg=J.Update,Wg=J.PlacementAndUpdate,Xg=J.Deletion,Yg=J.ContentReset,Zg=J.Callback,$g=J.Err,ah=J.Ref,bh=E.HostRoot,ch=E.HostComponent,dh=E.HostPortal,eh=E.ClassComponent,fh=ud.getUpdatePriority,gh=R.resetContext;\nfunction hh(a){function b(){for(;null!==ma&&ma.current.pendingWorkPriority===T;){ma.isScheduled=!1;var a=ma.nextScheduledRoot;ma.nextScheduledRoot=null;if(ma===zb)return zb=ma=null,z=T,null;ma=a}a=ma;for(var b=null,c=T;null!==a;)a.current.pendingWorkPriority!==T&&(c===T||c>a.current.pendingWorkPriority)&&(c=a.current.pendingWorkPriority,b=a),a=a.nextScheduledRoot;null!==b?(z=c,Jg(),gh(),t(),I=Lg(b.current,c),b!==nc&&(oc=0,nc=b)):(z=T,nc=I=null)}function c(c){Hd=!0;na=null;var d=c.stateNode;d.current===\nc?w(\"177\"):void 0;z!==Og&&z!==U||oc++;Kg.current=null;if(c.effectTag>Tg)if(null!==c.lastEffect){c.lastEffect.nextEffect=c;var e=c.firstEffect}else e=c;else e=c.firstEffect;Ui();for(u=e;null!==u;){var f=!1,g=void 0;try{for(;null!==u;){var h=u.effectTag;h&Yg&&a.resetTextContent(u.stateNode);if(h&ah){var k=u.alternate;null!==k&&Ph(k)}switch(h&~(Zg|$g|Yg|ah|Tg)){case Ug:q(u);u.effectTag&=~Ug;break;case Wg:q(u);u.effectTag&=~Ug;vf(u.alternate,u);break;case Vg:vf(u.alternate,u);break;case Xg:Id=!0,Mh(u),\nId=!1}u=u.nextEffect}}catch(Jd){f=!0,g=Jd}f&&(null===u?w(\"178\"):void 0,x(u,g),null!==u&&(u=u.nextEffect))}Vi();d.current=c;for(u=e;null!==u;){d=!1;e=void 0;try{for(;null!==u;){var Gd=u.effectTag;Gd&(Vg|Zg)&&Nh(u.alternate,u);Gd&ah&&Oh(u);if(Gd&$g)switch(f=u,g=void 0,null!==P&&(g=P.get(f),P[\"delete\"](f),null==g&&null!==f.alternate&&(f=f.alternate,g=P.get(f),P[\"delete\"](f))),null==g?w(\"184\"):void 0,f.tag){case eh:f.stateNode.componentDidCatch(g.error,{componentStack:g.componentStack});break;case bh:null===\nJa&&(Ja=g.error);break;default:w(\"157\")}var m=u.nextEffect;u.nextEffect=null;u=m}}catch(Jd){d=!0,e=Jd}d&&(null===u?w(\"178\"):void 0,x(u,e),null!==u&&(u=u.nextEffect))}Hd=!1;\"function\"===typeof Ng&&Ng(c.stateNode);va&&(va.forEach(H),va=null);b()}function d(a){for(;;){var b=Lh(a.alternate,a,z),c=a[\"return\"],d=a.sibling;var e=a;if(!(e.pendingWorkPriority!==T&&e.pendingWorkPriority>z)){for(var f=fh(e),g=e.child;null!==g;)f=Mg(f,g.pendingWorkPriority),g=g.sibling;e.pendingWorkPriority=f}if(null!==b)return b;\nnull!==c&&(null===c.firstEffect&&(c.firstEffect=a.firstEffect),null!==a.lastEffect&&(null!==c.lastEffect&&(c.lastEffect.nextEffect=a.firstEffect),c.lastEffect=a.lastEffect),a.effectTag>Tg&&(null!==c.lastEffect?c.lastEffect.nextEffect=a:c.firstEffect=a,c.lastEffect=a));if(null!==d)return d;if(null!==c)a=c;else{na=a;break}}return null}function e(a){var b=V(a.alternate,a,z);null===b&&(b=d(a));Kg.current=null;return b}function f(a){var b=ld(a.alternate,a,z);null===b&&(b=d(a));Kg.current=null;return b}\nfunction g(a){p(Rg,a)}function h(){if(null!==P&&0<P.size&&z===U)for(;null!==I;){var a=I;I=null!==P&&(P.has(a)||null!==a.alternate&&P.has(a.alternate))?f(I):e(I);if(null===I&&(null===na?w(\"179\"):void 0,O=U,c(na),O=z,null===P||0===P.size||z!==U))break}}function k(a,d){null!==na?(O=U,c(na),h()):null===I&&b();if(!(z===T||z>a)){O=z;a:do{if(z<=U)for(;null!==I&&!(I=e(I),null===I&&(null===na?w(\"179\"):void 0,O=U,c(na),O=z,h(),z===T||z>a||z>U)););else if(null!==d)for(;null!==I&&!Ab;)if(1<d.timeRemaining()){if(I=\ne(I),null===I)if(null===na?w(\"179\"):void 0,1<d.timeRemaining()){if(O=U,c(na),O=z,h(),z===T||z>a||z<Pg)break}else Ab=!0}else Ab=!0;switch(z){case Og:case U:if(z<=a)continue a;break a;case Pg:case Qg:case Rg:if(null===d)break a;if(!Ab&&z<=a)continue a;break a;case T:break a;default:w(\"181\")}}while(1)}}function p(a,b){Da?w(\"182\"):void 0;Da=!0;var c=O,d=!1,e=null;try{k(a,b)}catch(Kd){d=!0,e=Kd}for(;d;){if(Ya){Ja=e;break}var h=I;if(null===h)Ya=!0;else{var p=x(h,e);null===p?w(\"183\"):void 0;if(!Ya){try{d=\np;e=a;p=b;for(var q=d;null!==h;){switch(h.tag){case eh:Ig(h);break;case ch:m(h);break;case bh:r(h);break;case dh:r(h)}if(h===q||h.alternate===q)break;h=h[\"return\"]}I=f(d);k(e,p)}catch(Kd){d=!0;e=Kd;continue}break}}}O=c;null!==b&&(Bb=!1);z>U&&!Bb&&($f(g),Bb=!0);a=Ja;Ya=Ab=Da=!1;nc=Ka=P=Ja=null;oc=0;if(null!==a)throw a;}function x(a,b){var c=Kg.current=null,d=!1,e=!1,f=null;if(a.tag===bh)c=a,S(a)&&(Ya=!0);else for(var g=a[\"return\"];null!==g&&null===c;){g.tag===eh?\"function\"===typeof g.stateNode.componentDidCatch&&\n(d=!0,f=Ra(g),c=g,e=!0):g.tag===bh&&(c=g);if(S(g)){if(Id||null!==va&&(va.has(g)||null!==g.alternate&&va.has(g.alternate)))return null;c=null;e=!1}g=g[\"return\"]}if(null!==c){null===Ka&&(Ka=new Set);Ka.add(c);var h=\"\";g=a;do{a:switch(g.tag){case fe:case ge:case he:case ie:var k=g._debugOwner,m=g._debugSource;var p=Ra(g);var q=null;k&&(q=Ra(k));k=m;p=\"\\n    in \"+(p||\"Unknown\")+(k?\" (at \"+k.fileName.replace(/^.*[\\\\\\/]/,\"\")+\":\"+k.lineNumber+\")\":q?\" (created by \"+q+\")\":\"\");break a;default:p=\"\"}h+=p;g=g[\"return\"]}while(g);\ng=h;a=Ra(a);null===P&&(P=new Map);b={componentName:a,componentStack:g,error:b,errorBoundary:d?c.stateNode:null,errorBoundaryFound:d,errorBoundaryName:f,willRetry:e};P.set(c,b);try{console.error(b.error)}catch(Wi){console.error(Wi)}Hd?(null===va&&(va=new Set),va.add(c)):H(c);return c}null===Ja&&(Ja=b);return null}function S(a){return null!==Ka&&(Ka.has(a)||null!==a.alternate&&Ka.has(a.alternate))}function D(a,b){return y(a,b,!1)}function y(a,b){oc>Xi&&(Ya=!0,w(\"185\"));!Da&&b<=z&&(I=null);for(var c=\n!0;null!==a&&c;){c=!1;if(a.pendingWorkPriority===T||a.pendingWorkPriority>b)c=!0,a.pendingWorkPriority=b;null!==a.alternate&&(a.alternate.pendingWorkPriority===T||a.alternate.pendingWorkPriority>b)&&(c=!0,a.alternate.pendingWorkPriority=b);if(null===a[\"return\"])if(a.tag===bh){var d=a.stateNode;b===T||d.isScheduled||(d.isScheduled=!0,zb?zb.nextScheduledRoot=d:ma=d,zb=d);if(!Da)switch(b){case Og:pc?p(Og,null):p(U,null);break;case U:W?void 0:w(\"186\");break;default:Bb||($f(g),Bb=!0)}}else break;a=a[\"return\"]}}\nfunction B(a,b){var c=O;c===T&&(c=!Yi||a.internalContextTag&Sg||b?Qg:Og);return c===Og&&(Da||W)?U:c}function H(a){y(a,U,!0)}var C=Ag(a),Ca=Hg(a),r=C.popHostContainer,m=C.popHostContext,t=C.resetHostContainer,v=Lf(a,C,Ca,D,B),V=v.beginWork,ld=v.beginFailedWork,Lh=eg(a,C,Ca).completeWork;C=vg(a,x);var q=C.commitPlacement,Mh=C.commitDeletion,vf=C.commitWork,Nh=C.commitLifeCycles,Oh=C.commitAttachRef,Ph=C.commitDetachRef,$f=a.scheduleDeferredCallback,Yi=a.useSyncScheduling,Ui=a.prepareForCommit,Vi=a.resetAfterCommit,\nO=T,Da=!1,Ab=!1,W=!1,pc=!1,I=null,z=T,u=null,na=null,ma=null,zb=null,Bb=!1,P=null,Ka=null,va=null,Ja=null,Ya=!1,Hd=!1,Id=!1,Xi=1E3,oc=0,nc=null;return{scheduleUpdate:D,getPriorityContext:B,batchedUpdates:function(a,b){var c=W;W=!0;try{return a(b)}finally{W=c,Da||W||p(U,null)}},unbatchedUpdates:function(a){var b=pc,c=W;pc=W;W=!1;try{return a()}finally{W=c,pc=b}},flushSync:function(a){var b=W,c=O;W=!0;O=Og;try{return a()}finally{W=b,O=c,Da?w(\"187\"):void 0,p(U,null)}},deferredUpdates:function(a){var b=\nO;O=Qg;try{return a()}finally{O=b}}}}function ih(){w(\"196\")}function jh(a){if(!a)return da;a=Pa.get(a);return\"number\"===typeof a.tag?ih(a):a._processChildContext(a._context)}jh._injectFiber=function(a){ih=a};var kh=ud.addTopLevelUpdate,lh=R.findCurrentUnmaskedContext,mh=R.isContextProvider,nh=R.processChildContext,oh=E.HostComponent,ph=bb.findCurrentHostFiber,qh=bb.findCurrentHostFiberWithNoPortals;jh._injectFiber(function(a){var b=lh(a);return mh(a)?nh(a,b,!1):b});var rh=F.TEXT_NODE;\nfunction sh(a){for(;a&&a.firstChild;)a=a.firstChild;return a}function th(a,b){var c=sh(a);a=0;for(var d;c;){if(c.nodeType===rh){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=sh(c)}}var uh=null;function vh(){!uh&&l.canUseDOM&&(uh=\"textContent\"in document.documentElement?\"textContent\":\"innerText\");return uh}\nvar wh={getOffsets:function(a){var b=window.getSelection&&window.getSelection();if(!b||0===b.rangeCount)return null;var c=b.anchorNode,d=b.anchorOffset,e=b.focusNode,f=b.focusOffset,g=b.getRangeAt(0);try{g.startContainer.nodeType,g.endContainer.nodeType}catch(k){return null}b=b.anchorNode===b.focusNode&&b.anchorOffset===b.focusOffset?0:g.toString().length;var h=g.cloneRange();h.selectNodeContents(a);h.setEnd(g.startContainer,g.startOffset);a=h.startContainer===h.endContainer&&h.startOffset===h.endOffset?\n0:h.toString().length;g=a+b;b=document.createRange();b.setStart(c,d);b.setEnd(e,f);c=b.collapsed;return{start:c?g:a,end:c?a:g}},setOffsets:function(a,b){if(window.getSelection){var c=window.getSelection(),d=a[vh()].length,e=Math.min(b.start,d);b=void 0===b.end?e:Math.min(b.end,d);!c.extend&&e>b&&(d=b,b=e,e=d);d=th(a,e);a=th(a,b);if(d&&a){var f=document.createRange();f.setStart(d.node,d.offset);c.removeAllRanges();e>b?(c.addRange(f),c.extend(a.node,a.offset)):(f.setEnd(a.node,a.offset),c.addRange(f))}}}},\nxh=F.ELEMENT_NODE,yh={hasSelectionCapabilities:function(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&(\"input\"===b&&\"text\"===a.type||\"textarea\"===b||\"true\"===a.contentEditable)},getSelectionInformation:function(){var a=ia();return{focusedElem:a,selectionRange:yh.hasSelectionCapabilities(a)?yh.getSelection(a):null}},restoreSelection:function(a){var b=ia(),c=a.focusedElem;a=a.selectionRange;if(b!==c&&fa(document.documentElement,c)){yh.hasSelectionCapabilities(c)&&yh.setSelection(c,a);b=\n[];for(a=c;a=a.parentNode;)a.nodeType===xh&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});ha(c);for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top}},getSelection:function(a){return(\"selectionStart\"in a?{start:a.selectionStart,end:a.selectionEnd}:wh.getOffsets(a))||{start:0,end:0}},setSelection:function(a,b){var c=b.start,d=b.end;void 0===d&&(d=c);\"selectionStart\"in a?(a.selectionStart=c,a.selectionEnd=Math.min(d,a.value.length)):wh.setOffsets(a,b)}},zh=yh,\nAh=F.ELEMENT_NODE;function Bh(){w(\"211\")}function Ch(){w(\"212\")}function Dh(a){if(null==a)return null;if(a.nodeType===Ah)return a;var b=Pa.get(a);if(b)return\"number\"===typeof b.tag?Bh(b):Ch(b);\"function\"===typeof a.render?w(\"188\"):w(\"213\",Object.keys(a))}Dh._injectFiber=function(a){Bh=a};Dh._injectStack=function(a){Ch=a};var Eh=E.HostComponent;function Fh(a){if(void 0!==a._hostParent)return a._hostParent;if(\"number\"===typeof a.tag){do a=a[\"return\"];while(a&&a.tag!==Eh);if(a)return a}return null}\nfunction Gh(a,b){for(var c=0,d=a;d;d=Fh(d))c++;d=0;for(var e=b;e;e=Fh(e))d++;for(;0<c-d;)a=Fh(a),c--;for(;0<d-c;)b=Fh(b),d--;for(;c--;){if(a===b||a===b.alternate)return a;a=Fh(a);b=Fh(b)}return null}\nvar Hh={isAncestor:function(a,b){for(;b;){if(a===b||a===b.alternate)return!0;b=Fh(b)}return!1},getLowestCommonAncestor:Gh,getParentInstance:function(a){return Fh(a)},traverseTwoPhase:function(a,b,c){for(var d=[];a;)d.push(a),a=Fh(a);for(a=d.length;0<a--;)b(d[a],\"captured\",c);for(a=0;a<d.length;a++)b(d[a],\"bubbled\",c)},traverseEnterLeave:function(a,b,c,d,e){for(var f=a&&b?Gh(a,b):null,g=[];a&&a!==f;)g.push(a),a=Fh(a);for(a=[];b&&b!==f;)a.push(b),b=Fh(b);for(b=0;b<g.length;b++)c(g[b],\"bubbled\",d);for(b=\na.length;0<b--;)c(a[b],\"captured\",e)}},Ih=Jb.getListener;function Jh(a,b,c){if(b=Ih(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=Cb(c._dispatchListeners,b),c._dispatchInstances=Cb(c._dispatchInstances,a)}function Kh(a){a&&a.dispatchConfig.phasedRegistrationNames&&Hh.traverseTwoPhase(a._targetInst,Jh,a)}function Qh(a){if(a&&a.dispatchConfig.phasedRegistrationNames){var b=a._targetInst;b=b?Hh.getParentInstance(b):null;Hh.traverseTwoPhase(b,Jh,a)}}\nfunction Rh(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Ih(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=Cb(c._dispatchListeners,b),c._dispatchInstances=Cb(c._dispatchInstances,a))}function Sh(a){a&&a.dispatchConfig.registrationName&&Rh(a._targetInst,null,a)}\nvar Th={accumulateTwoPhaseDispatches:function(a){Db(a,Kh)},accumulateTwoPhaseDispatchesSkipTarget:function(a){Db(a,Qh)},accumulateDirectDispatches:function(a){Db(a,Sh)},accumulateEnterLeaveDispatches:function(a,b,c,d){Hh.traverseEnterLeave(c,d,Rh,a,b)}},X={_root:null,_startText:null,_fallbackText:null},Uh={initialize:function(a){X._root=a;X._startText=Uh.getText();return!0},reset:function(){X._root=null;X._startText=null;X._fallbackText=null},getData:function(){if(X._fallbackText)return X._fallbackText;\nvar a,b=X._startText,c=b.length,d,e=Uh.getText(),f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);X._fallbackText=e.slice(a,1<d?1-d:void 0);return X._fallbackText},getText:function(){return\"value\"in X._root?X._root.value:X._root[vh()]}},Vh=Uh,Wh=\"dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances\".split(\" \"),Xh={type:null,target:null,currentTarget:ca.thatReturnsNull,eventPhase:null,bubbles:null,\ncancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};\nfunction Y(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):\"target\"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?ca.thatReturnsTrue:ca.thatReturnsFalse;this.isPropagationStopped=ca.thatReturnsFalse;return this}\nn(Y.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():\"unknown\"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=ca.thatReturnsTrue)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():\"unknown\"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=ca.thatReturnsTrue)},persist:function(){this.isPersistent=ca.thatReturnsTrue},isPersistent:ca.thatReturnsFalse,\ndestructor:function(){var a=this.constructor.Interface,b;for(b in a)this[b]=null;for(a=0;a<Wh.length;a++)this[Wh[a]]=null}});Y.Interface=Xh;Y.augmentClass=function(a,b){function c(){}c.prototype=this.prototype;var d=new c;n(d,a.prototype);a.prototype=d;a.prototype.constructor=a;a.Interface=n({},this.Interface,b);a.augmentClass=this.augmentClass;Yh(a)};Yh(Y);function Zh(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}\nfunction $h(a){a instanceof this?void 0:w(\"223\");a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function Yh(a){a.eventPool=[];a.getPooled=Zh;a.release=$h}function ai(a,b,c,d){return Y.call(this,a,b,c,d)}Y.augmentClass(ai,{data:null});function bi(a,b,c,d){return Y.call(this,a,b,c,d)}Y.augmentClass(bi,{data:null});var ci=[9,13,27,32],di=l.canUseDOM&&\"CompositionEvent\"in window,ei=null;l.canUseDOM&&\"documentMode\"in document&&(ei=document.documentMode);var fi;\nif(fi=l.canUseDOM&&\"TextEvent\"in window&&!ei){var gi=window.opera;fi=!(\"object\"===typeof gi&&\"function\"===typeof gi.version&&12>=parseInt(gi.version(),10))}\nvar hi=fi,ii=l.canUseDOM&&(!di||ei&&8<ei&&11>=ei),ji=String.fromCharCode(32),ki={beforeInput:{phasedRegistrationNames:{bubbled:\"onBeforeInput\",captured:\"onBeforeInputCapture\"},dependencies:[\"topCompositionEnd\",\"topKeyPress\",\"topTextInput\",\"topPaste\"]},compositionEnd:{phasedRegistrationNames:{bubbled:\"onCompositionEnd\",captured:\"onCompositionEndCapture\"},dependencies:\"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown\".split(\" \")},compositionStart:{phasedRegistrationNames:{bubbled:\"onCompositionStart\",\ncaptured:\"onCompositionStartCapture\"},dependencies:\"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown\".split(\" \")},compositionUpdate:{phasedRegistrationNames:{bubbled:\"onCompositionUpdate\",captured:\"onCompositionUpdateCapture\"},dependencies:\"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown\".split(\" \")}},li=!1;\nfunction mi(a,b){switch(a){case \"topKeyUp\":return-1!==ci.indexOf(b.keyCode);case \"topKeyDown\":return 229!==b.keyCode;case \"topKeyPress\":case \"topMouseDown\":case \"topBlur\":return!0;default:return!1}}function ni(a){a=a.detail;return\"object\"===typeof a&&\"data\"in a?a.data:null}var oi=!1;function pi(a,b){switch(a){case \"topCompositionEnd\":return ni(b);case \"topKeyPress\":if(32!==b.which)return null;li=!0;return ji;case \"topTextInput\":return a=b.data,a===ji&&li?null:a;default:return null}}\nfunction qi(a,b){if(oi)return\"topCompositionEnd\"===a||!di&&mi(a,b)?(a=Vh.getData(),Vh.reset(),oi=!1,a):null;switch(a){case \"topPaste\":return null;case \"topKeyPress\":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case \"topCompositionEnd\":return ii?null:b.data;default:return null}}\nvar ri={eventTypes:ki,extractEvents:function(a,b,c,d){var e;if(di)b:{switch(a){case \"topCompositionStart\":var f=ki.compositionStart;break b;case \"topCompositionEnd\":f=ki.compositionEnd;break b;case \"topCompositionUpdate\":f=ki.compositionUpdate;break b}f=void 0}else oi?mi(a,c)&&(f=ki.compositionEnd):\"topKeyDown\"===a&&229===c.keyCode&&(f=ki.compositionStart);f?(ii&&(oi||f!==ki.compositionStart?f===ki.compositionEnd&&oi&&(e=Vh.getData()):oi=Vh.initialize(d)),f=ai.getPooled(f,b,c,d),e?f.data=e:(e=ni(c),\nnull!==e&&(f.data=e)),Th.accumulateTwoPhaseDispatches(f),e=f):e=null;(a=hi?pi(a,c):qi(a,c))?(b=bi.getPooled(ki.beforeInput,b,c,d),b.data=a,Th.accumulateTwoPhaseDispatches(b)):b=null;return[e,b]}},si={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ti(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return\"input\"===b?!!si[a.type]:\"textarea\"===b?!0:!1}\nvar ui={change:{phasedRegistrationNames:{bubbled:\"onChange\",captured:\"onChangeCapture\"},dependencies:\"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange\".split(\" \")}};function vi(a,b,c){a=Y.getPooled(ui.change,a,b,c);a.type=\"change\";nb.enqueueStateRestore(c);Th.accumulateTwoPhaseDispatches(a);return a}var wi=null,xi=null;function yi(a){Jb.enqueueEvents(a);Jb.processEventQueue(!1)}\nfunction zi(a){var b=G.getNodeFromInstance(a);if(Bc.updateValueIfChanged(b))return a}function Ai(a,b){if(\"topChange\"===a)return b}var Bi=!1;l.canUseDOM&&(Bi=Lb(\"input\")&&(!document.documentMode||9<document.documentMode));function Ci(){wi&&(wi.detachEvent(\"onpropertychange\",Di),xi=wi=null)}function Di(a){\"value\"===a.propertyName&&zi(xi)&&(a=vi(xi,a,ub(a)),sb.batchedUpdates(yi,a))}function Ei(a,b,c){\"topFocus\"===a?(Ci(),wi=b,xi=c,wi.attachEvent(\"onpropertychange\",Di)):\"topBlur\"===a&&Ci()}\nfunction Fi(a){if(\"topSelectionChange\"===a||\"topKeyUp\"===a||\"topKeyDown\"===a)return zi(xi)}function Gi(a,b){if(\"topClick\"===a)return zi(b)}function Hi(a,b){if(\"topInput\"===a||\"topChange\"===a)return zi(b)}\nvar Ii={eventTypes:ui,_isInputEventSupported:Bi,extractEvents:function(a,b,c,d){var e=b?G.getNodeFromInstance(b):window,f=e.nodeName&&e.nodeName.toLowerCase();if(\"select\"===f||\"input\"===f&&\"file\"===e.type)var g=Ai;else if(ti(e))if(Bi)g=Hi;else{g=Fi;var h=Ei}else f=e.nodeName,!f||\"input\"!==f.toLowerCase()||\"checkbox\"!==e.type&&\"radio\"!==e.type||(g=Gi);if(g&&(g=g(a,b)))return vi(g,c,d);h&&h(a,e,b);\"topBlur\"===a&&null!=b&&(a=b._wrapperState||e._wrapperState)&&a.controlled&&\"number\"===e.type&&(a=\"\"+e.value,\ne.getAttribute(\"value\")!==a&&e.setAttribute(\"value\",a))}};function Ji(a,b,c,d){return Y.call(this,a,b,c,d)}Y.augmentClass(Ji,{view:function(a){if(a.view)return a.view;a=ub(a);return a.window===a?a:(a=a.ownerDocument)?a.defaultView||a.parentWindow:window},detail:function(a){return a.detail||0}});var Ki={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function Li(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Ki[a])?!!b[a]:!1}function Mi(){return Li}\nfunction Ni(a,b,c,d){return Y.call(this,a,b,c,d)}Ji.augmentClass(Ni,{screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Mi,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)}});\nvar Oi={mouseEnter:{registrationName:\"onMouseEnter\",dependencies:[\"topMouseOut\",\"topMouseOver\"]},mouseLeave:{registrationName:\"onMouseLeave\",dependencies:[\"topMouseOut\",\"topMouseOver\"]}},Pi={eventTypes:Oi,extractEvents:function(a,b,c,d){if(\"topMouseOver\"===a&&(c.relatedTarget||c.fromElement)||\"topMouseOut\"!==a&&\"topMouseOver\"!==a)return null;var e=d.window===d?d:(e=d.ownerDocument)?e.defaultView||e.parentWindow:window;\"topMouseOut\"===a?(a=b,b=(b=c.relatedTarget||c.toElement)?G.getClosestInstanceFromNode(b):\nnull):a=null;if(a===b)return null;var f=null==a?e:G.getNodeFromInstance(a);e=null==b?e:G.getNodeFromInstance(b);var g=Ni.getPooled(Oi.mouseLeave,a,c,d);g.type=\"mouseleave\";g.target=f;g.relatedTarget=e;c=Ni.getPooled(Oi.mouseEnter,b,c,d);c.type=\"mouseenter\";c.target=e;c.relatedTarget=f;Th.accumulateEnterLeaveDispatches(g,c,a,b);return[g,c]}},Qi=F.DOCUMENT_NODE,Ri=l.canUseDOM&&\"documentMode\"in document&&11>=document.documentMode,Si={select:{phasedRegistrationNames:{bubbled:\"onSelect\",captured:\"onSelectCapture\"},\ndependencies:\"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange\".split(\" \")}},Ti=null,Zi=null,$i=null,aj=!1,bj=M.isListeningToAllDependencies;\nfunction cj(a,b){if(aj||null==Ti||Ti!==ia())return null;var c=Ti;\"selectionStart\"in c&&zh.hasSelectionCapabilities(c)?c={start:c.selectionStart,end:c.selectionEnd}:window.getSelection?(c=window.getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset}):c=void 0;return $i&&ea($i,c)?null:($i=c,a=Y.getPooled(Si.select,Zi,a,b),a.type=\"select\",a.target=Ti,Th.accumulateTwoPhaseDispatches(a),a)}\nvar dj={eventTypes:Si,extractEvents:function(a,b,c,d){var e=d.window===d?d.document:d.nodeType===Qi?d:d.ownerDocument;if(!e||!bj(\"onSelect\",e))return null;e=b?G.getNodeFromInstance(b):window;switch(a){case \"topFocus\":if(ti(e)||\"true\"===e.contentEditable)Ti=e,Zi=b,$i=null;break;case \"topBlur\":$i=Zi=Ti=null;break;case \"topMouseDown\":aj=!0;break;case \"topContextMenu\":case \"topMouseUp\":return aj=!1,cj(c,d);case \"topSelectionChange\":if(Ri)break;case \"topKeyDown\":case \"topKeyUp\":return cj(c,d)}return null}};\nfunction ej(a,b,c,d){return Y.call(this,a,b,c,d)}Y.augmentClass(ej,{animationName:null,elapsedTime:null,pseudoElement:null});function fj(a,b,c,d){return Y.call(this,a,b,c,d)}Y.augmentClass(fj,{clipboardData:function(a){return\"clipboardData\"in a?a.clipboardData:window.clipboardData}});function gj(a,b,c,d){return Y.call(this,a,b,c,d)}Ji.augmentClass(gj,{relatedTarget:null});function hj(a){var b=a.keyCode;\"charCode\"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;return 32<=a||13===a?a:0}\nvar ij={Esc:\"Escape\",Spacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},jj={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",\n116:\"F5\",117:\"F6\",118:\"F7\",119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"};function kj(a,b,c,d){return Y.call(this,a,b,c,d)}\nJi.augmentClass(kj,{key:function(a){if(a.key){var b=ij[a.key]||a.key;if(\"Unidentified\"!==b)return b}return\"keypress\"===a.type?(a=hj(a),13===a?\"Enter\":String.fromCharCode(a)):\"keydown\"===a.type||\"keyup\"===a.type?jj[a.keyCode]||\"Unidentified\":\"\"},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Mi,charCode:function(a){return\"keypress\"===a.type?hj(a):0},keyCode:function(a){return\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0},which:function(a){return\"keypress\"===\na.type?hj(a):\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0}});function lj(a,b,c,d){return Y.call(this,a,b,c,d)}Ni.augmentClass(lj,{dataTransfer:null});function mj(a,b,c,d){return Y.call(this,a,b,c,d)}Ji.augmentClass(mj,{touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Mi});function nj(a,b,c,d){return Y.call(this,a,b,c,d)}Y.augmentClass(nj,{propertyName:null,elapsedTime:null,pseudoElement:null});\nfunction oj(a,b,c,d){return Y.call(this,a,b,c,d)}Ni.augmentClass(oj,{deltaX:function(a){return\"deltaX\"in a?a.deltaX:\"wheelDeltaX\"in a?-a.wheelDeltaX:0},deltaY:function(a){return\"deltaY\"in a?a.deltaY:\"wheelDeltaY\"in a?-a.wheelDeltaY:\"wheelDelta\"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null});var pj={},qj={};\n\"abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel\".split(\" \").forEach(function(a){var b=a[0].toUpperCase()+\na.slice(1),c=\"on\"+b;b=\"top\"+b;c={phasedRegistrationNames:{bubbled:c,captured:c+\"Capture\"},dependencies:[b]};pj[a]=c;qj[b]=c});\nvar rj={eventTypes:pj,extractEvents:function(a,b,c,d){var e=qj[a];if(!e)return null;switch(a){case \"topAbort\":case \"topCancel\":case \"topCanPlay\":case \"topCanPlayThrough\":case \"topClose\":case \"topDurationChange\":case \"topEmptied\":case \"topEncrypted\":case \"topEnded\":case \"topError\":case \"topInput\":case \"topInvalid\":case \"topLoad\":case \"topLoadedData\":case \"topLoadedMetadata\":case \"topLoadStart\":case \"topPause\":case \"topPlay\":case \"topPlaying\":case \"topProgress\":case \"topRateChange\":case \"topReset\":case \"topSeeked\":case \"topSeeking\":case \"topStalled\":case \"topSubmit\":case \"topSuspend\":case \"topTimeUpdate\":case \"topToggle\":case \"topVolumeChange\":case \"topWaiting\":var f=Y;\nbreak;case \"topKeyPress\":if(0===hj(c))return null;case \"topKeyDown\":case \"topKeyUp\":f=kj;break;case \"topBlur\":case \"topFocus\":f=gj;break;case \"topClick\":if(2===c.button)return null;case \"topDoubleClick\":case \"topMouseDown\":case \"topMouseMove\":case \"topMouseUp\":case \"topMouseOut\":case \"topMouseOver\":case \"topContextMenu\":f=Ni;break;case \"topDrag\":case \"topDragEnd\":case \"topDragEnter\":case \"topDragExit\":case \"topDragLeave\":case \"topDragOver\":case \"topDragStart\":case \"topDrop\":f=lj;break;case \"topTouchCancel\":case \"topTouchEnd\":case \"topTouchMove\":case \"topTouchStart\":f=\nmj;break;case \"topAnimationEnd\":case \"topAnimationIteration\":case \"topAnimationStart\":f=ej;break;case \"topTransitionEnd\":f=nj;break;case \"topScroll\":f=Ji;break;case \"topWheel\":f=oj;break;case \"topCopy\":case \"topCut\":case \"topPaste\":f=fj}f?void 0:w(\"86\",a);a=f.getPooled(e,b,c,d);Th.accumulateTwoPhaseDispatches(a);return a}};L.setHandleTopLevel(M.handleTopLevel);Jb.injection.injectEventPluginOrder(\"ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin\".split(\" \"));\nib.injection.injectComponentTree(G);Jb.injection.injectEventPluginsByName({SimpleEventPlugin:rj,EnterLeaveEventPlugin:Pi,ChangeEventPlugin:Ii,SelectEventPlugin:dj,BeforeInputEventPlugin:ri});\nvar sj=A.injection.MUST_USE_PROPERTY,Z=A.injection.HAS_BOOLEAN_VALUE,tj=A.injection.HAS_NUMERIC_VALUE,uj=A.injection.HAS_POSITIVE_NUMERIC_VALUE,vj=A.injection.HAS_STRING_BOOLEAN_VALUE,wj={Properties:{allowFullScreen:Z,allowTransparency:vj,async:Z,autoPlay:Z,capture:Z,checked:sj|Z,cols:uj,contentEditable:vj,controls:Z,\"default\":Z,defer:Z,disabled:Z,download:A.injection.HAS_OVERLOADED_BOOLEAN_VALUE,draggable:vj,formNoValidate:Z,hidden:Z,loop:Z,multiple:sj|Z,muted:sj|Z,noValidate:Z,open:Z,playsInline:Z,\nreadOnly:Z,required:Z,reversed:Z,rows:uj,rowSpan:tj,scoped:Z,seamless:Z,selected:sj|Z,size:uj,start:tj,span:uj,spellCheck:vj,style:0,itemScope:Z,acceptCharset:0,className:0,htmlFor:0,httpEquiv:0,value:vj},DOMAttributeNames:{acceptCharset:\"accept-charset\",className:\"class\",htmlFor:\"for\",httpEquiv:\"http-equiv\"},DOMMutationMethods:{value:function(a,b){if(null==b)return a.removeAttribute(\"value\");\"number\"!==a.type||!1===a.hasAttribute(\"value\")?a.setAttribute(\"value\",\"\"+b):a.validity&&!a.validity.badInput&&\na.ownerDocument.activeElement!==a&&a.setAttribute(\"value\",\"\"+b)}}},xj=A.injection.HAS_STRING_BOOLEAN_VALUE,yj={xlink:\"http://www.w3.org/1999/xlink\",xml:\"http://www.w3.org/XML/1998/namespace\"},zj={Properties:{autoReverse:xj,externalResourcesRequired:xj,preserveAlpha:xj},DOMAttributeNames:{autoReverse:\"autoReverse\",externalResourcesRequired:\"externalResourcesRequired\",preserveAlpha:\"preserveAlpha\"},DOMAttributeNamespaces:{xlinkActuate:yj.xlink,xlinkArcrole:yj.xlink,xlinkHref:yj.xlink,xlinkRole:yj.xlink,\nxlinkShow:yj.xlink,xlinkTitle:yj.xlink,xlinkType:yj.xlink,xmlBase:yj.xml,xmlLang:yj.xml,xmlSpace:yj.xml}},Aj=/[\\-\\:]([a-z])/g;function Bj(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space\".split(\" \").forEach(function(a){var b=a.replace(Aj,\nBj);zj.Properties[b]=0;zj.DOMAttributeNames[b]=a});A.injection.injectDOMPropertyConfig(wj);A.injection.injectDOMPropertyConfig(zj);\nvar Cj=ig.injectInternals,Dj=F.ELEMENT_NODE,Ej=F.TEXT_NODE,Fj=F.COMMENT_NODE,Gj=F.DOCUMENT_NODE,Hj=F.DOCUMENT_FRAGMENT_NODE,Ij=A.ROOT_ATTRIBUTE_NAME,Jj=ka.getChildNamespace,Kj=N.createElement,Lj=N.createTextNode,Mj=N.setInitialProperties,Nj=N.diffProperties,Oj=N.updateProperties,Pj=N.diffHydratedProperties,Qj=N.diffHydratedText,Rj=N.warnForDeletedHydratableElement,Sj=N.warnForDeletedHydratableText,Tj=N.warnForInsertedHydratedElement,Uj=N.warnForInsertedHydratedText,Vj=G.precacheFiberNode,Wj=G.updateFiberProps;\nnb.injection.injectFiberControlledHostComponent(N);Dh._injectFiber(function(a){return Xj.findHostInstance(a)});var Yj=null,Zj=null;function ak(a){return!(!a||a.nodeType!==Dj&&a.nodeType!==Gj&&a.nodeType!==Hj&&(a.nodeType!==Fj||\" react-mount-point-unstable \"!==a.nodeValue))}function bk(a){a=a?a.nodeType===Gj?a.documentElement:a.firstChild:null;return!(!a||a.nodeType!==Dj||!a.hasAttribute(Ij))}\nvar Xj=function(a){var b=a.getPublicInstance;a=hh(a);var c=a.scheduleUpdate,d=a.getPriorityContext;return{createContainer:function(a){var b=ee();a={current:b,containerInfo:a,isScheduled:!1,nextScheduledRoot:null,context:null,pendingContext:null};return b.stateNode=a},updateContainer:function(a,b,g,h){var e=b.current;g=jh(g);null===b.context?b.context=g:b.pendingContext=g;b=h;h=d(e,ed.enableAsyncSubtreeAPI&&null!=a&&null!=a.type&&null!=a.type.prototype&&!0===a.type.prototype.unstable_isAsyncReactComponent);\na={element:a};kh(e,a,void 0===b?null:b,h);c(e,h)},batchedUpdates:a.batchedUpdates,unbatchedUpdates:a.unbatchedUpdates,deferredUpdates:a.deferredUpdates,flushSync:a.flushSync,getPublicRootInstance:function(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case oh:return b(a.child.stateNode);default:return a.child.stateNode}},findHostInstance:function(a){a=ph(a);return null===a?null:a.stateNode},findHostInstanceWithNoPortals:function(a){a=qh(a);return null===a?null:a.stateNode}}}({getRootHostContext:function(a){if(a.nodeType===\nGj)a=(a=a.documentElement)?a.namespaceURI:Jj(null,\"\");else{var b=a.nodeType===Fj?a.parentNode:a;a=b.namespaceURI||null;b=b.tagName;a=Jj(a,b)}return a},getChildHostContext:function(a,b){return Jj(a,b)},getPublicInstance:function(a){return a},prepareForCommit:function(){Yj=M.isEnabled();Zj=zh.getSelectionInformation();M.setEnabled(!1)},resetAfterCommit:function(){zh.restoreSelection(Zj);Zj=null;M.setEnabled(Yj);Yj=null},createInstance:function(a,b,c,d,e){a=Kj(a,b,c,d);Vj(e,a);Wj(a,b);return a},appendInitialChild:function(a,\nb){a.appendChild(b)},finalizeInitialChildren:function(a,b,c,d){Mj(a,b,c,d);a:{switch(b){case \"button\":case \"input\":case \"select\":case \"textarea\":a=!!c.autoFocus;break a}a=!1}return a},prepareUpdate:function(a,b,c,d,e){return Nj(a,b,c,d,e)},commitMount:function(a){a.focus()},commitUpdate:function(a,b,c,d,e){Wj(a,e);Oj(a,b,c,d,e)},shouldSetTextContent:function(a,b){return\"textarea\"===a||\"string\"===typeof b.children||\"number\"===typeof b.children||\"object\"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&\n\"string\"===typeof b.dangerouslySetInnerHTML.__html},resetTextContent:function(a){a.textContent=\"\"},shouldDeprioritizeSubtree:function(a,b){return!!b.hidden},createTextInstance:function(a,b,c,d){a=Lj(a,b);Vj(d,a);return a},commitTextUpdate:function(a,b,c){a.nodeValue=c},appendChild:function(a,b){a.appendChild(b)},appendChildToContainer:function(a,b){a.nodeType===Fj?a.parentNode.insertBefore(b,a):a.appendChild(b)},insertBefore:function(a,b,c){a.insertBefore(b,c)},insertInContainerBefore:function(a,\nb,c){a.nodeType===Fj?a.parentNode.insertBefore(b,c):a.insertBefore(b,c)},removeChild:function(a,b){a.removeChild(b)},removeChildFromContainer:function(a,b){a.nodeType===Fj?a.parentNode.removeChild(b):a.removeChild(b)},canHydrateInstance:function(a,b){return a.nodeType===Dj&&b===a.nodeName.toLowerCase()},canHydrateTextInstance:function(a,b){return\"\"===b?!1:a.nodeType===Ej},getNextHydratableSibling:function(a){for(a=a.nextSibling;a&&a.nodeType!==Dj&&a.nodeType!==Ej;)a=a.nextSibling;return a},getFirstHydratableChild:function(a){for(a=\na.firstChild;a&&a.nodeType!==Dj&&a.nodeType!==Ej;)a=a.nextSibling;return a},hydrateInstance:function(a,b,c,d,e,f){Vj(f,a);Wj(a,c);return Pj(a,b,c,e,d)},hydrateTextInstance:function(a,b,c){Vj(c,a);return Qj(a,b)},didNotHydrateInstance:function(a,b){1===b.nodeType?Rj(a,b):Sj(a,b)},didNotFindHydratableInstance:function(a,b,c){Tj(a,b,c)},didNotFindHydratableTextInstance:function(a,b){Uj(a,b)},scheduleDeferredCallback:dd.rIC,useSyncScheduling:!0});sb.injection.injectFiberBatchedUpdates(Xj.batchedUpdates);\nfunction ck(a,b,c,d,e){ak(c)?void 0:w(\"200\");var f=c._reactRootContainer;if(f)Xj.updateContainer(b,f,a,e);else{if(!d&&!bk(c))for(d=void 0;d=c.lastChild;)c.removeChild(d);var g=Xj.createContainer(c);f=c._reactRootContainer=g;Xj.unbatchedUpdates(function(){Xj.updateContainer(b,g,a,e)})}return Xj.getPublicRootInstance(f)}function dk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;ak(b)?void 0:w(\"200\");return ne.createPortal(a,b,null,c)}\nvar ek={createPortal:dk,hydrate:function(a,b,c){return ck(null,a,b,!0,c)},render:function(a,b,c){return ck(null,a,b,!1,c)},unstable_renderSubtreeIntoContainer:function(a,b,c,d){null!=a&&Pa.has(a)?void 0:w(\"38\");return ck(a,b,c,!1,d)},unmountComponentAtNode:function(a){ak(a)?void 0:w(\"40\");return a._reactRootContainer?(Xj.unbatchedUpdates(function(){ck(null,null,a,!1,function(){a._reactRootContainer=null})}),!0):!1},findDOMNode:Dh,unstable_createPortal:dk,unstable_batchedUpdates:sb.batchedUpdates,\nunstable_deferredUpdates:Xj.deferredUpdates,flushSync:Xj.flushSync,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:Jb,EventPluginRegistry:sa,EventPropagators:Th,ReactControlledComponent:nb,ReactDOMComponentTree:G,ReactDOMEventListener:L}};Cj({findFiberByHostInstance:G.getClosestInstanceFromNode,findHostInstanceByFiber:Xj.findHostInstance,bundleType:0,version:\"16.0.0\",rendererPackageName:\"react-dom\"});module.exports=ek;\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n\n/**\n * Simple, lightweight module assisting with the detection and context of\n * Worker. Helps avoid circular dependencies and allows code to reason about\n * whether or not they are in a Worker, even if they never include the main\n * `ReactWorker` dependency.\n */\nvar ExecutionEnvironment = {\n\n  canUseDOM: canUseDOM,\n\n  canUseWorkers: typeof Worker !== 'undefined',\n\n  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),\n\n  canUseViewport: canUseDOM && !!window.screen,\n\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.\n\n};\n\nmodule.exports = ExecutionEnvironment;\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar emptyFunction = __webpack_require__(4);\n\n/**\n * Upstream version of event listener. Does not take into account specific\n * nature of platform.\n */\nvar EventListener = {\n  /**\n   * Listen to DOM events during the bubble phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  listen: function listen(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function remove() {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent('on' + eventType, callback);\n      return {\n        remove: function remove() {\n          target.detachEvent('on' + eventType, callback);\n        }\n      };\n    }\n  },\n\n  /**\n   * Listen to DOM events during the capture phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  capture: function capture(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, true);\n      return {\n        remove: function remove() {\n          target.removeEventListener(eventType, callback, true);\n        }\n      };\n    } else {\n      if (false) {\n        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');\n      }\n      return {\n        remove: emptyFunction\n      };\n    }\n  },\n\n  registerDefault: function registerDefault() {}\n};\n\nmodule.exports = EventListener;\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n * \n */\n\n/*eslint-disable no-self-compare */\n\n\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Added the nonzero y check to make Flow happy, but it is redundant\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n  }\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA, objB) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = shallowEqual;\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar isTextNode = __webpack_require__(37);\n\n/*eslint-disable no-bitwise */\n\n/**\n * Checks if a given DOM node contains or is another DOM node.\n */\nfunction containsNode(outerNode, innerNode) {\n  if (!outerNode || !innerNode) {\n    return false;\n  } else if (outerNode === innerNode) {\n    return true;\n  } else if (isTextNode(outerNode)) {\n    return false;\n  } else if (isTextNode(innerNode)) {\n    return containsNode(outerNode, innerNode.parentNode);\n  } else if ('contains' in outerNode) {\n    return outerNode.contains(innerNode);\n  } else if (outerNode.compareDocumentPosition) {\n    return !!(outerNode.compareDocumentPosition(innerNode) & 16);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = containsNode;\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar isNode = __webpack_require__(38);\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM text node.\n */\nfunction isTextNode(object) {\n  return isNode(object) && object.nodeType == 3;\n}\n\nmodule.exports = isTextNode;\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM node.\n */\nfunction isNode(object) {\n  var doc = object ? object.ownerDocument || object : document;\n  var defaultView = doc.defaultView || window;\n  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));\n}\n\nmodule.exports = isNode;\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n/**\n * @param {DOMElement} node input/textarea to focus\n */\n\nfunction focusNode(node) {\n  // IE8 can throw \"Can't move focus to the control because it is invisible,\n  // not enabled, or of a type that does not accept the focus.\" for all kinds of\n  // reasons that are too expensive and fragile to test.\n  try {\n    node.focus();\n  } catch (e) {}\n}\n\nmodule.exports = focusNode;\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n/* eslint-disable fb-www/typeof-undefined */\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?DOMDocument} doc Defaults to current document.\n * @return {?DOMElement}\n */\nfunction getActiveElement(doc) /*?DOMElement*/{\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\nmodule.exports = getActiveElement;\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 42 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__App_css__ = __webpack_require__(43);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__App_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__App_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Jazz__ = __webpack_require__(44);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Jazz___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__Jazz__);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var PolySynth=__webpack_require__(22).PolySynth;var polySynth=new PolySynth().toMaster();var Transport=__webpack_require__(22).Transport;var App=function(_Component){_inherits(App,_Component);function App(props){_classCallCheck(this,App);var _this=_possibleConstructorReturn(this,(App.__proto__||Object.getPrototypeOf(App)).call(this,props));var sheet=__WEBPACK_IMPORTED_MODULE_2__Jazz___default.a.getJazz();_this.preparePlaybackForSheet(sheet);_this.state={playing:false,sheet:sheet};_this.togglePlayback=_this.togglePlayback.bind(_this);return _this;}_createClass(App,[{key:'preparePlaybackForSheet',value:function preparePlaybackForSheet(sheet){sheet.chords.map(function(chord,index){var notes=chord.notes().map(function(note){return note.toString();});Transport.scheduleRepeat(function(time){polySynth.triggerAttackRelease(notes,'1n',time);// Repeat a 1n = whole note long chord\n},'4m',// every 4 measures\nindex+'m'// at offset index measures\n);return notes;});}},{key:'togglePlayback',value:function togglePlayback(){var _this2=this;this.setState(Object.assign({},this.state,{playing:!this.state.playing}),function(callback){_this2.state.playing?Transport.start():Transport.stop();// TODO: stop immediately\n});}},{key:'newSheet',value:function newSheet(){// TODO: proper state change\nwindow.location.reload();}},{key:'render',value:function render(){var _this3=this;var writeSheet=function writeSheet(data){//TODO: flexbox approach?\nvar prettyPrint='<div id=\"info\">';prettyPrint+='Key: '+data.key;prettyPrint+='<br>Scale: '+data.scale.simple().map(function(name){return name=name[0].toUpperCase()+name.slice(1);}).join(', ');prettyPrint+='</div>';prettyPrint+='<div id=\"chords\">';data.chords.map(function(chord){return prettyPrint+=\"<span class='chord'>\"+chord.root.name().toUpperCase()+chord.root.accidental()+'<sup>'+chord.symbol+'</sup>'+'</span>';});prettyPrint+='</div>';return{__html:prettyPrint};};return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:'App'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('header',{className:'App-header'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('h1',{className:'App-title'},'Jazzy'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('button',{id:'playback',onClick:function onClick(e){return _this3.togglePlayback();}},'Play / Pause'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('button',{id:'new',onClick:function onClick(e){return _this3.newSheet();}},'New Jazz')),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{dangerouslySetInnerHTML:writeSheet(this.state.sheet)}));}}]);return App;}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);/* harmony default export */ __webpack_exports__[\"a\"] = (App);\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar teoria=__webpack_require__(45);var sample=__webpack_require__(54);var progressions=__webpack_require__(81);var getRoot=function getRoot(){return(// TODO: sane root options\nsample(['C','Db','D','Eb','E','F','Gb','G','Ab','A','Bb','B']));};var getScale=function getScale(root,scaleType){return teoria.note(root).scale(scaleType);};var getProgression=function getProgression(){return sample(progressions.getAll());};var getChords=function getChords(scale){// TODO: refactor with getProgression\nvar progression=getProgression();var notes=scale.notes();var chords=progression.map(function(_ref){var degree=_ref.degree,type=_ref.type;return teoria.chord(notes[degree-1],type);});return chords;};var prepareSheet=function prepareSheet(){var root=getRoot();var absoluteRoot=root+'3';var scaleType='major';var key=root+' '+scaleType;var scale=getScale(absoluteRoot,scaleType);var chords=getChords(scale);var sheet={key:key,scale:scale,chords:chords};return sheet;};module.exports={getJazz:prepareSheet};\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Note = __webpack_require__(11);\nvar Interval = __webpack_require__(1);\nvar Chord = __webpack_require__(50);\nvar Scale = __webpack_require__(52);\n\nvar teoria;\n\n// never thought I would write this, but: Legacy support\nfunction intervalConstructor(from, to) {\n  // Construct a Interval object from string representation\n  if (typeof from === 'string')\n    return Interval.toCoord(from);\n\n  if (typeof to === 'string' && from instanceof Note)\n    return Interval.from(from, Interval.toCoord(to));\n\n  if (to instanceof Interval && from instanceof Note)\n    return Interval.from(from, to);\n\n  if (to instanceof Note && from instanceof Note)\n    return Interval.between(from, to);\n\n  throw new Error('Invalid parameters');\n}\n\nintervalConstructor.toCoord = Interval.toCoord;\nintervalConstructor.from = Interval.from;\nintervalConstructor.between = Interval.between;\nintervalConstructor.invert = Interval.invert;\n\nfunction noteConstructor(name, duration) {\n  if (typeof name === 'string')\n    return Note.fromString(name, duration);\n  else\n    return new Note(name, duration);\n}\n\nnoteConstructor.fromString = Note.fromString;\nnoteConstructor.fromKey = Note.fromKey;\nnoteConstructor.fromFrequency = Note.fromFrequency;\nnoteConstructor.fromMIDI = Note.fromMIDI;\n\nfunction chordConstructor(name, symbol) {\n  if (typeof name === 'string') {\n    var root, octave;\n    root = name.match(/^([a-h])(x|#|bb|b?)/i);\n    if (root && root[0]) {\n      octave = typeof symbol === 'number' ? symbol.toString(10) : '4';\n      return new Chord(Note.fromString(root[0].toLowerCase() + octave),\n                            name.substr(root[0].length));\n    }\n  } else if (name instanceof Note)\n    return new Chord(name, symbol);\n\n  throw new Error('Invalid Chord. Couldn\\'t find note name');\n}\n\nfunction scaleConstructor(tonic, scale) {\n  tonic = (tonic instanceof Note) ? tonic : teoria.note(tonic);\n  return new Scale(tonic, scale);\n}\n\nteoria = {\n  note: noteConstructor,\n\n  chord: chordConstructor,\n\n  interval: intervalConstructor,\n\n  scale: scaleConstructor,\n\n  Note: Note,\n  Chord: Chord,\n  Scale: Scale,\n  Interval: Interval\n};\n\n\n__webpack_require__(53)(teoria);\nexports = module.exports = teoria;\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar coords = __webpack_require__(12);\nvar accval = __webpack_require__(13);\n\nmodule.exports = function scientific(name) {\n  var format = /^([a-h])(x|#|bb|b?)(-?\\d*)/i;\n\n  var parser = name.match(format);\n  if (!(parser && name === parser[0] && parser[3].length)) return;\n\n  var noteName = parser[1];\n  var octave = +parser[3];\n  var accidental = parser[2].length ? parser[2].toLowerCase() : '';\n\n  var accidentalValue = accval.interval(accidental);\n  var coord = coords(noteName.toLowerCase());\n\n  coord[0] += octave;\n  coord[0] += accidentalValue[0] - coords.A4[0];\n  coord[1] += accidentalValue[1] - coords.A4[1];\n\n  return coord;\n};\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar coords = __webpack_require__(12);\nvar accval = __webpack_require__(13);\n\nmodule.exports = function helmholtz(name) {\n  var name = name.replace(/\\u2032/g, \"'\").replace(/\\u0375/g, ',');\n  var parts = name.match(/^(,*)([a-h])(x|#|bb|b?)([,\\']*)$/i);\n\n  if (!parts || name !== parts[0])\n    throw new Error('Invalid formatting');\n\n  var note = parts[2];\n  var octaveFirst = parts[1];\n  var octaveLast = parts[4];\n  var lower = note === note.toLowerCase();\n  var octave;\n\n  if (octaveFirst) {\n    if (lower)\n      throw new Error('Invalid formatting - found commas before lowercase note');\n\n    octave = 2 - octaveFirst.length;\n  } else if (octaveLast) {\n    if (octaveLast.match(/^'+$/) && lower)\n      octave = 3 + octaveLast.length;\n    else if (octaveLast.match(/^,+$/) && !lower)\n      octave = 2 - octaveLast.length;\n    else\n      throw new Error('Invalid formatting - mismatch between octave ' +\n        'indicator and letter case')\n  } else\n    octave = lower ? 3 : 2;\n\n  var accidentalValue = accval.interval(parts[3].toLowerCase());\n  var coord = coords(note.toLowerCase());\n\n  coord[0] += octave;\n  coord[0] += accidentalValue[0] - coords.A4[0];\n  coord[1] += accidentalValue[1] - coords.A4[1];\n\n  return coord;\n};\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(coord, stdPitch) {\n  if (typeof coord === 'number') {\n    stdPitch = coord;\n    return function(coord) {\n      return stdPitch * Math.pow(2, (coord[0] * 12 + coord[1] * 7) / 12);\n    }\n  }\n\n  stdPitch = stdPitch || 440;\n  return stdPitch * Math.pow(2, (coord[0] * 12 + coord[1] * 7) / 12);\n}\n\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports) {\n\nvar pattern = /^(AA|A|P|M|m|d|dd)(-?\\d+)$/;\n\n// The interval it takes to raise a note a semitone\nvar sharp = [-4, 7];\n\nvar pAlts = ['dd', 'd', 'P', 'A', 'AA'];\nvar mAlts = ['dd', 'd', 'm', 'M', 'A', 'AA'];\n\nvar baseIntervals = [\n  [0, 0],\n  [3, -5],\n  [2, -3],\n  [1, -1],\n  [0, 1],\n  [3, -4],\n  [2, -2],\n  [1, 0]\n];\n\nmodule.exports = function(simple) {\n  var parser = simple.match(pattern);\n  if (!parser) return null;\n\n  var quality = parser[1];\n  var number = +parser[2];\n  var sign = number < 0 ? -1 : 1;\n\n  number = sign < 0 ? -number : number;\n\n  var lower = number > 8 ? (number % 7 || 7) : number;\n  var octaves = (number - lower) / 7;\n\n  var base = baseIntervals[lower - 1];\n  var alts = base[0] <= 1 ? pAlts : mAlts;\n  var alt = alts.indexOf(quality) - 2;\n\n  // this happens, if the alteration wasn't suitable for this type\n  // of interval, such as P2 or M5 (no \"perfect second\" or \"major fifth\")\n  if (alt === -3) return null;\n\n  return [\n    sign * (base[0] + octaves + sharp[0] * alt),\n    sign * (base[1] + sharp[1] * alt)\n  ];\n}\n\n// Copy to avoid overwriting internal base intervals\nmodule.exports.coords = baseIntervals.slice(0);\n\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar daccord = __webpack_require__(51);\nvar knowledge = __webpack_require__(0);\nvar Note = __webpack_require__(11);\nvar Interval = __webpack_require__(1);\n\nfunction Chord(root, name) {\n  if (!(this instanceof Chord)) return new Chord(root, name);\n  name = name || '';\n  this.name = root.name().toUpperCase() + root.accidental() + name;\n  this.symbol = name;\n  this.root = root;\n  this.intervals = [];\n  this._voicing = [];\n\n  var bass = name.split('/');\n  if (bass.length === 2 && bass[1].trim() !== '9') {\n    name = bass[0];\n    bass = bass[1].trim();\n  } else {\n    bass = null;\n  }\n\n  this.intervals = daccord(name).map(Interval.toCoord);\n  this._voicing = this.intervals.slice();\n\n  if (bass) {\n    var intervals = this.intervals, bassInterval, note;\n    // Make sure the bass is atop of the root note\n    note = Note.fromString(bass + (root.octave() + 1)); // crude\n\n    bassInterval = Interval.between(root, note);\n    bass = bassInterval.simple();\n    bassInterval = bassInterval.invert().direction('down');\n\n    this._voicing = [bassInterval];\n    for (var i = 0, length = intervals.length;  i < length; i++) {\n      if (!intervals[i].simple().equal(bass))\n        this._voicing.push(intervals[i]);\n    }\n  }\n}\n\nChord.prototype = {\n  notes: function() {\n    var root = this.root;\n    return this.voicing().map(function(interval) {\n      return root.interval(interval);\n    });\n  },\n\n  simple: function() {\n    return this.notes().map(function(n) { return n.toString(true); });\n  },\n\n  bass: function() {\n    return this.root.interval(this._voicing[0]);\n  },\n\n  voicing: function(voicing) {\n    // Get the voicing\n    if (!voicing) {\n      return this._voicing;\n    }\n\n    // Set the voicing\n    this._voicing = [];\n    for (var i = 0, length = voicing.length; i < length; i++) {\n      this._voicing[i] = Interval.toCoord(voicing[i]);\n    }\n\n    return this;\n  },\n\n  resetVoicing: function() {\n    this._voicing = this.intervals;\n  },\n\n  dominant: function(additional) {\n    additional = additional || '';\n    return new Chord(this.root.interval('P5'), additional);\n  },\n\n  subdominant: function(additional) {\n    additional = additional || '';\n    return new Chord(this.root.interval('P4'), additional);\n  },\n\n  parallel: function(additional) {\n    additional = additional || '';\n    var quality = this.quality();\n\n    if (this.chordType() !== 'triad' || quality === 'diminished' ||\n        quality === 'augmented') {\n      throw new Error('Only major/minor triads have parallel chords');\n    }\n\n    if (quality === 'major') {\n      return new Chord(this.root.interval('m3', 'down'), 'm');\n    } else {\n      return new Chord(this.root.interval('m3', 'up'));\n    }\n  },\n\n  quality: function() {\n    var third, fifth, seventh, intervals = this.intervals;\n\n    for (var i = 0, length = intervals.length; i < length; i++) {\n      if (intervals[i].number() === 3) {\n        third = intervals[i];\n      } else if (intervals[i].number() === 5) {\n        fifth = intervals[i];\n      } else if (intervals[i].number() === 7) {\n        seventh = intervals[i];\n      }\n    }\n\n    if (!third) {\n      return;\n    }\n\n    third = (third.direction() === 'down') ? third.invert() : third;\n    third = third.simple().toString();\n\n    if (fifth) {\n      fifth = (fifth.direction === 'down') ? fifth.invert() : fifth;\n      fifth = fifth.simple().toString();\n    }\n\n    if (seventh) {\n      seventh = (seventh.direction === 'down') ? seventh.invert() : seventh;\n      seventh = seventh.simple().toString();\n    }\n\n    if (third === 'M3') {\n      if (fifth === 'A5') {\n        return 'augmented';\n      } else if (fifth === 'P5') {\n        return (seventh === 'm7') ? 'dominant' : 'major';\n      }\n\n      return 'major';\n    } else if (third === 'm3') {\n      if (fifth === 'P5') {\n        return 'minor';\n      } else if (fifth === 'd5') {\n        return (seventh === 'm7') ? 'half-diminished' : 'diminished';\n      }\n\n      return 'minor';\n    }\n  },\n\n  chordType: function() { // In need of better name\n    var length = this.intervals.length, interval, has, invert, i, name;\n\n    if (length === 2) {\n      return 'dyad';\n    } else if (length === 3) {\n      has = {unison: false, third: false, fifth: false};\n      for (i = 0; i < length; i++) {\n        interval = this.intervals[i];\n        invert = interval.invert();\n        if (interval.base() in has) {\n          has[interval.base()] = true;\n        } else if (invert.base() in has) {\n          has[invert.base()] = true;\n        }\n      }\n\n      name = (has.unison && has.third && has.fifth) ? 'triad' : 'trichord';\n    } else if (length === 4) {\n      has = {unison: false, third: false, fifth: false, seventh: false};\n      for (i = 0; i < length; i++) {\n        interval = this.intervals[i];\n        invert = interval.invert();\n        if (interval.base() in has) {\n          has[interval.base()] = true;\n        } else if (invert.base() in has) {\n          has[invert.base()] = true;\n        }\n      }\n\n      if (has.unison && has.third && has.fifth && has.seventh) {\n        name = 'tetrad';\n      }\n    }\n\n    return name || 'unknown';\n  },\n\n  get: function(interval) {\n    if (typeof interval === 'string' && interval in knowledge.stepNumber) {\n      var intervals = this.intervals, i, length;\n\n      interval = knowledge.stepNumber[interval];\n      for (i = 0, length = intervals.length; i < length; i++) {\n        if (intervals[i].number() === interval) {\n          return this.root.interval(intervals[i]);\n        }\n      }\n\n      return null;\n    } else {\n      throw new Error('Invalid interval name');\n    }\n  },\n\n  interval: function(interval) {\n    return new Chord(this.root.interval(interval), this.symbol);\n  },\n\n  transpose: function(interval) {\n    this.root.transpose(interval);\n    this.name = this.root.name().toUpperCase() +\n                this.root.accidental() + this.symbol;\n\n    return this;\n  },\n\n  toString: function() {\n    return this.name;\n  }\n};\n\nmodule.exports = Chord;\n\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports) {\n\nvar SYMBOLS = {\n  'm': ['m3', 'P5'],\n  'mi': ['m3', 'P5'],\n  'min': ['m3', 'P5'],\n  '-': ['m3', 'P5'],\n\n  'M': ['M3', 'P5'],\n  'ma': ['M3', 'P5'],\n  '': ['M3', 'P5'],\n\n  '+': ['M3', 'A5'],\n  'aug': ['M3', 'A5'],\n\n  'dim': ['m3', 'd5'],\n  'o': ['m3', 'd5'],\n\n  'maj': ['M3', 'P5', 'M7'],\n  'dom': ['M3', 'P5', 'm7'],\n  'Ã¸': ['m3', 'd5', 'm7'],\n\n  '5': ['P5'],\n\n  '6/9': ['M3', 'P5', 'M6', 'M9']\n};\n\nmodule.exports = function(symbol) {\n  var c, parsing = 'quality', additionals = [], name, chordLength = 2\n  var notes = ['P1', 'M3', 'P5', 'm7', 'M9', 'P11', 'M13'];\n  var explicitMajor = false;\n\n  function setChord(name) {\n    var intervals = SYMBOLS[name];\n    for (var i = 0, len = intervals.length; i < len; i++) {\n      notes[i + 1] = intervals[i];\n    }\n\n    chordLength = intervals.length;\n  }\n\n  // Remove whitespace, commas and parentheses\n  symbol = symbol.replace(/[,\\s\\(\\)]/g, '');\n  for (var i = 0, len = symbol.length; i < len; i++) {\n    if (!(c = symbol[i]))\n      return;\n\n    if (parsing === 'quality') {\n      var sub3 = (i + 2) < len ? symbol.substr(i, 3).toLowerCase() : null;\n      var sub2 = (i + 1) < len ? symbol.substr(i, 2).toLowerCase() : null;\n      if (sub3 in SYMBOLS)\n        name = sub3;\n      else if (sub2 in SYMBOLS)\n        name = sub2;\n      else if (c in SYMBOLS)\n        name = c;\n      else\n        name = '';\n\n      if (name)\n        setChord(name);\n\n      if (name === 'M' || name === 'ma' || name === 'maj')\n        explicitMajor = true;\n\n\n      i += name.length - 1;\n      parsing = 'extension';\n    } else if (parsing === 'extension') {\n      c = (c === '1' && symbol[i + 1]) ? +symbol.substr(i, 2) : +c;\n\n      if (!isNaN(c) && c !== 6) {\n        chordLength = (c - 1) / 2;\n\n        if (chordLength !== Math.round(chordLength))\n          return new Error('Invalid interval extension: ' + c.toString(10));\n\n        if (name === 'o' || name === 'dim')\n          notes[3] = 'd7';\n        else if (explicitMajor)\n          notes[3] = 'M7';\n\n        i += c >= 10 ? 1 : 0;\n      } else if (c === 6) {\n        notes[3] = 'M6';\n        chordLength = Math.max(3, chordLength);\n      } else\n        i -= 1;\n\n      parsing = 'alterations';\n    } else if (parsing === 'alterations') {\n      var alterations = symbol.substr(i).split(/(#|b|add|maj|sus|M)/i),\n          next, flat = false, sharp = false;\n\n      if (alterations.length === 1)\n        return new Error('Invalid alteration');\n      else if (alterations[0].length !== 0)\n        return new Error('Invalid token: \\'' + alterations[0] + '\\'');\n\n      var ignore = false;\n      alterations.forEach(function(alt, i, arr) {\n        if (ignore || !alt.length)\n          return ignore = false;\n\n        var next = arr[i + 1], lower = alt.toLowerCase();\n        if (alt === 'M' || lower === 'maj') {\n          if (next === '7')\n            ignore = true;\n\n          chordLength = Math.max(3, chordLength);\n          notes[3] = 'M7';\n        } else if (lower === 'sus') {\n          var type = 'P4';\n          if (next === '2' || next === '4') {\n            ignore = true;\n\n            if (next === '2')\n              type = 'M2';\n          }\n\n          notes[1] = type; // Replace third with M2 or P4\n        } else if (lower === 'add') {\n          if (next === '9')\n            additionals.push('M9');\n          else if (next === '11')\n            additionals.push('P11');\n          else if (next === '13')\n            additionals.push('M13');\n\n          ignore = true\n        } else if (lower === 'b') {\n          flat = true;\n        } else if (lower === '#') {\n          sharp = true;\n        } else {\n          var token = +alt, quality, intPos;\n          if (isNaN(token) || String(token).length !== alt.length)\n            return new Error('Invalid token: \\'' + alt + '\\'');\n\n          if (token === 6) {\n            if (sharp)\n              notes[3] = 'A6';\n            else if (flat)\n              notes[3] = 'm6';\n            else\n              notes[3] = 'M6';\n\n            chordLength = Math.max(3, chordLength);\n            return;\n          }\n\n          // Calculate the position in the 'note' array\n          intPos = (token - 1) / 2;\n          if (chordLength < intPos)\n            chordLength = intPos;\n\n          if (token < 5 || token === 7 || intPos !== Math.round(intPos))\n            return new Error('Invalid interval alteration: ' + token);\n\n          quality = notes[intPos][0];\n\n          // Alterate the quality of the interval according the accidentals\n          if (sharp) {\n            if (quality === 'd')\n              quality = 'm';\n            else if (quality === 'm')\n              quality = 'M';\n            else if (quality === 'M' || quality === 'P')\n              quality = 'A';\n          } else if (flat) {\n            if (quality === 'A')\n              quality = 'M';\n            else if (quality === 'M')\n              quality = 'm';\n            else if (quality === 'm' || quality === 'P')\n              quality = 'd';\n          }\n\n          sharp = flat = false;\n          notes[intPos] = quality + token;\n        }\n      });\n      parsing = 'ended';\n    } else if (parsing === 'ended') {\n      break;\n    }\n  }\n\n  return notes.slice(0, chordLength + 1).concat(additionals);\n}\n\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar knowledge = __webpack_require__(0);\nvar Interval = __webpack_require__(1);\n\nvar scales = {\n  aeolian: ['P1', 'M2', 'm3', 'P4', 'P5', 'm6', 'm7'],\n  blues: ['P1', 'm3', 'P4', 'd5', 'P5', 'm7'],\n  chromatic: ['P1', 'm2', 'M2', 'm3', 'M3', 'P4',\n    'A4', 'P5', 'm6', 'M6', 'm7', 'M7'],\n  dorian: ['P1', 'M2', 'm3', 'P4', 'P5', 'M6', 'm7'],\n  doubleharmonic: ['P1', 'm2', 'M3', 'P4', 'P5', 'm6', 'M7'],\n  harmonicminor: ['P1', 'M2', 'm3', 'P4', 'P5', 'm6', 'M7'],\n  ionian: ['P1', 'M2', 'M3', 'P4', 'P5', 'M6', 'M7'],\n  locrian: ['P1', 'm2', 'm3', 'P4', 'd5', 'm6', 'm7'],\n  lydian: ['P1', 'M2', 'M3', 'A4', 'P5', 'M6', 'M7'],\n  majorpentatonic: ['P1', 'M2', 'M3', 'P5', 'M6'],\n  melodicminor: ['P1', 'M2', 'm3', 'P4', 'P5', 'M6', 'M7'],\n  minorpentatonic: ['P1', 'm3', 'P4', 'P5', 'm7'],\n  mixolydian: ['P1', 'M2', 'M3', 'P4', 'P5', 'M6', 'm7'],\n  phrygian: ['P1', 'm2', 'm3', 'P4', 'P5', 'm6', 'm7'],\n  wholetone: ['P1', 'M2', 'M3', 'A4', 'A5', 'A6']\n};\n\n// synonyms\nscales.harmonicchromatic = scales.chromatic;\nscales.minor = scales.aeolian;\nscales.major = scales.ionian;\nscales.flamenco = scales.doubleharmonic;\n\nfunction Scale(tonic, scale) {\n  if (!(this instanceof Scale)) return new Scale(tonic, scale);\n  var scaleName, i;\n  if (!('coord' in tonic)) {\n    throw new Error('Invalid Tonic');\n  }\n\n  if (typeof scale === 'string') {\n    scaleName = scale;\n    scale = scales[scale];\n    if (!scale)\n      throw new Error('Invalid Scale');\n  } else {\n    for (i in scales) {\n      if (scales.hasOwnProperty(i)) {\n        if (scales[i].toString() === scale.toString()) {\n          scaleName = i;\n          break;\n        }\n      }\n    }\n  }\n\n  this.name = scaleName;\n  this.tonic = tonic;\n  this.scale = scale;\n}\n\nScale.prototype = {\n  notes: function() {\n    var notes = [];\n\n    for (var i = 0, length = this.scale.length; i < length; i++) {\n      notes.push(this.tonic.interval(this.scale[i]));\n    }\n\n    return notes;\n  },\n\n  simple: function() {\n    return this.notes().map(function(n) { return n.toString(true); });\n  },\n\n  type: function() {\n    var length = this.scale.length - 2;\n    if (length < 8) {\n      return ['di', 'tri', 'tetra', 'penta', 'hexa', 'hepta', 'octa'][length] +\n        'tonic';\n    }\n  },\n\n  get: function(i) {\n    var isStepStr = typeof i === 'string' && i in knowledge.stepNumber;\n    i = isStepStr ? knowledge.stepNumber[i] : i;\n    var len = this.scale.length;\n    var interval, octaves;\n\n    if (i < 0) {\n      interval = this.scale[i % len + len - 1];\n      octaves = Math.floor((i - 1) / len);\n    } else if (i % len === 0) {\n      interval = this.scale[len - 1];\n      octaves = (i / len) - 1;\n    } else {\n      interval = this.scale[i % len - 1];\n      octaves = Math.floor(i / len);\n    }\n\n    return this.tonic.interval(interval).interval(new Interval([octaves, 0]));\n  },\n\n  solfege: function(index, showOctaves) {\n    if (index)\n      return this.get(index).solfege(this, showOctaves);\n\n    return this.notes().map(function(n) {\n      return n.solfege(this, showOctaves);\n    });\n  },\n\n  interval: function(interval) {\n    interval = (typeof interval === 'string') ?\n      Interval.toCoord(interval) : interval;\n    return new Scale(this.tonic.interval(interval), this.scale);\n  },\n\n  transpose: function(interval) {\n    var scale = this.interval(interval);\n    this.scale = scale.scale;\n    this.tonic = scale.tonic;\n\n    return this;\n  }\n};\nScale.KNOWN_SCALES = Object.keys(scales);\n\nmodule.exports = Scale;\n\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar knowledge = __webpack_require__(0);\n\nmodule.exports = function(teoria) {\n  var Note = teoria.Note;\n  var Chord = teoria.Chord;\n  var Scale = teoria.Scale;\n\n  Note.prototype.chord = function(chord) {\n    var isShortChord = chord in knowledge.chordShort;\n    chord = isShortChord ? knowledge.chordShort[chord] : chord;\n\n    return new Chord(this, chord);\n  };\n\n  Note.prototype.scale = function(scale) {\n    return new Scale(this, scale);\n  };\n};\n\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar arraySample = __webpack_require__(15),\n    baseSample = __webpack_require__(56),\n    isArray = __webpack_require__(19);\n\n/**\n * Gets a random element from `collection`.\n *\n * @static\n * @memberOf _\n * @since 2.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to sample.\n * @returns {*} Returns the random element.\n * @example\n *\n * _.sample([1, 2, 3, 4]);\n * // => 2\n */\nfunction sample(collection) {\n  var func = isArray(collection) ? arraySample : baseSample;\n  return func(collection);\n}\n\nmodule.exports = sample;\n\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports) {\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar arraySample = __webpack_require__(15),\n    values = __webpack_require__(57);\n\n/**\n * The base implementation of `_.sample`.\n *\n * @private\n * @param {Array|Object} collection The collection to sample.\n * @returns {*} Returns the random element.\n */\nfunction baseSample(collection) {\n  return arraySample(values(collection));\n}\n\nmodule.exports = baseSample;\n\n\n/***/ }),\n/* 57 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseValues = __webpack_require__(58),\n    keys = __webpack_require__(60);\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar arrayMap = __webpack_require__(59);\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n\n\n/***/ }),\n/* 59 */\n/***/ (function(module, exports) {\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n\n\n/***/ }),\n/* 60 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar arrayLikeKeys = __webpack_require__(61),\n    baseKeys = __webpack_require__(74),\n    isArrayLike = __webpack_require__(78);\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = keys;\n\n\n/***/ }),\n/* 61 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseTimes = __webpack_require__(62),\n    isArguments = __webpack_require__(63),\n    isArray = __webpack_require__(19),\n    isBuffer = __webpack_require__(67),\n    isIndex = __webpack_require__(69),\n    isTypedArray = __webpack_require__(70);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n\n\n/***/ }),\n/* 62 */\n/***/ (function(module, exports) {\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseIsArguments = __webpack_require__(64),\n    isObjectLike = __webpack_require__(6);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n\n\n/***/ }),\n/* 64 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseGetTag = __webpack_require__(5),\n    isObjectLike = __webpack_require__(6);\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n\n\n/***/ }),\n/* 65 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Symbol = __webpack_require__(16);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n\n\n/***/ }),\n/* 66 */\n/***/ (function(module, exports) {\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n\n\n/***/ }),\n/* 67 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(17),\n    stubFalse = __webpack_require__(68);\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20)(module)))\n\n/***/ }),\n/* 68 */\n/***/ (function(module, exports) {\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n\n\n/***/ }),\n/* 69 */\n/***/ (function(module, exports) {\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n\n\n/***/ }),\n/* 70 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseIsTypedArray = __webpack_require__(71),\n    baseUnary = __webpack_require__(72),\n    nodeUtil = __webpack_require__(73);\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n\n\n/***/ }),\n/* 71 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseGetTag = __webpack_require__(5),\n    isLength = __webpack_require__(21),\n    isObjectLike = __webpack_require__(6);\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n\n\n/***/ }),\n/* 72 */\n/***/ (function(module, exports) {\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n\n\n/***/ }),\n/* 73 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(18);\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(20)(module)))\n\n/***/ }),\n/* 74 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isPrototype = __webpack_require__(75),\n    nativeKeys = __webpack_require__(76);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeys;\n\n\n/***/ }),\n/* 75 */\n/***/ (function(module, exports) {\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n\n\n/***/ }),\n/* 76 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar overArg = __webpack_require__(77);\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n\n\n/***/ }),\n/* 77 */\n/***/ (function(module, exports) {\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n\n\n/***/ }),\n/* 78 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isFunction = __webpack_require__(79),\n    isLength = __webpack_require__(21);\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n\n\n/***/ }),\n/* 79 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar baseGetTag = __webpack_require__(5),\n    isObject = __webpack_require__(80);\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n\n\n/***/ }),\n/* 80 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n\n\n/***/ }),\n/* 81 */\n/***/ (function(module, exports) {\n\nvar progressions=[// These assume major scale\n// Also, doesn't allow stuff like bII7\n// TODO: Convert to using something more versatile\n[// ii V7 I I\n{degree:2,type:'m7'},{degree:5,type:'7'},{degree:1,type:'maj7'},{degree:1,type:'maj7'}],[// I-vi-ii-V7\n{degree:1,type:'maj7'},{degree:6,type:'m7'},{degree:2,type:'m7'},{degree:5,type:'7'}]];module.exports={getAll:function getAll(){return progressions;}};\n\n/***/ }),\n/* 82 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = register;\n/* unused harmony export unregister */\n// In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\nvar isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function register(){if(\"production\"==='production'&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nvar publicUrl=new URL(\"/jazzy\",window.location);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\nreturn;}window.addEventListener('load',function(){var swUrl=\"/jazzy\"+'/service-worker.js';if(!isLocalhost){// Is not local host. Just register service worker\nregisterValidSW(swUrl);}else{// This is running on localhost. Lets check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl);}});}}function registerValidSW(swUrl){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the old content will have been purged and\n// the fresh content will have been added to the cache.\n// It's the perfect time to display a \"New content is\n// available; please refresh.\" message in your web app.\nconsole.log('New content is available; please refresh.');}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nif(response.status===404||response.headers.get('content-type').indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();});}}\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// static/js/main.8dc854d1.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/jazzy/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 23);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 053834910aed94109eba","// Note coordinates [octave, fifth] relative to C\nmodule.exports = {\n  notes: {\n    c: [0, 0],\n    d: [-1, 2],\n    e: [-2, 4],\n    f: [1, -1],\n    g: [0, 1],\n    a: [-1, 3],\n    b: [-2, 5],\n    h: [-2, 5]\n  },\n\n  intervals: {\n    unison: [0, 0],\n    second: [3, -5],\n    third: [2, -3],\n    fourth: [1, -1],\n    fifth: [0, 1],\n    sixth: [3, -4],\n    seventh: [2, -2],\n    octave: [1, 0]\n  },\n\n  intervalFromFifth: ['second', 'sixth', 'third', 'seventh', 'fourth',\n                         'unison', 'fifth'],\n\n  intervalsIndex: ['unison', 'second', 'third', 'fourth', 'fifth',\n                      'sixth', 'seventh', 'octave', 'ninth', 'tenth',\n                      'eleventh', 'twelfth', 'thirteenth', 'fourteenth',\n                      'fifteenth'],\n\n// linear index to fifth = (2 * index + 1) % 7\n  fifths: ['f', 'c', 'g', 'd', 'a', 'e', 'b'],\n  accidentals: ['bb', 'b', '', '#', 'x'],\n\n  sharp: [-4, 7],\n  A4: [3, 3],\n\n  durations: {\n    '0.25': 'longa',\n    '0.5': 'breve',\n    '1': 'whole',\n    '2': 'half',\n    '4': 'quarter',\n    '8': 'eighth',\n    '16': 'sixteenth',\n    '32': 'thirty-second',\n    '64': 'sixty-fourth',\n    '128': 'hundred-twenty-eighth'\n  },\n\n  qualityLong: {\n    P: 'perfect',\n    M: 'major',\n    m: 'minor',\n    A: 'augmented',\n    AA: 'doubly augmented',\n    d: 'diminished',\n    dd: 'doubly diminished'\n  },\n\n  alterations: {\n    perfect: ['dd', 'd', 'P', 'A', 'AA'],\n    minor: ['dd', 'd', 'm', 'M', 'A', 'AA']\n  },\n\n  symbols: {\n    'min': ['m3', 'P5'],\n    'm': ['m3', 'P5'],\n    '-': ['m3', 'P5'],\n\n    'M': ['M3', 'P5'],\n    '': ['M3', 'P5'],\n\n    '+': ['M3', 'A5'],\n    'aug': ['M3', 'A5'],\n\n    'dim': ['m3', 'd5'],\n    'o': ['m3', 'd5'],\n\n    'maj': ['M3', 'P5', 'M7'],\n    'dom': ['M3', 'P5', 'm7'],\n    'Ã¸': ['m3', 'd5', 'm7'],\n\n    '5': ['P5']\n  },\n\n  chordShort: {\n    'major': 'M',\n    'minor': 'm',\n    'augmented': 'aug',\n    'diminished': 'dim',\n    'half-diminished': '7b5',\n    'power': '5',\n    'dominant': '7'\n  },\n\n  stepNumber: {\n    'unison': 1,\n    'first': 1,\n    'second': 2,\n    'third': 3,\n    'fourth': 4,\n    'fifth': 5,\n    'sixth': 6,\n    'seventh': 7,\n    'octave': 8,\n    'ninth': 9,\n    'eleventh': 11,\n    'thirteenth': 13\n  },\n\n  // Adjusted Shearer syllables - Chromatic solfege system\n  // Some intervals are not provided for. These include:\n  // dd2 - Doubly diminished second\n  // dd3 - Doubly diminished third\n  // AA3 - Doubly augmented third\n  // dd6 - Doubly diminished sixth\n  // dd7 - Doubly diminished seventh\n  // AA7 - Doubly augmented seventh\n  intervalSolfege: {\n    'dd1': 'daw',\n    'd1': 'de',\n    'P1': 'do',\n    'A1': 'di',\n    'AA1': 'dai',\n    'd2': 'raw',\n    'm2': 'ra',\n    'M2': 're',\n    'A2': 'ri',\n    'AA2': 'rai',\n    'd3': 'maw',\n    'm3': 'me',\n    'M3': 'mi',\n    'A3': 'mai',\n    'dd4': 'faw',\n    'd4': 'fe',\n    'P4': 'fa',\n    'A4': 'fi',\n    'AA4': 'fai',\n    'dd5': 'saw',\n    'd5': 'se',\n    'P5': 'so',\n    'A5': 'si',\n    'AA5': 'sai',\n    'd6': 'law',\n    'm6': 'le',\n    'M6': 'la',\n    'A6': 'li',\n    'AA6': 'lai',\n    'd7': 'taw',\n    'm7': 'te',\n    'M7': 'ti',\n    'A7': 'tai',\n    'dd8': 'daw',\n    'd8': 'de',\n    'P8': 'do',\n    'A8': 'di',\n    'AA8': 'dai'\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/teoria/lib/knowledge.js\n// module id = 0\n// module chunks = 0","var knowledge = require('./knowledge');\nvar vector = require('./vector');\nvar toCoord = require('interval-coords');\n\nfunction Interval(coord) {\n  if (!(this instanceof Interval)) return new Interval(coord);\n  this.coord = coord;\n}\n\nInterval.prototype = {\n  name: function() {\n    return knowledge.intervalsIndex[this.number() - 1];\n  },\n\n  semitones: function() {\n    return vector.sum(vector.mul(this.coord, [12, 7]));\n  },\n\n  number: function() {\n    return Math.abs(this.value());\n  },\n\n  value: function() {\n    var toMultiply = Math.floor((this.coord[1] - 2) / 7) + 1;\n    var product = vector.mul(knowledge.sharp, toMultiply);\n    var without = vector.sub(this.coord, product);\n    var i = knowledge.intervalFromFifth[without[1] + 5];\n    var diff = without[0] - knowledge.intervals[i][0];\n    var val = knowledge.stepNumber[i] + diff * 7;\n\n    return (val > 0) ? val : val - 2;\n  },\n\n  type: function() {\n    return knowledge.intervals[this.base()][0] <= 1 ? 'perfect' : 'minor';\n  },\n\n  base: function() {\n    var product = vector.mul(knowledge.sharp, this.qualityValue());\n    var fifth = vector.sub(this.coord, product)[1];\n    fifth = this.value() > 0 ? fifth + 5 : -(fifth - 5) % 7;\n    fifth = fifth < 0 ? knowledge.intervalFromFifth.length + fifth : fifth;\n\n    var name = knowledge.intervalFromFifth[fifth];\n    if (name === 'unison' && this.number() >= 8)\n      name = 'octave';\n\n    return name;\n  },\n\n  direction: function(dir) {\n    if (dir) {\n      var is = this.value() >= 1 ? 'up' : 'down';\n      if (is !== dir)\n        this.coord = vector.mul(this.coord, -1);\n\n      return this;\n    }\n    else\n      return this.value() >= 1 ? 'up' : 'down';\n  },\n\n  simple: function(ignore) {\n    // Get the (upwards) base interval (with quality)\n    var simple = knowledge.intervals[this.base()];\n    var toAdd = vector.mul(knowledge.sharp, this.qualityValue());\n    simple = vector.add(simple, toAdd);\n\n    // Turn it around if necessary\n    if (!ignore)\n      simple = this.direction() === 'down' ? vector.mul(simple, -1) : simple;\n\n    return new Interval(simple);\n  },\n\n  isCompound: function() {\n    return this.number() > 8;\n  },\n\n  octaves: function() {\n    var toSubtract, without, octaves;\n\n    if (this.direction() === 'up') {\n      toSubtract = vector.mul(knowledge.sharp, this.qualityValue());\n      without = vector.sub(this.coord, toSubtract);\n      octaves = without[0] - knowledge.intervals[this.base()][0];\n    } else {\n      toSubtract = vector.mul(knowledge.sharp, -this.qualityValue());\n      without = vector.sub(this.coord, toSubtract);\n      octaves = -(without[0] + knowledge.intervals[this.base()][0]);\n    }\n\n    return octaves;\n  },\n\n  invert: function() {\n    var i = this.base();\n    var qual = this.qualityValue();\n    var acc = this.type() === 'minor' ? -(qual - 1) : -qual;\n    var idx = 9 - knowledge.stepNumber[i] - 1;\n    var coord = knowledge.intervals[knowledge.intervalsIndex[idx]];\n    coord = vector.add(coord, vector.mul(knowledge.sharp, acc));\n\n    return new Interval(coord);\n  },\n\n  quality: function(lng) {\n    var quality = knowledge.alterations[this.type()][this.qualityValue() + 2];\n\n    return lng ? knowledge.qualityLong[quality] : quality;\n  },\n\n  qualityValue: function() {\n    if (this.direction() === 'down')\n      return Math.floor((-this.coord[1] - 2) / 7) + 1;\n    else\n      return Math.floor((this.coord[1] - 2) / 7) + 1;\n  },\n\n  equal: function(interval) {\n      return this.coord[0] === interval.coord[0] &&\n          this.coord[1] === interval.coord[1];\n  },\n\n  greater: function(interval) {\n    var semi = this.semitones();\n    var isemi = interval.semitones();\n\n    // If equal in absolute size, measure which interval is bigger\n    // For example P4 is bigger than A3\n    return (semi === isemi) ?\n      (this.number() > interval.number()) : (semi > isemi);\n  },\n\n  smaller: function(interval) {\n    return !this.equal(interval) && !this.greater(interval);\n  },\n\n  add: function(interval) {\n    return new Interval(vector.add(this.coord, interval.coord));\n  },\n\n  toString: function(ignore) {\n    // If given true, return the positive value\n    var number = ignore ? this.number() : this.value();\n\n    return this.quality() + number;\n  }\n};\n\nInterval.toCoord = function(simple) {\n  var coord = toCoord(simple);\n  if (!coord)\n    throw new Error('Invalid simple format interval');\n\n  return new Interval(coord);\n};\n\nInterval.from = function(from, to) {\n  return from.interval(to);\n};\n\nInterval.between = function(from, to) {\n  return new Interval(vector.sub(to.coord, from.coord));\n};\n\nInterval.invert = function(sInterval) {\n  return Interval.toCoord(sInterval).invert().toString();\n};\n\nmodule.exports = Interval;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/teoria/lib/interval.js\n// module id = 1\n// module chunks = 0","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/object-assign/index.js\n// module id = 2\n// module chunks = 0","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/react/index.js\n// module id = 3\n// module chunks = 0","\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nvar emptyFunction = function emptyFunction() {};\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function () {\n  return this;\n};\nemptyFunction.thatReturnsArgument = function (arg) {\n  return arg;\n};\n\nmodule.exports = emptyFunction;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/emptyFunction.js\n// module id = 4\n// module chunks = 0","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_baseGetTag.js\n// module id = 5\n// module chunks = 0","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/isObjectLike.js\n// module id = 6\n// module chunks = 0","'use strict';\n\nvar asap = require('asap/raw');\n\nfunction noop() {}\n\n// States:\n//\n// 0 - pending\n// 1 - fulfilled with _value\n// 2 - rejected with _value\n// 3 - adopted the state of another promise, _value\n//\n// once the state is no longer pending (0) it is immutable\n\n// All `_` prefixed properties will be reduced to `_{random number}`\n// at build time to obfuscate them and discourage their use.\n// We don't use symbols or Object.defineProperty to fully hide them\n// because the performance isn't good enough.\n\n\n// to avoid using try/catch inside critical functions, we\n// extract them to here.\nvar LAST_ERROR = null;\nvar IS_ERROR = {};\nfunction getThen(obj) {\n  try {\n    return obj.then;\n  } catch (ex) {\n    LAST_ERROR = ex;\n    return IS_ERROR;\n  }\n}\n\nfunction tryCallOne(fn, a) {\n  try {\n    return fn(a);\n  } catch (ex) {\n    LAST_ERROR = ex;\n    return IS_ERROR;\n  }\n}\nfunction tryCallTwo(fn, a, b) {\n  try {\n    fn(a, b);\n  } catch (ex) {\n    LAST_ERROR = ex;\n    return IS_ERROR;\n  }\n}\n\nmodule.exports = Promise;\n\nfunction Promise(fn) {\n  if (typeof this !== 'object') {\n    throw new TypeError('Promises must be constructed via new');\n  }\n  if (typeof fn !== 'function') {\n    throw new TypeError('Promise constructor\\'s argument is not a function');\n  }\n  this._75 = 0;\n  this._83 = 0;\n  this._18 = null;\n  this._38 = null;\n  if (fn === noop) return;\n  doResolve(fn, this);\n}\nPromise._47 = null;\nPromise._71 = null;\nPromise._44 = noop;\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  if (this.constructor !== Promise) {\n    return safeThen(this, onFulfilled, onRejected);\n  }\n  var res = new Promise(noop);\n  handle(this, new Handler(onFulfilled, onRejected, res));\n  return res;\n};\n\nfunction safeThen(self, onFulfilled, onRejected) {\n  return new self.constructor(function (resolve, reject) {\n    var res = new Promise(noop);\n    res.then(resolve, reject);\n    handle(self, new Handler(onFulfilled, onRejected, res));\n  });\n}\nfunction handle(self, deferred) {\n  while (self._83 === 3) {\n    self = self._18;\n  }\n  if (Promise._47) {\n    Promise._47(self);\n  }\n  if (self._83 === 0) {\n    if (self._75 === 0) {\n      self._75 = 1;\n      self._38 = deferred;\n      return;\n    }\n    if (self._75 === 1) {\n      self._75 = 2;\n      self._38 = [self._38, deferred];\n      return;\n    }\n    self._38.push(deferred);\n    return;\n  }\n  handleResolved(self, deferred);\n}\n\nfunction handleResolved(self, deferred) {\n  asap(function() {\n    var cb = self._83 === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      if (self._83 === 1) {\n        resolve(deferred.promise, self._18);\n      } else {\n        reject(deferred.promise, self._18);\n      }\n      return;\n    }\n    var ret = tryCallOne(cb, self._18);\n    if (ret === IS_ERROR) {\n      reject(deferred.promise, LAST_ERROR);\n    } else {\n      resolve(deferred.promise, ret);\n    }\n  });\n}\nfunction resolve(self, newValue) {\n  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n  if (newValue === self) {\n    return reject(\n      self,\n      new TypeError('A promise cannot be resolved with itself.')\n    );\n  }\n  if (\n    newValue &&\n    (typeof newValue === 'object' || typeof newValue === 'function')\n  ) {\n    var then = getThen(newValue);\n    if (then === IS_ERROR) {\n      return reject(self, LAST_ERROR);\n    }\n    if (\n      then === self.then &&\n      newValue instanceof Promise\n    ) {\n      self._83 = 3;\n      self._18 = newValue;\n      finale(self);\n      return;\n    } else if (typeof then === 'function') {\n      doResolve(then.bind(newValue), self);\n      return;\n    }\n  }\n  self._83 = 1;\n  self._18 = newValue;\n  finale(self);\n}\n\nfunction reject(self, newValue) {\n  self._83 = 2;\n  self._18 = newValue;\n  if (Promise._71) {\n    Promise._71(self, newValue);\n  }\n  finale(self);\n}\nfunction finale(self) {\n  if (self._75 === 1) {\n    handle(self, self._38);\n    self._38 = null;\n  }\n  if (self._75 === 2) {\n    for (var i = 0; i < self._38.length; i++) {\n      handle(self, self._38[i]);\n    }\n    self._38 = null;\n  }\n}\n\nfunction Handler(onFulfilled, onRejected, promise){\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, promise) {\n  var done = false;\n  var res = tryCallTwo(fn, function (value) {\n    if (done) return;\n    done = true;\n    resolve(promise, value);\n  }, function (reason) {\n    if (done) return;\n    done = true;\n    reject(promise, reason);\n  });\n  if (!done && res === IS_ERROR) {\n    done = true;\n    reject(promise, LAST_ERROR);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/promise/lib/core.js\n// module id = 7\n// module chunks = 0","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 8\n// module chunks = 0","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar emptyObject = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  Object.freeze(emptyObject);\n}\n\nmodule.exports = emptyObject;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/emptyObject.js\n// module id = 9\n// module chunks = 0","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/invariant.js\n// module id = 10\n// module chunks = 0","var scientific = require('scientific-notation');\nvar helmholtz = require('helmholtz');\nvar pitchFq = require('pitch-fq');\nvar knowledge = require('./knowledge');\nvar vector = require('./vector');\nvar Interval = require('./interval');\n\nfunction pad(str, ch, len) {\n  for (; len > 0; len--) {\n    str += ch;\n  }\n\n  return str;\n}\n\n\nfunction Note(coord, duration) {\n  if (!(this instanceof Note)) return new Note(coord, duration);\n  duration = duration || {};\n\n  this.duration = { value: duration.value || 4, dots: duration.dots || 0 };\n  this.coord = coord;\n}\n\nNote.prototype = {\n  octave: function() {\n    return this.coord[0] + knowledge.A4[0] - knowledge.notes[this.name()][0] +\n      this.accidentalValue() * 4;\n  },\n\n  name: function() {\n    var value = this.accidentalValue();\n    var idx = this.coord[1] + knowledge.A4[1] - value * 7 + 1;\n    return knowledge.fifths[idx];\n  },\n\n  accidentalValue: function() {\n    return Math.round((this.coord[1] + knowledge.A4[1] - 2) / 7);\n  },\n\n  accidental: function() {\n    return knowledge.accidentals[this.accidentalValue() + 2];\n  },\n\n  /**\n   * Returns the key number of the note\n   */\n  key: function(white) {\n    if (white)\n      return this.coord[0] * 7 + this.coord[1] * 4 + 29;\n    else\n      return this.coord[0] * 12 + this.coord[1] * 7 + 49;\n  },\n\n  /**\n  * Returns a number ranging from 0-127 representing a MIDI note value\n  */\n  midi: function() {\n    return this.key() + 20;\n  },\n\n  /**\n   * Calculates and returns the frequency of the note.\n   * Optional concert pitch (def. 440)\n   */\n  fq: function(concertPitch) {\n    return pitchFq(this.coord, concertPitch);\n  },\n\n  /**\n   * Returns the pitch class index (chroma) of the note\n   */\n  chroma: function() {\n    var value = (vector.sum(vector.mul(this.coord, [12, 7])) - 3) % 12;\n\n    return (value < 0) ? value + 12 : value;\n  },\n\n  interval: function(interval) {\n    if (typeof interval === 'string') interval = Interval.toCoord(interval);\n\n    if (interval instanceof Interval)\n      return new Note(vector.add(this.coord, interval.coord), this.duration);\n    else if (interval instanceof Note)\n      return new Interval(vector.sub(interval.coord, this.coord));\n  },\n\n  transpose: function(interval) {\n    this.coord = vector.add(this.coord, interval.coord);\n    return this;\n  },\n\n  /**\n   * Returns the Helmholtz notation form of the note (fx C,, d' F# g#'')\n   */\n  helmholtz: function() {\n    var octave = this.octave();\n    var name = this.name();\n    name = octave < 3 ? name.toUpperCase() : name.toLowerCase();\n    var padchar = octave < 3 ? ',' : '\\'';\n    var padcount = octave < 2 ? 2 - octave : octave - 3;\n\n    return pad(name + this.accidental(), padchar, padcount);\n  },\n\n  /**\n   * Returns the scientific notation form of the note (fx E4, Bb3, C#7 etc.)\n   */\n  scientific: function() {\n    return this.name().toUpperCase() + this.accidental() + this.octave();\n  },\n\n  /**\n   * Returns notes that are enharmonic with this note.\n   */\n  enharmonics: function(oneaccidental) {\n    var key = this.key(), limit = oneaccidental ? 2 : 3;\n\n    return ['m3', 'm2', 'm-2', 'm-3']\n      .map(this.interval.bind(this))\n      .filter(function(note) {\n      var acc = note.accidentalValue();\n      var diff = key - (note.key() - acc);\n\n      if (diff < limit && diff > -limit) {\n        var product = vector.mul(knowledge.sharp, diff - acc);\n        note.coord = vector.add(note.coord, product);\n        return true;\n      }\n    });\n  },\n\n  solfege: function(scale, showOctaves) {\n    var interval = scale.tonic.interval(this), solfege, stroke, count;\n    if (interval.direction() === 'down')\n      interval = interval.invert();\n\n    if (showOctaves) {\n      count = (this.key(true) - scale.tonic.key(true)) / 7;\n      count = (count >= 0) ? Math.floor(count) : -(Math.ceil(-count));\n      stroke = (count >= 0) ? '\\'' : ',';\n    }\n\n    solfege = knowledge.intervalSolfege[interval.simple(true).toString()];\n    return (showOctaves) ? pad(solfege, stroke, Math.abs(count)) : solfege;\n  },\n\n  scaleDegree: function(scale) {\n    var inter = scale.tonic.interval(this);\n\n    // If the direction is down, or we're dealing with an octave - invert it\n    if (inter.direction() === 'down' ||\n       (inter.coord[1] === 0 && inter.coord[0] !== 0)) {\n      inter = inter.invert();\n    }\n\n    inter = inter.simple(true).coord;\n\n    return scale.scale.reduce(function(index, current, i) {\n      var coord = Interval.toCoord(current).coord;\n      return coord[0] === inter[0] && coord[1] === inter[1] ? i + 1 : index;\n    }, 0);\n  },\n\n  /**\n   * Returns the name of the duration value,\n   * such as 'whole', 'quarter', 'sixteenth' etc.\n   */\n  durationName: function() {\n    return knowledge.durations[this.duration.value];\n  },\n\n  /**\n   * Returns the duration of the note (including dots)\n   * in seconds. The first argument is the tempo in beats\n   * per minute, the second is the beat unit (i.e. the\n   * lower numeral in a time signature).\n   */\n  durationInSeconds: function(bpm, beatUnit) {\n    var secs = (60 / bpm) / (this.duration.value / 4) / (beatUnit / 4);\n    return secs * 2 - secs / Math.pow(2, this.duration.dots);\n  },\n\n  /**\n   * Returns the name of the note, with an optional display of octave number\n   */\n  toString: function(dont) {\n    return this.name() + this.accidental() + (dont ? '' : this.octave());\n  }\n};\n\nNote.fromString = function(name, dur) {\n  var coord = scientific(name);\n  if (!coord) coord = helmholtz(name);\n  return new Note(coord, dur);\n};\n\nNote.fromKey = function(key) {\n  var octave = Math.floor((key - 4) / 12);\n  var distance = key - (octave * 12) - 4;\n  var name = knowledge.fifths[(2 * Math.round(distance / 2) + 1) % 7];\n  var subDiff = vector.sub(knowledge.notes[name], knowledge.A4);\n  var note = vector.add(subDiff, [octave + 1, 0]);\n  var diff = (key - 49) - vector.sum(vector.mul(note, [12, 7]));\n\n  var arg = diff ? vector.add(note, vector.mul(knowledge.sharp, diff)) : note;\n  return new Note(arg);\n};\n\nNote.fromFrequency = function(fq, concertPitch) {\n  var key, cents, originalFq;\n  concertPitch = concertPitch || 440;\n\n  key = 49 + 12 * ((Math.log(fq) - Math.log(concertPitch)) / Math.log(2));\n  key = Math.round(key);\n  originalFq = concertPitch * Math.pow(2, (key - 49) / 12);\n  cents = 1200 * (Math.log(fq / originalFq) / Math.log(2));\n\n  return { note: Note.fromKey(key), cents: cents };\n};\n\nNote.fromMIDI = function(note) {\n  return Note.fromKey(note - 20);\n};\n\nmodule.exports = Note;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/teoria/lib/note.js\n// module id = 11\n// module chunks = 0","// First coord is octaves, second is fifths. Distances are relative to c\nvar notes = {\n  c: [0, 0],\n  d: [-1, 2],\n  e: [-2, 4],\n  f: [1, -1],\n  g: [0, 1],\n  a: [-1, 3],\n  b: [-2, 5],\n  h: [-2, 5]\n};\n\nmodule.exports = function(name) {\n  return name in notes ? [notes[name][0], notes[name][1]] : null;\n};\n\nmodule.exports.notes = notes;\nmodule.exports.A4 = [3, 3]; // Relative to C0 (scientic notation, ~16.35Hz)\nmodule.exports.sharp = [-4, 7];\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/notecoord/index.js\n// module id = 12\n// module chunks = 0","var accidentalValues = {\n  'bb': -2,\n  'b': -1,\n  '': 0,\n  '#': 1,\n  'x': 2\n};\n\nmodule.exports = function accidentalNumber(acc) {\n  return accidentalValues[acc];\n}\n\nmodule.exports.interval = function accidentalInterval(acc) {\n  var val = accidentalValues[acc];\n  return [-4 * val, 7 * val];\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/accidental-value/index.js\n// module id = 13\n// module chunks = 0","module.exports = {\n  add: function(note, interval) {\n    return [note[0] + interval[0], note[1] + interval[1]];\n  },\n\n  sub: function(note, interval) {\n    return [note[0] - interval[0], note[1] - interval[1]];\n  },\n\n  mul: function(note, interval) {\n    if (typeof interval === 'number')\n      return [note[0] * interval, note[1] * interval];\n    else\n      return [note[0] * interval[0], note[1] * interval[1]];\n  },\n\n  sum: function(coord) {\n    return coord[0] + coord[1];\n  }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/teoria/lib/vector.js\n// module id = 14\n// module chunks = 0","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.sample` for arrays.\n *\n * @private\n * @param {Array} array The array to sample.\n * @returns {*} Returns the random element.\n */\nfunction arraySample(array) {\n  var length = array.length;\n  return length ? array[baseRandom(0, length - 1)] : undefined;\n}\n\nmodule.exports = arraySample;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_arraySample.js\n// module id = 15\n// module chunks = 0","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_Symbol.js\n// module id = 16\n// module chunks = 0","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_root.js\n// module id = 17\n// module chunks = 0","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_freeGlobal.js\n// module id = 18\n// module chunks = 0","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/isArray.js\n// module id = 19\n// module chunks = 0","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 20\n// module chunks = 0","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/isLength.js\n// module id = 21\n// module chunks = 0","(function(root, factory){\n\n\t//UMD\n\tif ( typeof define === \"function\" && define.amd ) {\n\t\tdefine(function() {\n\t\t\treturn factory();\n\t\t});\n\t} else if (typeof module === \"object\") {\n\t\tmodule.exports = factory();\n \t} else {\n\t\troot.Tone = factory();\n\t}\n\n}(this, function(){\n\n\t\"use strict\";\n\t\n\tvar Tone;\n\t//constructs the main Tone object\n\tfunction Main(func){\n\t\tTone = func();\n\t}\n\t//invokes each of the modules with the main Tone object as the argument\n\tfunction Module(func){\n\t\tfunc(Tone);\n\t}\t/**\n\t *  Tone.js\n\t *  @author Yotam Mann\n\t *  @license http://opensource.org/licenses/MIT MIT License\n\t *  @copyright 2014-2017 Yotam Mann\n\t */\n\tMain(function () {\n\t    \n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTONE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  @class  Tone is the base class of all other classes.\n\t\t *  @constructor\n\t\t */\n\t    var Tone = function () {\n\t    };\n\t    /**\n\t\t *  @memberOf Tone#\n\t\t *  @returns {string} returns the name of the class as a string\n\t\t */\n\t    Tone.prototype.toString = function () {\n\t        for (var className in Tone) {\n\t            var isLetter = className[0].match(/^[A-Z]$/);\n\t            var sameConstructor = Tone[className] === this.constructor;\n\t            if (Tone.isFunction(Tone[className]) && isLetter && sameConstructor) {\n\t                return className;\n\t            }\n\t        }\n\t        return 'Tone';\n\t    };\n\t    /**\n\t\t *  @memberOf Tone#\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.dispose = function () {\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tGET/SET\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Set the parameters at once. Either pass in an\n\t\t *  object mapping parameters to values, or to set a\n\t\t *  single parameter, by passing in a string and value.\n\t\t *  The last argument is an optional ramp time which\n\t\t *  will ramp any signal values to their destination value\n\t\t *  over the duration of the rampTime.\n\t\t *  @param {Object|string} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone} this\n\t\t *  @memberOf Tone#\n\t\t *  @example\n\t\t * //set values using an object\n\t\t * filter.set({\n\t\t * \t\"frequency\" : 300,\n\t\t * \t\"type\" : highpass\n\t\t * });\n\t\t *  @example\n\t\t * filter.set(\"type\", \"highpass\");\n\t\t *  @example\n\t\t * //ramp to the value 220 over 3 seconds.\n\t\t * oscillator.set({\n\t\t * \t\"frequency\" : 220\n\t\t * }, 3);\n\t\t */\n\t    Tone.prototype.set = function (params, value, rampTime) {\n\t        if (Tone.isObject(params)) {\n\t            rampTime = value;\n\t        } else if (Tone.isString(params)) {\n\t            var tmpObj = {};\n\t            tmpObj[params] = value;\n\t            params = tmpObj;\n\t        }\n\t        paramLoop:\n\t            for (var attr in params) {\n\t                value = params[attr];\n\t                var parent = this;\n\t                if (attr.indexOf('.') !== -1) {\n\t                    var attrSplit = attr.split('.');\n\t                    for (var i = 0; i < attrSplit.length - 1; i++) {\n\t                        parent = parent[attrSplit[i]];\n\t                        if (parent instanceof Tone) {\n\t                            attrSplit.splice(0, i + 1);\n\t                            var innerParam = attrSplit.join('.');\n\t                            parent.set(innerParam, value);\n\t                            continue paramLoop;\n\t                        }\n\t                    }\n\t                    attr = attrSplit[attrSplit.length - 1];\n\t                }\n\t                var param = parent[attr];\n\t                if (Tone.isUndef(param)) {\n\t                    continue;\n\t                }\n\t                if (Tone.Signal && param instanceof Tone.Signal || Tone.Param && param instanceof Tone.Param) {\n\t                    if (param.value !== value) {\n\t                        if (Tone.isUndef(rampTime)) {\n\t                            param.value = value;\n\t                        } else {\n\t                            param.rampTo(value, rampTime);\n\t                        }\n\t                    }\n\t                } else if (param instanceof AudioParam) {\n\t                    if (param.value !== value) {\n\t                        param.value = value;\n\t                    }\n\t                } else if (param instanceof Tone) {\n\t                    param.set(value);\n\t                } else if (param !== value) {\n\t                    parent[attr] = value;\n\t                }\n\t            }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the object's attributes. Given no arguments get\n\t\t *  will return all available object properties and their corresponding\n\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t *  to access deeper properties.\n\t\t *  @memberOf Tone#\n\t\t *  @example\n\t\t * osc.get();\n\t\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t\t *  @example\n\t\t * osc.get(\"type\");\n\t\t * //returns { \"type\" : \"sine\"}\n\t\t * @example\n\t\t * //use dot notation to access deep properties\n\t\t * synth.get([\"envelope.attack\", \"envelope.release\"]);\n\t\t * //returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n\t\t *  @param {Array=|string|undefined} params the parameters to get, otherwise will return\n\t\t *  \t\t\t\t\t                  all available.\n\t\t *  @returns {Object}\n\t\t */\n\t    Tone.prototype.get = function (params) {\n\t        if (Tone.isUndef(params)) {\n\t            params = this._collectDefaults(this.constructor);\n\t        } else if (Tone.isString(params)) {\n\t            params = [params];\n\t        }\n\t        var ret = {};\n\t        for (var i = 0; i < params.length; i++) {\n\t            var attr = params[i];\n\t            var parent = this;\n\t            var subRet = ret;\n\t            if (attr.indexOf('.') !== -1) {\n\t                var attrSplit = attr.split('.');\n\t                for (var j = 0; j < attrSplit.length - 1; j++) {\n\t                    var subAttr = attrSplit[j];\n\t                    subRet[subAttr] = subRet[subAttr] || {};\n\t                    subRet = subRet[subAttr];\n\t                    parent = parent[subAttr];\n\t                }\n\t                attr = attrSplit[attrSplit.length - 1];\n\t            }\n\t            var param = parent[attr];\n\t            if (Tone.isObject(params[attr])) {\n\t                subRet[attr] = param.get();\n\t            } else if (Tone.Signal && param instanceof Tone.Signal) {\n\t                subRet[attr] = param.value;\n\t            } else if (Tone.Param && param instanceof Tone.Param) {\n\t                subRet[attr] = param.value;\n\t            } else if (param instanceof AudioParam) {\n\t                subRet[attr] = param.value;\n\t            } else if (param instanceof Tone) {\n\t                subRet[attr] = param.get();\n\t            } else if (!Tone.isFunction(param) && !Tone.isUndef(param)) {\n\t                subRet[attr] = param;\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  collect all of the default attributes in one\n\t\t *  @private\n\t\t *  @param {function} constr the constructor to find the defaults from\n\t\t *  @return {Array} all of the attributes which belong to the class\n\t\t */\n\t    Tone.prototype._collectDefaults = function (constr) {\n\t        var ret = [];\n\t        if (!Tone.isUndef(constr.defaults)) {\n\t            ret = Object.keys(constr.defaults);\n\t        }\n\t        if (!Tone.isUndef(constr._super)) {\n\t            var superDefs = this._collectDefaults(constr._super);\n\t            //filter out repeats\n\t            for (var i = 0; i < superDefs.length; i++) {\n\t                if (ret.indexOf(superDefs[i]) === -1) {\n\t                    ret.push(superDefs[i]);\n\t                }\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tDEFAULTS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  @memberOf Tone\n\t\t *  @param  {Array}  values  The arguments array\n\t\t *  @param  {Array}  keys    The names of the arguments\n\t\t *  @param {Function|Object} constr The class constructor\n\t\t *  @return  {Object}  An object composed of the  defaults between the class' defaults\n\t\t *                        and the passed in arguments.\n\t\t */\n\t    Tone.defaults = function (values, keys, constr) {\n\t        var options = {};\n\t        if (values.length === 1 && Tone.isObject(values[0])) {\n\t            options = values[0];\n\t        } else {\n\t            for (var i = 0; i < keys.length; i++) {\n\t                options[keys[i]] = values[i];\n\t            }\n\t        }\n\t        if (!Tone.isUndef(constr.defaults)) {\n\t            return Tone.defaultArg(options, constr.defaults);\n\t        } else if (Tone.isObject(constr)) {\n\t            return Tone.defaultArg(options, constr);\n\t        } else {\n\t            return options;\n\t        }\n\t    };\n\t    /**\n\t\t *  If the `given` parameter is undefined, use the `fallback`.\n\t\t *  If both `given` and `fallback` are object literals, it will\n\t\t *  return a deep copy which includes all of the parameters from both\n\t\t *  objects. If a parameter is undefined in given, it will return\n\t\t *  the fallback property.\n\t\t *  <br><br>\n\t\t *  WARNING: if object is self referential, it will go into an an\n\t\t *  infinite recursive loop.\n\t\t *  @memberOf Tone\n\t\t *  @param  {*} given\n\t\t *  @param  {*} fallback\n\t\t *  @return {*}\n\t\t */\n\t    Tone.defaultArg = function (given, fallback) {\n\t        if (Tone.isObject(given) && Tone.isObject(fallback)) {\n\t            var ret = {};\n\t            //make a deep copy of the given object\n\t            for (var givenProp in given) {\n\t                ret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);\n\t            }\n\t            for (var fallbackProp in fallback) {\n\t                ret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t            }\n\t            return ret;\n\t        } else {\n\t            return Tone.isUndef(given) ? fallback : given;\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCONNECTIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  connect together all of the arguments in series\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone}\n\t\t *  @memberOf Tone\n\t\t *  @static\n\t\t */\n\t    Tone.connectSeries = function () {\n\t        var currentUnit = arguments[0];\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            var toUnit = arguments[i];\n\t            currentUnit.connect(toUnit);\n\t            currentUnit = toUnit;\n\t        }\n\t        return Tone;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // TYPE CHECKING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  test if the arg is undefined\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is undefined\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isUndef = function (val) {\n\t        return typeof val === 'undefined';\n\t    };\n\t    /**\n\t\t *  test if the arg is a function\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a function\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isFunction = function (val) {\n\t        return typeof val === 'function';\n\t    };\n\t    /**\n\t\t *  Test if the argument is a number.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a number\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isNumber = function (arg) {\n\t        return typeof arg === 'number';\n\t    };\n\t    /**\n\t\t *  Test if the given argument is an object literal (i.e. `{}`);\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is an object literal.\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isObject = function (arg) {\n\t        return Object.prototype.toString.call(arg) === '[object Object]' && arg.constructor === Object;\n\t    };\n\t    /**\n\t\t *  Test if the argument is a boolean.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a boolean\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isBoolean = function (arg) {\n\t        return typeof arg === 'boolean';\n\t    };\n\t    /**\n\t\t *  Test if the argument is an Array\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is an array\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isArray = function (arg) {\n\t        return Array.isArray(arg);\n\t    };\n\t    /**\n\t\t *  Test if the argument is a string.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a string\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isString = function (arg) {\n\t        return typeof arg === 'string';\n\t    };\n\t    /**\n\t\t *  Test if the argument is in the form of a note in scientific pitch notation.\n\t\t *  e.g. \"C4\"\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a string\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.isNote = function (arg) {\n\t        return Tone.isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n\t    };\n\t    /**\n\t\t *  An empty function.\n\t\t *  @static\n\t\t */\n\t    Tone.noOp = function () {\n\t    };\n\t    /**\n\t\t *  Make the property not writable. Internal use only.\n\t\t *  @private\n\t\t *  @param  {string}  property  the property to make not writable\n\t\t */\n\t    Tone.prototype._readOnly = function (property) {\n\t        if (Array.isArray(property)) {\n\t            for (var i = 0; i < property.length; i++) {\n\t                this._readOnly(property[i]);\n\t            }\n\t        } else {\n\t            Object.defineProperty(this, property, {\n\t                writable: false,\n\t                enumerable: true\n\t            });\n\t        }\n\t    };\n\t    /**\n\t\t *  Make an attribute writeable. Interal use only.\n\t\t *  @private\n\t\t *  @param  {string}  property  the property to make writable\n\t\t */\n\t    Tone.prototype._writable = function (property) {\n\t        if (Array.isArray(property)) {\n\t            for (var i = 0; i < property.length; i++) {\n\t                this._writable(property[i]);\n\t            }\n\t        } else {\n\t            Object.defineProperty(this, property, { writable: true });\n\t        }\n\t    };\n\t    /**\n\t\t * Possible play states.\n\t\t * @enum {string}\n\t\t */\n\t    Tone.State = {\n\t        Started: 'started',\n\t        Stopped: 'stopped',\n\t        Paused: 'paused'\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Equal power gain scale. Good for cross-fading.\n\t\t *  @param  {NormalRange} percent (0-1)\n\t\t *  @return {Number}         output gain (0-1)\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.equalPowerScale = function (percent) {\n\t        var piFactor = 0.5 * Math.PI;\n\t        return Math.sin(percent * piFactor);\n\t    };\n\t    /**\n\t\t *  Convert decibels into gain.\n\t\t *  @param  {Decibels} db\n\t\t *  @return {Number}\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.dbToGain = function (db) {\n\t        return Math.pow(2, db / 6);\n\t    };\n\t    /**\n\t\t *  Convert gain to decibels.\n\t\t *  @param  {Number} gain (0-1)\n\t\t *  @return {Decibels}\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.gainToDb = function (gain) {\n\t        return 20 * (Math.log(gain) / Math.LN10);\n\t    };\n\t    /**\n\t\t *  Convert an interval (in semitones) to a frequency ratio.\n\t\t *  @param  {Interval} interval the number of semitones above the base note\n\t\t *  @return {number}          the frequency ratio\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t *  @example\n\t\t * tone.intervalToFrequencyRatio(0); // 1\n\t\t * tone.intervalToFrequencyRatio(12); // 2\n\t\t * tone.intervalToFrequencyRatio(-12); // 0.5\n\t\t */\n\t    Tone.intervalToFrequencyRatio = function (interval) {\n\t        return Math.pow(2, interval / 12);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTIMING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Return the current time of the AudioContext clock.\n\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t *  @memberOf Tone#\n\t\t */\n\t    Tone.prototype.now = function () {\n\t        return Tone.context.now();\n\t    };\n\t    /**\n\t\t *  Return the current time of the AudioContext clock.\n\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t *  @static\n\t\t *  @memberOf Tone\n\t\t */\n\t    Tone.now = function () {\n\t        return Tone.context.now();\n\t    };\n\t    /**\n\t\t * Adds warning in the console if the scheduled time has passed.\n\t\t * @type {Time}\n\t\t */\n\t    Tone.isPast = function (time) {\n\t        if (time < Tone.context.currentTime) {\n\t            console.warn('Time \\'' + time + '\\' is in the past. Scheduled time must be \\u2265 AudioContext.currentTime');\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tINHERITANCE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  have a child inherit all of Tone's (or a parent's) prototype\n\t\t *  to inherit the parent's properties, make sure to call\n\t\t *  Parent.call(this) in the child's constructor\n\t\t *\n\t\t *  based on closure library's inherit function\n\t\t *\n\t\t *  @memberOf Tone\n\t\t *  @static\n\t\t *  @param  {function} \tchild\n\t\t *  @param  {function=} parent (optional) parent to inherit from\n\t\t *                             if no parent is supplied, the child\n\t\t *                             will inherit from Tone\n\t\t */\n\t    Tone.extend = function (child, parent) {\n\t        if (Tone.isUndef(parent)) {\n\t            parent = Tone;\n\t        }\n\t        function TempConstructor() {\n\t        }\n\t        TempConstructor.prototype = parent.prototype;\n\t        child.prototype = new TempConstructor();\n\t        /** @override */\n\t        child.prototype.constructor = child;\n\t        child._super = parent;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCONTEXT\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The private audio context shared by all Tone Nodes.\n\t\t *  @private\n\t\t *  @type {Tone.Context}\n\t\t */\n\t    var audioContext = null;\n\t    /**\n\t\t *  A static pointer to the audio context accessible as Tone.context.\n\t\t *  @type {Tone.Context}\n\t\t *  @name context\n\t\t *  @memberOf Tone\n\t\t */\n\t    Object.defineProperty(Tone, 'context', {\n\t        get: function () {\n\t            return audioContext;\n\t        },\n\t        set: function (context) {\n\t            if (Tone.Context && context instanceof Tone.Context) {\n\t                audioContext = context;\n\t            } else {\n\t                audioContext = new Tone.Context(context);\n\t            }\n\t            //initialize the new audio context\n\t            Tone.Context.emit('init', audioContext);\n\t        }\n\t    });\n\t    /**\n\t\t *  The AudioContext\n\t\t *  @type {Tone.Context}\n\t\t *  @name context\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'context', {\n\t        get: function () {\n\t            return Tone.context;\n\t        }\n\t    });\n\t    /**\n\t\t *  Tone automatically creates a context on init, but if you are working\n\t\t *  with other libraries which also create an AudioContext, it can be\n\t\t *  useful to set your own. If you are going to set your own context,\n\t\t *  be sure to do it at the start of your code, before creating any objects.\n\t\t *  @static\n\t\t *  @param {AudioContext} ctx The new audio context to set\n\t\t */\n\t    Tone.setContext = function (ctx) {\n\t        Tone.context = ctx;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tATTRIBUTES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The number of seconds of 1 processing block (128 samples)\n\t\t *  @type {Number}\n\t\t *  @name blockTime\n\t\t *  @memberOf Tone\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'blockTime', {\n\t        get: function () {\n\t            return 128 / this.context.sampleRate;\n\t        }\n\t    });\n\t    /**\n\t\t *  The duration in seconds of one sample.\n\t\t *  @type {Number}\n\t\t *  @name sampleTime\n\t\t *  @memberOf Tone\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'sampleTime', {\n\t        get: function () {\n\t            return 1 / this.context.sampleRate;\n\t        }\n\t    });\n\t    /**\n\t\t *  Whether or not all the technologies that Tone.js relies on are supported by the current browser.\n\t\t *  @type {Boolean}\n\t\t *  @name supported\n\t\t *  @memberOf Tone\n\t\t *  @readOnly\n\t\t *  @static\n\t\t */\n\t    Object.defineProperty(Tone, 'supported', {\n\t        get: function () {\n\t            var hasAudioContext = window.hasOwnProperty('AudioContext') || window.hasOwnProperty('webkitAudioContext');\n\t            var hasPromises = window.hasOwnProperty('Promise');\n\t            var hasWorkers = window.hasOwnProperty('Worker');\n\t            return hasAudioContext && hasPromises && hasWorkers;\n\t        }\n\t    });\n\t    /**\n\t\t *  Boolean value if the audio context has been initialized.\n\t\t *  @type {Boolean}\n\t\t *  @memberOf Tone\n\t\t *  @static\n\t\t *  @name initialized\n\t\t */\n\t    Object.defineProperty(Tone, 'initialized', {\n\t        get: function () {\n\t            return audioContext !== null;\n\t        }\n\t    });\n\t    /**\n\t\t *  Get the context when it becomes available\n\t\t *  @param  {Function}  resolve  Callback when the context is initialized\n\t\t *  @return  {Tone}\n\t\t */\n\t    Tone.getContext = function (resolve) {\n\t        if (Tone.initialized) {\n\t            resolve(Tone.context);\n\t        } else {\n\t            var resCallback = function () {\n\t                resolve(Tone.context);\n\t                Tone.Context.off('init', resCallback);\n\t            };\n\t            Tone.Context.on('init', resCallback);\n\t        }\n\t        return Tone;\n\t    };\n\t    /**\n\t\t * The version number\n\t\t * @type {String}\n\t\t * @static\n\t\t */\n\t    Tone.version = 'r12-dev';\n\t    // allow optional silencing of this log\n\t    if (!window.TONE_SILENCE_VERSION_LOGGING) {\n\t        console.log('%c * Tone.js ' + Tone.version + ' * ', 'background: #000; color: #fff');\n\t    }\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Emitter gives classes which extend it\n\t\t *         the ability to listen for and emit events. \n\t\t *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n\t\t *         MIT (c) 2011 Jerome Etienne.\n\t\t *         \n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Emitter = function () {\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  Contains all of the events.\n\t\t\t *  @private\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t        this._events = {};\n\t    };\n\t    Tone.extend(Tone.Emitter);\n\t    /**\n\t\t *  Bind a callback to a specific event.\n\t\t *  @param  {String}    event     The name of the event to listen for.\n\t\t *  @param  {Function}  callback  The callback to invoke when the\n\t\t *                                event is emitted\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.on = function (event, callback) {\n\t        //split the event\n\t        var events = event.split(/\\W+/);\n\t        for (var i = 0; i < events.length; i++) {\n\t            var eventName = events[i];\n\t            if (!this._events.hasOwnProperty(eventName)) {\n\t                this._events[eventName] = [];\n\t            }\n\t            this._events[eventName].push(callback);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove the event listener.\n\t\t *  @param  {String}    event     The event to stop listening to.\n\t\t *  @param  {Function=}  callback  The callback which was bound to \n\t\t *                                the event with Tone.Emitter.on.\n\t\t *                                If no callback is given, all callbacks\n\t\t *                                events are removed.\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.off = function (event, callback) {\n\t        var events = event.split(/\\W+/);\n\t        for (var ev = 0; ev < events.length; ev++) {\n\t            event = events[ev];\n\t            if (this._events.hasOwnProperty(event)) {\n\t                if (Tone.isUndef(callback)) {\n\t                    this._events[event] = [];\n\t                } else {\n\t                    var eventList = this._events[event];\n\t                    for (var i = 0; i < eventList.length; i++) {\n\t                        if (eventList[i] === callback) {\n\t                            eventList.splice(i, 1);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Invoke all of the callbacks bound to the event\n\t\t *  with any arguments passed in. \n\t\t *  @param  {String}  event  The name of the event.\n\t\t *  @param {*} args... The arguments to pass to the functions listening.\n\t\t *  @return  {Tone.Emitter}  this\n\t\t */\n\t    Tone.Emitter.prototype.emit = function (event) {\n\t        if (this._events) {\n\t            var args = Array.apply(null, arguments).slice(1);\n\t            if (this._events.hasOwnProperty(event)) {\n\t                var eventList = this._events[event];\n\t                for (var i = 0, len = eventList.length; i < len; i++) {\n\t                    eventList[i].apply(this, args);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add Emitter functions (on/off/emit) to the object\n\t\t *  @param  {Object|Function}  object  The object or class to extend.\n\t\t *  @returns {Tone.Emitter}\n\t\t */\n\t    Tone.Emitter.mixin = function (object) {\n\t        var functions = [\n\t            'on',\n\t            'off',\n\t            'emit'\n\t        ];\n\t        object._events = {};\n\t        for (var i = 0; i < functions.length; i++) {\n\t            var func = functions[i];\n\t            var emitterFunc = Tone.Emitter.prototype[func];\n\t            object[func] = emitterFunc;\n\t        }\n\t        return Tone.Emitter;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Emitter}  this\n\t\t */\n\t    Tone.Emitter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Emitter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A Timeline class for scheduling and maintaining state\n\t\t *         along a timeline. All events must have a \"time\" property.\n\t\t *         Internally, events are stored in time order for fast\n\t\t *         retrieval.\n\t\t *  @extends {Tone}\n\t\t *  @param {Positive} [memory=Infinity] The number of previous events that are retained.\n\t\t */\n\t    Tone.Timeline = function () {\n\t        var options = Tone.defaults(arguments, ['memory'], Tone.Timeline);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The array of scheduled timeline events\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeline = [];\n\t        /**\n\t\t\t *  An array of items to remove from the list.\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._toRemove = [];\n\t        /**\n\t\t\t *  An array of items to add from the list (once it's done iterating)\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._toAdd = [];\n\t        /**\n\t\t\t *  Flag if the timeline is mid iteration\n\t\t\t *  @private\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this._iterating = false;\n\t        /**\n\t\t\t *  The memory of the timeline, i.e.\n\t\t\t *  how many events in the past it will retain\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this.memory = options.memory;\n\t    };\n\t    Tone.extend(Tone.Timeline);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Timeline.defaults = { 'memory': Infinity };\n\t    /**\n\t\t *  The number of items in the timeline.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Timeline#\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Timeline.prototype, 'length', {\n\t        get: function () {\n\t            return this._timeline.length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t\t *  @param  {Object}  event  The event object to insert into the\n\t\t *                           timeline.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.add = function (event) {\n\t        //the event needs to have a time attribute\n\t        if (Tone.isUndef(event.time)) {\n\t            throw new Error('Tone.Timeline: events must have a time attribute');\n\t        }\n\t        if (this._iterating) {\n\t            this._toAdd.push(event);\n\t        } else {\n\t            var index = this._search(event.time);\n\t            this._timeline.splice(index + 1, 0, event);\n\t            //if the length is more than the memory, remove the previous ones\n\t            if (this.length > this.memory) {\n\t                var diff = this.length - this.memory;\n\t                this._timeline.splice(0, diff);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove an event from the timeline.\n\t\t *  @param  {Object}  event  The event object to remove from the list.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.remove = function (event) {\n\t        if (this._iterating) {\n\t            this._toRemove.push(event);\n\t        } else {\n\t            var index = this._timeline.indexOf(event);\n\t            if (index !== -1) {\n\t                this._timeline.splice(index, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the nearest event whose time is less than or equal to the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @param  {String}  comparator Which value in the object to compare\n\t\t *  @returns {Object} The event object set after that time.\n\t\t */\n\t    Tone.Timeline.prototype.get = function (time, comparator) {\n\t        comparator = Tone.defaultArg(comparator, 'time');\n\t        var index = this._search(time, comparator);\n\t        if (index !== -1) {\n\t            return this._timeline[index];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the first event in the timeline without removing it\n\t\t *  @returns {Object} The first event object\n\t\t */\n\t    Tone.Timeline.prototype.peek = function () {\n\t        return this._timeline[0];\n\t    };\n\t    /**\n\t\t *  Return the first event in the timeline and remove it\n\t\t *  @returns {Object} The first event object\n\t\t */\n\t    Tone.Timeline.prototype.shift = function () {\n\t        return this._timeline.shift();\n\t    };\n\t    /**\n\t\t *  Get the event which is scheduled after the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @param  {String}  comparator Which value in the object to compare\n\t\t *  @returns {Object} The event object after the given time\n\t\t */\n\t    Tone.Timeline.prototype.getAfter = function (time, comparator) {\n\t        comparator = Tone.defaultArg(comparator, 'time');\n\t        var index = this._search(time, comparator);\n\t        if (index + 1 < this._timeline.length) {\n\t            return this._timeline[index + 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Get the event before the event at the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @param  {String}  comparator Which value in the object to compare\n\t\t *  @returns {Object} The event object before the given time\n\t\t */\n\t    Tone.Timeline.prototype.getBefore = function (time, comparator) {\n\t        comparator = Tone.defaultArg(comparator, 'time');\n\t        var len = this._timeline.length;\n\t        //if it's after the last item, return the last item\n\t        if (len > 0 && this._timeline[len - 1][comparator] < time) {\n\t            return this._timeline[len - 1];\n\t        }\n\t        var index = this._search(time, comparator);\n\t        if (index - 1 >= 0) {\n\t            return this._timeline[index - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Cancel events after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.cancel = function (after) {\n\t        if (this._timeline.length > 1) {\n\t            var index = this._search(after);\n\t            if (index >= 0) {\n\t                if (this._timeline[index].time === after) {\n\t                    //get the first item with that time\n\t                    for (var i = index; i >= 0; i--) {\n\t                        if (this._timeline[i].time === after) {\n\t                            index = i;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    }\n\t                    this._timeline = this._timeline.slice(0, index);\n\t                } else {\n\t                    this._timeline = this._timeline.slice(0, index + 1);\n\t                }\n\t            } else {\n\t                this._timeline = [];\n\t            }\n\t        } else if (this._timeline.length === 1) {\n\t            //the first item's time\n\t            if (this._timeline[0].time >= after) {\n\t                this._timeline = [];\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel events before or equal to the given time.\n\t\t *  @param  {Number}  time  The time to cancel before.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.cancelBefore = function (time) {\n\t        var index = this._search(time);\n\t        if (index >= 0) {\n\t            this._timeline = this._timeline.slice(index + 1);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Returns the previous event if there is one. null otherwise\n\t\t * @param  {Object} event The event to find the previous one of\n\t\t * @return {Object}       The event right before the given event\n\t\t */\n\t    Tone.Timeline.prototype.previousEvent = function (event) {\n\t        var index = this._timeline.indexOf(event);\n\t        if (index > 0) {\n\t            return this._timeline[index - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Does a binary search on the timeline array and returns the\n\t\t *  nearest event index whose time is after or equal to the given time.\n\t\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t\t *  If the time is after the end, the index of the last item is returned.\n\t\t *  @param  {Number}  time\n\t\t *  @param  {String}  comparator Which value in the object to compare\n\t\t *  @return  {Number} the index in the timeline array\n\t\t *  @private\n\t\t */\n\t    Tone.Timeline.prototype._search = function (time, comparator) {\n\t        if (this._timeline.length === 0) {\n\t            return -1;\n\t        }\n\t        comparator = Tone.defaultArg(comparator, 'time');\n\t        var beginning = 0;\n\t        var len = this._timeline.length;\n\t        var end = len;\n\t        if (len > 0 && this._timeline[len - 1][comparator] <= time) {\n\t            return len - 1;\n\t        }\n\t        while (beginning < end) {\n\t            // calculate the midpoint for roughly equal partition\n\t            var midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t            var event = this._timeline[midPoint];\n\t            var nextEvent = this._timeline[midPoint + 1];\n\t            if (event[comparator] === time) {\n\t                //choose the last one that has the same time\n\t                for (var i = midPoint; i < this._timeline.length; i++) {\n\t                    var testEvent = this._timeline[i];\n\t                    if (testEvent[comparator] === time) {\n\t                        midPoint = i;\n\t                    }\n\t                }\n\t                return midPoint;\n\t            } else if (event[comparator] < time && nextEvent[comparator] > time) {\n\t                return midPoint;\n\t            } else if (event[comparator] > time) {\n\t                //search lower\n\t                end = midPoint;\n\t            } else {\n\t                //search upper\n\t                beginning = midPoint + 1;\n\t            }\n\t        }\n\t        return -1;\n\t    };\n\t    /**\n\t\t *  Internal iterator. Applies extra safety checks for\n\t\t *  removing items from the array.\n\t\t *  @param  {Function}  callback\n\t\t *  @param  {Number=}    lowerBound\n\t\t *  @param  {Number=}    upperBound\n\t\t *  @private\n\t\t */\n\t    Tone.Timeline.prototype._iterate = function (callback, lowerBound, upperBound) {\n\t        this._iterating = true;\n\t        lowerBound = Tone.defaultArg(lowerBound, 0);\n\t        upperBound = Tone.defaultArg(upperBound, this._timeline.length - 1);\n\t        for (var i = lowerBound; i <= upperBound; i++) {\n\t            callback.call(this, this._timeline[i]);\n\t        }\n\t        this._iterating = false;\n\t        this._toRemove.forEach(function (event) {\n\t            this.remove(event);\n\t        }.bind(this));\n\t        this._toRemove = [];\n\t        this._toAdd.forEach(function (event) {\n\t            this.add(event);\n\t        }.bind(this));\n\t        this._toAdd = [];\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEach = function (callback) {\n\t        this._iterate(callback);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at or before the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachBefore = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var upperBound = this._search(time);\n\t        if (upperBound !== -1) {\n\t            this._iterate(callback, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array after the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachAfter = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var lowerBound = this._search(time);\n\t        this._iterate(callback, lowerBound + 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at or after the given time. Similar to\n\t\t *  forEachAfter, but includes the item(s) at the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachFrom = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var lowerBound = this._search(time);\n\t        //work backwards until the event time is less than time\n\t        while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t            lowerBound--;\n\t        }\n\t        this._iterate(callback, lowerBound + 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at the given time\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachAtTime = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var upperBound = this._search(time);\n\t        if (upperBound !== -1) {\n\t            this._iterate(function (event) {\n\t                if (event.time === time) {\n\t                    callback.call(this, event);\n\t                }\n\t            }, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Timeline}  this\n\t\t */\n\t    Tone.Timeline.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._timeline = null;\n\t        this._toRemove = null;\n\t        this._toAdd = null;\n\t        return this;\n\t    };\n\t    return Tone.Timeline;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  shim\n\t\t *  @private\n\t\t */\n\t    if (!window.hasOwnProperty('AudioContext') && window.hasOwnProperty('webkitAudioContext')) {\n\t        window.AudioContext = window.webkitAudioContext;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the native AudioContext.\n\t\t *  @extends {Tone.Emitter}\n\t\t *  @param {AudioContext=} context optionally pass in a context\n\t\t */\n\t    Tone.Context = function () {\n\t        Tone.Emitter.call(this);\n\t        var options = Tone.defaults(arguments, ['context'], Tone.Context);\n\t        if (!options.context) {\n\t            options.context = new window.AudioContext();\n\t        }\n\t        this._context = options.context;\n\t        // extend all of the methods\n\t        for (var prop in this._context) {\n\t            this._defineProperty(this._context, prop);\n\t        }\n\t        /**\n\t\t\t *  The default latency hint\n\t\t\t *  @type  {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._latencyHint = options.latencyHint;\n\t        /**\n\t\t\t *  An object containing all of the constants AudioBufferSourceNodes\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._constants = {};\n\t        ///////////////////////////////////////////////////////////////////////\n\t        // WORKER\n\t        ///////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  The amount of time events are scheduled\n\t\t\t *  into the future\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this.lookAhead = options.lookAhead;\n\t        /**\n\t\t\t *  A reference to the actual computed update interval\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._computedUpdateInterval = 0;\n\t        /**\n\t\t\t *  A reliable callback method\n\t\t\t *  @private\n\t\t\t *  @type  {Ticker}\n\t\t\t */\n\t        this._ticker = new Ticker(this.emit.bind(this, 'tick'), options.clockSource, options.updateInterval);\n\t        ///////////////////////////////////////////////////////////////////////\n\t        // TIMEOUTS\n\t        ///////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  All of the setTimeout events.\n\t\t\t *  @type  {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeouts = new Tone.Timeline();\n\t        /**\n\t\t\t *  The timeout id counter\n\t\t\t *  @private\n\t\t\t *  @type {Number}\n\t\t\t */\n\t        this._timeoutIds = 0;\n\t        this.on('tick', this._timeoutLoop.bind(this));\n\t    };\n\t    Tone.extend(Tone.Context, Tone.Emitter);\n\t    Tone.Emitter.mixin(Tone.Context);\n\t    /**\n\t\t * defaults\n\t\t * @static\n\t\t * @type {Object}\n\t\t */\n\t    Tone.Context.defaults = {\n\t        'clockSource': 'worker',\n\t        'latencyHint': 'interactive',\n\t        'lookAhead': 0.1,\n\t        'updateInterval': 0.03\n\t    };\n\t    /**\n\t\t *  Define a property on this Tone.Context. \n\t\t *  This is used to extend the native AudioContext\n\t\t *  @param  {AudioContext}  context\n\t\t *  @param  {String}  prop \n\t\t *  @private\n\t\t */\n\t    Tone.Context.prototype._defineProperty = function (context, prop) {\n\t        if (Tone.isUndef(this[prop])) {\n\t            Object.defineProperty(this, prop, {\n\t                get: function () {\n\t                    if (typeof context[prop] === 'function') {\n\t                        return context[prop].bind(context);\n\t                    } else {\n\t                        return context[prop];\n\t                    }\n\t                },\n\t                set: function (val) {\n\t                    context[prop] = val;\n\t                }\n\t            });\n\t        }\n\t    };\n\t    /**\n\t\t *  The current audio context time\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.Context.prototype.now = function () {\n\t        return this._context.currentTime + this.lookAhead;\n\t    };\n\t    /**\n\t\t *  Generate a looped buffer at some constant value.\n\t\t *  @param  {Number}  val\n\t\t *  @return  {BufferSourceNode}\n\t\t */\n\t    Tone.Context.prototype.getConstant = function (val) {\n\t        if (this._constants[val]) {\n\t            return this._constants[val];\n\t        } else {\n\t            var buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t            var arr = buffer.getChannelData(0);\n\t            for (var i = 0; i < arr.length; i++) {\n\t                arr[i] = val;\n\t            }\n\t            var constant = this._context.createBufferSource();\n\t            constant.channelCount = 1;\n\t            constant.channelCountMode = 'explicit';\n\t            constant.buffer = buffer;\n\t            constant.loop = true;\n\t            constant.start(0);\n\t            this._constants[val] = constant;\n\t            return constant;\n\t        }\n\t    };\n\t    /**\n\t\t *  The private loop which keeps track of the context scheduled timeouts\n\t\t *  Is invoked from the clock source\n\t\t *  @private\n\t\t */\n\t    Tone.Context.prototype._timeoutLoop = function () {\n\t        var now = this.now();\n\t        while (this._timeouts && this._timeouts.length && this._timeouts.peek().time <= now) {\n\t            this._timeouts.shift().callback();\n\t        }\n\t    };\n\t    /**\n\t\t *  A setTimeout which is gaurenteed by the clock source. \n\t\t *  Also runs in the offline context.\n\t\t *  @param  {Function}  fn       The callback to invoke\n\t\t *  @param  {Seconds}    timeout  The timeout in seconds\n\t\t *  @returns {Number} ID to use when invoking Tone.Context.clearTimeout\n\t\t */\n\t    Tone.Context.prototype.setTimeout = function (fn, timeout) {\n\t        this._timeoutIds++;\n\t        var now = this.now();\n\t        this._timeouts.add({\n\t            callback: fn,\n\t            time: now + timeout,\n\t            id: this._timeoutIds\n\t        });\n\t        return this._timeoutIds;\n\t    };\n\t    /**\n\t\t *  Clears a previously scheduled timeout with Tone.context.setTimeout\n\t\t *  @param  {Number}  id  The ID returned from setTimeout\n\t\t *  @return  {Tone.Context}  this\n\t\t */\n\t    Tone.Context.prototype.clearTimeout = function (id) {\n\t        this._timeouts.forEach(function (event) {\n\t            if (event.id === id) {\n\t                this.remove(event);\n\t            }\n\t        });\n\t        return this;\n\t    };\n\t    /**\n\t\t *  How often the Web Worker callback is invoked.\n\t\t *  This number corresponds to how responsive the scheduling\n\t\t *  can be. Context.updateInterval + Context.lookAhead gives you the\n\t\t *  total latency between scheduling an event and hearing it.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context#\n\t\t *  @name updateInterval\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'updateInterval', {\n\t        get: function () {\n\t            return this._ticker.updateInterval;\n\t        },\n\t        set: function (interval) {\n\t            this._ticker.updateInterval = interval;\n\t        }\n\t    });\n\t    /**\n\t\t *  What the source of the clock is, either \"worker\" (Web Worker [default]), \n\t\t *  \"timeout\" (setTimeout), or \"offline\" (none). \n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Context#\n\t\t *  @name clockSource\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'clockSource', {\n\t        get: function () {\n\t            return this._ticker.type;\n\t        },\n\t        set: function (type) {\n\t            this._ticker.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  The type of playback, which affects tradeoffs between audio \n\t\t *  output latency and responsiveness. \n\t\t *  \n\t\t *  In addition to setting the value in seconds, the latencyHint also\n\t\t *  accepts the strings \"interactive\" (prioritizes low latency), \n\t\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often). \n\t\t *  @type {String|Seconds}\n\t\t *  @memberOf Tone.Context#\n\t\t *  @name latencyHint\n\t\t *  @example\n\t\t * //set the lookAhead to 0.3 seconds\n\t\t * Tone.context.latencyHint = 0.3;\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'latencyHint', {\n\t        get: function () {\n\t            return this._latencyHint;\n\t        },\n\t        set: function (hint) {\n\t            var lookAhead = hint;\n\t            this._latencyHint = hint;\n\t            if (Tone.isString(hint)) {\n\t                switch (hint) {\n\t                case 'interactive':\n\t                    lookAhead = 0.1;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'playback':\n\t                    lookAhead = 0.8;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'balanced':\n\t                    lookAhead = 0.25;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'fastest':\n\t                    this._context.latencyHint = 'interactive';\n\t                    lookAhead = 0.01;\n\t                    break;\n\t                }\n\t            }\n\t            this.lookAhead = lookAhead;\n\t            this.updateInterval = lookAhead / 3;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Context} this\n\t\t */\n\t    Tone.Context.prototype.dispose = function () {\n\t        Tone.Context.emit('close', this);\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this._ticker.dispose();\n\t        this._ticker = null;\n\t        this._timeouts.dispose();\n\t        this._timeouts = null;\n\t        for (var con in this._constants) {\n\t            this._constants[con].disconnect();\n\t        }\n\t        this._constants = null;\n\t        this.close();\n\t        return this;\n\t    };\n\t    /**\n\t\t * @class A class which provides a reliable callback using either\n\t\t *        a Web Worker, or if that isn't supported, falls back to setTimeout.\n\t\t * @private\n\t\t */\n\t    var Ticker = function (callback, type, updateInterval) {\n\t        /**\n\t\t\t * Either \"worker\" or \"timeout\"\n\t\t\t * @type {String}\n\t\t\t * @private\n\t\t\t */\n\t        this._type = type;\n\t        /**\n\t\t\t * The update interval of the worker\n\t\t\t * @private\n\t\t\t * @type {Number}\n\t\t\t */\n\t        this._updateInterval = updateInterval;\n\t        /**\n\t\t\t * The callback to invoke at regular intervals\n\t\t\t * @type {Function}\n\t\t\t * @private\n\t\t\t */\n\t        this._callback = Tone.defaultArg(callback, Tone.noOp);\n\t        //create the clock source for the first time\n\t        this._createClock();\n\t    };\n\t    /**\n\t\t * The possible ticker types\n\t\t * @private\n\t\t * @type {Object}\n\t\t */\n\t    Ticker.Type = {\n\t        Worker: 'worker',\n\t        Timeout: 'timeout',\n\t        Offline: 'offline'\n\t    };\n\t    /**\n\t\t *  Generate a web worker\n\t\t *  @return  {WebWorker}\n\t\t *  @private\n\t\t */\n\t    Ticker.prototype._createWorker = function () {\n\t        //URL Shim\n\t        window.URL = window.URL || window.webkitURL;\n\t        var blob = new Blob([//the initial timeout time\n\t            'var timeoutTime = ' + (this._updateInterval * 1000).toFixed(1) + ';' + //onmessage callback\n\t            'self.onmessage = function(msg){' + '\\ttimeoutTime = parseInt(msg.data);' + '};' + //the tick function which posts a message\n\t            //and schedules a new tick\n\t            'function tick(){' + '\\tsetTimeout(tick, timeoutTime);' + '\\tself.postMessage(\\'tick\\');' + '}' + //call tick initially\n\t            'tick();']);\n\t        var blobUrl = URL.createObjectURL(blob);\n\t        var worker = new Worker(blobUrl);\n\t        worker.onmessage = this._callback.bind(this);\n\t        this._worker = worker;\n\t    };\n\t    /**\n\t\t * Create a timeout loop\n\t\t * @private\n\t\t */\n\t    Ticker.prototype._createTimeout = function () {\n\t        this._timeout = setTimeout(function () {\n\t            this._createTimeout();\n\t            this._callback();\n\t        }.bind(this), this._updateInterval * 1000);\n\t    };\n\t    /**\n\t\t * Create the clock source.\n\t\t * @private\n\t\t */\n\t    Ticker.prototype._createClock = function () {\n\t        if (this._type === Ticker.Type.Worker) {\n\t            try {\n\t                this._createWorker();\n\t            } catch (e) {\n\t                // workers not supported, fallback to timeout\n\t                this._type = Ticker.Type.Timeout;\n\t                this._createClock();\n\t            }\n\t        } else if (this._type === Ticker.Type.Timeout) {\n\t            this._createTimeout();\n\t        }\n\t    };\n\t    /**\n\t\t * @memberOf Ticker#\n\t\t * @type {Number}\n\t\t * @name updateInterval\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Ticker.prototype, 'updateInterval', {\n\t        get: function () {\n\t            return this._updateInterval;\n\t        },\n\t        set: function (interval) {\n\t            this._updateInterval = Math.max(interval, 128 / 44100);\n\t            if (this._type === Ticker.Type.Worker) {\n\t                this._worker.postMessage(Math.max(interval * 1000, 1));\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the ticker, either a worker or a timeout\n\t\t * @memberOf Ticker#\n\t\t * @type {Number}\n\t\t * @name type\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Ticker.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._disposeClock();\n\t            this._type = type;\n\t            this._createClock();\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up the current clock source\n\t\t * @private\n\t\t */\n\t    Ticker.prototype._disposeClock = function () {\n\t        if (this._timeout) {\n\t            clearTimeout(this._timeout);\n\t            this._timeout = null;\n\t        }\n\t        if (this._worker) {\n\t            this._worker.terminate();\n\t            this._worker.onmessage = null;\n\t            this._worker = null;\n\t        }\n\t    };\n\t    /**\n\t\t * Clean up\n\t\t * @private\n\t\t */\n\t    Ticker.prototype.dispose = function () {\n\t        this._disposeClock();\n\t        this._callback = null;\n\t    };\n\t    /**\n\t\t *  Shim all connect/disconnect and some deprecated methods which are still in\n\t\t *  some older implementations.\n\t\t *  @private\n\t\t */\n\t    Tone.getContext(function () {\n\t        var nativeConnect = AudioNode.prototype.connect;\n\t        var nativeDisconnect = AudioNode.prototype.disconnect;\n\t        //replace the old connect method\n\t        function toneConnect(B, outNum, inNum) {\n\t            if (B.input) {\n\t                inNum = Tone.defaultArg(inNum, 0);\n\t                if (Tone.isArray(B.input)) {\n\t                    this.connect(B.input[inNum]);\n\t                } else {\n\t                    this.connect(B.input, outNum, inNum);\n\t                }\n\t            } else {\n\t                try {\n\t                    if (B instanceof AudioNode) {\n\t                        nativeConnect.call(this, B, outNum, inNum);\n\t                    } else {\n\t                        nativeConnect.call(this, B, outNum);\n\t                    }\n\t                } catch (e) {\n\t                    throw new Error('error connecting to node: ' + B + '\\n' + e);\n\t                }\n\t            }\n\t        }\n\t        //replace the old disconnect method\n\t        function toneDisconnect(B, outNum, inNum) {\n\t            if (B && B.input && Tone.isArray(B.input)) {\n\t                inNum = Tone.defaultArg(inNum, 0);\n\t                this.disconnect(B.input[inNum], outNum, 0);\n\t            } else if (B && B.input) {\n\t                this.disconnect(B.input, outNum, inNum);\n\t            } else {\n\t                try {\n\t                    nativeDisconnect.apply(this, arguments);\n\t                } catch (e) {\n\t                    throw new Error('error disconnecting node: ' + B + '\\n' + e);\n\t                }\n\t            }\n\t        }\n\t        if (AudioNode.prototype.connect !== toneConnect) {\n\t            AudioNode.prototype.connect = toneConnect;\n\t            AudioNode.prototype.disconnect = toneDisconnect;\n\t        }\n\t    });\n\t    // set the audio context initially\n\t    if (Tone.supported) {\n\t        Tone.context = new Tone.Context();\n\t    } else {\n\t        console.warn('This browser does not support Tone.js');\n\t    }\n\t    return Tone.Context;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.AudioNode is the base class for classes which process audio.\n\t\t *         AudioNodes have inputs and outputs.\n\t\t *  @param\t{AudioContext=} context\tThe audio context to use with the class\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.AudioNode = function () {\n\t        Tone.call(this);\n\t        //use the default context if one is not passed in\n\t        var options = Tone.defaults(arguments, ['context'], { 'context': Tone.context });\n\t        /**\n\t\t\t * The AudioContext of this instance\n\t\t\t * @private\n\t\t\t * @type {AudioContext}\n\t\t\t */\n\t        this._context = options.context;\n\t    };\n\t    Tone.extend(Tone.AudioNode);\n\t    /**\n\t\t * Get the audio context belonging to this instance.\n\t\t * @type {Tone.Context}\n\t\t * @memberOf Tone.AudioNode#\n\t\t * @name context\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.AudioNode.prototype, 'context', {\n\t        get: function () {\n\t            return this._context;\n\t        }\n\t    });\n\t    /**\n\t\t *  Create input and outputs for this object.\n\t\t *  @param  {Number}  [input=0]   The number of inputs\n\t\t *  @param  {Number}  [outputs=0]  The number of outputs\n\t\t *  @return  {Tone.AudioNode}  this\n\t\t *  @private\n\t\t */\n\t    Tone.AudioNode.prototype.createInsOuts = function (inputs, outputs) {\n\t        if (inputs === 1) {\n\t            this.input = this.context.createGain();\n\t        } else if (inputs > 1) {\n\t            this.input = new Array(inputs);\n\t        }\n\t        if (outputs === 1) {\n\t            this.output = this.context.createGain();\n\t        } else if (outputs > 1) {\n\t            this.output = new Array(outputs);\n\t        }\n\t    };\n\t    /**\n\t\t *  The number of inputs feeding into the AudioNode.\n\t\t *  For source nodes, this will be 0.\n\t\t *  @type {Number}\n\t\t *  @name numberOfInputs\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.AudioNode.prototype, 'numberOfInputs', {\n\t        get: function () {\n\t            if (this.input) {\n\t                if (Tone.isArray(this.input)) {\n\t                    return this.input.length;\n\t                } else {\n\t                    return 1;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of outputs coming out of the AudioNode.\n\t\t *  @type {Number}\n\t\t *  @name numberOfOutputs\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.AudioNode.prototype, 'numberOfOutputs', {\n\t        get: function () {\n\t            if (this.output) {\n\t                if (Tone.isArray(this.output)) {\n\t                    return this.output.length;\n\t                } else {\n\t                    return 1;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode\n\t\t *  @param  {Tone | AudioParam | AudioNode} unit\n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone.AudioNode} this\n\t\t */\n\t    Tone.AudioNode.prototype.connect = function (unit, outputNum, inputNum) {\n\t        if (Tone.isArray(this.output)) {\n\t            outputNum = Tone.defaultArg(outputNum, 0);\n\t            this.output[outputNum].connect(unit, 0, inputNum);\n\t        } else {\n\t            this.output.connect(unit, outputNum, inputNum);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  disconnect the output\n\t\t *  @param {Number|AudioNode} output Either the output index to disconnect\n\t\t *                                   if the output is an array, or the\n\t\t *                                   node to disconnect from.\n\t\t *  @returns {Tone.AudioNode} this\n\t\t */\n\t    Tone.AudioNode.prototype.disconnect = function (destination, outputNum, inputNum) {\n\t        if (Tone.isArray(this.output)) {\n\t            if (Tone.isNumber(destination)) {\n\t                this.output[destination].disconnect();\n\t            } else {\n\t                outputNum = Tone.defaultArg(outputNum, 0);\n\t                this.output[outputNum].disconnect(destination, 0, inputNum);\n\t            }\n\t        } else {\n\t            this.output.disconnect.apply(this.output, arguments);\n\t        }\n\t    };\n\t    /**\n\t\t *  Connect the output of this node to the rest of the nodes in series.\n\t\t *  @example\n\t\t *  //connect a node to an effect, panVol and then to the master output\n\t\t *  node.chain(effect, panVol, Tone.Master);\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone.AudioNode} this\n\t\t *  @private\n\t\t */\n\t    Tone.AudioNode.prototype.chain = function () {\n\t        var currentUnit = this;\n\t        for (var i = 0; i < arguments.length; i++) {\n\t            var toUnit = arguments[i];\n\t            currentUnit.connect(toUnit);\n\t            currentUnit = toUnit;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the output of this node to the rest of the nodes in parallel.\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone.AudioNode} this\n\t\t *  @private\n\t\t */\n\t    Tone.AudioNode.prototype.fan = function () {\n\t        for (var i = 0; i < arguments.length; i++) {\n\t            this.connect(arguments[i]);\n\t        }\n\t        return this;\n\t    };\n\t    if (window.AudioNode) {\n\t        //give native nodes chain and fan methods\n\t        AudioNode.prototype.chain = Tone.AudioNode.prototype.chain;\n\t        AudioNode.prototype.fan = Tone.AudioNode.prototype.fan;\n\t    }\n\t    /**\n\t\t * Dispose and disconnect\n\t\t * @return {Tone.AudioNode} this\n\t\t */\n\t    Tone.AudioNode.prototype.dispose = function () {\n\t        if (!Tone.isUndef(this.input)) {\n\t            if (this.input instanceof AudioNode) {\n\t                this.input.disconnect();\n\t            }\n\t            this.input = null;\n\t        }\n\t        if (!Tone.isUndef(this.output)) {\n\t            if (this.output instanceof AudioNode) {\n\t                this.output.disconnect();\n\t            }\n\t            this.output = null;\n\t        }\n\t        this._context = null;\n\t        return this;\n\t    };\n\t    return Tone.AudioNode;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base class for all Signals. Used Internally.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.SignalBase = function () {\n\t        Tone.AudioNode.call(this);\n\t    };\n\t    Tone.extend(Tone.SignalBase, Tone.AudioNode);\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams,\n\t\t *  they take over the output value of that signal or AudioParam.\n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>.\n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node\n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t */\n\t    Tone.SignalBase.prototype.connect = function (node, outputNumber, inputNumber) {\n\t        //zero it out so that the signal can have full control\n\t        if (Tone.Signal && Tone.Signal === node.constructor || Tone.Param && Tone.Param === node.constructor || Tone.TimelineSignal && Tone.TimelineSignal === node.constructor) {\n\t            //cancel changes\n\t            node._param.cancelScheduledValues(0);\n\t            //reset the value\n\t            node._param.value = 0;\n\t            //mark the value as overridden\n\t            node.overridden = true;\n\t        } else if (node instanceof AudioParam) {\n\t            node.cancelScheduledValues(0);\n\t            node.value = 0;\n\t        }\n\t        Tone.AudioNode.prototype.connect.call(this, node, outputNumber, inputNumber);\n\t        return this;\n\t    };\n\t    return Tone.SignalBase;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Wraps the native Web Audio API \n\t\t *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {function|Array|Number} mapping The function used to define the values. \n\t\t *                                    The mapping function should take two arguments: \n\t\t *                                    the first is the value at the current position \n\t\t *                                    and the second is the array position. \n\t\t *                                    If the argument is an array, that array will be\n\t\t *                                    set as the wave shaping function. The input\n\t\t *                                    signal is an AudioRange [-1, 1] value and the output\n\t\t *                                    signal can take on any numerical values. \n\t\t *                                    \n\t\t *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.\n\t\t *  @example\n\t\t * var timesTwo = new Tone.WaveShaper(function(val){\n\t\t * \treturn val * 2;\n\t\t * }, 2048);\n\t\t *  @example\n\t\t * //a waveshaper can also be constructed with an array of values\n\t\t * var invert = new Tone.WaveShaper([1, -1]);\n\t\t */\n\t    Tone.WaveShaper = function (mapping, bufferLen) {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  the waveshaper\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = this.input = this.output = this.context.createWaveShaper();\n\t        /**\n\t\t\t *  the waveshapers curve\n\t\t\t *  @type {Float32Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._curve = null;\n\t        if (Array.isArray(mapping)) {\n\t            this.curve = mapping;\n\t        } else if (isFinite(mapping) || Tone.isUndef(mapping)) {\n\t            this._curve = new Float32Array(Tone.defaultArg(mapping, 1024));\n\t        } else if (Tone.isFunction(mapping)) {\n\t            this._curve = new Float32Array(Tone.defaultArg(bufferLen, 1024));\n\t            this.setMap(mapping);\n\t        }\n\t    };\n\t    Tone.extend(Tone.WaveShaper, Tone.SignalBase);\n\t    /**\n\t\t *  Uses a mapping function to set the value of the curve. \n\t\t *  @param {function} mapping The function used to define the values. \n\t\t *                            The mapping function take two arguments: \n\t\t *                            the first is the value at the current position \n\t\t *                            which goes from -1 to 1 over the number of elements\n\t\t *                            in the curve array. The second argument is the array position. \n\t\t *  @returns {Tone.WaveShaper} this\n\t\t *  @example\n\t\t * //map the input signal from [-1, 1] to [0, 10]\n\t\t * shaper.setMap(function(val, index){\n\t\t * \treturn (val + 1) * 5;\n\t\t * })\n\t\t */\n\t    Tone.WaveShaper.prototype.setMap = function (mapping) {\n\t        for (var i = 0, len = this._curve.length; i < len; i++) {\n\t            var normalized = i / (len - 1) * 2 - 1;\n\t            this._curve[i] = mapping(normalized, i);\n\t        }\n\t        this._shaper.curve = this._curve;\n\t        return this;\n\t    };\n\t    /**\n\t\t * The array to set as the waveshaper curve. For linear curves\n\t\t * array length does not make much difference, but for complex curves\n\t\t * longer arrays will provide smoother interpolation. \n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {Array}\n\t\t * @name curve\n\t\t */\n\t    Object.defineProperty(Tone.WaveShaper.prototype, 'curve', {\n\t        get: function () {\n\t            return this._shaper.curve;\n\t        },\n\t        set: function (mapping) {\n\t            this._curve = new Float32Array(mapping);\n\t            this._shaper.curve = this._curve;\n\t        }\n\t    });\n\t    /**\n\t\t * Specifies what type of oversampling (if any) should be used when \n\t\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\". \n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.WaveShaper.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            if ([\n\t                    'none',\n\t                    '2x',\n\t                    '4x'\n\t                ].indexOf(oversampling) !== -1) {\n\t                this._shaper.oversample = oversampling;\n\t            } else {\n\t                throw new RangeError('Tone.WaveShaper: oversampling must be either \\'none\\', \\'2x\\', or \\'4x\\'');\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.WaveShaper} this\n\t\t */\n\t    Tone.WaveShaper.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._shaper.disconnect();\n\t        this._shaper = null;\n\t        this._curve = null;\n\t        return this;\n\t    };\n\t    return Tone.WaveShaper;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TimeBase is a flexible encoding of time\n\t\t *         which can be evaluated to and from a string.\n\t\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t *  @extends {Tone}\n\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t *  @param  {String=}  units  Unit values\n\t\t *  @example\n\t\t * Tone.TimeBase(4, \"n\")\n\t\t * Tone.TimeBase(2, \"t\")\n\t\t * Tone.TimeBase(\"2t\").add(\"1m\")\n\t\t * Tone.TimeBase(\"2t + 1m\");\n\t\t */\n\t    Tone.TimeBase = function (val, units) {\n\t        //allows it to be constructed with or without 'new'\n\t        if (this instanceof Tone.TimeBase) {\n\t            /**\n\t\t\t\t *  Any expressions parsed from the Time\n\t\t\t\t *  @type  {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._expr = this._noOp;\n\t            if (val instanceof Tone.TimeBase) {\n\t                this.copy(val);\n\t            } else if (!Tone.isUndef(units) || Tone.isNumber(val)) {\n\t                //default units\n\t                units = Tone.defaultArg(units, this._defaultUnits);\n\t                var method = this._primaryExpressions[units].method;\n\t                this._expr = method.bind(this, val);\n\t            } else if (Tone.isString(val)) {\n\t                this.set(val);\n\t            } else if (Tone.isUndef(val)) {\n\t                //default expression\n\t                this._expr = this._defaultExpr();\n\t            }\n\t        } else {\n\t            return new Tone.TimeBase(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.TimeBase);\n\t    /**\n\t\t *  Repalce the current time value with the value\n\t\t *  given by the expression string.\n\t\t *  @param  {String}  exprString\n\t\t *  @return {Tone.TimeBase} this\n\t\t */\n\t    Tone.TimeBase.prototype.set = function (exprString) {\n\t        this._expr = this._parseExprString(exprString);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Return a clone of the TimeBase object.\n\t\t *  @return  {Tone.TimeBase} The new cloned Tone.TimeBase\n\t\t */\n\t    Tone.TimeBase.prototype.clone = function () {\n\t        var instance = new this.constructor();\n\t        instance.copy(this);\n\t        return instance;\n\t    };\n\t    /**\n\t\t *  Copies the value of time to this Time\n\t\t *  @param {Tone.TimeBase} time\n\t\t *  @return  {TimeBase}\n\t\t */\n\t    Tone.TimeBase.prototype.copy = function (time) {\n\t        var val = time._expr();\n\t        return this.set(val);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tABSTRACT SYNTAX TREE PARSER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  All the primary expressions.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._primaryExpressions = {\n\t        'n': {\n\t            regexp: /^(\\d+)n/i,\n\t            method: function (value) {\n\t                value = parseInt(value);\n\t                if (value === 1) {\n\t                    return this._beatsToUnits(this._timeSignature());\n\t                } else {\n\t                    return this._beatsToUnits(4 / value);\n\t                }\n\t            }\n\t        },\n\t        't': {\n\t            regexp: /^(\\d+)t/i,\n\t            method: function (value) {\n\t                value = parseInt(value);\n\t                return this._beatsToUnits(8 / (parseInt(value) * 3));\n\t            }\n\t        },\n\t        'm': {\n\t            regexp: /^(\\d+)m/i,\n\t            method: function (value) {\n\t                return this._beatsToUnits(parseInt(value) * this._timeSignature());\n\t            }\n\t        },\n\t        'i': {\n\t            regexp: /^(\\d+)i/i,\n\t            method: function (value) {\n\t                return this._ticksToUnits(parseInt(value));\n\t            }\n\t        },\n\t        'hz': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)hz/i,\n\t            method: function (value) {\n\t                return this._frequencyToUnits(parseFloat(value));\n\t            }\n\t        },\n\t        'tr': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t            method: function (m, q, s) {\n\t                var total = 0;\n\t                if (m && m !== '0') {\n\t                    total += this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t                }\n\t                if (q && q !== '0') {\n\t                    total += this._beatsToUnits(parseFloat(q));\n\t                }\n\t                if (s && s !== '0') {\n\t                    total += this._beatsToUnits(parseFloat(s) / 4);\n\t                }\n\t                return total;\n\t            }\n\t        },\n\t        's': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?s)/,\n\t            method: function (value) {\n\t                return this._secondsToUnits(parseFloat(value));\n\t            }\n\t        },\n\t        'samples': {\n\t            regexp: /^(\\d+)samples/,\n\t            method: function (value) {\n\t                return parseInt(value) / this.context.sampleRate;\n\t            }\n\t        },\n\t        'default': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)/,\n\t            method: function (value) {\n\t                return this._primaryExpressions[this._defaultUnits].method.call(this, value);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  All the binary expressions that TimeBase can accept.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._binaryExpressions = {\n\t        '+': {\n\t            regexp: /^\\+/,\n\t            precedence: 2,\n\t            method: function (lh, rh) {\n\t                return lh() + rh();\n\t            }\n\t        },\n\t        '-': {\n\t            regexp: /^\\-/,\n\t            precedence: 2,\n\t            method: function (lh, rh) {\n\t                return lh() - rh();\n\t            }\n\t        },\n\t        '*': {\n\t            regexp: /^\\*/,\n\t            precedence: 1,\n\t            method: function (lh, rh) {\n\t                return lh() * rh();\n\t            }\n\t        },\n\t        '/': {\n\t            regexp: /^\\//,\n\t            precedence: 1,\n\t            method: function (lh, rh) {\n\t                return lh() / rh();\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  All the unary expressions.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._unaryExpressions = {\n\t        'neg': {\n\t            regexp: /^\\-/,\n\t            method: function (lh) {\n\t                return -lh();\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Syntactic glue which holds expressions together\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._syntaxGlue = {\n\t        '(': { regexp: /^\\(/ },\n\t        ')': { regexp: /^\\)/ }\n\t    };\n\t    /**\n\t\t *  tokenize the expression based on the Expressions object\n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._tokenize = function (expr) {\n\t        var position = -1;\n\t        var tokens = [];\n\t        while (expr.length > 0) {\n\t            expr = expr.trim();\n\t            var token = getNextToken(expr, this);\n\t            tokens.push(token);\n\t            expr = expr.substr(token.value.length);\n\t        }\n\t        function getNextToken(expr, context) {\n\t            var expressions = [\n\t                '_binaryExpressions',\n\t                '_unaryExpressions',\n\t                '_primaryExpressions',\n\t                '_syntaxGlue'\n\t            ];\n\t            for (var i = 0; i < expressions.length; i++) {\n\t                var group = context[expressions[i]];\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    var reg = op.regexp;\n\t                    var match = expr.match(reg);\n\t                    if (match !== null) {\n\t                        return {\n\t                            method: op.method,\n\t                            precedence: op.precedence,\n\t                            regexp: op.regexp,\n\t                            value: match[0]\n\t                        };\n\t                    }\n\t                }\n\t            }\n\t            throw new SyntaxError('Tone.TimeBase: Unexpected token ' + expr);\n\t        }\n\t        return {\n\t            next: function () {\n\t                return tokens[++position];\n\t            },\n\t            peek: function () {\n\t                return tokens[position + 1];\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  Given a token, find the value within the groupName\n\t\t *  @param {Object} token\n\t\t *  @param {String} groupName\n\t\t *  @param {Number} precedence\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._matchGroup = function (token, group, prec) {\n\t        var ret = false;\n\t        if (!Tone.isUndef(token)) {\n\t            for (var opName in group) {\n\t                var op = group[opName];\n\t                if (op.regexp.test(token.value)) {\n\t                    if (!Tone.isUndef(prec)) {\n\t                        if (op.precedence === prec) {\n\t                            return op;\n\t                        }\n\t                    } else {\n\t                        return op;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  Match a binary expression given the token and the precedence\n\t\t *  @param {Lexer} lexer\n\t\t *  @param {Number} precedence\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseBinary = function (lexer, precedence) {\n\t        if (Tone.isUndef(precedence)) {\n\t            precedence = 2;\n\t        }\n\t        var expr;\n\t        if (precedence < 0) {\n\t            expr = this._parseUnary(lexer);\n\t        } else {\n\t            expr = this._parseBinary(lexer, precedence - 1);\n\t        }\n\t        var token = lexer.peek();\n\t        while (token && this._matchGroup(token, this._binaryExpressions, precedence)) {\n\t            token = lexer.next();\n\t            expr = token.method.bind(this, expr, this._parseBinary(lexer, precedence - 1));\n\t            token = lexer.peek();\n\t        }\n\t        return expr;\n\t    };\n\t    /**\n\t\t *  Match a unary expression.\n\t\t *  @param {Lexer} lexer\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseUnary = function (lexer) {\n\t        var token, expr;\n\t        token = lexer.peek();\n\t        var op = this._matchGroup(token, this._unaryExpressions);\n\t        if (op) {\n\t            token = lexer.next();\n\t            expr = this._parseUnary(lexer);\n\t            return op.method.bind(this, expr);\n\t        }\n\t        return this._parsePrimary(lexer);\n\t    };\n\t    /**\n\t\t *  Match a primary expression (a value).\n\t\t *  @param {Lexer} lexer\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parsePrimary = function (lexer) {\n\t        var token, expr;\n\t        token = lexer.peek();\n\t        if (Tone.isUndef(token)) {\n\t            throw new SyntaxError('Tone.TimeBase: Unexpected end of expression');\n\t        }\n\t        if (this._matchGroup(token, this._primaryExpressions)) {\n\t            token = lexer.next();\n\t            var matching = token.value.match(token.regexp);\n\t            return token.method.bind(this, matching[1], matching[2], matching[3]);\n\t        }\n\t        if (token && token.value === '(') {\n\t            lexer.next();\n\t            expr = this._parseBinary(lexer);\n\t            token = lexer.next();\n\t            if (!(token && token.value === ')')) {\n\t                throw new SyntaxError('Expected )');\n\t            }\n\t            return expr;\n\t        }\n\t        throw new SyntaxError('Tone.TimeBase: Cannot process token ' + token.value);\n\t    };\n\t    /**\n\t\t *  Recursively parse the string expression into a syntax tree.\n\t\t *  @param   {string} expr \n\t\t *  @return  {Function} the bound method to be evaluated later\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseExprString = function (exprString) {\n\t        if (!Tone.isString(exprString)) {\n\t            exprString = exprString.toString();\n\t        }\n\t        var lexer = this._tokenize(exprString);\n\t        var tree = this._parseBinary(lexer);\n\t        return tree;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tDEFAULTS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The initial expression value\n\t\t *  @return  {Number}  The initial value 0\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._noOp = function () {\n\t        return 0;\n\t    };\n\t    /**\n\t\t *  The default expression value if no arguments are given\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._defaultExpr = function () {\n\t        return this._noOp;\n\t    };\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._defaultUnits = 's';\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._frequencyToUnits = function (freq) {\n\t        return 1 / freq;\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._beatsToUnits = function (beats) {\n\t        return 60 / Tone.Transport.bpm.value * beats;\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._secondsToUnits = function (seconds) {\n\t        return seconds;\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._ticksToUnits = function (ticks) {\n\t        return ticks * (this._beatsToUnits(1) / Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Return the time signature.\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._timeSignature = function () {\n\t        return Tone.Transport.timeSignature;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Push an expression onto the expression list\n\t\t *  @param  {Time}  val\n\t\t *  @param  {String}  type\n\t\t *  @param  {String}  units\n\t\t *  @return  {Tone.TimeBase} \n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._pushExpr = function (val, name, units) {\n\t        //create the expression\n\t        if (!(val instanceof Tone.TimeBase)) {\n\t            val = new this.constructor(val, units);\n\t        }\n\t        this._expr = this._binaryExpressions[name].method.bind(this, this._expr, val._expr);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add to the current value.\n\t\t *  @param  {Time}  val    The value to add\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\"\n\t\t */\n\t    Tone.TimeBase.prototype.add = function (val, units) {\n\t        return this._pushExpr(val, '+', units);\n\t    };\n\t    /**\n\t\t *  Subtract the value from the current time.\n\t\t *  @param  {Time}  val    The value to subtract\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\"\n\t\t */\n\t    Tone.TimeBase.prototype.sub = function (val, units) {\n\t        return this._pushExpr(val, '-', units);\n\t    };\n\t    /**\n\t\t *  Multiply the current value by the given time.\n\t\t *  @param  {Time}  val    The value to multiply\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\"\n\t\t */\n\t    Tone.TimeBase.prototype.mult = function (val, units) {\n\t        return this._pushExpr(val, '*', units);\n\t    };\n\t    /**\n\t\t *  Divide the current value by the given time.\n\t\t *  @param  {Time}  val    The value to divide by\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").div(2); //\"1m\"\n\t\t */\n\t    Tone.TimeBase.prototype.div = function (val, units) {\n\t        return this._pushExpr(val, '/', units);\n\t    };\n\t    /**\n\t\t *  Evaluate the time value. Returns the time\n\t\t *  in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.TimeBase.prototype.valueOf = function () {\n\t        return this._expr();\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return {Tone.TimeBase} this\n\t\t */\n\t    Tone.TimeBase.prototype.dispose = function () {\n\t        this._expr = null;\n\t    };\n\t    return Tone.TimeBase;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Time is a primitive type for encoding Time values. \n\t\t *         Eventually all time values are evaluated to seconds\n\t\t *         using the `eval` method. Tone.Time can be constructed\n\t\t *         with or without the `new` keyword. Tone.Time can be passed\n\t\t *         into the parameter of any method which takes time as an argument. \n\t\t *  @constructor\n\t\t *  @extends {Tone.TimeBase}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * var t = Tone.Time(\"4n\");//encodes a quarter note\n\t\t * t.mult(4); // multiply that value by 4\n\t\t * t.toNotation(); //returns \"1m\"\n\t\t */\n\t    Tone.Time = function (val, units) {\n\t        if (this instanceof Tone.Time) {\n\t            /**\n\t\t\t\t *  If the current clock time should\n\t\t\t\t *  be added to the output\n\t\t\t\t *  @type  {Boolean}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._plusNow = false;\n\t            Tone.TimeBase.call(this, val, units);\n\t        } else {\n\t            return new Tone.Time(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Time, Tone.TimeBase);\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.Time.prototype._unaryExpressions = Object.create(Tone.TimeBase.prototype._unaryExpressions);\n\t    /*\n\t\t *  Adds an additional unary expression\n\t\t *  which quantizes values to the next subdivision\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._unaryExpressions.quantize = {\n\t        regexp: /^@/,\n\t        method: function (rh) {\n\t            return Tone.Transport.nextSubdivision(rh());\n\t        }\n\t    };\n\t    /*\n\t\t *  Adds an additional unary expression\n\t\t *  which adds the current clock time.\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._unaryExpressions.now = {\n\t        regexp: /^\\+/,\n\t        method: function (lh) {\n\t            this._plusNow = true;\n\t            return lh();\n\t        }\n\t    };\n\t    /**\n\t\t *  Quantize the time by the given subdivision. Optionally add a\n\t\t *  percentage which will move the time value towards the ideal\n\t\t *  quantized value by that percentage. \n\t\t *  @param  {Number|Time}  val    The subdivision to quantize to\n\t\t *  @param  {NormalRange}  [percent=1]  Move the time value\n\t\t *                                   towards the quantized value by\n\t\t *                                   a percentage.\n\t\t *  @return  {Tone.Time}  this\n\t\t *  @example\n\t\t * Tone.Time(21).quantize(2) //returns 22\n\t\t * Tone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t\t */\n\t    Tone.Time.prototype.quantize = function (subdiv, percent) {\n\t        percent = Tone.defaultArg(percent, 1);\n\t        this._expr = function (expr, subdivision, percent) {\n\t            expr = expr();\n\t            subdivision = subdivision.toSeconds();\n\t            var multiple = Math.round(expr / subdivision);\n\t            var ideal = multiple * subdivision;\n\t            var diff = ideal - expr;\n\t            return expr + diff * percent;\n\t        }.bind(this, this._expr, new this.constructor(subdiv), percent);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Adds the clock time to the time expression at the \n\t\t *  moment of evaluation. \n\t\t *  @return  {Tone.Time}  this\n\t\t */\n\t    Tone.Time.prototype.addNow = function () {\n\t        this._plusNow = true;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Override the default value return when no arguments are passed in.\n\t\t *  The default value is 'now'\n\t\t *  @override\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._defaultExpr = function () {\n\t        this._plusNow = true;\n\t        return this._noOp;\n\t    };\n\t    /**\n\t\t *  Copies the value of time to this Time\n\t\t *  @param {Tone.Time} time\n\t\t *  @return  {Time}\n\t\t */\n\t    Tone.Time.prototype.copy = function (time) {\n\t        Tone.TimeBase.prototype.copy.call(this, time);\n\t        this._plusNow = time._plusNow;\n\t        return this;\n\t    };\n\t    //CONVERSIONS//////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Convert a Time to Notation. Values will be thresholded to the nearest 128th note. \n\t\t *  @return {Notation} \n\t\t *  @example\n\t\t * //if the Transport is at 120bpm:\n\t\t * Tone.Time(2).toNotation();//returns \"1m\"\n\t\t */\n\t    Tone.Time.prototype.toNotation = function () {\n\t        var time = this.toSeconds();\n\t        var testNotations = [\n\t            '1m',\n\t            '2n',\n\t            '4n',\n\t            '8n',\n\t            '16n',\n\t            '32n',\n\t            '64n',\n\t            '128n'\n\t        ];\n\t        var retNotation = this._toNotationHelper(time, testNotations);\n\t        //try the same thing but with tripelets\n\t        var testTripletNotations = [\n\t            '1m',\n\t            '2n',\n\t            '2t',\n\t            '4n',\n\t            '4t',\n\t            '8n',\n\t            '8t',\n\t            '16n',\n\t            '16t',\n\t            '32n',\n\t            '32t',\n\t            '64n',\n\t            '64t',\n\t            '128n'\n\t        ];\n\t        var retTripletNotation = this._toNotationHelper(time, testTripletNotations);\n\t        //choose the simpler expression of the two\n\t        if (retTripletNotation.split('+').length < retNotation.split('+').length) {\n\t            return retTripletNotation;\n\t        } else {\n\t            return retNotation;\n\t        }\n\t    };\n\t    /**\n\t\t *  Helper method for Tone.toNotation\n\t\t *  @param {Number} units \n\t\t *  @param {Array} testNotations\n\t\t *  @return {String}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._toNotationHelper = function (units, testNotations) {\n\t        //the threshold is the last value in the array\n\t        var threshold = this._notationToUnits(testNotations[testNotations.length - 1]);\n\t        var retNotation = '';\n\t        for (var i = 0; i < testNotations.length; i++) {\n\t            var notationTime = this._notationToUnits(testNotations[i]);\n\t            //account for floating point errors (i.e. round up if the value is 0.999999)\n\t            var multiple = units / notationTime;\n\t            var floatingPointError = 0.000001;\n\t            if (1 - multiple % 1 < floatingPointError) {\n\t                multiple += floatingPointError;\n\t            }\n\t            multiple = Math.floor(multiple);\n\t            if (multiple > 0) {\n\t                if (multiple === 1) {\n\t                    retNotation += testNotations[i];\n\t                } else {\n\t                    retNotation += multiple.toString() + '*' + testNotations[i];\n\t                }\n\t                units -= multiple * notationTime;\n\t                if (units < threshold) {\n\t                    break;\n\t                } else {\n\t                    retNotation += ' + ';\n\t                }\n\t            }\n\t        }\n\t        if (retNotation === '') {\n\t            retNotation = '0';\n\t        }\n\t        return retNotation;\n\t    };\n\t    /**\n\t\t *  Convert a notation value to the current units\n\t\t *  @param  {Notation}  notation \n\t\t *  @return  {Number} \n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._notationToUnits = function (notation) {\n\t        var primaryExprs = this._primaryExpressions;\n\t        var notationExprs = [\n\t            primaryExprs.n,\n\t            primaryExprs.t,\n\t            primaryExprs.m\n\t        ];\n\t        for (var i = 0; i < notationExprs.length; i++) {\n\t            var expr = notationExprs[i];\n\t            var match = notation.match(expr.regexp);\n\t            if (match) {\n\t                return expr.method.call(this, match[1]);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t\t *  @return  {BarsBeatsSixteenths}\n\t\t */\n\t    Tone.Time.prototype.toBarsBeatsSixteenths = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.toSeconds() / quarterTime;\n\t        var measures = Math.floor(quarters / this._timeSignature());\n\t        var sixteenths = quarters % 1 * 4;\n\t        quarters = Math.floor(quarters) % this._timeSignature();\n\t        sixteenths = sixteenths.toString();\n\t        if (sixteenths.length > 3) {\n\t            // the additional parseFloat removes insignificant trailing zeroes\n\t            sixteenths = parseFloat(parseFloat(sixteenths).toFixed(3));\n\t        }\n\t        var progress = [\n\t            measures,\n\t            quarters,\n\t            sixteenths\n\t        ];\n\t        return progress.join(':');\n\t    };\n\t    /**\n\t\t *  Return the time in ticks.\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Time.prototype.toTicks = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        return Math.round(quarters * Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Return the time in samples\n\t\t *  @return  {Samples}  \n\t\t */\n\t    Tone.Time.prototype.toSamples = function () {\n\t        return this.toSeconds() * this.context.sampleRate;\n\t    };\n\t    /**\n\t\t *  Return the time as a frequency value\n\t\t *  @return  {Frequency} \n\t\t *  @example\n\t\t * Tone.Time(2).toFrequency(); //0.5\n\t\t */\n\t    Tone.Time.prototype.toFrequency = function () {\n\t        return 1 / this.toSeconds();\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.Time.prototype.toSeconds = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the time in milliseconds.\n\t\t *  @return  {Milliseconds} \n\t\t */\n\t    Tone.Time.prototype.toMilliseconds = function () {\n\t        return this.toSeconds() * 1000;\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.Time.prototype.valueOf = function () {\n\t        var val = this._expr();\n\t        return val + (this._plusNow ? this.now() : 0);\n\t    };\n\t    return Tone.Time;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Frequency is a primitive type for encoding Frequency values.\n\t\t *         Eventually all time values are evaluated to hertz\n\t\t *         using the `eval` method.\n\t\t *  @constructor\n\t\t *  @extends {Tone.TimeBase}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * Tone.Frequency(\"C3\") // 261\n\t\t * Tone.Frequency(38, \"midi\") //\n\t\t * Tone.Frequency(\"C3\").transpose(4);\n\t\t */\n\t    Tone.Frequency = function (val, units) {\n\t        if (this instanceof Tone.Frequency) {\n\t            Tone.TimeBase.call(this, val, units);\n\t        } else {\n\t            return new Tone.Frequency(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Frequency, Tone.TimeBase);\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUGMENT BASE EXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //clone the expressions so that\n\t    //we can add more without modifying the original\n\t    Tone.Frequency.prototype._primaryExpressions = Object.create(Tone.TimeBase.prototype._primaryExpressions);\n\t    /*\n\t\t *  midi type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.midi = {\n\t        regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\t        method: function (value) {\n\t            return this.midiToFrequency(value);\n\t        }\n\t    };\n\t    /*\n\t\t *  note type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.note = {\n\t        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t        method: function (pitch, octave) {\n\t            var index = noteToScaleIndex[pitch.toLowerCase()];\n\t            var noteNumber = index + (parseInt(octave) + 1) * 12;\n\t            return this.midiToFrequency(noteNumber);\n\t        }\n\t    };\n\t    /*\n\t\t *  BeatsBarsSixteenths type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.tr = {\n\t        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t        method: function (m, q, s) {\n\t            var total = 1;\n\t            if (m && m !== '0') {\n\t                total *= this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t            }\n\t            if (q && q !== '0') {\n\t                total *= this._beatsToUnits(parseFloat(q));\n\t            }\n\t            if (s && s !== '0') {\n\t                total *= this._beatsToUnits(parseFloat(s) / 4);\n\t            }\n\t            return total;\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Transposes the frequency by the given number of semitones.\n\t\t *  @param  {Interval}  interval\n\t\t *  @return  {Tone.Frequency} this\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").transpose(3); //\"C5\"\n\t\t */\n\t    Tone.Frequency.prototype.transpose = function (interval) {\n\t        this._expr = function (expr, interval) {\n\t            var val = expr();\n\t            return val * Tone.intervalToFrequencyRatio(interval);\n\t        }.bind(this, this._expr, interval);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Takes an array of semitone intervals and returns\n\t\t *  an array of frequencies transposed by those intervals.\n\t\t *  @param  {Array}  intervals\n\t\t *  @return  {Tone.Frequency} this\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t\t */\n\t    Tone.Frequency.prototype.harmonize = function (intervals) {\n\t        this._expr = function (expr, intervals) {\n\t            var val = expr();\n\t            var ret = [];\n\t            for (var i = 0; i < intervals.length; i++) {\n\t                ret[i] = val * Tone.intervalToFrequencyRatio(intervals[i]);\n\t            }\n\t            return ret;\n\t        }.bind(this, this._expr, intervals);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Return the value of the frequency as a MIDI note\n\t\t *  @return  {MIDI}\n\t\t *  @example\n\t\t * Tone.Frequency(\"C4\").toMidi(); //60\n\t\t */\n\t    Tone.Frequency.prototype.toMidi = function () {\n\t        return this.frequencyToMidi(this.valueOf());\n\t    };\n\t    /**\n\t\t *  Return the value of the frequency in Scientific Pitch Notation\n\t\t *  @return  {Note}\n\t\t *  @example\n\t\t * Tone.Frequency(69, \"midi\").toNote(); //\"A4\"\n\t\t */\n\t    Tone.Frequency.prototype.toNote = function () {\n\t        var freq = this.valueOf();\n\t        var log = Math.log(freq / Tone.Frequency.A4) / Math.LN2;\n\t        var noteNumber = Math.round(12 * log) + 57;\n\t        var octave = Math.floor(noteNumber / 12);\n\t        if (octave < 0) {\n\t            noteNumber += -12 * octave;\n\t        }\n\t        var noteName = scaleIndexToNote[noteNumber % 12];\n\t        return noteName + octave.toString();\n\t    };\n\t    /**\n\t\t *  Return the duration of one cycle in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.Frequency.prototype.toSeconds = function () {\n\t        return 1 / this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the value in Hertz\n\t\t *  @return  {Frequency}\n\t\t */\n\t    Tone.Frequency.prototype.toFrequency = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the duration of one cycle in ticks\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Frequency.prototype.toTicks = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        return Math.floor(quarters * Tone.Transport.PPQ);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS HELPERS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._frequencyToUnits = function (freq) {\n\t        return freq;\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._ticksToUnits = function (ticks) {\n\t        return 1 / (ticks * 60 / (Tone.Transport.bpm.value * Tone.Transport.PPQ));\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._beatsToUnits = function (beats) {\n\t        return 1 / Tone.TimeBase.prototype._beatsToUnits.call(this, beats);\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._secondsToUnits = function (seconds) {\n\t        return 1 / seconds;\n\t    };\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._defaultUnits = 'hz';\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tFREQUENCY CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Note to scale index\n\t\t *  @type  {Object}\n\t\t */\n\t    var noteToScaleIndex = {\n\t        'cbb': -2,\n\t        'cb': -1,\n\t        'c': 0,\n\t        'c#': 1,\n\t        'cx': 2,\n\t        'dbb': 0,\n\t        'db': 1,\n\t        'd': 2,\n\t        'd#': 3,\n\t        'dx': 4,\n\t        'ebb': 2,\n\t        'eb': 3,\n\t        'e': 4,\n\t        'e#': 5,\n\t        'ex': 6,\n\t        'fbb': 3,\n\t        'fb': 4,\n\t        'f': 5,\n\t        'f#': 6,\n\t        'fx': 7,\n\t        'gbb': 5,\n\t        'gb': 6,\n\t        'g': 7,\n\t        'g#': 8,\n\t        'gx': 9,\n\t        'abb': 7,\n\t        'ab': 8,\n\t        'a': 9,\n\t        'a#': 10,\n\t        'ax': 11,\n\t        'bbb': 9,\n\t        'bb': 10,\n\t        'b': 11,\n\t        'b#': 12,\n\t        'bx': 13\n\t    };\n\t    /**\n\t\t *  scale index to note (sharps)\n\t\t *  @type  {Array}\n\t\t */\n\t    var scaleIndexToNote = [\n\t        'C',\n\t        'C#',\n\t        'D',\n\t        'D#',\n\t        'E',\n\t        'F',\n\t        'F#',\n\t        'G',\n\t        'G#',\n\t        'A',\n\t        'A#',\n\t        'B'\n\t    ];\n\t    /**\n\t\t *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)\n\t\t *  A4's values in Hertz.\n\t\t *  @type {Frequency}\n\t\t *  @static\n\t\t */\n\t    Tone.Frequency.A4 = 440;\n\t    /**\n\t\t *  Convert a MIDI note to frequency value.\n\t\t *  @param  {MIDI} midi The midi number to convert.\n\t\t *  @return {Frequency} the corresponding frequency value\n\t\t *  @example\n\t\t * tone.midiToFrequency(69); // returns 440\n\t\t */\n\t    Tone.Frequency.prototype.midiToFrequency = function (midi) {\n\t        return Tone.Frequency.A4 * Math.pow(2, (midi - 69) / 12);\n\t    };\n\t    /**\n\t\t *  Convert a frequency value to a MIDI note.\n\t\t *  @param {Frequency} frequency The value to frequency value to convert.\n\t\t *  @returns  {MIDI}\n\t\t *  @example\n\t\t * tone.midiToFrequency(440); // returns 69\n\t\t */\n\t    Tone.Frequency.prototype.frequencyToMidi = function (frequency) {\n\t        return 69 + Math.round(12 * Math.log(frequency / Tone.Frequency.A4) / Math.LN2);\n\t    };\n\t    return Tone.Frequency;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TransportTime is a the time along the Transport's\n\t\t *         timeline. It is similar to Tone.Time, but instead of evaluating\n\t\t *         against the AudioContext's clock, it is evaluated against\n\t\t *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n\t\t *  @constructor\n\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t *  @param  {String=}  units  Unit values\n\t\t *  @extends {Tone.Time}\n\t\t */\n\t    Tone.TransportTime = function (val, units) {\n\t        if (this instanceof Tone.TransportTime) {\n\t            Tone.Time.call(this, val, units);\n\t        } else {\n\t            return new Tone.TransportTime(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.TransportTime, Tone.Time);\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.TransportTime.prototype._unaryExpressions = Object.create(Tone.Time.prototype._unaryExpressions);\n\t    /**\n\t\t *  Adds an additional unary expression\n\t\t *  which quantizes values to the next subdivision\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.TransportTime.prototype._unaryExpressions.quantize = {\n\t        regexp: /^@/,\n\t        method: function (rh) {\n\t            var subdivision = this._secondsToTicks(rh());\n\t            var multiple = Math.ceil(Tone.Transport.ticks / subdivision);\n\t            return this._ticksToUnits(multiple * subdivision);\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert seconds into ticks\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Ticks}\n\t\t *  @private\n\t\t */\n\t    Tone.TransportTime.prototype._secondsToTicks = function (seconds) {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = seconds / quarterTime;\n\t        return Math.round(quarters * Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Evaluate the time expression. Returns values in ticks\n\t\t *  @return {Ticks}\n\t\t */\n\t    Tone.TransportTime.prototype.valueOf = function () {\n\t        var val = this._secondsToTicks(this._expr());\n\t        return val + (this._plusNow ? Tone.Transport.ticks : 0);\n\t    };\n\t    /**\n\t\t *  Return the time in ticks.\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.TransportTime.prototype.toTicks = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.TransportTime.prototype.toSeconds = function () {\n\t        var val = this._expr();\n\t        return val + (this._plusNow ? Tone.Transport.seconds : 0);\n\t    };\n\t    /**\n\t\t *  Return the time as a frequency value\n\t\t *  @return  {Frequency} \n\t\t */\n\t    Tone.TransportTime.prototype.toFrequency = function () {\n\t        return 1 / this.toSeconds();\n\t    };\n\t    return Tone.TransportTime;\n\t});\n\tModule(function (Tone) {\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTYPES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t * Units which a value can take on.\n\t\t * @enum {String}\n\t\t */\n\t    Tone.Type = {\n\t        /**\n\t\t\t *  Default units\n\t\t\t *  @typedef {Default}\n\t\t\t */\n\t        Default: 'number',\n\t        /**\n\t\t\t *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n\t\t\t *\n\t\t\t *  * Numbers, which will be taken literally as the time (in seconds).\n\t\t\t *  * Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.\n\t\t\t *  * TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times\n\t\t\t *  in the form BARS:QUARTERS:SIXTEENTHS.\n\t\t\t *  * Frequency, (\"8hz\") is converted to the length of the cycle in seconds.\n\t\t\t *  * Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as\n\t\t\t *  \"the current time plus whatever expression follows\".\n\t\t\t *  * Expressions, (\"3:0 + 2 - (1m / 7)\") any of the above can also be combined\n\t\t\t *  into a mathematical expression which will be evaluated to compute the desired time.\n\t\t\t *  * No Argument, for methods which accept time, no argument will be interpreted as\n\t\t\t *  \"now\" (i.e. the currentTime).\n\t\t\t *\n\t\t\t *  @typedef {Time}\n\t\t\t */\n\t        Time: 'time',\n\t        /**\n\t\t\t *  Frequency can be described similar to time, except ultimately the\n\t\t\t *  values are converted to frequency instead of seconds. A number\n\t\t\t *  is taken literally as the value in hertz. Additionally any of the\n\t\t\t *  Time encodings can be used. Note names in the form\n\t\t\t *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n\t\t\t *  frequency value.\n\t\t\t *  @typedef {Frequency}\n\t\t\t */\n\t        Frequency: 'frequency',\n\t        /**\n\t\t\t *  TransportTime describes a position along the Transport's timeline. It is\n\t\t\t *  similar to Time in that it uses all the same encodings, but TransportTime specifically\n\t\t\t *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable.\n\t\t\t *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\n\t\t\t *  @typedef {TransportTime}\n\t\t\t */\n\t        TransportTime: 'transportTime',\n\t        /**\n\t\t\t *  Ticks are the basic subunit of the Transport. They are\n\t\t\t *  the smallest unit of time that the Transport supports.\n\t\t\t *  @typedef {Ticks}\n\t\t\t */\n\t        Ticks: 'ticks',\n\t        /**\n\t\t\t *  Normal values are within the range [0, 1].\n\t\t\t *  @typedef {NormalRange}\n\t\t\t */\n\t        NormalRange: 'normalRange',\n\t        /**\n\t\t\t *  AudioRange values are between [-1, 1].\n\t\t\t *  @typedef {AudioRange}\n\t\t\t */\n\t        AudioRange: 'audioRange',\n\t        /**\n\t\t\t *  Decibels are a logarithmic unit of measurement which is useful for volume\n\t\t\t *  because of the logarithmic way that we perceive loudness. 0 decibels\n\t\t\t *  means no change in volume. -10db is approximately half as loud and 10db\n\t\t\t *  is twice is loud.\n\t\t\t *  @typedef {Decibels}\n\t\t\t */\n\t        Decibels: 'db',\n\t        /**\n\t\t\t *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\n\t\t\t *  @typedef {Interval}\n\t\t\t */\n\t        Interval: 'interval',\n\t        /**\n\t\t\t *  Beats per minute.\n\t\t\t *  @typedef {BPM}\n\t\t\t */\n\t        BPM: 'bpm',\n\t        /**\n\t\t\t *  The value must be greater than or equal to 0.\n\t\t\t *  @typedef {Positive}\n\t\t\t */\n\t        Positive: 'positive',\n\t        /**\n\t\t\t *  Gain is the ratio between input and output of a signal.\n\t\t\t *  A gain of 0 is the same as silencing the signal. A gain of\n\t\t\t *  1, causes no change to the incoming signal.\n\t\t\t *  @typedef {Gain}\n\t\t\t */\n\t        Gain: 'gain',\n\t        /**\n\t\t\t *  A cent is a hundredth of a semitone.\n\t\t\t *  @typedef {Cents}\n\t\t\t */\n\t        Cents: 'cents',\n\t        /**\n\t\t\t *  Angle between 0 and 360.\n\t\t\t *  @typedef {Degrees}\n\t\t\t */\n\t        Degrees: 'degrees',\n\t        /**\n\t\t\t *  A number representing a midi note.\n\t\t\t *  @typedef {MIDI}\n\t\t\t */\n\t        MIDI: 'midi',\n\t        /**\n\t\t\t *  A colon-separated representation of time in the form of\n\t\t\t *  Bars:Beats:Sixteenths.\n\t\t\t *  @typedef {BarsBeatsSixteenths}\n\t\t\t */\n\t        BarsBeatsSixteenths: 'barsBeatsSixteenths',\n\t        /**\n\t\t\t *  Sampling is the reduction of a continuous signal to a discrete signal.\n\t\t\t *  Audio is typically sampled 44100 times per second.\n\t\t\t *  @typedef {Samples}\n\t\t\t */\n\t        Samples: 'samples',\n\t        /**\n\t\t\t *  Hertz are a frequency representation defined as one cycle per second.\n\t\t\t *  @typedef {Hertz}\n\t\t\t */\n\t        Hertz: 'hertz',\n\t        /**\n\t\t\t *  A frequency represented by a letter name,\n\t\t\t *  accidental and octave. This system is known as\n\t\t\t *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).\n\t\t\t *  @typedef {Note}\n\t\t\t */\n\t        Note: 'note',\n\t        /**\n\t\t\t *  One millisecond is a thousandth of a second.\n\t\t\t *  @typedef {Milliseconds}\n\t\t\t */\n\t        Milliseconds: 'milliseconds',\n\t        /**\n\t\t\t *  Seconds are the time unit of the AudioContext. In the end,\n\t\t\t *  all values need to be evaluated to seconds.\n\t\t\t *  @typedef {Seconds}\n\t\t\t */\n\t        Seconds: 'seconds',\n\t        /**\n\t\t\t *  A string representing a duration relative to a measure.\n\t\t\t *  * \"4n\" = quarter note\n\t\t\t *  * \"2m\" = two measures\n\t\t\t *  * \"8t\" = eighth-note triplet\n\t\t\t *  @typedef {Notation}\n\t\t\t */\n\t        Notation: 'notation'\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // AUGMENT TONE's PROTOTYPE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Convert Time into seconds.\n\t\t *\n\t\t *  Unlike the method which it overrides, this takes into account\n\t\t *  transporttime and musical notation.\n\t\t *\n\t\t *  Time : 1.40\n\t\t *  Notation: 4n or 1m or 2t\n\t\t *  Now Relative: +3n\n\t\t *  Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)\n\t\t *\n\t\t *  @param  {Time} time\n\t\t *  @return {Seconds}\n\t\t */\n\t    Tone.prototype.toSeconds = function (time) {\n\t        if (Tone.isNumber(time)) {\n\t            return time;\n\t        } else if (Tone.isUndef(time)) {\n\t            return this.now();\n\t        } else if (Tone.isString(time)) {\n\t            return new Tone.Time(time).toSeconds();\n\t        } else if (time instanceof Tone.TimeBase) {\n\t            return time.toSeconds();\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert a frequency representation into a number.\n\t\t *  @param  {Frequency} freq\n\t\t *  @return {Hertz}      the frequency in hertz\n\t\t */\n\t    Tone.prototype.toFrequency = function (freq) {\n\t        if (Tone.isNumber(freq)) {\n\t            return freq;\n\t        } else if (Tone.isString(freq) || Tone.isUndef(freq)) {\n\t            return new Tone.Frequency(freq).valueOf();\n\t        } else if (freq instanceof Tone.TimeBase) {\n\t            return freq.toFrequency();\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert a time representation into ticks.\n\t\t *  @param  {Time} time\n\t\t *  @return {Ticks}  the time in ticks\n\t\t */\n\t    Tone.prototype.toTicks = function (time) {\n\t        if (Tone.isNumber(time) || Tone.isString(time)) {\n\t            return new Tone.TransportTime(time).toTicks();\n\t        } else if (Tone.isUndef(time)) {\n\t            return Tone.Transport.ticks;\n\t        } else if (time instanceof Tone.TimeBase) {\n\t            return time.toTicks();\n\t        }\n\t    };\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Param wraps the native Web Audio's AudioParam to provide\n\t\t *         additional unit conversion functionality. It also\n\t\t *         serves as a base-class for classes which have a single,\n\t\t *         automatable parameter.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param  {AudioParam}  param  The parameter to wrap.\n\t\t *  @param  {Tone.Type} units The units of the audio param.\n\t\t *  @param  {Boolean} convert If the param should be converted.\n\t\t */\n\t    Tone.Param = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'param',\n\t            'units',\n\t            'convert'\n\t        ], Tone.Param);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The native parameter to control\n\t\t\t *  @type  {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input = options.param;\n\t        /**\n\t\t\t *  The units of the parameter\n\t\t\t *  @type {Tone.Type}\n\t\t\t */\n\t        this.units = options.units;\n\t        /**\n\t\t\t *  If the value should be converted or not\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.convert = options.convert;\n\t        /**\n\t\t\t *  True if the signal value is being overridden by\n\t\t\t *  a connected signal.\n\t\t\t *  @readOnly\n\t\t\t *  @type  {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this.overridden = false;\n\t        if (!Tone.isUndef(options.value)) {\n\t            this.value = options.value;\n\t        }\n\t    };\n\t    Tone.extend(Tone.Param, Tone.AudioNode);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Param.defaults = {\n\t        'units': Tone.Type.Default,\n\t        'convert': true,\n\t        'param': undefined\n\t    };\n\t    /**\n\t\t * The current value of the parameter.\n\t\t * @memberOf Tone.Param#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Param.prototype, 'value', {\n\t        get: function () {\n\t            return this._toUnits(this._param.value);\n\t        },\n\t        set: function (value) {\n\t            var convertedVal = this._fromUnits(value);\n\t            this._param.cancelScheduledValues(0);\n\t            this._param.value = convertedVal;\n\t        }\n\t    });\n\t    /**\n\t\t *  Convert the given value from the type specified by Tone.Param.units\n\t\t *  into the destination value (such as Gain or Frequency).\n\t\t *  @private\n\t\t *  @param  {*} val the value to convert\n\t\t *  @return {number}     the number which the value should be set to\n\t\t */\n\t    Tone.Param.prototype._fromUnits = function (val) {\n\t        if (this.convert || Tone.isUndef(this.convert)) {\n\t            switch (this.units) {\n\t            case Tone.Type.Time:\n\t                return this.toSeconds(val);\n\t            case Tone.Type.Frequency:\n\t                return this.toFrequency(val);\n\t            case Tone.Type.Decibels:\n\t                return Tone.dbToGain(val);\n\t            case Tone.Type.NormalRange:\n\t                return Math.min(Math.max(val, 0), 1);\n\t            case Tone.Type.AudioRange:\n\t                return Math.min(Math.max(val, -1), 1);\n\t            case Tone.Type.Positive:\n\t                return Math.max(val, 0);\n\t            default:\n\t                return val;\n\t            }\n\t        } else {\n\t            return val;\n\t        }\n\t    };\n\t    /**\n\t\t * Convert the parameters value into the units specified by Tone.Param.units.\n\t\t * @private\n\t\t * @param  {number} val the value to convert\n\t\t * @return {number}\n\t\t */\n\t    Tone.Param.prototype._toUnits = function (val) {\n\t        if (this.convert || Tone.isUndef(this.convert)) {\n\t            switch (this.units) {\n\t            case Tone.Type.Decibels:\n\t                return Tone.gainToDb(val);\n\t            default:\n\t                return val;\n\t            }\n\t        } else {\n\t            return val;\n\t        }\n\t    };\n\t    /**\n\t\t *  the minimum output value\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Param.prototype._minOutput = 0.00001;\n\t    /**\n\t\t *  Schedules a parameter value change at the given time.\n\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t *  @param {Time}  time The time when the change should occur.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //set the frequency to \"G4\" in exactly 1 second from now.\n\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t */\n\t    Tone.Param.prototype.setValueAtTime = function (value, time) {\n\t        time = this.toSeconds(time);\n\t        Tone.isPast(time);\n\t        this._param.setValueAtTime(this._fromUnits(value), time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Creates a schedule point with the current value at the current time.\n\t\t *  This is useful for creating an automation anchor point in order to\n\t\t *  schedule changes from the current value.\n\t\t *\n\t\t *  @param {number=} now (Optionally) pass the now value in.\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setRampPoint = function (now) {\n\t        now = Tone.defaultArg(now, this.now());\n\t        this.cancelAndHoldAtTime(this.context.currentTime);\n\t        var currentVal = this._param.value;\n\t        if (currentVal === 0) {\n\t            currentVal = this._minOutput;\n\t        }\n\t        // cancel and hold at the given time\n\t        this._param.setValueAtTime(currentVal, now);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules a linear continuous change in parameter value from the\n\t\t *  previous scheduled parameter value to the given value.\n\t\t *\n\t\t *  @param  {number} value\n\t\t *  @param  {Time} endTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        endTime = this.toSeconds(endTime);\n\t        Tone.isPast(endTime);\n\t        this._param.linearRampToValueAtTime(value, endTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from\n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *\n\t\t *  @param  {number} value\n\t\t *  @param  {Time} endTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        value = Math.max(this._minOutput, value);\n\t        endTime = this.toSeconds(endTime);\n\t        Tone.isPast(endTime);\n\t        this._param.exponentialRampToValueAtTime(value, endTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from\n\t\t *  the current time and current value to the given value over the\n\t\t *  duration of the rampTime.\n\t\t *\n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the\n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //exponentially ramp to the value 2 over 4 seconds.\n\t\t * signal.exponentialRampTo(2, 4);\n\t\t */\n\t    Tone.Param.prototype.exponentialRampTo = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an linear continuous change in parameter value from\n\t\t *  the current time and current value to the given value over the\n\t\t *  duration of the rampTime.\n\t\t *\n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the\n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //linearly ramp to the value 4 over 3 seconds.\n\t\t * signal.linearRampTo(4, 3);\n\t\t */\n\t    Tone.Param.prototype.linearRampTo = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t * Convert between Time and time constant. The time\n\t\t * constant returned can be used in setTargetAtTime.\n\t\t * @param  {Time} time The time to convert\n\t\t * @return {Number}      The time constant to get an exponentially approaching\n\t\t *                           curve to over 99% of towards the target value.\n\t\t */\n\t    Tone.Param.prototype.getTimeConstant = function (time) {\n\t        return Math.log(this.toSeconds(time) + 1) / Math.log(200);\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time. Since it\n\t\t *  is an exponential approach it will continue approaching after the ramp duration. The\n\t\t *  rampTime is the time that it takes to reach over 99% of the way towards the value.\n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the\n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //exponentially ramp to the value 2 over 4 seconds.\n\t\t * signal.exponentialRampTo(2, 4);\n\t\t */\n\t    Tone.Param.prototype.targetRampTo = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.setTargetAtTime(value, startTime, this.getTimeConstant(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value\n\t\t *  @param {Time} startTime\n\t\t *  @param {number} timeConstant\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        value = this._fromUnits(value);\n\t        // The value will never be able to approach without timeConstant > 0.\n\t        // http://www.w3.org/TR/webaudio/#dfn-setTargetAtTime, where the equation\n\t        // is described. 0 results in a division by 0.\n\t        value = Math.max(this._minOutput, value);\n\t        timeConstant = Math.max(this._minOutput, timeConstant);\n\t        this._param.setTargetAtTime(value, this.toSeconds(startTime), timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets an array of arbitrary parameter values starting at the given time\n\t\t *  for the given duration.\n\t\t *\n\t\t *  @param {Array} values\n\t\t *  @param {Time} startTime\n\t\t *  @param {Time} duration\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setValueCurveAtTime = function (values, startTime, duration) {\n\t        duration = this.toSeconds(duration);\n\t        startTime = this.toSeconds(startTime);\n\t        this.setValueAtTime(values[0], startTime);\n\t        var segTime = duration / (values.length - 1);\n\t        for (var i = 1; i < values.length; i++) {\n\t            this._param.linearRampToValueAtTime(this._fromUnits(values[i]), startTime + i * segTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or\n\t\t *  equal to startTime.\n\t\t *\n\t\t *  @param  {Time} startTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.cancelScheduledValues = function (startTime) {\n\t        this._param.cancelScheduledValues(this.toSeconds(startTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  This is similar to [cancelScheduledValues](#cancelScheduledValues) except\n\t\t *  it holds the automated value at cancelTime until the next automated event.\n\t\t *  @param  {Time} cancelTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.cancelAndHoldAtTime = function (cancelTime) {\n\t        cancelTime = this.toSeconds(cancelTime);\n\t        if (this._param.cancelAndHoldAtTime) {\n\t            this._param.cancelAndHoldAtTime(cancelTime);\n\t        } else {\n\t            //fallback for unsupported browsers\n\t            //can't cancel and hold at any time in the future\n\t            //just do it immediately for gapless automation curves\n\t            var now = this.context.currentTime;\n\t            this._param.cancelScheduledValues(now);\n\t            var currentVal = this._param.value;\n\t            if (currentVal === 0) {\n\t                currentVal = this._minOutput;\n\t            }\n\t            this._param.setValueAtTime(currentVal, now + this.sampleTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Ramps to the given value over the duration of the rampTime.\n\t\t *  Automatically selects the best ramp type (exponential or linear)\n\t\t *  depending on the `units` of the signal\n\t\t *\n\t\t *  @param  {number} value\n\t\t *  @param  {Time} rampTime \tThe time that it takes the\n\t\t *                              value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //ramp to the value either linearly or exponentially\n\t\t * //depending on the \"units\" value of the signal\n\t\t * signal.rampTo(0, 10);\n\t\t *  @example\n\t\t * //schedule it to ramp starting at a specific time\n\t\t * signal.rampTo(0, 10, 5)\n\t\t */\n\t    Tone.Param.prototype.rampTo = function (value, rampTime, startTime) {\n\t        rampTime = Tone.defaultArg(rampTime, 0.1);\n\t        if (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM || this.units === Tone.Type.Decibels) {\n\t            this.exponentialRampTo(value, rampTime, startTime);\n\t        } else {\n\t            this.linearRampTo(value, rampTime, startTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Param;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  createGain shim\n\t\t *  @private\n\t\t */\n\t    if (window.GainNode && !AudioContext.prototype.createGain) {\n\t        AudioContext.prototype.createGain = AudioContext.prototype.createGainNode;\n\t    }\n\t    /**\n\t\t *  @class A thin wrapper around the Native Web Audio GainNode.\n\t\t *         The GainNode is a basic building block of the Web Audio\n\t\t *         API and is useful for routing audio and adjusting gains.\n\t\t *  @extends {Tone}\n\t\t *  @param  {Number=}  gain  The initial gain of the GainNode\n\t\t *  @param {Tone.Type=} units The units of the gain parameter.\n\t\t */\n\t    Tone.Gain = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'gain',\n\t            'units'\n\t        ], Tone.Gain);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The GainNode\n\t\t\t *  @type  {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = this.output = this._gainNode = this.context.createGain();\n\t        /**\n\t\t\t *  The gain parameter of the gain node.\n\t\t\t *  @type {Gain}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.gain = new Tone.Param({\n\t            'param': this._gainNode.gain,\n\t            'units': options.units,\n\t            'value': options.gain,\n\t            'convert': options.convert\n\t        });\n\t        this._readOnly('gain');\n\t    };\n\t    Tone.extend(Tone.Gain, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Gain.defaults = {\n\t        'gain': 1,\n\t        'convert': true\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Gain}  this\n\t\t */\n\t    Tone.Gain.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._gainNode.disconnect();\n\t        this._gainNode = null;\n\t        this._writable('gain');\n\t        this.gain.dispose();\n\t        this.gain = null;\n\t    };\n\t    return Tone.Gain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.\n\t\t *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n\t\t *          has all of the methods available to native Web Audio \n\t\t *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n\t\t *          as well as additional conveniences. Read more about working with signals \n\t\t *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Param}\n\t\t *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam\n\t\t *                                     is passed in, that parameter will be wrapped\n\t\t *                                     and controlled by the Signal. \n\t\t *  @param {string} [units=Number] unit The units the signal is in. \n\t\t *  @example\n\t\t * var signal = new Tone.Signal(10);\n\t\t */\n\t    Tone.Signal = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'value',\n\t            'units'\n\t        ], Tone.Signal);\n\t        var gainNode = Tone.context.createGain();\n\t        options.param = gainNode.gain;\n\t        Tone.Param.call(this, options);\n\t        /**\n\t\t\t * The node where the constant signal value is scaled.\n\t\t\t * @type {GainNode}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = gainNode;\n\t        /**\n\t\t\t * The node where the value is set.\n\t\t\t * @type {Tone.Param}\n\t\t\t * @private\n\t\t\t */\n\t        this.input = this._param = this.output.gain;\n\t        //connect the const output to the node output\n\t        this.context.getConstant(1).connect(this.output);\n\t    };\n\t    Tone.extend(Tone.Signal, Tone.Param);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Signal.defaults = {\n\t        'value': 0,\n\t        'units': Tone.Type.Default,\n\t        'convert': true\n\t    };\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t *  @method\n\t\t */\n\t    Tone.Signal.prototype.connect = Tone.SignalBase.prototype.connect;\n\t    /**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Signal} this\n\t\t */\n\t    Tone.Signal.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.Signal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A signal which adds the method getValueAtTime.\n\t\t *         Code and inspiration from https://github.com/jsantell/web-audio-automation-timeline\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {Number=} value The initial value of the signal\n\t\t *  @param {String=} units The conversion units of the signal.\n\t\t */\n\t    Tone.TimelineSignal = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'value',\n\t            'units'\n\t        ], Tone.Signal);\n\t        Tone.Signal.call(this, options);\n\t        /**\n\t\t\t *  The scheduled events\n\t\t\t *  @type {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = new Tone.Timeline(100);\n\t        /**\n\t\t\t *  The initial scheduled value\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._initial = this._fromUnits(this._param.value);\n\t        this.value = options.value;\n\t        //delete the input node so that nothing can overwrite the signal value\n\t        delete this.input;\n\t    };\n\t    Tone.extend(Tone.TimelineSignal, Tone.Signal);\n\t    /**\n\t\t *  The event types of a schedulable signal.\n\t\t *  @enum {String}\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.Type = {\n\t        Linear: 'linear',\n\t        Exponential: 'exponential',\n\t        Target: 'target',\n\t        Set: 'set'\n\t    };\n\t    /**\n\t\t * The current value of the signal.\n\t\t * @memberOf Tone.TimelineSignal#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.TimelineSignal.prototype, 'value', {\n\t        get: function () {\n\t            var now = this.now();\n\t            var val = this.getValueAtTime(now);\n\t            return this._toUnits(val);\n\t        },\n\t        set: function (value) {\n\t            if (this._events) {\n\t                var convertedVal = this._fromUnits(value);\n\t                this._initial = convertedVal;\n\t                this.cancelScheduledValues();\n\t                this._param.value = convertedVal;\n\t            }\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tSCHEDULING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Schedules a parameter value change at the given time.\n\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t *  @param {Time}  time The time when the change should occur.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t *  @example\n\t\t * //set the frequency to \"G4\" in exactly 1 second from now.\n\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t */\n\t    Tone.TimelineSignal.prototype.setValueAtTime = function (value, startTime) {\n\t        value = this._fromUnits(value);\n\t        startTime = this.toSeconds(startTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Set,\n\t            'value': value,\n\t            'time': startTime\n\t        });\n\t        //invoke the original event\n\t        this._param.setValueAtTime(value, startTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules a linear continuous change in parameter value from the\n\t\t *  previous scheduled parameter value to the given value.\n\t\t *\n\t\t *  @param  {number} value\n\t\t *  @param  {Time} endTime\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        endTime = this.toSeconds(endTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Linear,\n\t            'value': value,\n\t            'time': endTime\n\t        });\n\t        this._param.linearRampToValueAtTime(value, endTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from\n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *\n\t\t *  @param  {number} value\n\t\t *  @param  {Time} endTime\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t        //get the previous event and make sure it's not starting from 0\n\t        endTime = this.toSeconds(endTime);\n\t        var beforeEvent = this._searchBefore(endTime);\n\t        if (beforeEvent && beforeEvent.value === 0) {\n\t            //reschedule that event\n\t            this.setValueAtTime(this._minOutput, beforeEvent.time);\n\t        }\n\t        value = this._fromUnits(value);\n\t        var setValue = Math.max(value, this._minOutput);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Exponential,\n\t            'value': setValue,\n\t            'time': endTime\n\t        });\n\t        //if the ramped to value is 0, make it go to the min output, and then set to 0.\n\t        if (value < this._minOutput) {\n\t            this._param.exponentialRampToValueAtTime(this._minOutput, endTime - this.sampleTime);\n\t            this.setValueAtTime(0, endTime);\n\t        } else {\n\t            this._param.exponentialRampToValueAtTime(value, endTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value\n\t\t *  @param {Time} startTime\n\t\t *  @param {number} timeConstant\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        value = this._fromUnits(value);\n\t        value = Math.max(this._minOutput, value);\n\t        timeConstant = Math.max(this._minOutput, timeConstant);\n\t        startTime = this.toSeconds(startTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Target,\n\t            'value': value,\n\t            'time': startTime,\n\t            'constant': timeConstant\n\t        });\n\t        this._param.setTargetAtTime(value, startTime, timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set an array of arbitrary values starting at the given time for the given duration.\n\t\t *  @param {Float32Array} values\n\t\t *  @param {Time} startTime\n\t\t *  @param {Time} duration\n\t\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {\n\t        scaling = Tone.defaultArg(scaling, 1);\n\t        duration = this.toSeconds(duration);\n\t        startTime = this.toSeconds(startTime);\n\t        var segTime = duration / (values.length - 1);\n\t        this.setValueAtTime(values[0] * scaling, startTime);\n\t        for (var i = 1; i < values.length; i++) {\n\t            this.linearRampToValueAtTime(values[i] * scaling, startTime + i * segTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or\n\t\t *  equal to startTime.\n\t\t *  @param  {Time} startTime\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.cancelScheduledValues = function (after) {\n\t        after = this.toSeconds(after);\n\t        this._events.cancel(after);\n\t        this._param.cancelScheduledValues(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or\n\t\t *  equal to cancelTime and sets the output of the signal to be the value\n\t\t *  at cancelTime. Similar to (cancelScheduledValues)[#cancelscheduledvalues].\n\t\t *  @param  {Time} cancelTime\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.cancelAndHoldAtTime = function (cancelTime) {\n\t        this.setRampPoint(this.toSeconds(cancelTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the computed value at the given time. This provides\n\t\t *  a point from which a linear or exponential curve\n\t\t *  can be scheduled after. Will cancel events after\n\t\t *  the given time and shorten the currently scheduled\n\t\t *  linear or exponential ramp so that it ends at `time` .\n\t\t *  This is to avoid discontinuities and clicks in envelopes.\n\t\t *  @param {Time} time When to set the ramp point\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.setRampPoint = function (time) {\n\t        time = this.toSeconds(time);\n\t        //get the value at the given time\n\t        var val = this._toUnits(this.getValueAtTime(time));\n\t        //if there is an event at the given time\n\t        //and that even is not a \"set\"\n\t        var before = this._searchBefore(time);\n\t        if (before && before.time === time) {\n\t            //remove everything after\n\t            this.cancelScheduledValues(time + this.sampleTime);\n\t        } else {\n\t            //reschedule the next event to end at the given time\n\t            var after = this._searchAfter(time);\n\t            if (after) {\n\t                //cancel the next event(s)\n\t                this.cancelScheduledValues(time);\n\t                if (after.type === Tone.TimelineSignal.Type.Linear) {\n\t                    this.linearRampToValueAtTime(val, time);\n\t                } else if (after.type === Tone.TimelineSignal.Type.Exponential) {\n\t                    this.exponentialRampToValueAtTime(val, time);\n\t                }\n\t            }\n\t        }\n\t        this.setValueAtTime(val, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Do a linear ramp to the given value between the start and finish times.\n\t\t *  @param {Number} value The value to ramp to.\n\t\t *  @param {Time} start The beginning anchor point to do the linear ramp\n\t\t *  @param {Time} finish The ending anchor point by which the value of\n\t\t *                       the signal will equal the given value.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.linearRampToValueBetween = function (value, start, finish) {\n\t        this.setRampPoint(start);\n\t        this.linearRampToValueAtTime(value, finish);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Do a exponential ramp to the given value between the start and finish times.\n\t\t *  @param {Number} value The value to ramp to.\n\t\t *  @param {Time} start The beginning anchor point to do the exponential ramp\n\t\t *  @param {Time} finish The ending anchor point by which the value of\n\t\t *                       the signal will equal the given value.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.exponentialRampToValueBetween = function (value, start, finish) {\n\t        this.setRampPoint(start);\n\t        this.exponentialRampToValueAtTime(value, finish);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tGETTING SCHEDULED VALUES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value before or equal to the given time\n\t\t *  @param  {Number}  time  The time to query\n\t\t *  @return  {Object}  The event at or before the given time.\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._searchBefore = function (time) {\n\t        return this._events.get(time);\n\t    };\n\t    /**\n\t\t *  The event after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @return  {Object}  The next event after the given time\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._searchAfter = function (time) {\n\t        return this._events.getAfter(time);\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {Number}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.TimelineSignal.prototype.getValueAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        var after = this._searchAfter(time);\n\t        var before = this._searchBefore(time);\n\t        var value = this._initial;\n\t        //if it was set by\n\t        if (before === null) {\n\t            value = this._initial;\n\t        } else if (before.type === Tone.TimelineSignal.Type.Target) {\n\t            var previous = this._events.getBefore(before.time);\n\t            var previousVal;\n\t            if (previous === null) {\n\t                previousVal = this._initial;\n\t            } else {\n\t                previousVal = previous.value;\n\t            }\n\t            value = this._exponentialApproach(before.time, previousVal, before.value, before.constant, time);\n\t        } else if (after === null) {\n\t            value = before.value;\n\t        } else if (after.type === Tone.TimelineSignal.Type.Linear) {\n\t            value = this._linearInterpolate(before.time, before.value, after.time, after.value, time);\n\t        } else if (after.type === Tone.TimelineSignal.Type.Exponential) {\n\t            value = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);\n\t        } else {\n\t            value = before.value;\n\t        }\n\t        return value;\n\t    };\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams,\n\t\t *  they take over the output value of that signal or AudioParam.\n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>.\n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node\n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t *  @method\n\t\t */\n\t    Tone.TimelineSignal.prototype.connect = Tone.SignalBase.prototype.connect;\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUTOMATION CURVE CALCULATIONS\n\t    //\tMIT License, copyright (c) 2014 Jordan Santell\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Calculates the the value along the curve produced by setTargetAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._exponentialApproach = function (t0, v0, v1, timeConstant, t) {\n\t        return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by linearRampToValueAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._linearInterpolate = function (t0, v0, t1, v1, t) {\n\t        return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._exponentialInterpolate = function (t0, v0, t1, v1, t) {\n\t        v0 = Math.max(this._minOutput, v0);\n\t        return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        this._events.dispose();\n\t        this._events = null;\n\t    };\n\t    return Tone.TimelineSignal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Pow applies an exponent to the incoming signal. The incoming signal\n\t\t *         must be AudioRange.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {Positive} exp The exponent to apply to the incoming signal, must be at least 2. \n\t\t *  @example\n\t\t * var pow = new Tone.Pow(2);\n\t\t * var sig = new Tone.Signal(0.5).connect(pow);\n\t\t * //output of pow is 0.25. \n\t\t */\n\t    Tone.Pow = function (exp) {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t * the exponent\n\t\t\t * @private\n\t\t\t * @type {number}\n\t\t\t */\n\t        this._exp = Tone.defaultArg(exp, 1);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._expScaler = this.input = this.output = new Tone.WaveShaper(this._expFunc(this._exp), 8192);\n\t    };\n\t    Tone.extend(Tone.Pow, Tone.SignalBase);\n\t    /**\n\t\t * The value of the exponent.\n\t\t * @memberOf Tone.Pow#\n\t\t * @type {number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Pow.prototype, 'value', {\n\t        get: function () {\n\t            return this._exp;\n\t        },\n\t        set: function (exp) {\n\t            this._exp = exp;\n\t            this._expScaler.setMap(this._expFunc(this._exp));\n\t        }\n\t    });\n\t    /**\n\t\t *  the function which maps the waveshaper\n\t\t *  @param   {number} exp\n\t\t *  @return {function}\n\t\t *  @private\n\t\t */\n\t    Tone.Pow.prototype._expFunc = function (exp) {\n\t        return function (val) {\n\t            return Math.pow(Math.abs(val), exp);\n\t        };\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Pow} this\n\t\t */\n\t    Tone.Pow.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._expScaler.dispose();\n\t        this._expScaler = null;\n\t        return this;\n\t    };\n\t    return Tone.Pow;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n\t\t *          envelope generator. Tone.Envelope outputs a signal which\n\t\t *          can be connected to an AudioParam or Tone.Signal.\n\t\t *          <img src=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Time} [attack] The amount of time it takes for the envelope to go from\n\t\t *                         0 to it's maximum value.\n\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t *                       \tto fall to the sustain value.\n\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t *                                \tthe release is triggered.\n\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0.\n\t\t *  @example\n\t\t * //an amplitude envelope\n\t\t * var gainNode = Tone.context.createGain();\n\t\t * var env = new Tone.Envelope({\n\t\t * \t\"attack\" : 0.1,\n\t\t * \t\"decay\" : 0.2,\n\t\t * \t\"sustain\" : 1,\n\t\t * \t\"release\" : 0.8,\n\t\t * });\n\t\t * env.connect(gainNode.gain);\n\t\t */\n\t    Tone.Envelope = function () {\n\t        //get all of the defaults\n\t        var options = Tone.defaults(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  When triggerAttack is called, the attack time is the amount of\n\t\t\t *  time it takes for the envelope to reach it's maximum value.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.attack = options.attack;\n\t        /**\n\t\t\t *  After the attack portion of the envelope, the value will fall\n\t\t\t *  over the duration of the decay time to it's sustain value.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.decay = options.decay;\n\t        /**\n\t\t\t * \tThe sustain value is the value\n\t\t\t * \twhich the envelope rests at after triggerAttack is\n\t\t\t * \tcalled, but before triggerRelease is invoked.\n\t\t\t *  @type {NormalRange}\n\t\t\t */\n\t        this.sustain = options.sustain;\n\t        /**\n\t\t\t *  After triggerRelease is called, the envelope's\n\t\t\t *  value will fall to it's miminum value over the\n\t\t\t *  duration of the release time.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.release = options.release;\n\t        /**\n\t\t\t *  the next time the envelope is at standby\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._attackCurve = 'linear';\n\t        /**\n\t\t\t *  the next time the envelope is at standby\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._releaseCurve = 'exponential';\n\t        /**\n\t\t\t *  the signal\n\t\t\t *  @type {Tone.TimelineSignal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sig = this.output = new Tone.TimelineSignal();\n\t        this._sig.setValueAtTime(0, 0);\n\t        //set the attackCurve initially\n\t        this.attackCurve = options.attackCurve;\n\t        this.releaseCurve = options.releaseCurve;\n\t    };\n\t    Tone.extend(Tone.Envelope, Tone.AudioNode);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Envelope.defaults = {\n\t        'attack': 0.01,\n\t        'decay': 0.1,\n\t        'sustain': 0.5,\n\t        'release': 1,\n\t        'attackCurve': 'linear',\n\t        'releaseCurve': 'exponential'\n\t    };\n\t    /**\n\t\t * Read the current value of the envelope. Useful for\n\t\t * syncronizing visual output to the envelope.\n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'value', {\n\t        get: function () {\n\t            return this.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t * The shape of the attack.\n\t\t * Can be any of these strings:\n\t\t * <ul>\n\t\t *   <li>linear</li>\n\t\t *   <li>exponential</li>\n\t\t *   <li>sine</li>\n\t\t *   <li>cosine</li>\n\t\t *   <li>bounce</li>\n\t\t *   <li>ripple</li>\n\t\t *   <li>step</li>\n\t\t * </ul>\n\t\t * Can also be an array which describes the curve. Values\n\t\t * in the array are evenly subdivided and linearly\n\t\t * interpolated over the duration of the attack.\n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {String|Array}\n\t\t * @name attackCurve\n\t\t * @example\n\t\t * env.attackCurve = \"linear\";\n\t\t * @example\n\t\t * //can also be an array\n\t\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'attackCurve', {\n\t        get: function () {\n\t            if (Tone.isString(this._attackCurve)) {\n\t                return this._attackCurve;\n\t            } else if (Tone.isArray(this._attackCurve)) {\n\t                //look up the name in the curves array\n\t                for (var type in Tone.Envelope.Type) {\n\t                    if (Tone.Envelope.Type[type].In === this._attackCurve) {\n\t                        return type;\n\t                    }\n\t                }\n\t                //otherwise just return the array\n\t                return this._attackCurve;\n\t            }\n\t        },\n\t        set: function (curve) {\n\t            //check if it's a valid type\n\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t                var curveDef = Tone.Envelope.Type[curve];\n\t                if (Tone.isObject(curveDef)) {\n\t                    this._attackCurve = curveDef.In;\n\t                } else {\n\t                    this._attackCurve = curveDef;\n\t                }\n\t            } else if (Tone.isArray(curve)) {\n\t                this._attackCurve = curve;\n\t            } else {\n\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The shape of the release. See the attack curve types.\n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {String|Array}\n\t\t * @name releaseCurve\n\t\t * @example\n\t\t * env.releaseCurve = \"linear\";\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'releaseCurve', {\n\t        get: function () {\n\t            if (Tone.isString(this._releaseCurve)) {\n\t                return this._releaseCurve;\n\t            } else if (Tone.isArray(this._releaseCurve)) {\n\t                //look up the name in the curves array\n\t                for (var type in Tone.Envelope.Type) {\n\t                    if (Tone.Envelope.Type[type].Out === this._releaseCurve) {\n\t                        return type;\n\t                    }\n\t                }\n\t                //otherwise just return the array\n\t                return this._releaseCurve;\n\t            }\n\t        },\n\t        set: function (curve) {\n\t            //check if it's a valid type\n\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t                var curveDef = Tone.Envelope.Type[curve];\n\t                if (Tone.isObject(curveDef)) {\n\t                    this._releaseCurve = curveDef.Out;\n\t                } else {\n\t                    this._releaseCurve = curveDef;\n\t                }\n\t            } else if (Tone.isArray(curve)) {\n\t                this._releaseCurve = curve;\n\t            } else {\n\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Trigger the attack/decay portion of the ADSR envelope.\n\t\t *  @param  {Time} [time=now] When the attack should start.\n\t\t *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.\n\t\t *                               number between 0-1\n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t *  //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t\t *  env.triggerAttack(\"+0.5\", 0.2);\n\t\t */\n\t    Tone.Envelope.prototype.triggerAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        var originalAttack = this.toSeconds(this.attack);\n\t        var attack = originalAttack;\n\t        var decay = this.toSeconds(this.decay);\n\t        velocity = Tone.defaultArg(velocity, 1);\n\t        //check if it's not a complete attack\n\t        var currentValue = this.getValueAtTime(time);\n\t        if (currentValue > 0) {\n\t            //subtract the current value from the attack time\n\t            var attackRate = 1 / attack;\n\t            var remainingDistance = 1 - currentValue;\n\t            //the attack is now the remaining time\n\t            attack = remainingDistance / attackRate;\n\t        }\n\t        //attack\n\t        if (this._attackCurve === 'linear') {\n\t            this._sig.linearRampTo(velocity, attack, time);\n\t        } else if (this._attackCurve === 'exponential') {\n\t            this._sig.targetRampTo(velocity, attack, time);\n\t        } else if (attack > 0) {\n\t            this._sig.setRampPoint(time);\n\t            var curve = this._attackCurve;\n\t            //take only a portion of the curve\n\t            if (attack < originalAttack) {\n\t                var percentComplete = 1 - attack / originalAttack;\n\t                var sliceIndex = Math.floor(percentComplete * this._attackCurve.length);\n\t                curve = this._attackCurve.slice(sliceIndex);\n\t                //the first index is the current value\n\t                curve[0] = currentValue;\n\t            }\n\t            this._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t        }\n\t        //decay\n\t        this._sig.targetRampTo(velocity * this.sustain, decay, attack + time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Triggers the release of the envelope.\n\t\t *  @param  {Time} [time=now] When the release portion of the envelope should start.\n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t *  //trigger release immediately\n\t\t *  env.triggerRelease();\n\t\t */\n\t    Tone.Envelope.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        var currentValue = this.getValueAtTime(time);\n\t        if (currentValue > 0) {\n\t            var release = this.toSeconds(this.release);\n\t            if (this._releaseCurve === 'linear') {\n\t                this._sig.linearRampTo(0, release, time);\n\t            } else if (this._releaseCurve === 'exponential') {\n\t                this._sig.targetRampTo(0, release, time);\n\t            } else {\n\t                var curve = this._releaseCurve;\n\t                if (Tone.isArray(curve)) {\n\t                    this._sig.setRampPoint(time);\n\t                    this._sig.setValueCurveAtTime(curve, time, release, currentValue);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {Number}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.Envelope.prototype.getValueAtTime = function (time) {\n\t        return this._sig.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t\t *  some duration, then triggerRelease.\n\t\t *  @param {Time} duration The duration of the sustain.\n\t\t *  @param {Time} [time=now] When the attack should be triggered.\n\t\t *  @param {number} [velocity=1] The velocity of the envelope.\n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t * //trigger the attack and then the release after 0.6 seconds.\n\t\t * env.triggerAttackRelease(0.6);\n\t\t */\n\t    Tone.Envelope.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + this.toSeconds(duration));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled envelope changes after the given time.\n\t\t *  @param  {Time} after\n\t\t *  @returns {Tone.Envelope} this\n\t\t */\n\t    Tone.Envelope.prototype.cancel = function (after) {\n\t        this._sig.cancelScheduledValues(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Borrows the connect method from Tone.Signal.\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.Envelope.prototype.connect = Tone.Signal.prototype.connect;\n\t    /**\n\t \t *  Generate some complex envelope curves.\n\t \t */\n\t    (function _createCurves() {\n\t        var curveLen = 128;\n\t        var i, k;\n\t        //cosine curve\n\t        var cosineCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));\n\t        }\n\t        //ripple curve\n\t        var rippleCurve = [];\n\t        var rippleCurveFreq = 6.4;\n\t        for (i = 0; i < curveLen - 1; i++) {\n\t            k = i / (curveLen - 1);\n\t            var sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t            rippleCurve[i] = sineWave / 10 + k * 0.83;\n\t        }\n\t        rippleCurve[curveLen - 1] = 1;\n\t        //stairs curve\n\t        var stairsCurve = [];\n\t        var steps = 5;\n\t        for (i = 0; i < curveLen; i++) {\n\t            stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;\n\t        }\n\t        //in-out easing curve\n\t        var sineCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            k = i / (curveLen - 1);\n\t            sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t        }\n\t        //a bounce curve\n\t        var bounceCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            k = i / (curveLen - 1);\n\t            var freq = Math.pow(k, 3) * 4 + 0.2;\n\t            var val = Math.cos(freq * Math.PI * 2 * k);\n\t            bounceCurve[i] = Math.abs(val * (1 - k));\n\t        }\n\t        /**\n\t\t\t *  Invert a value curve to make it work for the release\n\t\t\t *  @private\n\t\t\t */\n\t        function invertCurve(curve) {\n\t            var out = new Array(curve.length);\n\t            for (var j = 0; j < curve.length; j++) {\n\t                out[j] = 1 - curve[j];\n\t            }\n\t            return out;\n\t        }\n\t        /**\n\t\t\t *  reverse the curve\n\t\t\t *  @private\n\t\t\t */\n\t        function reverseCurve(curve) {\n\t            return curve.slice(0).reverse();\n\t        }\n\t        /**\n\t\t\t *  attack and release curve arrays\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        Tone.Envelope.Type = {\n\t            'linear': 'linear',\n\t            'exponential': 'exponential',\n\t            'bounce': {\n\t                In: invertCurve(bounceCurve),\n\t                Out: bounceCurve\n\t            },\n\t            'cosine': {\n\t                In: cosineCurve,\n\t                Out: reverseCurve(cosineCurve)\n\t            },\n\t            'step': {\n\t                In: stairsCurve,\n\t                Out: invertCurve(stairsCurve)\n\t            },\n\t            'ripple': {\n\t                In: rippleCurve,\n\t                Out: invertCurve(rippleCurve)\n\t            },\n\t            'sine': {\n\t                In: sineCurve,\n\t                Out: invertCurve(sineCurve)\n\t            }\n\t        };\n\t    }());\n\t    /**\n\t\t *  Disconnect and dispose.\n\t\t *  @returns {Tone.Envelope} this\n\t\t */\n\t    Tone.Envelope.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._sig.dispose();\n\t        this._sig = null;\n\t        this._attackCurve = null;\n\t        this._releaseCurve = null;\n\t        return this;\n\t    };\n\t    return Tone.Envelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n\t\t *          Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts\n\t\t *          an audio signal as the input and will apply the envelope to the amplitude\n\t\t *          of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @param {Time|Object} [attack] The amount of time it takes for the envelope to go from\n\t\t *                               0 to it's maximum value.\n\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t *                       \tto fall to the sustain value.\n\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t *                                \tthe release is triggered.\n\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0.\n\t\t *  @example\n\t\t * var ampEnv = new Tone.AmplitudeEnvelope({\n\t\t * \t\"attack\": 0.1,\n\t\t * \t\"decay\": 0.2,\n\t\t * \t\"sustain\": 1.0,\n\t\t * \t\"release\": 0.8\n\t\t * }).toMaster();\n\t\t * //create an oscillator and connect it\n\t\t * var osc = new Tone.Oscillator().connect(ampEnv).start();\n\t\t * //trigger the envelopes attack and release \"8t\" apart\n\t\t * ampEnv.triggerAttackRelease(\"8t\");\n\t\t */\n\t    Tone.AmplitudeEnvelope = function () {\n\t        Tone.Envelope.apply(this, arguments);\n\t        /**\n\t\t\t *  the input node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = this.output = new Tone.Gain();\n\t        this._sig.connect(this.output.gain);\n\t    };\n\t    Tone.extend(Tone.AmplitudeEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.AmplitudeEnvelope}  this\n\t\t */\n\t    Tone.AmplitudeEnvelope.prototype.dispose = function () {\n\t        Tone.Envelope.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.AmplitudeEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  AnalyserNode.getFloatTimeDomainData polyfill\n\t\t *  @private\n\t\t */\n\t    if (window.AnalyserNode && !AnalyserNode.prototype.getFloatTimeDomainData) {\n\t        //referenced https://github.com/mohayonao/get-float-time-domain-data\n\t        AnalyserNode.prototype.getFloatTimeDomainData = function (array) {\n\t            var uint8 = new Uint8Array(array.length);\n\t            this.getByteTimeDomainData(uint8);\n\t            for (var i = 0; i < uint8.length; i++) {\n\t                array[i] = (uint8[i] - 128) / 128;\n\t            }\n\t        };\n\t    }\n\t    /**\n\t\t *  @class  Wrapper around the native Web Audio's\n\t\t *          [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n\t\t *          Extracts FFT or Waveform data from the incoming signal.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {String=} type The return type of the analysis, either \"fft\", or \"waveform\".\n\t\t *  @param {Number=} size The size of the FFT. Value must be a power of\n\t\t *                       two in the range 32 to 32768.\n\t\t */\n\t    Tone.Analyser = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'type',\n\t            'size'\n\t        ], Tone.Analyser);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The analyser node.\n\t\t\t *  @private\n\t\t\t *  @type {AnalyserNode}\n\t\t\t */\n\t        this._analyser = this.input = this.output = this.context.createAnalyser();\n\t        /**\n\t\t\t *  The analysis type\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The buffer that the FFT data is written to\n\t\t\t *  @type {TypedArray}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = null;\n\t        //set the values initially\n\t        this.size = options.size;\n\t        this.type = options.type;\n\t    };\n\t    Tone.extend(Tone.Analyser, Tone.AudioNode);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Analyser.defaults = {\n\t        'size': 1024,\n\t        'type': 'fft',\n\t        'smoothing': 0.8\n\t    };\n\t    /**\n\t\t *  Possible return types of analyser.getValue()\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Analyser.Type = {\n\t        Waveform: 'waveform',\n\t        FFT: 'fft'\n\t    };\n\t    /**\n\t\t *  Run the analysis given the current settings and return the\n\t\t *  result as a TypedArray.\n\t\t *  @returns {TypedArray}\n\t\t */\n\t    Tone.Analyser.prototype.getValue = function () {\n\t        if (this._type === Tone.Analyser.Type.FFT) {\n\t            this._analyser.getFloatFrequencyData(this._buffer);\n\t        } else if (this._type === Tone.Analyser.Type.Waveform) {\n\t            this._analyser.getFloatTimeDomainData(this._buffer);\n\t        }\n\t        return this._buffer;\n\t    };\n\t    /**\n\t\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Number}\n\t\t *  @name size\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'size', {\n\t        get: function () {\n\t            return this._analyser.frequencyBinCount;\n\t        },\n\t        set: function (size) {\n\t            this._analyser.fftSize = size * 2;\n\t            this._buffer = new Float32Array(size);\n\t        }\n\t    });\n\t    /**\n\t\t *  The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {String}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            if (type !== Tone.Analyser.Type.Waveform && type !== Tone.Analyser.Type.FFT) {\n\t                throw new TypeError('Tone.Analyser: invalid type: ' + type);\n\t            }\n\t            this._type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  0 represents no time averaging with the last analysis frame.\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {NormalRange}\n\t\t *  @name smoothing\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'smoothing', {\n\t        get: function () {\n\t            return this._analyser.smoothingTimeConstant;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.smoothingTimeConstant = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Analyser}  this\n\t\t */\n\t    Tone.Analyser.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._analyser.disconnect();\n\t        this._analyser = null;\n\t        this._buffer = null;\n\t    };\n\t    return Tone.Analyser;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Compressor is a thin wrapper around the Web Audio\n\t\t *         [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n\t\t *         Compression reduces the volume of loud sounds or amplifies quiet sounds\n\t\t *         by narrowing or \"compressing\" an audio signal's dynamic range.\n\t\t *         Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {Decibels|Object} [threshold] The value above which the compression starts to be applied.\n\t\t *  @param {Positive} [ratio] The gain reduction ratio.\n\t\t *  @example\n\t\t * var comp = new Tone.Compressor(-30, 3);\n\t\t */\n\t    Tone.Compressor = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'threshold',\n\t            'ratio'\n\t        ], Tone.Compressor);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  the compressor node\n\t\t\t *  @type {DynamicsCompressorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._compressor = this.input = this.output = this.context.createDynamicsCompressor();\n\t        /**\n\t\t\t *  the threshold vaue\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.threshold = new Tone.Param({\n\t            'param': this._compressor.threshold,\n\t            'units': Tone.Type.Decibels,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The attack parameter\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.attack = new Tone.Param(this._compressor.attack, Tone.Type.Time);\n\t        /**\n\t\t\t *  The release parameter\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.release = new Tone.Param(this._compressor.release, Tone.Type.Time);\n\t        /**\n\t\t\t *  The knee parameter\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.knee = new Tone.Param({\n\t            'param': this._compressor.knee,\n\t            'units': Tone.Type.Decibels,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The ratio value\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.ratio = new Tone.Param({\n\t            'param': this._compressor.ratio,\n\t            'convert': false\n\t        });\n\t        //set the defaults\n\t        this._readOnly([\n\t            'knee',\n\t            'release',\n\t            'attack',\n\t            'ratio',\n\t            'threshold'\n\t        ]);\n\t        this.set(options);\n\t    };\n\t    Tone.extend(Tone.Compressor, Tone.AudioNode);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Compressor.defaults = {\n\t        'ratio': 12,\n\t        'threshold': -24,\n\t        'release': 0.25,\n\t        'attack': 0.003,\n\t        'knee': 30\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Compressor} this\n\t\t */\n\t    Tone.Compressor.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'knee',\n\t            'release',\n\t            'attack',\n\t            'ratio',\n\t            'threshold'\n\t        ]);\n\t        this._compressor.disconnect();\n\t        this._compressor = null;\n\t        this.attack.dispose();\n\t        this.attack = null;\n\t        this.release.dispose();\n\t        this.release = null;\n\t        this.threshold.dispose();\n\t        this.threshold = null;\n\t        this.ratio.dispose();\n\t        this.ratio = null;\n\t        this.knee.dispose();\n\t        this.knee = null;\n\t        return this;\n\t    };\n\t    return Tone.Compressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Add a signal and a number or two signals. When no value is\n\t\t *         passed into the constructor, Tone.Add will sum <code>input[0]</code>\n\t\t *         and <code>input[1]</code>. If a value is passed into the constructor, \n\t\t *         the it will be added to the input.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value If no value is provided, Tone.Add will sum the first\n\t\t *                         and second inputs. \n\t\t *  @example\n\t\t * var signal = new Tone.Signal(2);\n\t\t * var add = new Tone.Add(2);\n\t\t * signal.connect(add);\n\t\t * //the output of add equals 4\n\t\t *  @example\n\t\t * //if constructed with no arguments\n\t\t * //it will add the first and second inputs\n\t\t * var add = new Tone.Add();\n\t\t * var sig0 = new Tone.Signal(3).connect(add, 0, 0);\n\t\t * var sig1 = new Tone.Signal(4).connect(add, 0, 1);\n\t\t * //the output of add equals 7. \n\t\t */\n\t    Tone.Add = function (value) {\n\t        Tone.Signal.call(this);\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sum = this.input[0] = this.input[1] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t        this._param = this.input[1] = new Tone.Signal(value);\n\t        this._param.connect(this._sum);\n\t    };\n\t    Tone.extend(Tone.Add, Tone.Signal);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Add} this\n\t\t */\n\t    Tone.Add.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        this._sum.dispose();\n\t        this._sum = null;\n\t        return this;\n\t    };\n\t    return Tone.Add;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Multiply two incoming signals. Or, if a number is given in the constructor, \n\t\t *          multiplies the incoming signal by that value. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value Constant value to multiple. If no value is provided,\n\t\t *                         it will return the product of the first and second inputs\n\t\t *  @example\n\t\t * var mult = new Tone.Multiply();\n\t\t * var sigA = new Tone.Signal(3);\n\t\t * var sigB = new Tone.Signal(4);\n\t\t * sigA.connect(mult, 0, 0);\n\t\t * sigB.connect(mult, 0, 1);\n\t\t * //output of mult is 12.\n\t\t *  @example\n\t\t * var mult = new Tone.Multiply(10);\n\t\t * var sig = new Tone.Signal(2).connect(mult);\n\t\t * //the output of mult is 20. \n\t\t */\n\t    Tone.Multiply = function (value) {\n\t        Tone.Signal.call(this);\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the input node is the same as the output node\n\t\t\t *  it is also the GainNode which handles the scaling of incoming signal\n\t\t\t *  \n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mult = this.input[0] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  the scaling parameter\n\t\t\t *  @type {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input[1] = this.output.gain;\n\t        this._param.value = Tone.defaultArg(value, 0);\n\t    };\n\t    Tone.extend(Tone.Multiply, Tone.Signal);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Multiply} this\n\t\t */\n\t    Tone.Multiply.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        this._mult.dispose();\n\t        this._mult = null;\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Multiply;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var neg = new Tone.Negate();\n\t\t * var sig = new Tone.Signal(-2).connect(neg);\n\t\t * //output of neg is positive 2. \n\t\t */\n\t    Tone.Negate = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  negation is done by multiplying by -1\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multiply = this.input = this.output = new Tone.Multiply(-1);\n\t    };\n\t    Tone.extend(Tone.Negate, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Negate} this\n\t\t */\n\t    Tone.Negate.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._multiply.dispose();\n\t        this._multiply = null;\n\t        return this;\n\t    };\n\t    return Tone.Negate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Subtract the signal connected to <code>input[1]</code> from the signal connected \n\t\t *         to <code>input[0]</code>. If an argument is provided in the constructor, the \n\t\t *         signals <code>.value</code> will be subtracted from the incoming signal.\n\t\t *\n\t\t *  @extends {Tone.Signal}\n\t\t *  @constructor\n\t\t *  @param {number=} value The value to subtract from the incoming signal. If the value\n\t\t *                         is omitted, it will subtract the second signal from the first.\n\t\t *  @example\n\t\t * var sub = new Tone.Subtract(1);\n\t\t * var sig = new Tone.Signal(4).connect(sub);\n\t\t * //the output of sub is 3. \n\t\t *  @example\n\t\t * var sub = new Tone.Subtract();\n\t\t * var sigA = new Tone.Signal(10);\n\t\t * var sigB = new Tone.Signal(2.5);\n\t\t * sigA.connect(sub, 0, 0);\n\t\t * sigB.connect(sub, 0, 1);\n\t\t * //output of sub is 7.5\n\t\t */\n\t    Tone.Subtract = function (value) {\n\t        Tone.Signal.call(this);\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sum = this.input[0] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  negate the input of the second input before connecting it\n\t\t\t *  to the summing node.\n\t\t\t *  @type {Tone.Negate}\n\t\t\t *  @private\n\t\t\t */\n\t        this._neg = new Tone.Negate();\n\t        /**\n\t\t\t *  the node where the value is set\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t        this._param = this.input[1] = new Tone.Signal(value);\n\t        this._param.chain(this._neg, this._sum);\n\t    };\n\t    Tone.extend(Tone.Subtract, Tone.Signal);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t */\n\t    Tone.Subtract.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        this._neg.dispose();\n\t        this._neg = null;\n\t        this._sum.disconnect();\n\t        this._sum = null;\n\t        return this;\n\t    };\n\t    return Tone.Subtract;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var gt0 = new Tone.GreaterThanZero();\n\t\t * var sig = new Tone.Signal(0.01).connect(gt0);\n\t\t * //the output of gt0 is 1. \n\t\t * sig.value = 0;\n\t\t * //the output of gt0 is 0. \n\t\t */\n\t    Tone.GreaterThanZero = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._thresh = this.output = new Tone.WaveShaper(function (val) {\n\t            if (val <= 0) {\n\t                return 0;\n\t            } else {\n\t                return 1;\n\t            }\n\t        }, 127);\n\t        /**\n\t\t\t *  scale the first thresholded signal by a large value.\n\t\t\t *  this will help with values which are very close to 0\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.input = new Tone.Multiply(10000);\n\t        //connections\n\t        this._scale.connect(this._thresh);\n\t    };\n\t    Tone.extend(Tone.GreaterThanZero, Tone.SignalBase);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThanZero} this\n\t\t */\n\t    Tone.GreaterThanZero.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._thresh.dispose();\n\t        this._thresh = null;\n\t        return this;\n\t    };\n\t    return Tone.GreaterThanZero;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.\n\t\t *          can compare two signals or a signal and a number. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number} [value=0] the value to compare to the incoming signal\n\t\t *  @example\n\t\t * var gt = new Tone.GreaterThan(2);\n\t\t * var sig = new Tone.Signal(4).connect(gt);\n\t\t * //output of gt is equal 1. \n\t\t */\n\t    Tone.GreaterThan = function (value) {\n\t        Tone.Signal.call(this);\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  subtract the amount from the incoming signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input[0] = new Tone.Subtract(value);\n\t        this.input[1] = this._param.input[1];\n\t        /**\n\t\t\t *  compare that amount to zero\n\t\t\t *  @type {Tone.GreaterThanZero}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gtz = this.output = new Tone.GreaterThanZero();\n\t        //connect\n\t        this._param.connect(this._gtz);\n\t    };\n\t    Tone.extend(Tone.GreaterThan, Tone.Signal);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThan} this\n\t\t */\n\t    Tone.GreaterThan.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        this._gtz.dispose();\n\t        this._gtz = null;\n\t        return this;\n\t    };\n\t    return Tone.GreaterThan;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Return the absolute value of an incoming signal. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var signal = new Tone.Signal(-1);\n\t\t * var abs = new Tone.Abs();\n\t\t * signal.connect(abs);\n\t\t * //the output of abs is 1. \n\t\t */\n\t    Tone.Abs = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  @type {Tone.LessThan}\n\t\t\t *  @private\n\t\t\t */\n\t        this._abs = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t            if (val === 0) {\n\t                return 0;\n\t            } else {\n\t                return Math.abs(val);\n\t            }\n\t        }, 127);\n\t    };\n\t    Tone.extend(Tone.Abs, Tone.SignalBase);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.Abs} this\n\t\t */\n\t    Tone.Abs.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._abs.dispose();\n\t        this._abs = null;\n\t        return this;\n\t    };\n\t    return Tone.Abs;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus\n\t\t *         values in the NormalRange. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {NormalRange} modulus The modulus to apply.\n\t\t *  @example\n\t\t * var mod = new Tone.Modulo(0.2)\n\t\t * var sig = new Tone.Signal(0.5).connect(mod);\n\t\t * //mod outputs 0.1\n\t\t */\n\t    Tone.Modulo = function (modulus) {\n\t        Tone.SignalBase.call(this);\n\t        this.createInsOuts(1, 0);\n\t        /**\n\t\t\t *  A waveshaper gets the integer multiple of \n\t\t\t *  the input signal and the modulus.\n\t\t\t *  @private\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(Math.pow(2, 16));\n\t        /**\n\t\t\t *  the integer multiple is multiplied by the modulus\n\t\t\t *  @type  {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multiply = new Tone.Multiply();\n\t        /**\n\t\t\t *  and subtracted from the input signal\n\t\t\t *  @type  {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subtract = this.output = new Tone.Subtract();\n\t        /**\n\t\t\t *  the modulus signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modSignal = new Tone.Signal(modulus);\n\t        //connections\n\t        this.input.fan(this._shaper, this._subtract);\n\t        this._modSignal.connect(this._multiply, 0, 0);\n\t        this._shaper.connect(this._multiply, 0, 1);\n\t        this._multiply.connect(this._subtract, 0, 1);\n\t        this._setWaveShaper(modulus);\n\t    };\n\t    Tone.extend(Tone.Modulo, Tone.SignalBase);\n\t    /**\n\t\t *  @param  {number}  mod  the modulus to apply\n\t\t *  @private\n\t\t */\n\t    Tone.Modulo.prototype._setWaveShaper = function (mod) {\n\t        this._shaper.setMap(function (val) {\n\t            var multiple = Math.floor((val + 0.0001) / mod);\n\t            return multiple;\n\t        });\n\t    };\n\t    /**\n\t\t * The modulus value.\n\t\t * @memberOf Tone.Modulo#\n\t\t * @type {NormalRange}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Modulo.prototype, 'value', {\n\t        get: function () {\n\t            return this._modSignal.value;\n\t        },\n\t        set: function (mod) {\n\t            this._modSignal.value = mod;\n\t            this._setWaveShaper(mod);\n\t        }\n\t    });\n\t    /**\n\t\t * clean up\n\t\t *  @returns {Tone.Modulo} this\n\t\t */\n\t    Tone.Modulo.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        this._multiply.dispose();\n\t        this._multiply = null;\n\t        this._subtract.dispose();\n\t        this._subtract = null;\n\t        this._modSignal.dispose();\n\t        this._modSignal = null;\n\t        return this;\n\t    };\n\t    return Tone.Modulo;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. \n\t\t *         See Tone.GainToAudio.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t *  var a2g = new Tone.AudioToGain();\n\t\t */\n\t    Tone.AudioToGain = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t            return (x + 1) / 2;\n\t        });\n\t    };\n\t    Tone.extend(Tone.AudioToGain, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AudioToGain} this\n\t\t */\n\t    Tone.AudioToGain.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._norm.dispose();\n\t        this._norm = null;\n\t        return this;\n\t    };\n\t    return Tone.AudioToGain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Evaluate an expression at audio rate. <br><br>\n\t\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {string} expr the expression to generate\n\t\t *  @example\n\t\t * //adds the signals from input[0] and input[1].\n\t\t * var expr = new Tone.Expr(\"$0 + $1\");\n\t\t */\n\t    Tone.Expr = function () {\n\t        Tone.SignalBase.call(this);\n\t        var expr = this._replacements(Array.prototype.slice.call(arguments));\n\t        var inputCount = this._parseInputs(expr);\n\t        /**\n\t\t\t *  hold onto all of the nodes for disposal\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._nodes = [];\n\t        /**\n\t\t\t *  The inputs. The length is determined by the expression. \n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.input = new Array(inputCount);\n\t        //create a gain for each input\n\t        for (var i = 0; i < inputCount; i++) {\n\t            this.input[i] = this.context.createGain();\n\t        }\n\t        //parse the syntax tree\n\t        var tree = this._parseTree(expr);\n\t        //evaluate the results\n\t        var result;\n\t        try {\n\t            result = this._eval(tree);\n\t        } catch (e) {\n\t            this._disposeNodes();\n\t            throw new Error('Tone.Expr: Could evaluate expression: ' + expr);\n\t        }\n\t        /**\n\t\t\t *  The output node is the result of the expression\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t        this.output = result;\n\t    };\n\t    Tone.extend(Tone.Expr, Tone.SignalBase);\n\t    //some helpers to cut down the amount of code\n\t    function applyBinary(Constructor, args, self) {\n\t        var op = new Constructor();\n\t        self._eval(args[0]).connect(op, 0, 0);\n\t        self._eval(args[1]).connect(op, 0, 1);\n\t        return op;\n\t    }\n\t    function applyUnary(Constructor, args, self) {\n\t        var op = new Constructor();\n\t        self._eval(args[0]).connect(op, 0, 0);\n\t        return op;\n\t    }\n\t    function getNumber(arg) {\n\t        return arg ? parseFloat(arg) : undefined;\n\t    }\n\t    function literalNumber(arg) {\n\t        return arg && arg.args ? parseFloat(arg.args) : undefined;\n\t    }\n\t    /*\n\t\t *  the Expressions that Tone.Expr can parse.\n\t\t *\n\t\t *  each expression belongs to a group and contains a regexp \n\t\t *  for selecting the operator as well as that operators method\n\t\t *  \n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Expr._Expressions = {\n\t        //values\n\t        'value': {\n\t            'signal': {\n\t                regexp: /^\\d+\\.\\d+|^\\d+/,\n\t                method: function (arg) {\n\t                    var sig = new Tone.Signal(getNumber(arg));\n\t                    return sig;\n\t                }\n\t            },\n\t            'input': {\n\t                regexp: /^\\$\\d/,\n\t                method: function (arg, self) {\n\t                    return self.input[getNumber(arg.substr(1))];\n\t                }\n\t            }\n\t        },\n\t        //syntactic glue\n\t        'glue': {\n\t            '(': { regexp: /^\\(/ },\n\t            ')': { regexp: /^\\)/ },\n\t            ',': { regexp: /^,/ }\n\t        },\n\t        //functions\n\t        'func': {\n\t            'abs': {\n\t                regexp: /^abs/,\n\t                method: applyUnary.bind(this, Tone.Abs)\n\t            },\n\t            'mod': {\n\t                regexp: /^mod/,\n\t                method: function (args, self) {\n\t                    var modulus = literalNumber(args[1]);\n\t                    var op = new Tone.Modulo(modulus);\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            },\n\t            'pow': {\n\t                regexp: /^pow/,\n\t                method: function (args, self) {\n\t                    var exp = literalNumber(args[1]);\n\t                    var op = new Tone.Pow(exp);\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            },\n\t            'a2g': {\n\t                regexp: /^a2g/,\n\t                method: function (args, self) {\n\t                    var op = new Tone.AudioToGain();\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            }\n\t        },\n\t        //binary expressions\n\t        'binary': {\n\t            '+': {\n\t                regexp: /^\\+/,\n\t                precedence: 1,\n\t                method: applyBinary.bind(this, Tone.Add)\n\t            },\n\t            '-': {\n\t                regexp: /^\\-/,\n\t                precedence: 1,\n\t                method: function (args, self) {\n\t                    //both unary and binary op\n\t                    if (args.length === 1) {\n\t                        return applyUnary(Tone.Negate, args, self);\n\t                    } else {\n\t                        return applyBinary(Tone.Subtract, args, self);\n\t                    }\n\t                }\n\t            },\n\t            '*': {\n\t                regexp: /^\\*/,\n\t                precedence: 0,\n\t                method: applyBinary.bind(this, Tone.Multiply)\n\t            }\n\t        },\n\t        //unary expressions\n\t        'unary': {\n\t            '-': {\n\t                regexp: /^\\-/,\n\t                method: applyUnary.bind(this, Tone.Negate)\n\t            },\n\t            '!': {\n\t                regexp: /^\\!/,\n\t                method: applyUnary.bind(this, Tone.NOT)\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  @param   {string} expr the expression string\n\t\t *  @return  {number}      the input count\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._parseInputs = function (expr) {\n\t        var inputArray = expr.match(/\\$\\d/g);\n\t        var inputMax = 0;\n\t        if (inputArray !== null) {\n\t            for (var i = 0; i < inputArray.length; i++) {\n\t                var inputNum = parseInt(inputArray[i].substr(1)) + 1;\n\t                inputMax = Math.max(inputMax, inputNum);\n\t            }\n\t        }\n\t        return inputMax;\n\t    };\n\t    /**\n\t\t *  @param   {Array} args \tan array of arguments\n\t\t *  @return  {string} the results of the replacements being replaced\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._replacements = function (args) {\n\t        var expr = args.shift();\n\t        for (var i = 0; i < args.length; i++) {\n\t            expr = expr.replace(/\\%/i, args[i]);\n\t        }\n\t        return expr;\n\t    };\n\t    /**\n\t\t *  tokenize the expression based on the Expressions object\n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._tokenize = function (expr) {\n\t        var position = -1;\n\t        var tokens = [];\n\t        while (expr.length > 0) {\n\t            expr = expr.trim();\n\t            var token = getNextToken(expr);\n\t            tokens.push(token);\n\t            expr = expr.substr(token.value.length);\n\t        }\n\t        function getNextToken(expr) {\n\t            for (var type in Tone.Expr._Expressions) {\n\t                var group = Tone.Expr._Expressions[type];\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    var reg = op.regexp;\n\t                    var match = expr.match(reg);\n\t                    if (match !== null) {\n\t                        return {\n\t                            type: type,\n\t                            value: match[0],\n\t                            method: op.method\n\t                        };\n\t                    }\n\t                }\n\t            }\n\t            throw new SyntaxError('Tone.Expr: Unexpected token ' + expr);\n\t        }\n\t        return {\n\t            next: function () {\n\t                return tokens[++position];\n\t            },\n\t            peek: function () {\n\t                return tokens[position + 1];\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  recursively parse the string expression into a syntax tree\n\t\t *  \n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._parseTree = function (expr) {\n\t        var lexer = this._tokenize(expr);\n\t        var isUndef = Tone.isUndef.bind(this);\n\t        function matchSyntax(token, syn) {\n\t            return !isUndef(token) && token.type === 'glue' && token.value === syn;\n\t        }\n\t        function matchGroup(token, groupName, prec) {\n\t            var ret = false;\n\t            var group = Tone.Expr._Expressions[groupName];\n\t            if (!isUndef(token)) {\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    if (op.regexp.test(token.value)) {\n\t                        if (!isUndef(prec)) {\n\t                            if (op.precedence === prec) {\n\t                                return true;\n\t                            }\n\t                        } else {\n\t                            return true;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            return ret;\n\t        }\n\t        function parseExpression(precedence) {\n\t            if (isUndef(precedence)) {\n\t                precedence = 5;\n\t            }\n\t            var expr;\n\t            if (precedence < 0) {\n\t                expr = parseUnary();\n\t            } else {\n\t                expr = parseExpression(precedence - 1);\n\t            }\n\t            var token = lexer.peek();\n\t            while (matchGroup(token, 'binary', precedence)) {\n\t                token = lexer.next();\n\t                expr = {\n\t                    operator: token.value,\n\t                    method: token.method,\n\t                    args: [\n\t                        expr,\n\t                        parseExpression(precedence - 1)\n\t                    ]\n\t                };\n\t                token = lexer.peek();\n\t            }\n\t            return expr;\n\t        }\n\t        function parseUnary() {\n\t            var token, expr;\n\t            token = lexer.peek();\n\t            if (matchGroup(token, 'unary')) {\n\t                token = lexer.next();\n\t                expr = parseUnary();\n\t                return {\n\t                    operator: token.value,\n\t                    method: token.method,\n\t                    args: [expr]\n\t                };\n\t            }\n\t            return parsePrimary();\n\t        }\n\t        function parsePrimary() {\n\t            var token, expr;\n\t            token = lexer.peek();\n\t            if (isUndef(token)) {\n\t                throw new SyntaxError('Tone.Expr: Unexpected termination of expression');\n\t            }\n\t            if (token.type === 'func') {\n\t                token = lexer.next();\n\t                return parseFunctionCall(token);\n\t            }\n\t            if (token.type === 'value') {\n\t                token = lexer.next();\n\t                return {\n\t                    method: token.method,\n\t                    args: token.value\n\t                };\n\t            }\n\t            if (matchSyntax(token, '(')) {\n\t                lexer.next();\n\t                expr = parseExpression();\n\t                token = lexer.next();\n\t                if (!matchSyntax(token, ')')) {\n\t                    throw new SyntaxError('Expected )');\n\t                }\n\t                return expr;\n\t            }\n\t            throw new SyntaxError('Tone.Expr: Parse error, cannot process token ' + token.value);\n\t        }\n\t        function parseFunctionCall(func) {\n\t            var token, args = [];\n\t            token = lexer.next();\n\t            if (!matchSyntax(token, '(')) {\n\t                throw new SyntaxError('Tone.Expr: Expected ( in a function call \"' + func.value + '\"');\n\t            }\n\t            token = lexer.peek();\n\t            if (!matchSyntax(token, ')')) {\n\t                args = parseArgumentList();\n\t            }\n\t            token = lexer.next();\n\t            if (!matchSyntax(token, ')')) {\n\t                throw new SyntaxError('Tone.Expr: Expected ) in a function call \"' + func.value + '\"');\n\t            }\n\t            return {\n\t                method: func.method,\n\t                args: args,\n\t                name: name\n\t            };\n\t        }\n\t        function parseArgumentList() {\n\t            var token, expr, args = [];\n\t            while (true) {\n\t                expr = parseExpression();\n\t                if (isUndef(expr)) {\n\t                    // TODO maybe throw exception?\n\t                    break;\n\t                }\n\t                args.push(expr);\n\t                token = lexer.peek();\n\t                if (!matchSyntax(token, ',')) {\n\t                    break;\n\t                }\n\t                lexer.next();\n\t            }\n\t            return args;\n\t        }\n\t        return parseExpression();\n\t    };\n\t    /**\n\t\t *  recursively evaluate the expression tree\n\t\t *  @param   {Object} tree \n\t\t *  @return  {AudioNode}      the resulting audio node from the expression\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._eval = function (tree) {\n\t        if (!Tone.isUndef(tree)) {\n\t            var node = tree.method(tree.args, this);\n\t            this._nodes.push(node);\n\t            return node;\n\t        }\n\t    };\n\t    /**\n\t\t *  dispose all the nodes\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._disposeNodes = function () {\n\t        for (var i = 0; i < this._nodes.length; i++) {\n\t            var node = this._nodes[i];\n\t            if (Tone.isFunction(node.dispose)) {\n\t                node.dispose();\n\t            } else if (Tone.isFunction(node.disconnect)) {\n\t                node.disconnect();\n\t            }\n\t            node = null;\n\t            this._nodes[i] = null;\n\t        }\n\t        this._nodes = null;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t */\n\t    Tone.Expr.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._disposeNodes();\n\t    };\n\t    return Tone.Expr;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t * var eqPowGain = new Tone.EqualPowerGain();\n\t\t */\n\t    Tone.EqualPowerGain = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._eqPower = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t            if (Math.abs(val) < 0.001) {\n\t                //should output 0 when input is 0\n\t                return 0;\n\t            } else {\n\t                return Tone.equalPowerScale(val);\n\t            }\n\t        }.bind(this), 4096);\n\t    };\n\t    Tone.extend(Tone.EqualPowerGain, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.EqualPowerGain} this\n\t\t */\n\t    Tone.EqualPowerGain.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._eqPower.dispose();\n\t        this._eqPower = null;\n\t        return this;\n\t    };\n\t    return Tone.EqualPowerGain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * @class  Tone.Crossfade provides equal power fading between two inputs.\n\t\t *         More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n\t\t *\n\t\t * @constructor\n\t\t * @extends {Tone.AudioNode}\n\t\t * @param {NormalRange} [initialFade=0.5]\n\t\t * @example\n\t\t * var crossFade = new Tone.CrossFade(0.5);\n\t\t * //connect effect A to crossfade from\n\t\t * //effect output 0 to crossfade input 0\n\t\t * effectA.connect(crossFade, 0, 0);\n\t\t * //connect effect B to crossfade from\n\t\t * //effect output 0 to crossfade input 1\n\t\t * effectB.connect(crossFade, 0, 1);\n\t\t * crossFade.fade.value = 0;\n\t\t * // ^ only effectA is output\n\t\t * crossFade.fade.value = 1;\n\t\t * // ^ only effectB is output\n\t\t * crossFade.fade.value = 0.5;\n\t\t * // ^ the two signals are mixed equally.\n\t\t */\n\t    Tone.CrossFade = function (initialFade) {\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(2, 1);\n\t        /**\n\t\t\t *  Alias for <code>input[0]</code>.\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.a = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  Alias for <code>input[1]</code>.\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.b = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t * \tThe mix between the two inputs. A fade value of 0\n\t\t\t * \twill output 100% <code>input[0]</code> and\n\t\t\t * \ta value of 1 will output 100% <code>input[1]</code>.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.fade = new Tone.Signal(Tone.defaultArg(initialFade, 0.5), Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t        this._equalPowerA = new Tone.EqualPowerGain();\n\t        /**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t        this._equalPowerB = new Tone.EqualPowerGain();\n\t        /**\n\t\t\t *  invert the incoming signal\n\t\t\t *  @private\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t        this._invert = new Tone.Expr('1 - $0');\n\t        //connections\n\t        this.a.connect(this.output);\n\t        this.b.connect(this.output);\n\t        this.fade.chain(this._equalPowerB, this.b.gain);\n\t        this.fade.chain(this._invert, this._equalPowerA, this.a.gain);\n\t        this._readOnly('fade');\n\t    };\n\t    Tone.extend(Tone.CrossFade, Tone.AudioNode);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.CrossFade} this\n\t\t */\n\t    Tone.CrossFade.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable('fade');\n\t        this._equalPowerA.dispose();\n\t        this._equalPowerA = null;\n\t        this._equalPowerB.dispose();\n\t        this._equalPowerB = null;\n\t        this.fade.dispose();\n\t        this.fade = null;\n\t        this._invert.dispose();\n\t        this._invert = null;\n\t        this.a.dispose();\n\t        this.a = null;\n\t        this.b.dispose();\n\t        this.b = null;\n\t        return this;\n\t    };\n\t    return Tone.CrossFade;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Filter is a filter which allows for all of the same native methods\n\t\t *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n\t\t *          Tone.Filter has the added ability to set the filter rolloff at -12\n\t\t *          (default), -24 and -48.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Frequency|Object} [frequency] The cutoff frequency of the filter.\n\t\t *  @param {string=} type The type of filter.\n\t\t *  @param {number=} rolloff The drop in decibels per octave after the cutoff frequency.\n\t\t *                            3 choices: -12, -24, and -48\n\t\t *  @example\n\t\t *  var filter = new Tone.Filter(200, \"highpass\");\n\t\t */\n\t    Tone.Filter = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'rolloff'\n\t        ], Tone.Filter);\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  the filter(s)\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filters = [];\n\t        /**\n\t\t\t *  The cutoff frequency of the filter.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune parameter\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(0, Tone.Type.Cents);\n\t        /**\n\t\t\t *  The gain of the filter, only used in certain filter types\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.gain = new Tone.Signal({\n\t            'value': options.gain,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The Q or Quality of the filter\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q);\n\t        /**\n\t\t\t *  the type of the filter\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  the rolloff value of the filter\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rolloff = options.rolloff;\n\t        //set the rolloff;\n\t        this.rolloff = options.rolloff;\n\t        this._readOnly([\n\t            'detune',\n\t            'frequency',\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Filter, Tone.AudioNode);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Filter.defaults = {\n\t        'type': 'lowpass',\n\t        'frequency': 350,\n\t        'rolloff': -12,\n\t        'Q': 1,\n\t        'gain': 0\n\t    };\n\t    /**\n\t\t * The type of the filter. Types: \"lowpass\", \"highpass\",\n\t\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n\t\t * @memberOf Tone.Filter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Filter.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            var types = [\n\t                'lowpass',\n\t                'highpass',\n\t                'bandpass',\n\t                'lowshelf',\n\t                'highshelf',\n\t                'notch',\n\t                'allpass',\n\t                'peaking'\n\t            ];\n\t            if (types.indexOf(type) === -1) {\n\t                throw new TypeError('Tone.Filter: invalid type ' + type);\n\t            }\n\t            this._type = type;\n\t            for (var i = 0; i < this._filters.length; i++) {\n\t                this._filters[i].type = type;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The rolloff of the filter which is the drop in db\n\t\t * per octave. Implemented internally by cascading filters.\n\t\t * Only accepts the values -12, -24, -48 and -96.\n\t\t * @memberOf Tone.Filter#\n\t\t * @type {number}\n\t\t * @name rolloff\n\t\t */\n\t    Object.defineProperty(Tone.Filter.prototype, 'rolloff', {\n\t        get: function () {\n\t            return this._rolloff;\n\t        },\n\t        set: function (rolloff) {\n\t            rolloff = parseInt(rolloff, 10);\n\t            var possibilities = [\n\t                -12,\n\t                -24,\n\t                -48,\n\t                -96\n\t            ];\n\t            var cascadingCount = possibilities.indexOf(rolloff);\n\t            //check the rolloff is valid\n\t            if (cascadingCount === -1) {\n\t                throw new RangeError('Tone.Filter: rolloff can only be -12, -24, -48 or -96');\n\t            }\n\t            cascadingCount += 1;\n\t            this._rolloff = rolloff;\n\t            //first disconnect the filters and throw them away\n\t            this.input.disconnect();\n\t            for (var i = 0; i < this._filters.length; i++) {\n\t                this._filters[i].disconnect();\n\t                this._filters[i] = null;\n\t            }\n\t            this._filters = new Array(cascadingCount);\n\t            for (var count = 0; count < cascadingCount; count++) {\n\t                var filter = this.context.createBiquadFilter();\n\t                filter.type = this._type;\n\t                this.frequency.connect(filter.frequency);\n\t                this.detune.connect(filter.detune);\n\t                this.Q.connect(filter.Q);\n\t                this.gain.connect(filter.gain);\n\t                this._filters[count] = filter;\n\t            }\n\t            //connect them up\n\t            var connectionChain = [this.input].concat(this._filters).concat([this.output]);\n\t            Tone.connectSeries.apply(Tone, connectionChain);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.Filter} this\n\t\t */\n\t    Tone.Filter.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        for (var i = 0; i < this._filters.length; i++) {\n\t            this._filters[i].disconnect();\n\t            this._filters[i] = null;\n\t        }\n\t        this._filters = null;\n\t        this._writable([\n\t            'detune',\n\t            'frequency',\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.Q.dispose();\n\t        this.frequency = null;\n\t        this.Q = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.gain.dispose();\n\t        this.gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Filter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Split the incoming signal into three bands (low, mid, high)\n\t\t *         with two crossover frequency controls.\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {Frequency|Object} [lowFrequency] the low/mid crossover frequency\n\t\t *  @param {Frequency} [highFrequency] the mid/high crossover frequency\n\t\t */\n\t    Tone.MultibandSplit = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ], Tone.MultibandSplit);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  the input\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = new Tone.Gain();\n\t        /**\n\t\t\t *  the outputs\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Array(3);\n\t        /**\n\t\t\t *  The low band. Alias for <code>output[0]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.low = this.output[0] = new Tone.Filter(0, 'lowpass');\n\t        /**\n\t\t\t *  the lower filter of the mid band\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowMidFilter = new Tone.Filter(0, 'highpass');\n\t        /**\n\t\t\t *  The mid band output. Alias for <code>output[1]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.mid = this.output[1] = new Tone.Filter(0, 'lowpass');\n\t        /**\n\t\t\t *  The high band output. Alias for <code>output[2]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.high = this.output[2] = new Tone.Filter(0, 'highpass');\n\t        /**\n\t\t\t *  The low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = new Tone.Signal(options.lowFrequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = new Tone.Signal(options.highFrequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The quality of all the filters\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q);\n\t        this.input.fan(this.low, this.high);\n\t        this.input.chain(this._lowMidFilter, this.mid);\n\t        //the frequency control signal\n\t        this.lowFrequency.connect(this.low.frequency);\n\t        this.lowFrequency.connect(this._lowMidFilter.frequency);\n\t        this.highFrequency.connect(this.mid.frequency);\n\t        this.highFrequency.connect(this.high.frequency);\n\t        //the Q value\n\t        this.Q.connect(this.low.Q);\n\t        this.Q.connect(this._lowMidFilter.Q);\n\t        this.Q.connect(this.mid.Q);\n\t        this.Q.connect(this.high.Q);\n\t        this._readOnly([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MultibandSplit, Tone.AudioNode);\n\t    /**\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MultibandSplit.defaults = {\n\t        'lowFrequency': 400,\n\t        'highFrequency': 2500,\n\t        'Q': 1\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MultibandSplit} this\n\t\t */\n\t    Tone.MultibandSplit.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t        this.low.dispose();\n\t        this.low = null;\n\t        this._lowMidFilter.dispose();\n\t        this._lowMidFilter = null;\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.high.dispose();\n\t        this.high = null;\n\t        this.lowFrequency.dispose();\n\t        this.lowFrequency = null;\n\t        this.highFrequency.dispose();\n\t        this.highFrequency = null;\n\t        this.Q.dispose();\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.MultibandSplit;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.EQ3 is a three band EQ with control over low, mid, and high gain as\n\t\t *         well as the low and high crossover frequencies.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *\n\t\t *  @param {Decibels|Object} [lowLevel] The gain applied to the lows.\n\t\t *  @param {Decibels} [midLevel] The gain applied to the mid.\n\t\t *  @param {Decibels} [highLevel] The gain applied to the high.\n\t\t *  @example\n\t\t * var eq = new Tone.EQ3(-10, 3, -20);\n\t\t */\n\t    Tone.EQ3 = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'low',\n\t            'mid',\n\t            'high'\n\t        ], Tone.EQ3);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  the output node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  the multiband split\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multibandSplit = this.input = new Tone.MultibandSplit({\n\t            'lowFrequency': options.lowFrequency,\n\t            'highFrequency': options.highFrequency\n\t        });\n\t        /**\n\t\t\t *  The gain for the lower signals\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowGain = new Tone.Gain(options.low, Tone.Type.Decibels);\n\t        /**\n\t\t\t *  The gain for the mid signals\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midGain = new Tone.Gain(options.mid, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Tone.Gain}\n\t\t\t * @private\n\t\t\t */\n\t        this._highGain = new Tone.Gain(options.high, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The gain in decibels of the low part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.low = this._lowGain.gain;\n\t        /**\n\t\t\t * The gain in decibels of the mid part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.mid = this._midGain.gain;\n\t        /**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.high = this._highGain.gain;\n\t        /**\n\t\t\t *  The Q value for all of the filters.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = this._multibandSplit.Q;\n\t        /**\n\t\t\t *  The low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = this._multibandSplit.lowFrequency;\n\t        /**\n\t\t\t *  The mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = this._multibandSplit.highFrequency;\n\t        //the frequency bands\n\t        this._multibandSplit.low.chain(this._lowGain, this.output);\n\t        this._multibandSplit.mid.chain(this._midGain, this.output);\n\t        this._multibandSplit.high.chain(this._highGain, this.output);\n\t        this._readOnly([\n\t            'low',\n\t            'mid',\n\t            'high',\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.EQ3, Tone.AudioNode);\n\t    /**\n\t\t *  the default values\n\t\t */\n\t    Tone.EQ3.defaults = {\n\t        'low': 0,\n\t        'mid': 0,\n\t        'high': 0,\n\t        'lowFrequency': 400,\n\t        'highFrequency': 2500\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.EQ3} this\n\t\t */\n\t    Tone.EQ3.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'low',\n\t            'mid',\n\t            'high',\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ]);\n\t        this._multibandSplit.dispose();\n\t        this._multibandSplit = null;\n\t        this.lowFrequency = null;\n\t        this.highFrequency = null;\n\t        this._lowGain.dispose();\n\t        this._lowGain = null;\n\t        this._midGain.dispose();\n\t        this._midGain = null;\n\t        this._highGain.dispose();\n\t        this._highGain = null;\n\t        this.low = null;\n\t        this.mid = null;\n\t        this.high = null;\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.EQ3;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Performs a linear scaling on an input signal.\n\t\t *          Scales a NormalRange input to between\n\t\t *          outputMin and outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t *  @example\n\t\t * var scale = new Tone.Scale(50, 100);\n\t\t * var signal = new Tone.Signal(0.5).connect(scale);\n\t\t * //the output of scale equals 75\n\t\t */\n\t    Tone.Scale = function (outputMin, outputMax) {\n\t        Tone.SignalBase.call(this);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._outputMin = Tone.defaultArg(outputMin, 0);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._outputMax = Tone.defaultArg(outputMax, 1);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.input = new Tone.Multiply(1);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._add = this.output = new Tone.Add(0);\n\t        this._scale.connect(this._add);\n\t        this._setRange();\n\t    };\n\t    Tone.extend(Tone.Scale, Tone.SignalBase);\n\t    /**\n\t\t * The minimum output value. This number is output when \n\t\t * the value input value is 0. \n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.Scale.prototype, 'min', {\n\t        get: function () {\n\t            return this._outputMin;\n\t        },\n\t        set: function (min) {\n\t            this._outputMin = min;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value. This number is output when \n\t\t * the value input value is 1. \n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.Scale.prototype, 'max', {\n\t        get: function () {\n\t            return this._outputMax;\n\t        },\n\t        set: function (max) {\n\t            this._outputMax = max;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t    Tone.Scale.prototype._setRange = function () {\n\t        this._add.value = this._outputMin;\n\t        this._scale.value = this._outputMax - this._outputMin;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Scale} this\n\t\t */\n\t    Tone.Scale.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._add.dispose();\n\t        this._add = null;\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        return this;\n\t    };\n\t    return Tone.Scale;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class  Performs an exponential scaling on an input signal.\n\t\t *          Scales a NormalRange value [0,1] exponentially\n\t\t *          to the output range of outputMin to outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t *  @param {number} [exponent=2] The exponent which scales the incoming signal.\n\t\t *  @example\n\t\t * var scaleExp = new Tone.ScaleExp(0, 100, 2);\n\t\t * var signal = new Tone.Signal(0.5).connect(scaleExp);\n\t\t */\n\t    Tone.ScaleExp = function (outputMin, outputMax, exponent) {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  scale the input to the output range\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.output = new Tone.Scale(outputMin, outputMax);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t        this._exp = this.input = new Tone.Pow(Tone.defaultArg(exponent, 2));\n\t        this._exp.connect(this._scale);\n\t    };\n\t    Tone.extend(Tone.ScaleExp, Tone.SignalBase);\n\t    /**\n\t\t * Instead of interpolating linearly between the <code>min</code> and \n\t\t * <code>max</code> values, setting the exponent will interpolate between\n\t\t * the two values with an exponential curve. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum output value. This number is output when \n\t\t * the value input value is 0. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'min', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value. This number is output when \n\t\t * the value input value is 1. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'max', {\n\t        get: function () {\n\t            return this._scale.max;\n\t        },\n\t        set: function (max) {\n\t            this._scale.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.ScaleExp} this\n\t\t */\n\t    Tone.ScaleExp.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._exp.dispose();\n\t        this._exp = null;\n\t        return this;\n\t    };\n\t    return Tone.ScaleExp;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  createDelay shim\n\t\t *  @private\n\t\t */\n\t    if (window.DelayNode && !AudioContext.prototype.createDelay) {\n\t        AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n\t\t *  @extends {Tone}\n\t\t *  @param {Time=} delayTime The delay applied to the incoming signal.\n\t\t *  @param {Time=} maxDelay The maximum delay time.\n\t\t */\n\t    Tone.Delay = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'delayTime',\n\t            'maxDelay'\n\t        ], Tone.Delay);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The native delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = this.input = this.output = this.context.createDelay(this.toSeconds(options.maxDelay));\n\t        /**\n\t\t\t *  The amount of time the incoming signal is\n\t\t\t *  delayed.\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = new Tone.Param({\n\t            'param': this._delayNode.delayTime,\n\t            'units': Tone.Type.Time,\n\t            'value': options.delayTime\n\t        });\n\t        this._readOnly('delayTime');\n\t    };\n\t    Tone.extend(Tone.Delay, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Delay.defaults = {\n\t        'maxDelay': 1,\n\t        'delayTime': 0\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Delay}  this\n\t\t */\n\t    Tone.Delay.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._delayNode.disconnect();\n\t        this._delayNode = null;\n\t        this._writable('delayTime');\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.Delay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Comb filters are basic building blocks for physical modeling. Read more\n\t\t *         about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [delayTime] The delay time of the filter.\n\t\t *  @param {NormalRange=} resonance The amount of feedback the filter has.\n\t\t */\n\t    Tone.FeedbackCombFilter = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'delayTime',\n\t            'resonance'\n\t        ], Tone.FeedbackCombFilter);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = this.input = this.output = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The amount of delay of the comb filter.\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delay.delayTime;\n\t        /**\n\t\t\t *  the feedback node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of feedback of the delayed signal.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._feedback.gain;\n\t        this._delay.chain(this._feedback, this._delay);\n\t        this._readOnly([\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FeedbackCombFilter, Tone.AudioNode);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackCombFilter.defaults = {\n\t        'delayTime': 0.1,\n\t        'resonance': 0.5\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackCombFilter} this\n\t\t */\n\t    Tone.FeedbackCombFilter.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this.delayTime = null;\n\t        this._feedback.dispose();\n\t        this._feedback = null;\n\t        this.resonance = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackCombFilter;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class  Get the current waveform data of the connected audio source.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Number=} size The size of the FFT. Value must be a power of\n\t\t *                       two in the range 32 to 32768.\n\t\t */\n\t    Tone.FFT = function () {\n\t        var options = Tone.defaults(arguments, ['size'], Tone.FFT);\n\t        options.type = Tone.Analyser.Type.FFT;\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The analyser node.\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Analyser}\n\t\t\t */\n\t        this._analyser = this.input = this.output = new Tone.Analyser(options);\n\t    };\n\t    Tone.extend(Tone.FFT, Tone.AudioNode);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FFT.defaults = { 'size': 1024 };\n\t    /**\n\t\t *  Gets the waveform of the audio source. Returns the waveform data\n\t\t *  of length [size](#size) as a Float32Array with values between -1 and 1.\n\t\t *  @returns {TypedArray}\n\t\t */\n\t    Tone.FFT.prototype.getValue = function () {\n\t        return this._analyser.getValue();\n\t    };\n\t    /**\n\t\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t\t *  @memberOf Tone.FFT#\n\t\t *  @type {Number}\n\t\t *  @name size\n\t\t */\n\t    Object.defineProperty(Tone.FFT.prototype, 'size', {\n\t        get: function () {\n\t            return this._analyser.size;\n\t        },\n\t        set: function (size) {\n\t            this._analyser.size = size;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.FFT}  this\n\t\t */\n\t    Tone.FFT.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._analyser.dispose();\n\t        this._analyser = null;\n\t    };\n\t    return Tone.FFT;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Follower is a  crude envelope follower which will follow\n\t\t *          the amplitude of an incoming signal.\n\t\t *          Take care with small (< 0.02) attack or decay values\n\t\t *          as follower has some ripple which is exaggerated\n\t\t *          at these values. Read more about envelope followers (also known\n\t\t *          as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Time|Object} [attack] The rate at which the follower rises.\n\t\t *  @param {Time=} release The rate at which the folower falls.\n\t\t *  @example\n\t\t * var follower = new Tone.Follower(0.2, 0.4);\n\t\t */\n\t    Tone.Follower = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'attack',\n\t            'release'\n\t        ], Tone.Follower);\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  @type {Tone.Abs}\n\t\t\t *  @private\n\t\t\t */\n\t        this._abs = new Tone.Abs();\n\t        /**\n\t\t\t *  the lowpass filter which smooths the input\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filter = this.context.createBiquadFilter();\n\t        this._filter.type = 'lowpass';\n\t        this._filter.frequency.value = 0;\n\t        this._filter.Q.value = -100;\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._frequencyValues = new Tone.WaveShaper();\n\t        /**\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sub = new Tone.Subtract();\n\t        /**\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = new Tone.Delay(this.blockTime);\n\t        /**\n\t\t\t *  this keeps it far from 0, even for very small differences\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mult = new Tone.Multiply(10000);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._attack = options.attack;\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._release = options.release;\n\t        //the smoothed signal to get the values\n\t        this.input.chain(this._abs, this._filter, this.output);\n\t        //the difference path\n\t        this._abs.connect(this._sub, 0, 1);\n\t        this._filter.chain(this._delay, this._sub);\n\t        //threshold the difference and use the thresh to set the frequency\n\t        this._sub.chain(this._mult, this._frequencyValues, this._filter.frequency);\n\t        //set the attack and release values in the table\n\t        this._setAttackRelease(this._attack, this._release);\n\t    };\n\t    Tone.extend(Tone.Follower, Tone.AudioNode);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Follower.defaults = {\n\t        'attack': 0.05,\n\t        'release': 0.5\n\t    };\n\t    /**\n\t\t *  sets the attack and release times in the wave shaper\n\t\t *  @param   {Time} attack\n\t\t *  @param   {Time} release\n\t\t *  @private\n\t\t */\n\t    Tone.Follower.prototype._setAttackRelease = function (attack, release) {\n\t        var minTime = this.blockTime;\n\t        attack = Tone.Time(attack).toFrequency();\n\t        release = Tone.Time(release).toFrequency();\n\t        attack = Math.max(attack, minTime);\n\t        release = Math.max(release, minTime);\n\t        this._frequencyValues.setMap(function (val) {\n\t            if (val <= 0) {\n\t                return attack;\n\t            } else {\n\t                return release;\n\t            }\n\t        });\n\t    };\n\t    /**\n\t\t * The attack time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Time}\n\t\t * @name attack\n\t\t */\n\t    Object.defineProperty(Tone.Follower.prototype, 'attack', {\n\t        get: function () {\n\t            return this._attack;\n\t        },\n\t        set: function (attack) {\n\t            this._attack = attack;\n\t            this._setAttackRelease(this._attack, this._release);\n\t        }\n\t    });\n\t    /**\n\t\t * The release time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Time}\n\t\t * @name release\n\t\t */\n\t    Object.defineProperty(Tone.Follower.prototype, 'release', {\n\t        get: function () {\n\t            return this._release;\n\t        },\n\t        set: function (release) {\n\t            this._release = release;\n\t            this._setAttackRelease(this._attack, this._release);\n\t        }\n\t    });\n\t    /**\n\t\t *  Borrows the connect method from Signal so that the output can be used\n\t\t *  as a Tone.Signal control signal.\n\t\t *  @function\n\t\t */\n\t    Tone.Follower.prototype.connect = Tone.Signal.prototype.connect;\n\t    /**\n\t\t *  dispose\n\t\t *  @returns {Tone.Follower} this\n\t\t */\n\t    Tone.Follower.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._filter.disconnect();\n\t        this._filter = null;\n\t        this._frequencyValues.disconnect();\n\t        this._frequencyValues = null;\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this._sub.disconnect();\n\t        this._sub = null;\n\t        this._abs.dispose();\n\t        this._abs = null;\n\t        this._mult.dispose();\n\t        this._mult = null;\n\t        this._curve = null;\n\t        return this;\n\t    };\n\t    return Tone.Follower;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.ScaledEnvelop is an envelope which can be scaled \n\t\t *         to any range. It's useful for applying an envelope \n\t\t *         to a frequency or any other non-NormalRange signal \n\t\t *         parameter. \n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var scaledEnv = new Tone.ScaledEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"min\" : 200,\n\t\t *  \t\"max\" : 2000\n\t\t *  });\n\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t */\n\t    Tone.ScaledEnvelope = function () {\n\t        //get all of the defaults\n\t        var options = Tone.defaults(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope);\n\t        Tone.Envelope.call(this, options);\n\t        options = Tone.defaultArg(options, Tone.ScaledEnvelope.defaults);\n\t        /** \n\t\t\t *  scale the incoming signal by an exponent\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t        this._exp = this.output = new Tone.Pow(options.exponent);\n\t        /**\n\t\t\t *  scale the signal to the desired range\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.output = new Tone.Scale(options.min, options.max);\n\t        this._sig.chain(this._exp, this._scale);\n\t    };\n\t    Tone.extend(Tone.ScaledEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.ScaledEnvelope.defaults = {\n\t        'min': 0,\n\t        'max': 1,\n\t        'exponent': 1\n\t    };\n\t    /**\n\t\t * The envelope's min output value. This is the value which it\n\t\t * starts at. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'min', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's max output value. In other words, the value\n\t\t * at the peak of the attack portion of the envelope. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'max', {\n\t        get: function () {\n\t            return this._scale.max;\n\t        },\n\t        set: function (max) {\n\t            this._scale.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's exponent value. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.ScaledEnvelope} this\n\t\t */\n\t    Tone.ScaledEnvelope.prototype.dispose = function () {\n\t        Tone.Envelope.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._exp.dispose();\n\t        this._exp = null;\n\t        return this;\n\t    };\n\t    return Tone.ScaledEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`\n\t\t *         it's got a `baseFrequency` and `octaves` parameter. \n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var env = new Tone.FrequencyEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"baseFrequency\" : \"C2\",\n\t\t *  \t\"octaves\" : 4\n\t\t *  });\n\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t */\n\t    Tone.FrequencyEnvelope = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope);\n\t        Tone.ScaledEnvelope.call(this, options);\n\t        //merge it with the frequency envelope defaults\n\t        options = Tone.defaultArg(options, Tone.FrequencyEnvelope.defaults);\n\t        /**\n\t\t\t *  Stores the octave value\n\t\t\t *  @type {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        //setup\n\t        this.baseFrequency = options.baseFrequency;\n\t        this.octaves = options.octaves;\n\t    };\n\t    Tone.extend(Tone.FrequencyEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.FrequencyEnvelope.defaults = {\n\t        'baseFrequency': 200,\n\t        'octaves': 4,\n\t        'exponent': 2\n\t    };\n\t    /**\n\t\t * The envelope's mininum output value. This is the value which it\n\t\t * starts at. \n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = this.toFrequency(min);\n\t            //also update the octaves\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t * The number of octaves above the baseFrequency that the\n\t\t * envelope will scale to.\n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            this._scale.max = this.baseFrequency * Math.pow(2, octaves);\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's exponent value. \n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FrequencyEnvelope} this\n\t\t */\n\t    Tone.FrequencyEnvelope.prototype.dispose = function () {\n\t        Tone.ScaledEnvelope.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.FrequencyEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Gate only passes a signal through when the incoming\n\t\t *          signal exceeds a specified threshold. To do this, Gate uses\n\t\t *          a Tone.Follower to follow the amplitude of the incoming signal.\n\t\t *          A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Decibels|Object} [threshold] The threshold above which the gate will open.\n\t\t *  @param {Time=} attack The follower's attack time\n\t\t *  @param {Time=} release The follower's release time\n\t\t *  @example\n\t\t * var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();\n\t\t * var mic = new Tone.UserMedia().connect(gate);\n\t\t * //the gate will only pass through the incoming\n\t\t * //signal when it's louder than -30db\n\t\t */\n\t    Tone.Gate = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'threshold',\n\t            'attack',\n\t            'release'\n\t        ], Tone.Gate);\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t        this._follower = new Tone.Follower(options.attack, options.release);\n\t        /**\n\t\t\t *  @type {Tone.GreaterThan}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gt = new Tone.GreaterThan(Tone.dbToGain(options.threshold));\n\t        //the connections\n\t        this.input.connect(this.output);\n\t        //the control signal\n\t        this.input.chain(this._gt, this._follower, this.output.gain);\n\t    };\n\t    Tone.extend(Tone.Gate, Tone.AudioNode);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Gate.defaults = {\n\t        'attack': 0.1,\n\t        'release': 0.1,\n\t        'threshold': -40\n\t    };\n\t    /**\n\t\t * The threshold of the gate in decibels\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Decibels}\n\t\t * @name threshold\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'threshold', {\n\t        get: function () {\n\t            return Tone.gainToDb(this._gt.value);\n\t        },\n\t        set: function (thresh) {\n\t            this._gt.value = Tone.dbToGain(thresh);\n\t        }\n\t    });\n\t    /**\n\t\t * The attack speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Time}\n\t\t * @name attack\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'attack', {\n\t        get: function () {\n\t            return this._follower.attack;\n\t        },\n\t        set: function (attackTime) {\n\t            this._follower.attack = attackTime;\n\t        }\n\t    });\n\t    /**\n\t\t * The release speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Time}\n\t\t * @name release\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'release', {\n\t        get: function () {\n\t            return this._follower.release;\n\t        },\n\t        set: function (releaseTime) {\n\t            this._follower.release = releaseTime;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Gate} this\n\t\t */\n\t    Tone.Gate.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._follower.dispose();\n\t        this._gt.dispose();\n\t        this._follower = null;\n\t        this._gt = null;\n\t        return this;\n\t    };\n\t    return Tone.Gate;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * @class Tone.TickSignal extends Tone.TimelineSignal, but adds the capability\n\t\t *        to calculate the number of elapsed ticks. exponential and target curves\n\t\t *        are approximated with multiple linear ramps.\n\t\t *\n\t\t *        Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos, for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n\t\t *        describing integrating timing functions for tempo calculations.\n\t\t *\n\t\t * @param {Number} value The initial value of the signal\n\t\t * @extends {Tone.TimelineSignal}\n\t\t */\n\t    Tone.TickSignal = function (value) {\n\t        value = Tone.defaultArg(value, 1);\n\t        Tone.TimelineSignal.call(this, {\n\t            'units': Tone.Type.Ticks,\n\t            'value': value\n\t        });\n\t        //extend the memory\n\t        this._events.memory = Infinity;\n\t    };\n\t    Tone.extend(Tone.TickSignal, Tone.TimelineSignal);\n\t    /**\n\t\t * Wraps Tone.TimelineSignal methods so that they also\n\t\t * record the ticks.\n\t\t * @param  {Function} method\n\t\t * @return {Function}\n\t\t * @private\n\t\t */\n\t    function _wrapScheduleMethods(method) {\n\t        return function (value, time) {\n\t            time = this.toSeconds(time);\n\t            method.apply(this, arguments);\n\t            var event = this._events.get(time);\n\t            var previousEvent = this._events.previousEvent(event);\n\t            var ticksUntilTime = this._getTickUntilEvent(previousEvent, time - this.sampleTime);\n\t            event.ticks = Math.max(ticksUntilTime, 0);\n\t            return this;\n\t        };\n\t    }\n\t    Tone.TickSignal.prototype.setValueAtTime = _wrapScheduleMethods(Tone.TimelineSignal.prototype.setValueAtTime);\n\t    Tone.TickSignal.prototype.linearRampToValueAtTime = _wrapScheduleMethods(Tone.TimelineSignal.prototype.linearRampToValueAtTime);\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value\n\t\t *  @param {Time} startTime\n\t\t *  @param {number} timeConstant\n\t\t *  @returns {Tone.TickSignal} this\n\t\t */\n\t    Tone.TickSignal.prototype.setTargetAtTime = function (value, time, constant) {\n\t        //aproximate it with multiple linear ramps\n\t        time = this.toSeconds(time);\n\t        this.setRampPoint(time);\n\t        value = this._fromUnits(value);\n\t        //start from previously scheduled value\n\t        var prevEvent = this._events.get(time);\n\t        var segments = 5;\n\t        for (var i = 0; i <= segments; i++) {\n\t            var segTime = constant * i + time;\n\t            var rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, value, constant, segTime);\n\t            this.linearRampToValueAtTime(this._toUnits(rampVal), segTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from\n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *  @param  {number} value\n\t\t *  @param  {Time} endTime\n\t\t *  @returns {Tone.TickSignal} this\n\t\t */\n\t    Tone.TickSignal.prototype.exponentialRampToValueAtTime = function (value, time) {\n\t        //aproximate it with multiple linear ramps\n\t        time = this.toSeconds(time);\n\t        value = this._fromUnits(value);\n\t        //start from previously scheduled value\n\t        var prevEvent = this._events.get(time);\n\t        if (prevEvent === null) {\n\t            prevEvent = {\n\t                'value': this._initial,\n\t                'time': 0\n\t            };\n\t        }\n\t        var segments = 5;\n\t        var segmentDur = (time - prevEvent.time) / segments;\n\t        for (var i = 0; i <= segments; i++) {\n\t            var segTime = segmentDur * i + prevEvent.time;\n\t            var rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, value, segTime);\n\t            this.linearRampToValueAtTime(this._toUnits(rampVal), segTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Returns the tick value at the time. Takes into account\n\t\t * any automation curves scheduled on the signal.\n\t\t * @private\n\t\t * @param  {Time} time The time to get the tick count at\n\t\t * @return {Ticks}      The number of ticks which have elapsed at the time\n\t\t *                          given any automations.\n\t\t */\n\t    Tone.TickSignal.prototype._getTickUntilEvent = function (event, time) {\n\t        if (event === null) {\n\t            event = {\n\t                'ticks': 0,\n\t                'time': 0\n\t            };\n\t        }\n\t        var val0 = this.getValueAtTime(event.time);\n\t        var val1 = this.getValueAtTime(time);\n\t        return 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n\t    };\n\t    /**\n\t\t * Returns the tick value at the time. Takes into account\n\t\t * any automation curves scheduled on the signal.\n\t\t * @param  {Time} time The time to get the tick count at\n\t\t * @return {Ticks}      The number of ticks which have elapsed at the time\n\t\t *                          given any automations.\n\t\t */\n\t    Tone.TickSignal.prototype.getTickAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        var event = this._events.get(time);\n\t        return this._getTickUntilEvent(event, time);\n\t    };\n\t    /**\n\t\t * Return the elapsed time of the number of ticks from the given time\n\t\t * @param {Ticks} ticks The number of ticks to calculate\n\t\t * @param  {Time} time The time to get the next tick from\n\t\t * @return {Seconds} The duration of the number of ticks from the given time in seconds\n\t\t */\n\t    Tone.TickSignal.prototype.getDurationOfTicks = function (ticks, time) {\n\t        time = this.toSeconds(time);\n\t        var currentTick = this.getTickAtTime(time);\n\t        return this.getTimeOfTick(currentTick + ticks) - time;\n\t    };\n\t    /**\n\t\t * Given a tick, returns the time that tick occurs at.\n\t\t * @param  {Ticks} tick\n\t\t * @return {Time}      The time that the tick occurs.\n\t\t */\n\t    Tone.TickSignal.prototype.getTimeOfTick = function (tick) {\n\t        var before = this._events.get(tick, 'ticks');\n\t        var after = this._events.getAfter(tick, 'ticks');\n\t        if (before && before.ticks === tick) {\n\t            return before.time;\n\t        } else if (before && after && after.type === Tone.TimelineSignal.Type.Linear && before.value !== after.value) {\n\t            var val0 = this.getValueAtTime(before.time);\n\t            var val1 = this.getValueAtTime(after.time);\n\t            var delta = (val1 - val0) / (after.time - before.time);\n\t            var k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n\t            var sol1 = (-val0 + k) / delta;\n\t            var sol2 = (-val0 - k) / delta;\n\t            return (sol1 > 0 ? sol1 : sol2) + before.time;\n\t        } else if (before) {\n\t            if (before.value === 0) {\n\t                return Infinity;\n\t            } else {\n\t                return before.time + (tick - before.ticks) / before.value;\n\t            }\n\t        } else {\n\t            return tick / this._initial;\n\t        }\n\t    };\n\t    return Tone.TickSignal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A Timeline State. Provides the methods: <code>setStateAtTime(\"state\", time)</code>\n\t\t *          and <code>getValueAtTime(time)</code>.\n\t\t *\n\t\t *  @extends {Tone.Timeline}\n\t\t *  @param {String} initial The initial state of the TimelineState. \n\t\t *                          Defaults to <code>undefined</code>\n\t\t */\n\t    Tone.TimelineState = function (initial) {\n\t        Tone.Timeline.call(this);\n\t        /**\n\t\t\t *  The initial state\n\t\t\t *  @private\n\t\t\t *  @type {String}\n\t\t\t */\n\t        this._initial = initial;\n\t    };\n\t    Tone.extend(Tone.TimelineState, Tone.Timeline);\n\t    /**\n\t\t *  Returns the scheduled state scheduled before or at\n\t\t *  the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t */\n\t    Tone.TimelineState.prototype.getValueAtTime = function (time) {\n\t        var event = this.get(time);\n\t        if (event !== null) {\n\t            return event.state;\n\t        } else {\n\t            return this._initial;\n\t        }\n\t    };\n\t    /**\n\t\t *  Add a state to the timeline.\n\t\t *  @param  {String}  state The name of the state to set.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.TimelineState} this\n\t\t */\n\t    Tone.TimelineState.prototype.setStateAtTime = function (state, time) {\n\t        this.add({\n\t            'state': state,\n\t            'time': time\n\t        });\n\t        return this;\n\t    };\n\t    return Tone.TimelineState;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A sample accurate clock which provides a callback at the given rate. \n\t\t *          While the callback is not sample-accurate (it is still susceptible to\n\t\t *          loose JS timing), the time passed in as the argument to the callback\n\t\t *          is precise. For most applications, it is better to use Tone.Transport\n\t\t *          instead of the Clock by itself since you can synchronize multiple callbacks.\n\t\t *\n\t\t * \t@constructor\n\t\t *  @extends {Tone.Emitter}\n\t\t * \t@param {function} callback The callback to be invoked with the time of the audio event\n\t\t * \t@param {Frequency} frequency The rate of the callback\n\t\t * \t@example\n\t\t * //the callback will be invoked approximately once a second\n\t\t * //and will print the time exactly once a second apart.\n\t\t * var clock = new Tone.Clock(function(time){\n\t\t * \tconsole.log(time);\n\t\t * }, 1);\n\t\t */\n\t    Tone.Clock = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'callback',\n\t            'frequency'\n\t        ], Tone.Clock);\n\t        Tone.Emitter.call(this);\n\t        /**\n\t\t\t *  The callback function to invoke at the scheduled tick.\n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  The next time the callback is scheduled.\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._nextTick = 0;\n\t        /**\n\t\t\t *  The last state of the clock.\n\t\t\t *  @type  {State}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lastState = Tone.State.Stopped;\n\t        /**\n\t\t\t *  The rate the callback function should be invoked. \n\t\t\t *  @type  {BPM}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.TickSignal(options.frequency, Tone.Type.Frequency);\n\t        this._readOnly('frequency');\n\t        /**\n\t\t\t *  The number of times the callback was invoked. Starts counting at 0\n\t\t\t *  and increments after the callback was invoked. \n\t\t\t *  @type {Ticks}\n\t\t\t *  @readOnly\n\t\t\t */\n\t        this.ticks = 0;\n\t        /**\n\t\t\t *  The state timeline\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  The loop function bound to its context. \n\t\t\t *  This is necessary to remove the event in the end.\n\t\t\t *  @type {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._boundLoop = this._loop.bind(this);\n\t        //bind a callback to the worker thread\n\t        this.context.on('tick', this._boundLoop);\n\t    };\n\t    Tone.extend(Tone.Clock, Tone.Emitter);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Clock.defaults = {\n\t        'callback': Tone.noOp,\n\t        'frequency': 1\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Clock#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Clock.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the clock at the given time. Optionally pass in an offset\n\t\t *  of where to start the tick counter from.\n\t\t *  @param  {Time=}  time    The time the clock should start\n\t\t *  @param  {Ticks=}  offset  Where the tick counter starts counting from.\n\t\t *  @return  {Tone.Clock}  this\n\t\t */\n\t    Tone.Clock.prototype.start = function (time, offset) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) !== Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Started, time);\n\t            this._state.get(time).offset = offset;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.Clock} this\n\t\t *  @example\n\t\t * clock.stop();\n\t\t */\n\t    Tone.Clock.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the clock. Pausing does not reset the tick counter.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.Clock} this\n\t\t */\n\t    Tone.Clock.prototype.pause = function (time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Paused, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The scheduling loop.\n\t\t *  @private\n\t\t */\n\t    Tone.Clock.prototype._loop = function () {\n\t        //the end of the update interval\n\t        var endTime = this.now() + this.context.updateInterval;\n\t        //the current event at the time of the loop\n\t        var event = this._state.get(endTime);\n\t        if (event) {\n\t            //state change events\n\t            if (event.state !== this._lastState) {\n\t                this._lastState = event.state;\n\t                switch (event.state) {\n\t                case Tone.State.Started:\n\t                    if (!Tone.isUndef(event.offset)) {\n\t                        this.ticks = event.offset;\n\t                    }\n\t                    this._nextTick = event.time;\n\t                    this.emit('start', event.time, this.ticks);\n\t                    break;\n\t                case Tone.State.Stopped:\n\t                    this.ticks = 0;\n\t                    this.emit('stop', event.time);\n\t                    break;\n\t                case Tone.State.Paused:\n\t                    this.emit('pause', event.time);\n\t                    break;\n\t                }\n\t            }\n\t            //all the tick events\n\t            while (endTime > this._nextTick && this._state) {\n\t                var tickTime = this._nextTick;\n\t                if (this.frequency) {\n\t                    this._nextTick += this.frequency.getDurationOfTicks(1, this._nextTick);\n\t                    if (event.state === Tone.State.Started) {\n\t                        try {\n\t                            this.callback(tickTime);\n\t                            this.ticks++;\n\t                        } catch (e) {\n\t                            this.ticks++;\n\t                            throw e;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the scheduled state at the given time.\n\t\t *  @param  {Time}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t *  @example\n\t\t * clock.start(\"+0.1\");\n\t\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t\t */\n\t    Tone.Clock.prototype.getStateAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        return this._state.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Clock} this\n\t\t */\n\t    Tone.Clock.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this.context.off('tick', this._boundLoop);\n\t        this._writable('frequency');\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._boundLoop = null;\n\t        this._nextTick = Infinity;\n\t        this.callback = null;\n\t        this._state.dispose();\n\t        this._state = null;\n\t    };\n\t    return Tone.Clock;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Similar to Tone.Timeline, but all events represent\n\t\t *         intervals with both \"time\" and \"duration\" times. The \n\t\t *         events are placed in a tree structure optimized\n\t\t *         for querying an intersection point with the timeline\n\t\t *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n\t\t *         to represent the data.\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.IntervalTimeline = function () {\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The root node of the inteval tree\n\t\t\t *  @type  {IntervalNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._root = null;\n\t        /**\n\t\t\t *  Keep track of the length of the timeline.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._length = 0;\n\t    };\n\t    Tone.extend(Tone.IntervalTimeline);\n\t    /**\n\t\t *  The event to add to the timeline. All events must \n\t\t *  have a time and duration value\n\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.add = function (event) {\n\t        if (Tone.isUndef(event.time) || Tone.isUndef(event.duration)) {\n\t            throw new Error('Tone.IntervalTimeline: events must have time and duration parameters');\n\t        }\n\t        var node = new IntervalNode(event.time, event.time + event.duration, event);\n\t        if (this._root === null) {\n\t            this._root = node;\n\t        } else {\n\t            this._root.insert(node);\n\t        }\n\t        this._length++;\n\t        // Restructure tree to be balanced\n\t        while (node !== null) {\n\t            node.updateHeight();\n\t            node.updateMax();\n\t            this._rebalance(node);\n\t            node = node.parent;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove an event from the timeline.\n\t\t *  @param  {Object}  event  The event to remove from the timeline\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.remove = function (event) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(event.time, results);\n\t            for (var i = 0; i < results.length; i++) {\n\t                var node = results[i];\n\t                if (node.event === event) {\n\t                    this._removeNode(node);\n\t                    this._length--;\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The number of items in the timeline.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.IntervalTimeline#\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.IntervalTimeline.prototype, 'length', {\n\t        get: function () {\n\t            return this._length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Remove events whose time time is after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.cancel = function (after) {\n\t        this.forEachAfter(after, function (event) {\n\t            this.remove(event);\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the root node as the given node\n\t\t *  @param {IntervalNode} node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._setRoot = function (node) {\n\t        this._root = node;\n\t        if (this._root !== null) {\n\t            this._root.parent = null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Replace the references to the node in the node's parent\n\t\t *  with the replacement node.\n\t\t *  @param  {IntervalNode}  node        \n\t\t *  @param  {IntervalNode}  replacement \n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._replaceNodeInParent = function (node, replacement) {\n\t        if (node.parent !== null) {\n\t            if (node.isLeftChild()) {\n\t                node.parent.left = replacement;\n\t            } else {\n\t                node.parent.right = replacement;\n\t            }\n\t            this._rebalance(node.parent);\n\t        } else {\n\t            this._setRoot(replacement);\n\t        }\n\t    };\n\t    /**\n\t\t *  Remove the node from the tree and replace it with \n\t\t *  a successor which follows the schema.\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._removeNode = function (node) {\n\t        if (node.left === null && node.right === null) {\n\t            this._replaceNodeInParent(node, null);\n\t        } else if (node.right === null) {\n\t            this._replaceNodeInParent(node, node.left);\n\t        } else if (node.left === null) {\n\t            this._replaceNodeInParent(node, node.right);\n\t        } else {\n\t            var balance = node.getBalance();\n\t            var replacement, temp;\n\t            if (balance > 0) {\n\t                if (node.left.right === null) {\n\t                    replacement = node.left;\n\t                    replacement.right = node.right;\n\t                    temp = replacement;\n\t                } else {\n\t                    replacement = node.left.right;\n\t                    while (replacement.right !== null) {\n\t                        replacement = replacement.right;\n\t                    }\n\t                    replacement.parent.right = replacement.left;\n\t                    temp = replacement.parent;\n\t                    replacement.left = node.left;\n\t                    replacement.right = node.right;\n\t                }\n\t            } else {\n\t                if (node.right.left === null) {\n\t                    replacement = node.right;\n\t                    replacement.left = node.left;\n\t                    temp = replacement;\n\t                } else {\n\t                    replacement = node.right.left;\n\t                    while (replacement.left !== null) {\n\t                        replacement = replacement.left;\n\t                    }\n\t                    replacement.parent = replacement.parent;\n\t                    replacement.parent.left = replacement.right;\n\t                    temp = replacement.parent;\n\t                    replacement.left = node.left;\n\t                    replacement.right = node.right;\n\t                }\n\t            }\n\t            if (node.parent !== null) {\n\t                if (node.isLeftChild()) {\n\t                    node.parent.left = replacement;\n\t                } else {\n\t                    node.parent.right = replacement;\n\t                }\n\t            } else {\n\t                this._setRoot(replacement);\n\t            }\n\t            // this._replaceNodeInParent(node, replacement);\n\t            this._rebalance(temp);\n\t        }\n\t        node.dispose();\n\t    };\n\t    /**\n\t\t *  Rotate the tree to the left\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rotateLeft = function (node) {\n\t        var parent = node.parent;\n\t        var isLeftChild = node.isLeftChild();\n\t        // Make node.right the new root of this sub tree (instead of node)\n\t        var pivotNode = node.right;\n\t        node.right = pivotNode.left;\n\t        pivotNode.left = node;\n\t        if (parent !== null) {\n\t            if (isLeftChild) {\n\t                parent.left = pivotNode;\n\t            } else {\n\t                parent.right = pivotNode;\n\t            }\n\t        } else {\n\t            this._setRoot(pivotNode);\n\t        }\n\t    };\n\t    /**\n\t\t *  Rotate the tree to the right\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rotateRight = function (node) {\n\t        var parent = node.parent;\n\t        var isLeftChild = node.isLeftChild();\n\t        // Make node.left the new root of this sub tree (instead of node)\n\t        var pivotNode = node.left;\n\t        node.left = pivotNode.right;\n\t        pivotNode.right = node;\n\t        if (parent !== null) {\n\t            if (isLeftChild) {\n\t                parent.left = pivotNode;\n\t            } else {\n\t                parent.right = pivotNode;\n\t            }\n\t        } else {\n\t            this._setRoot(pivotNode);\n\t        }\n\t    };\n\t    /**\n\t\t *  Balance the BST\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rebalance = function (node) {\n\t        var balance = node.getBalance();\n\t        if (balance > 1) {\n\t            if (node.left.getBalance() < 0) {\n\t                this._rotateLeft(node.left);\n\t            } else {\n\t                this._rotateRight(node);\n\t            }\n\t        } else if (balance < -1) {\n\t            if (node.right.getBalance() > 0) {\n\t                this._rotateRight(node.right);\n\t            } else {\n\t                this._rotateLeft(node);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Get an event whose time and duration span the give time. Will\n\t\t *  return the match whose \"time\" value is closest to the given time.\n\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t *  @return  {Object}  The event which spans the desired time\n\t\t */\n\t    Tone.IntervalTimeline.prototype.get = function (time) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(time, results);\n\t            if (results.length > 0) {\n\t                var max = results[0];\n\t                for (var i = 1; i < results.length; i++) {\n\t                    if (results[i].low > max.low) {\n\t                        max = results[i];\n\t                    }\n\t                }\n\t                return max.event;\n\t            }\n\t        }\n\t        return null;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the timeline.\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEach = function (callback) {\n\t        if (this._root !== null) {\n\t            var allNodes = [];\n\t            this._root.traverse(function (node) {\n\t                allNodes.push(node);\n\t            });\n\t            for (var i = 0; i < allNodes.length; i++) {\n\t                var ev = allNodes[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array in which the given time\n\t\t *  overlaps with the time and duration time of the event.\n\t\t *  @param  {Number}  time The time to check if items are overlapping\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEachAtTime = function (time, callback) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(time, results);\n\t            for (var i = results.length - 1; i >= 0; i--) {\n\t                var ev = results[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array in which the time is greater\n\t\t *  than the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEachAfter = function (time, callback) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.searchAfter(time, results);\n\t            for (var i = results.length - 1; i >= 0; i--) {\n\t                var ev = results[i].event;\n\t                callback(ev);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.dispose = function () {\n\t        var allNodes = [];\n\t        if (this._root !== null) {\n\t            this._root.traverse(function (node) {\n\t                allNodes.push(node);\n\t            });\n\t        }\n\t        for (var i = 0; i < allNodes.length; i++) {\n\t            allNodes[i].dispose();\n\t        }\n\t        allNodes = null;\n\t        this._root = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tINTERVAL NODE HELPER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Represents a node in the binary search tree, with the addition\n\t\t *  of a \"high\" value which keeps track of the highest value of\n\t\t *  its children. \n\t\t *  References: \n\t\t *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n\t\t *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n\t\t *  @param {Number} low\n\t\t *  @param {Number} high\n\t\t *  @private\n\t\t */\n\t    var IntervalNode = function (low, high, event) {\n\t        //the event container\n\t        this.event = event;\n\t        //the low value\n\t        this.low = low;\n\t        //the high value\n\t        this.high = high;\n\t        //the high value for this and all child nodes\n\t        this.max = this.high;\n\t        //the nodes to the left\n\t        this._left = null;\n\t        //the nodes to the right\n\t        this._right = null;\n\t        //the parent node\n\t        this.parent = null;\n\t        //the number of child nodes\n\t        this.height = 0;\n\t    };\n\t    /** \n\t\t *  Insert a node into the correct spot in the tree\n\t\t *  @param  {IntervalNode}  node\n\t\t */\n\t    IntervalNode.prototype.insert = function (node) {\n\t        if (node.low <= this.low) {\n\t            if (this.left === null) {\n\t                this.left = node;\n\t            } else {\n\t                this.left.insert(node);\n\t            }\n\t        } else {\n\t            if (this.right === null) {\n\t                this.right = node;\n\t            } else {\n\t                this.right.insert(node);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Search the tree for nodes which overlap \n\t\t *  with the given point\n\t\t *  @param  {Number}  point  The point to query\n\t\t *  @param  {Array}  results  The array to put the results\n\t\t */\n\t    IntervalNode.prototype.search = function (point, results) {\n\t        // If p is to the right of the rightmost point of any interval\n\t        // in this node and all children, there won't be any matches.\n\t        if (point > this.max) {\n\t            return;\n\t        }\n\t        // Search left children\n\t        if (this.left !== null) {\n\t            this.left.search(point, results);\n\t        }\n\t        // Check this node\n\t        if (this.low <= point && this.high > point) {\n\t            results.push(this);\n\t        }\n\t        // If p is to the left of the time of this interval,\n\t        // then it can't be in any child to the right.\n\t        if (this.low > point) {\n\t            return;\n\t        }\n\t        // Search right children\n\t        if (this.right !== null) {\n\t            this.right.search(point, results);\n\t        }\n\t    };\n\t    /**\n\t\t *  Search the tree for nodes which are less \n\t\t *  than the given point\n\t\t *  @param  {Number}  point  The point to query\n\t\t *  @param  {Array}  results  The array to put the results\n\t\t */\n\t    IntervalNode.prototype.searchAfter = function (point, results) {\n\t        // Check this node\n\t        if (this.low >= point) {\n\t            results.push(this);\n\t            if (this.left !== null) {\n\t                this.left.searchAfter(point, results);\n\t            }\n\t        }\n\t        // search the right side\n\t        if (this.right !== null) {\n\t            this.right.searchAfter(point, results);\n\t        }\n\t    };\n\t    /**\n\t\t *  Invoke the callback on this element and both it's branches\n\t\t *  @param  {Function}  callback\n\t\t */\n\t    IntervalNode.prototype.traverse = function (callback) {\n\t        callback(this);\n\t        if (this.left !== null) {\n\t            this.left.traverse(callback);\n\t        }\n\t        if (this.right !== null) {\n\t            this.right.traverse(callback);\n\t        }\n\t    };\n\t    /**\n\t\t *  Update the height of the node\n\t\t */\n\t    IntervalNode.prototype.updateHeight = function () {\n\t        if (this.left !== null && this.right !== null) {\n\t            this.height = Math.max(this.left.height, this.right.height) + 1;\n\t        } else if (this.right !== null) {\n\t            this.height = this.right.height + 1;\n\t        } else if (this.left !== null) {\n\t            this.height = this.left.height + 1;\n\t        } else {\n\t            this.height = 0;\n\t        }\n\t    };\n\t    /**\n\t\t *  Update the height of the node\n\t\t */\n\t    IntervalNode.prototype.updateMax = function () {\n\t        this.max = this.high;\n\t        if (this.left !== null) {\n\t            this.max = Math.max(this.max, this.left.max);\n\t        }\n\t        if (this.right !== null) {\n\t            this.max = Math.max(this.max, this.right.max);\n\t        }\n\t    };\n\t    /**\n\t\t *  The balance is how the leafs are distributed on the node\n\t\t *  @return  {Number}  Negative numbers are balanced to the right\n\t\t */\n\t    IntervalNode.prototype.getBalance = function () {\n\t        var balance = 0;\n\t        if (this.left !== null && this.right !== null) {\n\t            balance = this.left.height - this.right.height;\n\t        } else if (this.left !== null) {\n\t            balance = this.left.height + 1;\n\t        } else if (this.right !== null) {\n\t            balance = -(this.right.height + 1);\n\t        }\n\t        return balance;\n\t    };\n\t    /**\n\t\t *  @returns {Boolean} true if this node is the left child\n\t\t *  of its parent\n\t\t */\n\t    IntervalNode.prototype.isLeftChild = function () {\n\t        return this.parent !== null && this.parent.left === this;\n\t    };\n\t    /**\n\t\t *  get/set the left node\n\t\t *  @type {IntervalNode}\n\t\t */\n\t    Object.defineProperty(IntervalNode.prototype, 'left', {\n\t        get: function () {\n\t            return this._left;\n\t        },\n\t        set: function (node) {\n\t            this._left = node;\n\t            if (node !== null) {\n\t                node.parent = this;\n\t            }\n\t            this.updateHeight();\n\t            this.updateMax();\n\t        }\n\t    });\n\t    /**\n\t\t *  get/set the right node\n\t\t *  @type {IntervalNode}\n\t\t */\n\t    Object.defineProperty(IntervalNode.prototype, 'right', {\n\t        get: function () {\n\t            return this._right;\n\t        },\n\t        set: function (node) {\n\t            this._right = node;\n\t            if (node !== null) {\n\t                node.parent = this;\n\t            }\n\t            this.updateHeight();\n\t            this.updateMax();\n\t        }\n\t    });\n\t    /**\n\t\t *  null out references.\n\t\t */\n\t    IntervalNode.prototype.dispose = function () {\n\t        this.parent = null;\n\t        this._left = null;\n\t        this._right = null;\n\t        this.event = null;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEND INTERVAL NODE HELPER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    return Tone.IntervalTimeline;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TransportEvent is an internal class used by (Tone.Transport)[Transport]\n\t\t *         to schedule events. Do no invoke this class directly, it is\n\t\t *         handled from within Tone.Transport.\n\t\t *  @extends {Tone}\n\t\t *  @param {Object} options\n\t\t */\n\t    Tone.TransportEvent = function (Transport, options) {\n\t        options = Tone.defaultArg(options, Tone.TransportEvent.defaults);\n\t        Tone.call(this);\n\t        /**\n\t\t\t * Reference to the Transport that created it\n\t\t\t * @type {Tone.Transport}\n\t\t\t */\n\t        this.Transport = Transport;\n\t        /**\n\t\t\t * The unique id of the event\n\t\t\t * @type {Number}\n\t\t\t */\n\t        this.id = Tone.TransportEvent._eventId++;\n\t        /**\n\t\t\t * The time the event starts\n\t\t\t * @type {Ticks}\n\t\t\t */\n\t        this.time = options.time;\n\t        /**\n\t\t\t * The callback to invoke\n\t\t\t * @type {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t * If the event should be removed after being created.\n\t\t\t * @type {Boolean}\n\t\t\t * @private\n\t\t\t */\n\t        this._once = options.once;\n\t    };\n\t    Tone.extend(Tone.TransportEvent);\n\t    /**\n\t\t * The defaults\n\t\t * @static\n\t\t * @type {Object}\n\t\t */\n\t    Tone.TransportEvent.defaults = {\n\t        'once': false,\n\t        'callback': Tone.noOp\n\t    };\n\t    /**\n\t\t * Current ID counter\n\t\t * @private\n\t\t * @static\n\t\t * @type {Number}\n\t\t */\n\t    Tone.TransportEvent._eventId = 0;\n\t    /**\n\t\t * Invoke the callback even callback.\n\t\t * @param  {Time} time  The AudioContext time in seconds of the event\n\t\t */\n\t    Tone.TransportEvent.prototype.invoke = function (time) {\n\t        if (this.callback) {\n\t            this.callback(time);\n\t            if (this._once && this.Transport) {\n\t                this.Transport.clear(this.id);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t * Clean up\n\t\t * @return {Tone.TransportEvent} this\n\t\t */\n\t    Tone.TransportEvent.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.Transport = null;\n\t        this.callback = null;\n\t        return this;\n\t    };\n\t    return Tone.TransportEvent;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TransportRepeatEvent is an internal class used by Tone.Transport\n\t\t *         to schedule repeat events. This class should not be instantiated directly.\n\t\t *  @extends {Tone.TransportEvent}\n\t\t *  @param {Object} options\n\t\t */\n\t    Tone.TransportRepeatEvent = function (Transport, options) {\n\t        Tone.TransportEvent.call(this, Transport, options);\n\t        options = Tone.defaultArg(options, Tone.TransportRepeatEvent.defaults);\n\t        /**\n\t\t\t * When the event should stop repeating\n\t\t\t * @type {Ticks}\n\t\t\t * @private\n\t\t\t */\n\t        this.duration = options.duration;\n\t        /**\n\t\t\t * The interval of the repeated event\n\t\t\t * @type {Ticks}\n\t\t\t * @private\n\t\t\t */\n\t        this._interval = options.interval;\n\t        /**\n\t\t\t * The ID of the current timeline event\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._currentId = -1;\n\t        /**\n\t\t\t * The ID of the next timeline event\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._nextId = -1;\n\t        /**\n\t\t\t  * The time of the next event\n\t\t\t  * @type {Ticks}\n\t\t\t  * @private\n\t\t\t  */\n\t        this._nextTick = this.time;\n\t        /**\n\t\t\t * a reference to the bound start method\n\t\t\t * @type {Function}\n\t\t\t * @private\n\t\t\t */\n\t        this._boundRestart = this._restart.bind(this);\n\t        this.Transport.on('start loopStart', this._boundRestart);\n\t        this._restart();\n\t    };\n\t    Tone.extend(Tone.TransportRepeatEvent, Tone.TransportEvent);\n\t    /**\n\t\t * The defaults\n\t\t * @static\n\t\t * @type {Object}\n\t\t */\n\t    Tone.TransportRepeatEvent.defaults = {\n\t        'duration': Infinity,\n\t        'interval': 1\n\t    };\n\t    /**\n\t\t * Invoke the callback. Returns the tick time which\n\t\t * the next event should be scheduled at.\n\t\t * @param  {Number} time  The AudioContext time in seconds of the event\n\t\t */\n\t    Tone.TransportRepeatEvent.prototype.invoke = function (time) {\n\t        //create more events if necessary\n\t        this._createEvents();\n\t        //call the super class\n\t        Tone.TransportEvent.prototype.invoke.call(this, time);\n\t    };\n\t    /**\n\t\t * Push more events onto the timeline to keep up with the position of the timeline\n\t\t * @private\n\t\t */\n\t    Tone.TransportRepeatEvent.prototype._createEvents = function () {\n\t        // schedule the next event\n\t        var ticks = this.Transport.ticks;\n\t        if (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {\n\t            this._nextTick += this._interval;\n\t            this._currentId = this._nextId;\n\t            this._nextId = this.Transport.scheduleOnce(this.invoke.bind(this), Tone.TransportTime(this._nextTick, 'i'));\n\t        }\n\t    };\n\t    /**\n\t\t * Push more events onto the timeline to keep up with the position of the timeline\n\t\t * @private\n\t\t */\n\t    Tone.TransportRepeatEvent.prototype._restart = function () {\n\t        this.Transport.clear(this._currentId);\n\t        this.Transport.clear(this._nextId);\n\t        var ticks = this.Transport.ticks;\n\t        this._nextTick = this.time;\n\t        if (ticks > this.time) {\n\t            this._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;\n\t        }\n\t        this._currentId = this.Transport.scheduleOnce(this.invoke.bind(this), Tone.TransportTime(this._nextTick, 'i'));\n\t        this._nextTick += this._interval;\n\t        this._nextId = this.Transport.scheduleOnce(this.invoke.bind(this), Tone.TransportTime(this._nextTick, 'i'));\n\t    };\n\t    /**\n\t\t * Clean up\n\t\t * @return {Tone.TransportRepeatEvent} this\n\t\t */\n\t    Tone.TransportRepeatEvent.prototype.dispose = function () {\n\t        this.Transport.clear(this._currentId);\n\t        this.Transport.clear(this._nextId);\n\t        this.Transport.off('start loopStart', this._boundRestart);\n\t        this._boundCreateEvents = null;\n\t        Tone.TransportEvent.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.TransportRepeatEvent;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Transport for timing musical events.\n\t\t *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n\t\t *          Tone.Transport timing events pass in the exact time of the scheduled event\n\t\t *          in the argument of the callback function. Pass that time value to the object\n\t\t *          you're scheduling. <br><br>\n\t\t *          A single transport is created for you when the library is initialized.\n\t\t *          <br><br>\n\t\t *          The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n\t\t *          called with the time of that event as the argument.\n\t\t *\n\t\t *  @extends {Tone.Emitter}\n\t\t *  @singleton\n\t\t *  @example\n\t\t * //repeated event every 8th note\n\t\t * Tone.Transport.scheduleRepeat(function(time){\n\t\t * \t//do something with the time\n\t\t * }, \"8n\");\n\t\t *  @example\n\t\t * //schedule an event on the 16th measure\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \t//do something with the time\n\t\t * }, \"16:0:0\");\n\t\t */\n\t    Tone.Transport = function () {\n\t        Tone.Emitter.call(this);\n\t        Tone.getContext(function () {\n\t            ///////////////////////////////////////////////////////////////////////\n\t            //\tLOOPING\n\t            //////////////////////////////////////////////////////////////////////\n\t            /**\n\t\t\t\t * \tIf the transport loops or not.\n\t\t\t\t *  @type {boolean}\n\t\t\t\t */\n\t            this.loop = false;\n\t            /**\n\t\t\t\t * \tThe loop start position in ticks\n\t\t\t\t *  @type {Ticks}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._loopStart = 0;\n\t            /**\n\t\t\t\t * \tThe loop end position in ticks\n\t\t\t\t *  @type {Ticks}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._loopEnd = 0;\n\t            ///////////////////////////////////////////////////////////////////////\n\t            //\tCLOCK/TEMPO\n\t            //////////////////////////////////////////////////////////////////////\n\t            /**\n\t\t\t\t *  Pulses per quarter is the number of ticks per quarter note.\n\t\t\t\t *  @private\n\t\t\t\t *  @type  {Number}\n\t\t\t\t */\n\t            this._ppq = TransportConstructor.defaults.PPQ;\n\t            /**\n\t\t\t\t *  watches the main oscillator for timing ticks\n\t\t\t\t *  initially starts at 120bpm\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Tone.Clock}\n\t\t\t\t */\n\t            this._clock = new Tone.Clock({\n\t                'callback': this._processTick.bind(this),\n\t                'frequency': 0\n\t            });\n\t            this._bindClockEvents();\n\t            /**\n\t\t\t\t *  The Beats Per Minute of the Transport.\n\t\t\t\t *  @type {BPM}\n\t\t\t\t *  @signal\n\t\t\t\t *  @example\n\t\t\t\t * Tone.Transport.bpm.value = 80;\n\t\t\t\t * //ramp the bpm to 120 over 10 seconds\n\t\t\t\t * Tone.Transport.bpm.rampTo(120, 10);\n\t\t\t\t */\n\t            this.bpm = this._clock.frequency;\n\t            this.bpm._toUnits = this._toUnits.bind(this);\n\t            this.bpm._fromUnits = this._fromUnits.bind(this);\n\t            this.bpm.units = Tone.Type.BPM;\n\t            this.bpm.value = TransportConstructor.defaults.bpm;\n\t            this._readOnly('bpm');\n\t            /**\n\t\t\t\t *  The time signature, or more accurately the numerator\n\t\t\t\t *  of the time signature over a denominator of 4.\n\t\t\t\t *  @type {Number}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._timeSignature = TransportConstructor.defaults.timeSignature;\n\t            ///////////////////////////////////////////////////////////////////////\n\t            //\tTIMELINE EVENTS\n\t            //////////////////////////////////////////////////////////////////////\n\t            /**\n\t\t\t\t *  All the events in an object to keep track by ID\n\t\t\t\t *  @type {Object}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._scheduledEvents = {};\n\t            /**\n\t\t\t\t * \tThe scheduled events.\n\t\t\t\t *  @type {Tone.Timeline}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._timeline = new Tone.Timeline();\n\t            /**\n\t\t\t\t *  Repeated events\n\t\t\t\t *  @type {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._repeatedEvents = new Tone.IntervalTimeline();\n\t            /**\n\t\t\t\t *  All of the synced Signals\n\t\t\t\t *  @private\n\t\t\t\t *  @type {Array}\n\t\t\t\t */\n\t            this._syncedSignals = [];\n\t            ///////////////////////////////////////////////////////////////////////\n\t            //\tSWING\n\t            //////////////////////////////////////////////////////////////////////\n\t            /**\n\t\t\t\t *  The subdivision of the swing\n\t\t\t\t *  @type  {Ticks}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._swingTicks = TransportConstructor.defaults.PPQ / 2;\n\t            //8n\n\t            /**\n\t\t\t\t *  The swing amount\n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._swingAmount = 0;\n\t        }.bind(this));\n\t    };\n\t    Tone.extend(Tone.Transport, Tone.Emitter);\n\t    /**\n\t\t *  the defaults\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Transport.defaults = {\n\t        'bpm': 120,\n\t        'swing': 0,\n\t        'swingSubdivision': '8n',\n\t        'timeSignature': 4,\n\t        'loopStart': 0,\n\t        'loopEnd': '4m',\n\t        'PPQ': 192\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tTICKS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  called on every tick\n\t\t *  @param   {number} tickTime clock relative tick time\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._processTick = function (tickTime) {\n\t        var ticks = this._clock.ticks;\n\t        //handle swing\n\t        if (this._swingAmount > 0 && ticks % this._ppq !== 0 && //not on a downbeat\n\t            ticks % (this._swingTicks * 2) !== 0) {\n\t            //add some swing\n\t            var progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);\n\t            var amount = Math.sin(progress * Math.PI) * this._swingAmount;\n\t            tickTime += Tone.Time(this._swingTicks * 2 / 3, 'i') * amount;\n\t        }\n\t        //do the loop test\n\t        if (this.loop) {\n\t            if (ticks >= this._loopEnd) {\n\t                this.emit('loopEnd', tickTime);\n\t                this._clock.ticks = this._loopStart;\n\t                ticks = this._loopStart;\n\t                this.emit('loopStart', tickTime, this.seconds);\n\t                this.emit('loop', tickTime);\n\t            }\n\t        }\n\t        //invoke the timeline events scheduled on this tick\n\t        this._timeline.forEachAtTime(ticks, function (event) {\n\t            event.invoke(tickTime);\n\t        });\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSCHEDULABLE EVENTS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Schedule an event along the timeline.\n\t\t *  @param {Function} callback The callback to be invoked at the time.\n\t\t *  @param {TransportTime}  time The time to invoke the callback at.\n\t\t *  @return {Number} The id of the event which can be used for canceling the event.\n\t\t *  @example\n\t\t * //trigger the callback when the Transport reaches the desired time\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \tenvelope.triggerAttack(time);\n\t\t * }, \"128i\");\n\t\t */\n\t    Tone.Transport.prototype.schedule = function (callback, time) {\n\t        var event = new Tone.TransportEvent(this, {\n\t            'time': this.toTicks(time),\n\t            'callback': callback\n\t        });\n\t        return this._addEvent(event, this._timeline);\n\t    };\n\t    /**\n\t\t *  Schedule a repeated event along the timeline. The event will fire\n\t\t *  at the `interval` starting at the `startTime` and for the specified\n\t\t *  `duration`.\n\t\t *  @param  {Function}  callback   The callback to invoke.\n\t\t *  @param  {Time}    interval   The duration between successive\n\t\t *                               callbacks. Must be a positive number.\n\t\t *  @param  {TimelinePosition=}    startTime  When along the timeline the events should\n\t\t *                               start being invoked.\n\t\t *  @param {Time} [duration=Infinity] How long the event should repeat.\n\t\t *  @return  {Number}    The ID of the scheduled event. Use this to cancel\n\t\t *                           the event.\n\t\t *  @example\n\t\t * //a callback invoked every eighth note after the first measure\n\t\t * Tone.Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t\t */\n\t    Tone.Transport.prototype.scheduleRepeat = function (callback, interval, startTime, duration) {\n\t        var event = new Tone.TransportRepeatEvent(this, {\n\t            'callback': callback,\n\t            'interval': this.toTicks(interval),\n\t            'time': this.toTicks(startTime),\n\t            'duration': this.toTicks(Tone.defaultArg(duration, Infinity))\n\t        });\n\t        //kick it off if the Transport is started\n\t        return this._addEvent(event, this._repeatedEvents);\n\t    };\n\t    /**\n\t\t *  Schedule an event that will be removed after it is invoked.\n\t\t *  Note that if the given time is less than the current transport time,\n\t\t *  the event will be invoked immediately.\n\t\t *  @param {Function} callback The callback to invoke once.\n\t\t *  @param {TransportTime} time The time the callback should be invoked.\n\t\t *  @returns {Number} The ID of the scheduled event.\n\t\t */\n\t    Tone.Transport.prototype.scheduleOnce = function (callback, time) {\n\t        var event = new Tone.TransportEvent(this, {\n\t            'time': this.toTicks(time),\n\t            'callback': callback,\n\t            'once': true\n\t        });\n\t        return this._addEvent(event, this._timeline);\n\t    };\n\t    /**\n\t\t *  Clear the passed in event id from the timeline\n\t\t *  @param {Number} eventId The id of the event.\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.clear = function (eventId) {\n\t        if (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t            var item = this._scheduledEvents[eventId.toString()];\n\t            item.timeline.remove(item.event);\n\t            item.event.dispose();\n\t            delete this._scheduledEvents[eventId.toString()];\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Add an event to the correct timeline. Keep track of the\n\t\t * timeline it was added to.\n\t\t * @param {Tone.TransportEvent}\tevent\n\t\t * @param {Tone.Timeline} timeline\n\t\t * @returns {Number} the event id which was just added\n\t\t * @private\n\t\t */\n\t    Tone.Transport.prototype._addEvent = function (event, timeline) {\n\t        this._scheduledEvents[event.id.toString()] = {\n\t            'event': event,\n\t            'timeline': timeline\n\t        };\n\t        timeline.add(event);\n\t        return event.id;\n\t    };\n\t    /**\n\t\t *  Remove scheduled events from the timeline after\n\t\t *  the given time. Repeated events will be removed\n\t\t *  if their startTime is after the given time\n\t\t *  @param {TransportTime} [after=0] Clear all events after\n\t\t *                          this time.\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.cancel = function (after) {\n\t        after = Tone.defaultArg(after, 0);\n\t        after = this.toTicks(after);\n\t        this._timeline.cancel(after);\n\t        this._repeatedEvents.cancel(after);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSTART/STOP/PAUSE\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Bind start/stop/pause events from the clock and emit them.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._bindClockEvents = function () {\n\t        this._clock.on('start', function (time, offset) {\n\t            offset = Tone.Time(this._clock.ticks, 'i').toSeconds();\n\t            this.emit('start', time, offset);\n\t        }.bind(this));\n\t        this._clock.on('stop', function (time) {\n\t            this.emit('stop', time);\n\t        }.bind(this));\n\t        this._clock.on('pause', function (time) {\n\t            this.emit('pause', time);\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'state', {\n\t        get: function () {\n\t            return this._clock.getStateAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now] The time when the transport should start.\n\t\t *  @param  {TransportTime=} offset The timeline offset to start the transport.\n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * //start the transport in one second starting at beginning of the 5th measure.\n\t\t * Tone.Transport.start(\"+1\", \"4:0:0\");\n\t\t */\n\t    Tone.Transport.prototype.start = function (time, offset) {\n\t        //start the clock\n\t        if (!Tone.isUndef(offset)) {\n\t            offset = this.toTicks(offset);\n\t        }\n\t        this._clock.start(time, offset);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now] The time when the transport should stop.\n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * Tone.Transport.stop();\n\t\t */\n\t    Tone.Transport.prototype.stop = function (time) {\n\t        this._clock.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now]\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.pause = function (time) {\n\t        this._clock.pause(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Toggle the current state of the transport. If it is\n\t\t * started, it will stop it, otherwise it will start the Transport.\n\t\t * @param  {Time=} time The time of the event\n\t\t * @return {Tone.Transport}      this\n\t\t */\n\t    Tone.Transport.prototype.toggle = function (time) {\n\t        time = this.toSeconds(time);\n\t        if (this._clock.getStateAtTime(time) !== Tone.State.Started) {\n\t            this.start(time);\n\t        } else {\n\t            this.stop(time);\n\t        }\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSETTERS/GETTERS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The time signature as just the numerator over 4.\n\t\t *  For example 4/4 would be just 4 and 6/8 would be 3.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Number|Array}\n\t\t *  @name timeSignature\n\t\t *  @example\n\t\t * //common time\n\t\t * Tone.Transport.timeSignature = 4;\n\t\t * // 7/8\n\t\t * Tone.Transport.timeSignature = [7, 8];\n\t\t * //this will be reduced to a single number\n\t\t * Tone.Transport.timeSignature; //returns 3.5\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'timeSignature', {\n\t        get: function () {\n\t            return this._timeSignature;\n\t        },\n\t        set: function (timeSig) {\n\t            if (Tone.isArray(timeSig)) {\n\t                timeSig = timeSig[0] / timeSig[1] * 4;\n\t            }\n\t            this._timeSignature = timeSig;\n\t        }\n\t    });\n\t    /**\n\t\t * When the Tone.Transport.loop = true, this is the starting position of the loop.\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {TransportTime}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toSeconds();\n\t        },\n\t        set: function (startPosition) {\n\t            this._loopStart = this.toTicks(startPosition);\n\t        }\n\t    });\n\t    /**\n\t\t * When the Tone.Transport.loop = true, this is the ending position of the loop.\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {TransportTime}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toSeconds();\n\t        },\n\t        set: function (endPosition) {\n\t            this._loopEnd = this.toTicks(endPosition);\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the loop start and stop at the same time.\n\t\t *  @param {TransportTime} startPosition\n\t\t *  @param {TransportTime} endPosition\n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * //loop over the first measure\n\t\t * Tone.Transport.setLoopPoints(0, \"1m\");\n\t\t * Tone.Transport.loop = true;\n\t\t */\n\t    Tone.Transport.prototype.setLoopPoints = function (startPosition, endPosition) {\n\t        this.loopStart = startPosition;\n\t        this.loopEnd = endPosition;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The swing value. Between 0-1 where 1 equal to\n\t\t *  the note + half the subdivision.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {NormalRange}\n\t\t *  @name swing\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'swing', {\n\t        get: function () {\n\t            return this._swingAmount;\n\t        },\n\t        set: function (amount) {\n\t            //scale the values to a normal range\n\t            this._swingAmount = amount;\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the subdivision which the swing will be applied to.\n\t\t *  The default value is an 8th note. Value must be less\n\t\t *  than a quarter note.\n\t\t *\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Time}\n\t\t *  @name swingSubdivision\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'swingSubdivision', {\n\t        get: function () {\n\t            return Tone.Time(this._swingTicks, 'i').toNotation();\n\t        },\n\t        set: function (subdivision) {\n\t            this._swingTicks = this.toTicks(subdivision);\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t\t *  Setting the value will jump to that position right away.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {BarsBeatsSixteenths}\n\t\t *  @name position\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'position', {\n\t        get: function () {\n\t            return Tone.TransportTime(this.ticks, 'i').toBarsBeatsSixteenths();\n\t        },\n\t        set: function (progress) {\n\t            var ticks = this.toTicks(progress);\n\t            this.ticks = ticks;\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's position in seconds\n\t\t *  Setting the value will jump to that position right away.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Seconds}\n\t\t *  @name seconds\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'seconds', {\n\t        get: function () {\n\t            return Tone.TransportTime(this.ticks, 'i').toSeconds();\n\t        },\n\t        set: function (progress) {\n\t            var ticks = this.toTicks(progress);\n\t            this.ticks = ticks;\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's loop position as a normalized value. Always\n\t\t *  returns 0 if the transport if loop is not true.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @name progress\n\t\t *  @type {NormalRange}\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'progress', {\n\t        get: function () {\n\t            if (this.loop) {\n\t                return (this.ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The transports current tick position.\n\t\t *\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Ticks}\n\t\t *  @name ticks\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'ticks', {\n\t        get: function () {\n\t            return this._clock.ticks;\n\t        },\n\t        set: function (t) {\n\t            if (this._clock.ticks !== t) {\n\t                var now = this.now();\n\t                //stop everything synced to the transport\n\t                if (this.state === Tone.State.Started) {\n\t                    this.emit('stop', now);\n\t                    this._clock.ticks = t;\n\t                    //restart it with the new time\n\t                    this.emit('start', now, this.seconds);\n\t                } else {\n\t                    this._clock.ticks = t;\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Pulses Per Quarter note. This is the smallest resolution\n\t\t *  the Transport timing supports. This should be set once\n\t\t *  on initialization and not set again. Changing this value\n\t\t *  after other objects have been created can cause problems.\n\t\t *\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Number}\n\t\t *  @name PPQ\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'PPQ', {\n\t        get: function () {\n\t            return this._ppq;\n\t        },\n\t        set: function (ppq) {\n\t            var bpm = this.bpm.value;\n\t            this._ppq = ppq;\n\t            this.bpm.value = bpm;\n\t        }\n\t    });\n\t    /**\n\t\t *  Convert from BPM to frequency (factoring in PPQ)\n\t\t *  @param  {BPM}  bpm The BPM value to convert to frequency\n\t\t *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._fromUnits = function (bpm) {\n\t        return 1 / (60 / bpm / this.PPQ);\n\t    };\n\t    /**\n\t\t *  Convert from frequency (with PPQ) into BPM\n\t\t *  @param  {Frequency}  freq The clocks frequency to convert to BPM\n\t\t *  @return  {BPM}  The frequency value as BPM.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._toUnits = function (freq) {\n\t        return freq / this.PPQ * 60;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSYNCING\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the time aligned to the next subdivision\n\t\t *  of the Transport. If the Transport is not started,\n\t\t *  it will return 0.\n\t\t *  Note: this will not work precisely during tempo ramps.\n\t\t *  @param  {Time}  subdivision  The subdivision to quantize to\n\t\t *  @return  {Number}  The context time of the next subdivision.\n\t\t *  @example\n\t\t * Tone.Transport.start(); //the transport must be started\n\t\t * Tone.Transport.nextSubdivision(\"4n\");\n\t\t */\n\t    Tone.Transport.prototype.nextSubdivision = function (subdivision) {\n\t        subdivision = this.toSeconds(subdivision);\n\t        //if the transport's not started, return 0\n\t        var now;\n\t        if (this.state === Tone.State.Started) {\n\t            now = this._clock._nextTick;\n\t        } else {\n\t            return 0;\n\t        }\n\t        var transportPos = Tone.Time(this.ticks, 'i');\n\t        var remainingTime = subdivision - transportPos % subdivision;\n\t        if (remainingTime === 0) {\n\t            remainingTime = subdivision;\n\t        }\n\t        return now + remainingTime;\n\t    };\n\t    /**\n\t\t *  Attaches the signal to the tempo control signal so that\n\t\t *  any changes in the tempo will change the signal in the same\n\t\t *  ratio.\n\t\t *\n\t\t *  @param  {Tone.Signal} signal\n\t\t *  @param {number=} ratio Optionally pass in the ratio between\n\t\t *                         the two signals. Otherwise it will be computed\n\t\t *                         based on their current values.\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.syncSignal = function (signal, ratio) {\n\t        if (!ratio) {\n\t            //get the sync ratio\n\t            if (signal._param.value !== 0) {\n\t                ratio = signal._param.value / this.bpm._param.value;\n\t            } else {\n\t                ratio = 0;\n\t            }\n\t        }\n\t        var ratioSignal = new Tone.Gain(ratio);\n\t        this.bpm.chain(ratioSignal, signal._param);\n\t        this._syncedSignals.push({\n\t            'ratio': ratioSignal,\n\t            'signal': signal,\n\t            'initial': signal._param.value\n\t        });\n\t        signal._param.value = 0;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsyncs a previously synced signal from the transport's control.\n\t\t *  See Tone.Transport.syncSignal.\n\t\t *  @param  {Tone.Signal} signal\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.unsyncSignal = function (signal) {\n\t        for (var i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t            var syncedSignal = this._syncedSignals[i];\n\t            if (syncedSignal.signal === signal) {\n\t                syncedSignal.ratio.dispose();\n\t                syncedSignal.signal._param.value = syncedSignal.initial;\n\t                this._syncedSignals.splice(i, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Transport} this\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this._clock.dispose();\n\t        this._clock = null;\n\t        this._writable('bpm');\n\t        this.bpm = null;\n\t        this._timeline.dispose();\n\t        this._timeline = null;\n\t        this._repeatedEvents.dispose();\n\t        this._repeatedEvents = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tINITIALIZATION\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    var TransportConstructor = Tone.Transport;\n\t    Tone.Transport = new TransportConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Transport instanceof TransportConstructor) {\n\t            Tone.Transport = context.Transport;\n\t        } else {\n\t            Tone.Transport = new TransportConstructor();\n\t        }\n\t        //store the Transport on the context so it can be retrieved later\n\t        context.Transport = Tone.Transport;\n\t    });\n\t    Tone.Context.on('close', function (context) {\n\t        if (context.Transport instanceof TransportConstructor) {\n\t            context.Transport.dispose();\n\t        }\n\t    });\n\t    return Tone.Transport;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Volume is a simple volume node, useful for creating a volume fader.\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {Decibels} [volume=0] the initial volume\n\t\t *  @example\n\t\t * var vol = new Tone.Volume(-12);\n\t\t * instrument.chain(vol, Tone.Master);\n\t\t */\n\t    Tone.Volume = function () {\n\t        var options = Tone.defaults(arguments, ['volume'], Tone.Volume);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t * the output node\n\t\t\t * @type {GainNode}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this.input = new Tone.Gain(options.volume, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The unmuted volume\n\t\t\t * @type {Decibels}\n\t\t\t * @private\n\t\t\t */\n\t        this._unmutedVolume = options.volume;\n\t        /**\n\t\t\t *  The volume control in decibels.\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.volume = this.output.gain;\n\t        this._readOnly('volume');\n\t        //set the mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.Volume, Tone.AudioNode);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Volume.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute the output.\n\t\t * @memberOf Tone.Volume#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * volume.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Volume.prototype, 'mute', {\n\t        get: function () {\n\t            return this.volume.value === -Infinity;\n\t        },\n\t        set: function (mute) {\n\t            if (!this.mute && mute) {\n\t                this._unmutedVolume = this.volume.value;\n\t                //maybe it should ramp here?\n\t                this.volume.value = -Infinity;\n\t            } else if (this.mute && !mute) {\n\t                this.volume.value = this._unmutedVolume;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Volume} this\n\t\t */\n\t    Tone.Volume.prototype.dispose = function () {\n\t        this.input.dispose();\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable('volume');\n\t        this.volume.dispose();\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.Volume;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A single master output which is connected to the\n\t\t *          AudioDestinationNode (aka your speakers).\n\t\t *          It provides useful conveniences such as the ability\n\t\t *          to set the volume and mute the entire application.\n\t\t *          It also gives you the ability to apply master effects to your application.\n\t\t *          <br><br>\n\t\t *          Like Tone.Transport, A single Tone.Master is created\n\t\t *          on initialization and you do not need to explicitly construct one.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @singleton\n\t\t *  @example\n\t\t * //the audio will go from the oscillator to the speakers\n\t\t * oscillator.connect(Tone.Master);\n\t\t * //a convenience for connecting to the master output is also provided:\n\t\t * oscillator.toMaster();\n\t\t * //the above two examples are equivalent.\n\t\t */\n\t    Tone.Master = function () {\n\t        Tone.AudioNode.call(this);\n\t        Tone.getContext(function () {\n\t            this.createInsOuts(1, 0);\n\t            /**\n\t\t\t\t *  The private volume node\n\t\t\t\t *  @type  {Tone.Volume}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._volume = this.output = new Tone.Volume();\n\t            /**\n\t\t\t\t * The volume of the master output.\n\t\t\t\t * @type {Decibels}\n\t\t\t\t * @signal\n\t\t\t\t */\n\t            this.volume = this._volume.volume;\n\t            this._readOnly('volume');\n\t            //connections\n\t            this.input.chain(this.output, this.context.destination);\n\t        }.bind(this));\n\t    };\n\t    Tone.extend(Tone.Master, Tone.AudioNode);\n\t    /**\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Master.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute the output.\n\t\t * @memberOf Tone.Master#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * Tone.Master.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Master.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t\t *  chained in the master effects chain.\n\t\t *  @param {AudioNode|Tone} args... All arguments will be connected in a row\n\t\t *                                  and the Master will be routed through it.\n\t\t *  @return  {Tone.Master}  this\n\t\t *  @example\n\t\t * //some overall compression to keep the levels in check\n\t\t * var masterCompressor = new Tone.Compressor({\n\t\t * \t\"threshold\" : -6,\n\t\t * \t\"ratio\" : 3,\n\t\t * \t\"attack\" : 0.5,\n\t\t * \t\"release\" : 0.1\n\t\t * });\n\t\t * //give a little boost to the lows\n\t\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t\t * //route everything through the filter\n\t\t * //and compressor before going to the speakers\n\t\t * Tone.Master.chain(lowBump, masterCompressor);\n\t\t */\n\t    Tone.Master.prototype.chain = function () {\n\t        this.input.disconnect();\n\t        this.input.chain.apply(this.input, arguments);\n\t        arguments[arguments.length - 1].connect(this.output);\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Master}  this\n\t\t */\n\t    Tone.Master.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUGMENT TONE's PROTOTYPE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)\n\t\t *  @returns {Tone.AudioNode} this\n\t\t *  @example\n\t\t * //connect an oscillator to the master output\n\t\t * var osc = new Tone.Oscillator().toMaster();\n\t\t */\n\t    Tone.AudioNode.prototype.toMaster = function () {\n\t        this.connect(Tone.Master);\n\t        return this;\n\t    };\n\t    if (window.AudioNode) {\n\t        // Also augment AudioNode's prototype to include toMaster as a convenience\n\t        AudioNode.prototype.toMaster = function () {\n\t            this.connect(Tone.Master);\n\t            return this;\n\t        };\n\t    }\n\t    /**\n\t\t *  initialize the module and listen for new audio contexts\n\t\t */\n\t    var MasterConstructor = Tone.Master;\n\t    Tone.Master = new MasterConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        // if it already exists, just restore it\n\t        if (context.Master instanceof MasterConstructor) {\n\t            Tone.Master = context.Master;\n\t        } else {\n\t            Tone.Master = new MasterConstructor();\n\t        }\n\t        context.Master = Tone.Master;\n\t    });\n\t    Tone.Context.on('close', function (context) {\n\t        if (context.Master instanceof MasterConstructor) {\n\t            context.Master.dispose();\n\t        }\n\t    });\n\t    return Tone.Master;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base class for sources. Sources have start/stop methods\n\t\t *          and the ability to be synced to the\n\t\t *          start/stop of Tone.Transport.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @example\n\t\t * //Multiple state change events can be chained together,\n\t\t * //but must be set in the correct order and with ascending times\n\t\t *\n\t\t * // OK\n\t\t * state.start().stop(\"+0.2\");\n\t\t * // AND\n\t\t * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n\t\t *\n\t\t * // BAD\n\t\t * state.stop(\"+0.2\").start();\n\t\t * // OR\n\t\t * state.start(\"+0.3\").stop(\"+0.2\");\n\t\t *\n\t\t */\n\t    Tone.Source = function (options) {\n\t        options = Tone.defaultArg(options, Tone.Source.defaults);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        /**\n\t\t\t * \tKeep track of the scheduled state.\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        this._state.memory = 10;\n\t        /**\n\t\t\t *  The synced `start` callback function from the transport\n\t\t\t *  @type {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._synced = false;\n\t        /**\n\t\t\t *  Keep track of all of the scheduled event ids\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scheduled = [];\n\t        //make the output explicitly stereo\n\t        this._volume.output.output.channelCount = 2;\n\t        this._volume.output.output.channelCountMode = 'explicit';\n\t        //mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.Source, Tone.AudioNode);\n\t    /**\n\t\t *  The default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Source.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Source#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Source.prototype, 'state', {\n\t        get: function () {\n\t            if (this._synced) {\n\t                if (Tone.Transport.state === Tone.State.Started) {\n\t                    return this._state.getValueAtTime(Tone.Transport.seconds);\n\t                } else {\n\t                    return Tone.State.Stopped;\n\t                }\n\t            } else {\n\t                return this._state.getValueAtTime(this.now());\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output.\n\t\t * @memberOf Tone.Source#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * source.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Source.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    //overwrite these functions\n\t    Tone.Source.prototype._start = Tone.noOp;\n\t    Tone.Source.prototype._stop = Tone.noOp;\n\t    /**\n\t\t *  Start the source at the specified time. If no time is given,\n\t\t *  start the source now.\n\t\t *  @param  {Time} [time=now] When the source should be started.\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t\t */\n\t    Tone.Source.prototype.start = function (time, offset, duration) {\n\t        if (Tone.isUndef(time) && this._synced) {\n\t            time = Tone.Transport.seconds;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        //if it's started, stop it and restart it\n\t        if (!this.retrigger && this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this.stop(time);\n\t        }\n\t        this._state.setStateAtTime(Tone.State.Started, time);\n\t        if (this._synced) {\n\t            // add the offset time to the event\n\t            var event = this._state.get(time);\n\t            event.offset = Tone.defaultArg(offset, 0);\n\t            event.duration = duration;\n\t            var sched = Tone.Transport.schedule(function (t) {\n\t                this._start(t, offset, duration);\n\t            }.bind(this), time);\n\t            this._scheduled.push(sched);\n\t        } else {\n\t            this._start.apply(this, arguments);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the source at the specified time. If no time is given,\n\t\t *  stop the source now.\n\t\t *  @param  {Time} [time=now] When the source should be stopped.\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * source.stop(); // stops the source immediately\n\t\t */\n\t    Tone.Source.prototype.stop = function (time) {\n\t        if (Tone.isUndef(time) && this._synced) {\n\t            time = Tone.Transport.seconds;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        if (!this._synced) {\n\t            this._stop.apply(this, arguments);\n\t        } else {\n\t            var sched = Tone.Transport.schedule(this._stop.bind(this), time);\n\t            this._scheduled.push(sched);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the source to the Transport so that all subsequent\n\t\t *  calls to `start` and `stop` are synced to the TransportTime\n\t\t *  instead of the AudioContext time.\n\t\t *\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t\t * source.sync().start(0).stop(0.3);\n\t\t * //start the transport.\n\t\t * Tone.Transport.start();\n\t\t *\n\t\t *  @example\n\t\t * //start the transport with an offset and the sync'ed sources\n\t\t * //will start in the correct position\n\t\t * source.sync().start(0.1);\n\t\t * //the source will be invoked with an offset of 0.4\n\t\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t\t */\n\t    Tone.Source.prototype.sync = function () {\n\t        this._synced = true;\n\t        this._syncedStart = function (time, offset) {\n\t            if (offset > 0) {\n\t                // get the playback state at that time\n\t                var stateEvent = this._state.get(offset);\n\t                // listen for start events which may occur in the middle of the sync'ed time\n\t                if (stateEvent && stateEvent.state === Tone.State.Started && stateEvent.time !== offset) {\n\t                    // get the offset\n\t                    var startOffset = offset - this.toSeconds(stateEvent.time);\n\t                    var duration;\n\t                    if (stateEvent.duration) {\n\t                        duration = this.toSeconds(stateEvent.duration) - startOffset;\n\t                    }\n\t                    this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t                }\n\t            }\n\t        }.bind(this);\n\t        this._syncedStop = function (time) {\n\t            if (this._state.getValueAtTime(Tone.Transport.seconds) === Tone.State.Started) {\n\t                this._stop(time);\n\t            }\n\t        }.bind(this);\n\t        Tone.Transport.on('start loopStart', this._syncedStart);\n\t        Tone.Transport.on('stop pause loopEnd', this._syncedStop);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t\t *  @returns {Tone.Source} this\n\t\t */\n\t    Tone.Source.prototype.unsync = function () {\n\t        if (this._synced) {\n\t            Tone.Transport.off('stop pause loopEnd', this._syncedStop);\n\t            Tone.Transport.off('start loopStart', this._syncedStart);\n\t        }\n\t        this._synced = false;\n\t        // clear all of the scheduled ids\n\t        for (var i = 0; i < this._scheduled.length; i++) {\n\t            var id = this._scheduled[i];\n\t            Tone.Transport.clear(id);\n\t        }\n\t        this._scheduled = [];\n\t        this._state.cancel(0);\n\t        return this;\n\t    };\n\t    /**\n\t\t *\tClean up.\n\t\t *  @return {Tone.Source} this\n\t\t */\n\t    Tone.Source.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.unsync();\n\t        this._scheduled = null;\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        this._state.dispose();\n\t        this._state = null;\n\t    };\n\t    return Tone.Source;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  OscillatorNode shim\n\t\t *  @private\n\t\t */\n\t    if (window.OscillatorNode && !OscillatorNode.prototype.start) {\n\t        OscillatorNode.prototype.start = OscillatorNode.prototype.noteOn;\n\t        OscillatorNode.prototype.stop = OscillatorNode.prototype.noteOff;\n\t        if (!OscillatorNode.prototype.setPeriodicWave) {\n\t            OscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;\n\t        }\n\t        if (!AudioContext.prototype.createPeriodicWave) {\n\t            AudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;\n\t        }\n\t    }\n\t    /**\n\t\t *  @class Tone.Oscillator supports a number of features including\n\t\t *         phase rotation, multiple oscillator types (see Tone.Oscillator.type),\n\t\t *         and Transport syncing (see Tone.Oscillator.syncFrequency).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {Frequency} [frequency] Starting frequency\n\t\t *  @param {string} [type] The oscillator type. Read more about type below.\n\t\t *  @example\n\t\t * //make and start a 440hz sine tone\n\t\t * var osc = new Tone.Oscillator(440, \"sine\").toMaster().start();\n\t\t */\n\t    Tone.Oscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.Oscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  the main oscillator\n\t\t\t *  @type {OscillatorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = null;\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  the periodic wave\n\t\t\t *  @type {PeriodicWave}\n\t\t\t *  @private\n\t\t\t */\n\t        this._wave = null;\n\t        /**\n\t\t\t *  The partials of the oscillator\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._partials = Tone.defaultArg(options.partials, [1]);\n\t        /**\n\t\t\t *  the phase of the oscillator\n\t\t\t *  between 0 - 360\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._phase = options.phase;\n\t        /**\n\t\t\t *  the type of the oscillator\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = null;\n\t        //setup\n\t        this.type = options.type;\n\t        this.phase = this._phase;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Oscillator, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Oscillator.defaults = {\n\t        'type': 'sine',\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'partials': []\n\t    };\n\t    /**\n\t\t *  The Oscillator types\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Oscillator.Type = {\n\t        Sine: 'sine',\n\t        Triangle: 'triangle',\n\t        Sawtooth: 'sawtooth',\n\t        Square: 'square',\n\t        Custom: 'custom'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._start = function (time) {\n\t        //new oscillator with previous values\n\t        this._oscillator = this.context.createOscillator();\n\t        this._oscillator.setPeriodicWave(this._wave);\n\t        //connect the control signal to the oscillator frequency & detune\n\t        this._oscillator.connect(this.output);\n\t        this.frequency.connect(this._oscillator.frequency);\n\t        this.detune.connect(this._oscillator.detune);\n\t        //start the oscillator\n\t        time = this.toSeconds(time);\n\t        Tone.isPast(time);\n\t        this._oscillator.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @private\n\t\t *  @param  {Time} [time=now] (optional) timing parameter\n\t\t *  @returns {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype._stop = function (time) {\n\t        if (this._oscillator) {\n\t            time = this.toSeconds(time);\n\t            Tone.isPast(time);\n\t            this._oscillator.stop(time);\n\t            this._oscillator = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t\t *  will also affect the oscillators frequency.\n\t\t *  @returns {Tone.Oscillator} this\n\t\t *  @example\n\t\t * Tone.Transport.bpm.value = 120;\n\t\t * osc.frequency.value = 440;\n\t\t * //the ration between the bpm and the frequency will be maintained\n\t\t * osc.syncFrequency();\n\t\t * Tone.Transport.bpm.value = 240;\n\t\t * // the frequency of the oscillator is doubled to 880\n\t\t */\n\t    Tone.Oscillator.prototype.syncFrequency = function () {\n\t        Tone.Transport.syncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsync the oscillator's frequency from the Transport.\n\t\t *  See Tone.Oscillator.syncFrequency\n\t\t *  @returns {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype.unsyncFrequency = function () {\n\t        Tone.Transport.unsyncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t\t * 8 partials of the triangle wave.\n\t\t * <br><br>\n\t\t * Uses PeriodicWave internally even for native types so that it can set the phase.\n\t\t * PeriodicWave equations are from the\n\t\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t\t *\n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * //set it to a square wave\n\t\t * osc.type = \"square\";\n\t\t * @example\n\t\t * //set the first 6 partials of a sawtooth wave\n\t\t * osc.type = \"sawtooth6\";\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            var coefs = this._getRealImaginary(type, this._phase);\n\t            var periodicWave = this.context.createPeriodicWave(coefs[0], coefs[1]);\n\t            this._wave = periodicWave;\n\t            if (this._oscillator !== null) {\n\t                this._oscillator.setPeriodicWave(this._wave);\n\t            }\n\t            this._type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Returns the real and imaginary components based\n\t\t *  on the oscillator type.\n\t\t *  @returns {Array} [real, imaginary]\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._getRealImaginary = function (type, phase) {\n\t        var fftSize = 4096;\n\t        var periodicWaveSize = fftSize / 2;\n\t        var real = new Float32Array(periodicWaveSize);\n\t        var imag = new Float32Array(periodicWaveSize);\n\t        var partialCount = 1;\n\t        if (type === Tone.Oscillator.Type.Custom) {\n\t            partialCount = this._partials.length + 1;\n\t            periodicWaveSize = partialCount;\n\t        } else {\n\t            var partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t            if (partial) {\n\t                partialCount = parseInt(partial[2]) + 1;\n\t                type = partial[1];\n\t                partialCount = Math.max(partialCount, 2);\n\t                periodicWaveSize = partialCount;\n\t            }\n\t        }\n\t        for (var n = 1; n < periodicWaveSize; ++n) {\n\t            var piFactor = 2 / (n * Math.PI);\n\t            var b;\n\t            switch (type) {\n\t            case Tone.Oscillator.Type.Sine:\n\t                b = n <= partialCount ? 1 : 0;\n\t                break;\n\t            case Tone.Oscillator.Type.Square:\n\t                b = n & 1 ? 2 * piFactor : 0;\n\t                break;\n\t            case Tone.Oscillator.Type.Sawtooth:\n\t                b = piFactor * (n & 1 ? 1 : -1);\n\t                break;\n\t            case Tone.Oscillator.Type.Triangle:\n\t                if (n & 1) {\n\t                    b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);\n\t                } else {\n\t                    b = 0;\n\t                }\n\t                break;\n\t            case Tone.Oscillator.Type.Custom:\n\t                b = this._partials[n - 1];\n\t                break;\n\t            default:\n\t                throw new TypeError('Tone.Oscillator: invalid type: ' + type);\n\t            }\n\t            if (b !== 0) {\n\t                real[n] = -b * Math.sin(phase * n);\n\t                imag[n] = b * Math.cos(phase * n);\n\t            } else {\n\t                real[n] = 0;\n\t                imag[n] = 0;\n\t            }\n\t        }\n\t        return [\n\t            real,\n\t            imag\n\t        ];\n\t    };\n\t    /**\n\t\t *  Compute the inverse FFT for a given phase.\n\t\t *  @param  {Float32Array}  real\n\t\t *  @param  {Float32Array}  imag\n\t\t *  @param  {NormalRange}  phase\n\t\t *  @return  {AudioRange}\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._inverseFFT = function (real, imag, phase) {\n\t        var sum = 0;\n\t        var len = real.length;\n\t        for (var i = 0; i < len; i++) {\n\t            sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t        }\n\t        return sum;\n\t    };\n\t    /**\n\t\t *  Returns the initial value of the oscillator.\n\t\t *  @return  {AudioRange}\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._getInitialValue = function () {\n\t        var coefs = this._getRealImaginary(this._type, 0);\n\t        var real = coefs[0];\n\t        var imag = coefs[1];\n\t        var maxValue = 0;\n\t        var twoPi = Math.PI * 2;\n\t        //check for peaks in 8 places\n\t        for (var i = 0; i < 8; i++) {\n\t            maxValue = Math.max(this._inverseFFT(real, imag, i / 8 * twoPi), maxValue);\n\t        }\n\t        return -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t    };\n\t    /**\n\t\t * The partials of the waveform. A partial represents\n\t\t * the amplitude at a harmonic. The first harmonic is the\n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series.\n\t\t * Setting this value will automatically set the type to \"custom\".\n\t\t * The value is an empty array when the type is not \"custom\".\n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'partials', {\n\t        get: function () {\n\t            if (this._type !== Tone.Oscillator.Type.Custom) {\n\t                return [];\n\t            } else {\n\t                return this._partials;\n\t            }\n\t        },\n\t        set: function (partials) {\n\t            this._partials = partials;\n\t            this.type = Tone.Oscillator.Type.Custom;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t * @example\n\t\t * osc.phase = 180; //flips the phase of the oscillator\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._phase * (180 / Math.PI);\n\t        },\n\t        set: function (phase) {\n\t            this._phase = phase * Math.PI / 180;\n\t            //reset the type\n\t            this.type = this._type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._oscillator !== null) {\n\t            this._oscillator.disconnect();\n\t            this._oscillator = null;\n\t        }\n\t        this._wave = null;\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this._partials = null;\n\t        return this;\n\t    };\n\t    return Tone.Oscillator;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be\n\t\t *         it's own class is that many browsers optimize out Tone.Signal\n\t\t *         with a value of 0 and will not process nodes further down the graph.\n\t\t *  @extends {Tone.SignalBase}\n\t\t */\n\t    Tone.Zero = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  The gain node\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = this.input = this.output = new Tone.Gain();\n\t        this.context.getConstant(0).connect(this._gain);\n\t    };\n\t    Tone.extend(Tone.Zero, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @return  {Tone.Zero}  this\n\t\t */\n\t    Tone.Zero.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._gain.dispose();\n\t        this._gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Zero;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  LFO stands for low frequency oscillator. Tone.LFO produces an output signal\n\t\t *          which can be attached to an AudioParam or Tone.Signal\n\t\t *          in order to modulate that parameter with an oscillator. The LFO can\n\t\t *          also be synced to the transport to start/stop and change when the tempo changes.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Frequency|Object} [frequency] The frequency of the oscillation. Typically, LFOs will be\n\t\t *                               in the frequency range of 0.1 to 10 hertz.\n\t\t *  @param {number=} min The minimum output value of the LFO.\n\t\t *  @param {number=} max The maximum value of the LFO.\n\t\t *  @example\n\t\t * var lfo = new Tone.LFO(\"4n\", 400, 4000);\n\t\t * lfo.connect(filter.frequency);\n\t\t */\n\t    Tone.LFO = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'min',\n\t            'max'\n\t        ], Tone.LFO);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = new Tone.Oscillator({\n\t            'frequency': options.frequency,\n\t            'type': options.type\n\t        });\n\t        /**\n\t\t\t *  the lfo's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._oscillator.frequency;\n\t        /**\n\t\t\t * The amplitude of the LFO, which controls the output range between\n\t\t\t * the min and max output. For example if the min is -10 and the max\n\t\t\t * is 10, setting the amplitude to 0.5 would make the LFO modulate\n\t\t\t * between -5 and 5.\n\t\t\t * @type {Number}\n\t\t\t * @signal\n\t\t\t */\n\t        this.amplitude = this._oscillator.volume;\n\t        this.amplitude.units = Tone.Type.NormalRange;\n\t        this.amplitude.value = options.amplitude;\n\t        /**\n\t\t\t *  The signal which is output when the LFO is stopped\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stoppedSignal = new Tone.Signal(0, Tone.Type.AudioRange);\n\t        /**\n\t\t\t *  Just outputs zeros.\n\t\t\t *  @type {Tone.Zero}\n\t\t\t *  @private\n\t\t\t */\n\t        this._zeros = new Tone.Zero();\n\t        /**\n\t\t\t *  The value that the LFO outputs when it's stopped\n\t\t\t *  @type {AudioRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stoppedValue = 0;\n\t        /**\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._a2g = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scaler = this.output = new Tone.Scale(options.min, options.max);\n\t        /**\n\t\t\t *  the units of the LFO (used for converting)\n\t\t\t *  @type {Tone.Type}\n\t\t\t *  @private\n\t\t\t */\n\t        this._units = Tone.Type.Default;\n\t        this.units = options.units;\n\t        //connect it up\n\t        this._oscillator.chain(this._a2g, this._scaler);\n\t        this._zeros.connect(this._a2g);\n\t        this._stoppedSignal.connect(this._a2g);\n\t        this._readOnly([\n\t            'amplitude',\n\t            'frequency'\n\t        ]);\n\t        this.phase = options.phase;\n\t    };\n\t    Tone.extend(Tone.LFO, Tone.AudioNode);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.LFO.defaults = {\n\t        'type': 'sine',\n\t        'min': 0,\n\t        'max': 1,\n\t        'phase': 0,\n\t        'frequency': '4n',\n\t        'amplitude': 1,\n\t        'units': Tone.Type.Default\n\t    };\n\t    /**\n\t\t *  Start the LFO.\n\t\t *  @param  {Time} [time=now] the time the LFO will start\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._stoppedSignal.setValueAtTime(0, time);\n\t        this._oscillator.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the LFO.\n\t\t *  @param  {Time} [time=now] the time the LFO will stop\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\t        this._oscillator.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the start/stop/pause to the transport\n\t\t *  and the frequency to the bpm of the transport\n\t\t *  @returns {Tone.LFO} this\n\t\t *  @example\n\t\t *  lfo.frequency.value = \"8n\";\n\t\t *  lfo.sync().start(0)\n\t\t *  //the rate of the LFO will always be an eighth note,\n\t\t *  //even as the tempo changes\n\t\t */\n\t    Tone.LFO.prototype.sync = function () {\n\t        this._oscillator.sync();\n\t        this._oscillator.syncFrequency();\n\t        return this;\n\t    };\n\t    /**\n\t\t *  unsync the LFO from transport control\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.unsync = function () {\n\t        this._oscillator.unsync();\n\t        this._oscillator.unsyncFrequency();\n\t        return this;\n\t    };\n\t    /**\n\t\t * The miniumum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'min', {\n\t        get: function () {\n\t            return this._toUnits(this._scaler.min);\n\t        },\n\t        set: function (min) {\n\t            min = this._fromUnits(min);\n\t            this._scaler.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'max', {\n\t        get: function () {\n\t            return this._toUnits(this._scaler.max);\n\t        },\n\t        set: function (max) {\n\t            max = this._fromUnits(max);\n\t            this._scaler.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the oscillator: sine, square, sawtooth, triangle.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'type', {\n\t        get: function () {\n\t            return this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            this._oscillator.type = type;\n\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t            this._stoppedSignal.value = this._stoppedValue;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'phase', {\n\t        get: function () {\n\t            return this._oscillator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._oscillator.phase = phase;\n\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t            this._stoppedSignal.value = this._stoppedValue;\n\t        }\n\t    });\n\t    /**\n\t\t * The output units of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {Tone.Type}\n\t\t * @name units\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'units', {\n\t        get: function () {\n\t            return this._units;\n\t        },\n\t        set: function (val) {\n\t            var currentMin = this.min;\n\t            var currentMax = this.max;\n\t            //convert the min and the max\n\t            this._units = val;\n\t            this.min = currentMin;\n\t            this.max = currentMax;\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {Boolean}\n\t\t * @name mute\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'mute', {\n\t        get: function () {\n\t            return this._oscillator.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._oscillator.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.LFO#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'state', {\n\t        get: function () {\n\t            return this._oscillator.state;\n\t        }\n\t    });\n\t    /**\n\t\t *  Connect the output of the LFO to an AudioParam, AudioNode, or Tone Node.\n\t\t *  Tone.LFO will automatically convert to the destination units of the\n\t\t *  will get the units from the connected node.\n\t\t *  @param  {Tone | AudioParam | AudioNode} node\n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone.LFO} this\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype.connect = function (node) {\n\t        if (node.constructor === Tone.Signal || node.constructor === Tone.Param || node.constructor === Tone.TimelineSignal) {\n\t            this.convert = node.convert;\n\t            this.units = node.units;\n\t        }\n\t        Tone.Signal.prototype.connect.apply(this, arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  private method borrowed from Param converts\n\t\t *  units from their destination value\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype._fromUnits = Tone.Param.prototype._fromUnits;\n\t    /**\n\t\t *  private method borrowed from Param converts\n\t\t *  units to their destination value\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype._toUnits = Tone.Param.prototype._toUnits;\n\t    /**\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'amplitude',\n\t            'frequency'\n\t        ]);\n\t        this._oscillator.dispose();\n\t        this._oscillator = null;\n\t        this._stoppedSignal.dispose();\n\t        this._stoppedSignal = null;\n\t        this._zeros.dispose();\n\t        this._zeros = null;\n\t        this._scaler.dispose();\n\t        this._scaler = null;\n\t        this._a2g.dispose();\n\t        this._a2g = null;\n\t        this.frequency = null;\n\t        this.amplitude = null;\n\t        return this;\n\t    };\n\t    return Tone.LFO;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Limiter will limit the loudness of an incoming signal.\n\t\t *         It is composed of a Tone.Compressor with a fast attack\n\t\t *         and release. Limiters are commonly used to safeguard against\n\t\t *         signal clipping. Unlike a compressor, limiters do not provide\n\t\t *         smooth gain reduction and almost completely prevent\n\t\t *         additional gain above the threshold.\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {number} threshold The theshold above which the limiting is applied.\n\t\t *  @example\n\t\t *  var limiter = new Tone.Limiter(-6);\n\t\t */\n\t    Tone.Limiter = function () {\n\t        var options = Tone.defaults(arguments, ['threshold'], Tone.Limiter);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  the compressor\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this._compressor = this.input = this.output = new Tone.Compressor({\n\t            'attack': 0.001,\n\t            'decay': 0.001,\n\t            'threshold': options.threshold\n\t        });\n\t        /**\n\t\t\t * The threshold of of the limiter\n\t\t\t * @type {Decibel}\n\t\t\t * @signal\n\t\t\t */\n\t        this.threshold = this._compressor.threshold;\n\t        this._readOnly('threshold');\n\t    };\n\t    Tone.extend(Tone.Limiter, Tone.AudioNode);\n\t    /**\n\t\t *  The default value\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Limiter.defaults = { 'threshold': -12 };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Limiter} this\n\t\t */\n\t    Tone.Limiter.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._compressor.dispose();\n\t        this._compressor = null;\n\t        this._writable('threshold');\n\t        this.threshold = null;\n\t        return this;\n\t    };\n\t    return Tone.Limiter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Lowpass is a lowpass feedback comb filter. It is similar to\n\t\t *         Tone.FeedbackCombFilter, but includes a lowpass filter.\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [delayTime] The delay time of the comb filter\n\t\t *  @param {NormalRange=} resonance The resonance (feedback) of the comb filter\n\t\t *  @param {Frequency=} dampening The cutoff of the lowpass filter dampens the\n\t\t *                                signal as it is fedback.\n\t\t */\n\t    Tone.LowpassCombFilter = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'delayTime',\n\t            'resonance',\n\t            'dampening'\n\t        ], Tone.LowpassCombFilter);\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = this.input = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The delayTime of the comb filter.\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delay.delayTime;\n\t        /**\n\t\t\t *  the lowpass filter\n\t\t\t *  @type  {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowpass = this.output = this.context.createBiquadFilter();\n\t        this._lowpass.Q.value = -3.0102999566398125;\n\t        this._lowpass.type = 'lowpass';\n\t        /**\n\t\t\t *  The dampening control of the feedback\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = new Tone.Param({\n\t            'param': this._lowpass.frequency,\n\t            'units': Tone.Type.Frequency,\n\t            'value': options.dampening\n\t        });\n\t        /**\n\t\t\t *  the feedback gain\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of feedback of the delayed signal.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._feedback.gain;\n\t        //connections\n\t        this._delay.chain(this._lowpass, this._feedback, this._delay);\n\t        this._readOnly([\n\t            'dampening',\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.LowpassCombFilter, Tone.AudioNode);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.LowpassCombFilter.defaults = {\n\t        'delayTime': 0.1,\n\t        'resonance': 0.5,\n\t        'dampening': 3000\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.LowpassCombFilter} this\n\t\t */\n\t    Tone.LowpassCombFilter.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'dampening',\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t        this.dampening.dispose();\n\t        this.dampening = null;\n\t        this.resonance.dispose();\n\t        this.resonance = null;\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this.delayTime = null;\n\t        this._lowpass.disconnect();\n\t        this._lowpass = null;\n\t        this._feedback.disconnect();\n\t        this._feedback = null;\n\t        return this;\n\t    };\n\t    return Tone.LowpassCombFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Merge brings two signals into the left and right\n\t\t *          channels of a single stereo channel.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @example\n\t\t * var merge = new Tone.Merge().toMaster();\n\t\t * //routing a sine tone in the left channel\n\t\t * //and noise in the right channel\n\t\t * var osc = new Tone.Oscillator().connect(merge.left);\n\t\t * var noise = new Tone.Noise().connect(merge.right);\n\t\t * //starting our oscillators\n\t\t * noise.start();\n\t\t * osc.start();\n\t\t */\n\t    Tone.Merge = function () {\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  The left input channel.\n\t\t\t *  Alias for <code>input[0]</code>\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t        this.left = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  The right input channel.\n\t\t\t *  Alias for <code>input[1]</code>.\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t        this.right = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t *  the merger node for the two channels\n\t\t\t *  @type {ChannelMergerNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merger = this.output = this.context.createChannelMerger(2);\n\t        //connections\n\t        this.left.connect(this._merger, 0, 0);\n\t        this.right.connect(this._merger, 0, 1);\n\t        this.left.channelCount = 1;\n\t        this.right.channelCount = 1;\n\t        this.left.channelCountMode = 'explicit';\n\t        this.right.channelCountMode = 'explicit';\n\t    };\n\t    Tone.extend(Tone.Merge, Tone.AudioNode);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Merge} this\n\t\t */\n\t    Tone.Merge.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.left.dispose();\n\t        this.left = null;\n\t        this.right.dispose();\n\t        this.right = null;\n\t        this._merger.disconnect();\n\t        this._merger = null;\n\t        return this;\n\t    };\n\t    return Tone.Merge;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n\t\t *          of an input signal with some averaging applied. It can also get the raw\n\t\t *          value of the input signal.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Number} smoothing The amount of smoothing applied between frames.\n\t\t *  @example\n\t\t * var meter = new Tone.Meter();\n\t\t * var mic = new Tone.UserMedia().open();\n\t\t * //connect mic to the meter\n\t\t * mic.connect(meter);\n\t\t * //the current level of the mic input in decibels\n\t\t * var level = meter.getValue();\n\t\t */\n\t    Tone.Meter = function () {\n\t        var options = Tone.defaults(arguments, ['smoothing'], Tone.Meter);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The analyser node which computes the levels.\n\t\t\t *  @private\n\t\t\t *  @type  {Tone.Analyser}\n\t\t\t */\n\t        this.input = this.output = this._analyser = new Tone.Analyser('waveform', 1024);\n\t        /**\n\t\t\t *  The amount of carryover between the current and last frame.\n\t\t\t *  Only applied meter for \"level\" type.\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.smoothing = options.smoothing;\n\t    };\n\t    Tone.extend(Tone.Meter, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Meter.defaults = { 'smoothing': 0.8 };\n\t    /**\n\t\t *  Get the current decibel value of the incoming signal\n\t\t *  @returns {Decibels}\n\t\t */\n\t    Tone.Meter.prototype.getLevel = function () {\n\t        this._analyser.type = 'fft';\n\t        var values = this._analyser.getValue();\n\t        var offset = 28;\n\t        // normalizes most signal levels\n\t        // TODO: compute loudness from FFT\n\t        return Math.max.apply(this, values) + offset;\n\t    };\n\t    /**\n\t\t *  Get the signal value of the incoming signal\n\t\t *  @returns {Number}\n\t\t */\n\t    Tone.Meter.prototype.getValue = function () {\n\t        this._analyser.type = 'waveform';\n\t        var value = this._analyser.getValue();\n\t        return value[0];\n\t    };\n\t    /**\n\t\t * A value from 0 -> 1 where 0 represents no time averaging with the last analysis frame.\n\t\t * @memberOf Tone.Meter#\n\t\t * @type {Number}\n\t\t * @name smoothing\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Meter.prototype, 'smoothing', {\n\t        get: function () {\n\t            return this._analyser.smoothing;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.smoothing = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Meter} this\n\t\t */\n\t    Tone.Meter.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._analyser.dispose();\n\t        this._analyser = null;\n\t        return this;\n\t    };\n\t    return Tone.Meter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *\t@class  Tone.Split splits an incoming signal into left and right channels.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @example\n\t\t * var split = new Tone.Split();\n\t\t * stereoSignal.connect(split);\n\t\t */\n\t    Tone.Split = function () {\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(0, 2);\n\t        /**\n\t\t\t *  @type {ChannelSplitterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._splitter = this.input = this.context.createChannelSplitter(2);\n\t        this._splitter.channelCount = 2;\n\t        this._splitter.channelCountMode = 'explicit';\n\t        /**\n\t\t\t *  Left channel output.\n\t\t\t *  Alias for <code>output[0]</code>\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.left = this.output[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  Right channel output.\n\t\t\t *  Alias for <code>output[1]</code>\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.right = this.output[1] = new Tone.Gain();\n\t        //connections\n\t        this._splitter.connect(this.left, 0, 0);\n\t        this._splitter.connect(this.right, 1, 0);\n\t    };\n\t    Tone.extend(Tone.Split, Tone.AudioNode);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Split} this\n\t\t */\n\t    Tone.Split.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._splitter.disconnect();\n\t        this.left.dispose();\n\t        this.left = null;\n\t        this.right.dispose();\n\t        this.right = null;\n\t        this._splitter = null;\n\t        return this;\n\t    };\n\t    return Tone.Split;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal\n\t\t *         (which comes out of both the left and the right channel)\n\t\t *         and the 'side' (which only comes out of the the side channels). <br><br>\n\t\t *         <code>\n\t\t *         Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>\n\t\t *         Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideSplit = function () {\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(0, 2);\n\t        /**\n\t\t\t *  split the incoming signal into left and right channels\n\t\t\t *  @type  {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t        this._split = this.input = new Tone.Split();\n\t        /**\n\t\t\t *  The mid send. Connect to mid processing. Alias for\n\t\t\t *  <code>output[0]</code>\n\t\t\t *  @type {Tone.Expr}\n\t\t\t */\n\t        this.mid = this.output[0] = new Tone.Expr('($0 + $1) * $2');\n\t        /**\n\t\t\t *  The side output. Connect to side processing. Alias for\n\t\t\t *  <code>output[1]</code>\n\t\t\t *  @type {Tone.Expr}\n\t\t\t */\n\t        this.side = this.output[1] = new Tone.Expr('($0 - $1) * $2');\n\t        this._split.connect(this.mid, 0, 0);\n\t        this._split.connect(this.mid, 1, 1);\n\t        this._split.connect(this.side, 0, 0);\n\t        this._split.connect(this.side, 1, 1);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this.mid, 0, 2);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this.side, 0, 2);\n\t    };\n\t    Tone.extend(Tone.MidSideSplit, Tone.AudioNode);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideSplit} this\n\t\t */\n\t    Tone.MidSideSplit.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._split.dispose();\n\t        this._split = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideSplit;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal\n\t\t *         (which comes out of both the left and the right channel)\n\t\t *         and the 'side' (which only comes out of the the side channels).\n\t\t *         MidSideMerge merges the mid and side signal after they've been seperated\n\t\t *         by Tone.MidSideSplit.<br><br>\n\t\t *         <code>\n\t\t *         Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>\n\t\t *         Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideMerge = function () {\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  The mid signal input. Alias for\n\t\t\t *  <code>input[0]</code>\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.mid = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  recombine the mid/side into Left\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._left = new Tone.Expr('($0 + $1) * $2');\n\t        /**\n\t\t\t *  The side signal input. Alias for\n\t\t\t *  <code>input[1]</code>\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.side = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t *  recombine the mid/side into Right\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._right = new Tone.Expr('($0 - $1) * $2');\n\t        /**\n\t\t\t *  Merge the left/right signal back into a stereo signal.\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = this.output = new Tone.Merge();\n\t        this.mid.connect(this._left, 0, 0);\n\t        this.side.connect(this._left, 0, 1);\n\t        this.mid.connect(this._right, 0, 0);\n\t        this.side.connect(this._right, 0, 1);\n\t        this._left.connect(this._merge, 0, 0);\n\t        this._right.connect(this._merge, 0, 1);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this._left, 0, 2);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this._right, 0, 2);\n\t    };\n\t    Tone.extend(Tone.MidSideMerge, Tone.AudioNode);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideMerge} this\n\t\t */\n\t    Tone.MidSideMerge.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._left.dispose();\n\t        this._left = null;\n\t        this._right.dispose();\n\t        this._right = null;\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideMerge;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.MidSideCompressor applies two different compressors to the mid\n\t\t *         and side signal components. See Tone.MidSideSplit.\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Object} options The options that are passed to the mid and side\n\t\t *                          compressors.\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideCompressor = function (options) {\n\t        Tone.AudioNode.call(this);\n\t        options = Tone.defaultArg(options, Tone.MidSideCompressor.defaults);\n\t        /**\n\t\t\t *  the mid/side split\n\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideSplit = this.input = new Tone.MidSideSplit();\n\t        /**\n\t\t\t *  the mid/side recombination\n\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideMerge = this.output = new Tone.MidSideMerge();\n\t        /**\n\t\t\t *  The compressor applied to the mid signal\n\t\t\t *  @type  {Tone.Compressor}\n\t\t\t */\n\t        this.mid = new Tone.Compressor(options.mid);\n\t        /**\n\t\t\t *  The compressor applied to the side signal\n\t\t\t *  @type  {Tone.Compressor}\n\t\t\t */\n\t        this.side = new Tone.Compressor(options.side);\n\t        this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n\t        this._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n\t        this._readOnly([\n\t            'mid',\n\t            'side'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MidSideCompressor, Tone.AudioNode);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MidSideCompressor.defaults = {\n\t        'mid': {\n\t            'ratio': 3,\n\t            'threshold': -24,\n\t            'release': 0.03,\n\t            'attack': 0.02,\n\t            'knee': 16\n\t        },\n\t        'side': {\n\t            'ratio': 6,\n\t            'threshold': -30,\n\t            'release': 0.25,\n\t            'attack': 0.03,\n\t            'knee': 10\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MidSideCompressor} this\n\t\t */\n\t    Tone.MidSideCompressor.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'mid',\n\t            'side'\n\t        ]);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._midSideSplit.dispose();\n\t        this._midSideSplit = null;\n\t        this._midSideMerge.dispose();\n\t        this._midSideMerge = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideCompressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Mono coerces the incoming mono or stereo signal into a mono signal\n\t\t *         where both left and right channels have the same value. This can be useful\n\t\t *         for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t */\n\t    Tone.Mono = function () {\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(1, 0);\n\t        /**\n\t\t\t *  merge the signal\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = this.output = new Tone.Merge();\n\t        this.input.connect(this._merge, 0, 0);\n\t        this.input.connect(this._merge, 0, 1);\n\t        this.input.gain.value = Tone.dbToGain(-10);\n\t    };\n\t    Tone.extend(Tone.Mono);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Mono} this\n\t\t */\n\t    Tone.Mono.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        return this;\n\t    };\n\t    return Tone.Mono;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A compressor with seperate controls over low/mid/high dynamics\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {Object} options The low/mid/high compressor settings.\n\t\t *  @example\n\t\t *  var multiband = new Tone.MultibandCompressor({\n\t\t *  \t\"lowFrequency\" : 200,\n\t\t *  \t\"highFrequency\" : 1300\n\t\t *  \t\"low\" : {\n\t\t *  \t\t\"threshold\" : -12\n\t\t *  \t}\n\t\t *  })\n\t\t */\n\t    Tone.MultibandCompressor = function (options) {\n\t        Tone.AudioNode.call(this);\n\t        options = Tone.defaultArg(arguments, Tone.MultibandCompressor.defaults);\n\t        /**\n\t\t\t *  split the incoming signal into high/mid/low\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._splitter = this.input = new Tone.MultibandSplit({\n\t            'lowFrequency': options.lowFrequency,\n\t            'highFrequency': options.highFrequency\n\t        });\n\t        /**\n\t\t\t *  low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = this._splitter.lowFrequency;\n\t        /**\n\t\t\t *  mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = this._splitter.highFrequency;\n\t        /**\n\t\t\t *  the output\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  The compressor applied to the low frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.low = new Tone.Compressor(options.low);\n\t        /**\n\t\t\t *  The compressor applied to the mid frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.mid = new Tone.Compressor(options.mid);\n\t        /**\n\t\t\t *  The compressor applied to the high frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.high = new Tone.Compressor(options.high);\n\t        //connect the compressor\n\t        this._splitter.low.chain(this.low, this.output);\n\t        this._splitter.mid.chain(this.mid, this.output);\n\t        this._splitter.high.chain(this.high, this.output);\n\t        this._readOnly([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MultibandCompressor, Tone.AudioNode);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MultibandCompressor.defaults = {\n\t        'low': Tone.Compressor.defaults,\n\t        'mid': Tone.Compressor.defaults,\n\t        'high': Tone.Compressor.defaults,\n\t        'lowFrequency': 250,\n\t        'highFrequency': 2000\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MultibandCompressor} this\n\t\t */\n\t    Tone.MultibandCompressor.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._splitter.dispose();\n\t        this._writable([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t        this.low.dispose();\n\t        this.mid.dispose();\n\t        this.high.dispose();\n\t        this._splitter = null;\n\t        this.low = null;\n\t        this.mid = null;\n\t        this.high = null;\n\t        this.lowFrequency = null;\n\t        this.highFrequency = null;\n\t        return this;\n\t    };\n\t    return Tone.MultibandCompressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Panner is an equal power Left/Right Panner and does not\n\t\t *          support 3D. Panner uses the StereoPannerNode when available.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {NormalRange} [initialPan=0] The initail panner value (center).\n\t\t *  @example\n\t\t *  //pan the input signal hard right.\n\t\t *  var panner = new Tone.Panner(1);\n\t\t */\n\t    Tone.Panner = function (initialPan) {\n\t        Tone.AudioNode.call(this);\n\t        if (Tone.Panner.hasStereoPanner) {\n\t            /**\n\t\t\t\t *  the panner node\n\t\t\t\t *  @type {StereoPannerNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._panner = this.input = this.output = this.context.createStereoPanner();\n\t            /**\n\t\t\t\t *  The pan control. -1 = hard left, 1 = hard right.\n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t            this.pan = this._panner.pan;\n\t        } else {\n\t            /**\n\t\t\t\t *  the dry/wet knob\n\t\t\t\t *  @type {Tone.CrossFade}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._crossFade = new Tone.CrossFade();\n\t            /**\n\t\t\t\t *  @type {Tone.Merge}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._merger = this.output = new Tone.Merge();\n\t            /**\n\t\t\t\t *  @type {Tone.Split}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._splitter = this.input = new Tone.Split();\n\t            /**\n\t\t\t\t *  The pan control. -1 = hard left, 1 = hard right.\n\t\t\t\t *  @type {AudioRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t            this.pan = new Tone.Signal(0, Tone.Type.AudioRange);\n\t            /**\n\t\t\t\t *  always sends 0\n\t\t\t\t *  @type {Tone.Zero}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._zero = new Tone.Zero();\n\t            /**\n\t\t\t\t *  The analog to gain conversion\n\t\t\t\t *  @type  {Tone.AudioToGain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._a2g = new Tone.AudioToGain();\n\t            //CONNECTIONS:\n\t            this._zero.connect(this._a2g);\n\t            this.pan.chain(this._a2g, this._crossFade.fade);\n\t            //left channel is a, right channel is b\n\t            this._splitter.connect(this._crossFade, 0, 0);\n\t            this._splitter.connect(this._crossFade, 1, 1);\n\t            //merge it back together\n\t            this._crossFade.a.connect(this._merger, 0, 0);\n\t            this._crossFade.b.connect(this._merger, 0, 1);\n\t        }\n\t        //initial value\n\t        this.pan.value = Tone.defaultArg(initialPan, 0);\n\t        this._readOnly('pan');\n\t    };\n\t    Tone.extend(Tone.Panner, Tone.AudioNode);\n\t    /**\n\t\t *  Indicates if the panner is using the new StereoPannerNode internally\n\t\t *  @type  {Boolean}\n\t\t *  @static\n\t\t *  @private\n\t\t *  @readOnly\n\t\t */\n\t    Tone.Panner.hasStereoPanner = Tone.context && Tone.isFunction(Tone.context.createStereoPanner);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Panner} this\n\t\t */\n\t    Tone.Panner.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable('pan');\n\t        if (Tone.Panner.hasStereoPanner) {\n\t            this._panner.disconnect();\n\t            this._panner = null;\n\t            this.pan = null;\n\t        } else {\n\t            this._zero.dispose();\n\t            this._zero = null;\n\t            this._crossFade.dispose();\n\t            this._crossFade = null;\n\t            this._splitter.dispose();\n\t            this._splitter = null;\n\t            this._merger.dispose();\n\t            this._merger = null;\n\t            this.pan.dispose();\n\t            this.pan = null;\n\t            this._a2g.dispose();\n\t            this._a2g = null;\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Panner;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A spatialized panner node which supports equalpower or HRTF panning.\n\t\t *          Tries to normalize the API across various browsers. See Tone.Listener\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Number} positionX The initial x position.\n\t\t *  @param {Number} positionY The initial y position.\n\t\t *  @param {Number} positionZ The initial z position.\n\t\t */\n\t    Tone.Panner3D = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'positionX',\n\t            'positionY',\n\t            'positionZ'\n\t        ], Tone.Panner3D);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The panner node\n\t\t\t *  @type {PannerNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = this.input = this.output = this.context.createPanner();\n\t        //set some values\n\t        this._panner.panningModel = options.panningModel;\n\t        this._panner.maxDistance = options.maxDistance;\n\t        this._panner.distanceModel = options.distanceModel;\n\t        this._panner.coneOuterGain = options.coneOuterGain;\n\t        this._panner.coneOuterAngle = options.coneOuterAngle;\n\t        this._panner.coneInnerAngle = options.coneInnerAngle;\n\t        this._panner.refDistance = options.refDistance;\n\t        this._panner.rolloffFactor = options.rolloffFactor;\n\t        /**\n\t\t\t *  Holds the current orientation\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._orientation = [\n\t            options.orientationX,\n\t            options.orientationY,\n\t            options.orientationZ\n\t        ];\n\t        /**\n\t\t\t *  Holds the current position\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._position = [\n\t            options.positionX,\n\t            options.positionY,\n\t            options.positionZ\n\t        ];\n\t        // set the default position/orientation\n\t        this.orientationX = options.orientationX;\n\t        this.orientationY = options.orientationY;\n\t        this.orientationZ = options.orientationZ;\n\t        this.positionX = options.positionX;\n\t        this.positionY = options.positionY;\n\t        this.positionZ = options.positionZ;\n\t    };\n\t    Tone.extend(Tone.Panner3D, Tone.AudioNode);\n\t    /**\n\t\t *  Defaults according to the specification\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Panner3D.defaults = {\n\t        'positionX': 0,\n\t        'positionY': 0,\n\t        'positionZ': 0,\n\t        'orientationX': 0,\n\t        'orientationY': 0,\n\t        'orientationZ': 0,\n\t        'panningModel': 'equalpower',\n\t        'maxDistance': 10000,\n\t        'distanceModel': 'inverse',\n\t        'coneOuterGain': 0,\n\t        'coneOuterAngle': 360,\n\t        'coneInnerAngle': 360,\n\t        'refDistance': 1,\n\t        'rolloffFactor': 1\n\t    };\n\t    /**\n\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.Panner3D.prototype._rampTimeConstant = 0.01;\n\t    /**\n\t\t *  Sets the position of the source in 3d space.\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.setPosition = function (x, y, z) {\n\t        if (this._panner.positionX) {\n\t            var now = this.now();\n\t            this._panner.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this._panner.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this._panner.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this._panner.setPosition(x, y, z);\n\t        }\n\t        this._position = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the orientation of the source in 3d space.\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.setOrientation = function (x, y, z) {\n\t        if (this._panner.orientationX) {\n\t            var now = this.now();\n\t            this._panner.orientationX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this._panner.orientationY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this._panner.orientationZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this._panner.setOrientation(x, y, z);\n\t        }\n\t        this._orientation = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The x position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionX\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionX', {\n\t        set: function (pos) {\n\t            this._position[0] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionY\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionY', {\n\t        set: function (pos) {\n\t            this._position[1] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionZ\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionZ', {\n\t        set: function (pos) {\n\t            this._position[2] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationX\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationX', {\n\t        set: function (pos) {\n\t            this._orientation[0] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationY\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationY', {\n\t        set: function (pos) {\n\t            this._orientation[1] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationZ\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationZ', {\n\t        set: function (pos) {\n\t            this._orientation[2] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  Proxy a property on the panner to an exposed public propery\n\t\t *  @param  {String}  prop\n\t\t *  @private\n\t\t */\n\t    Tone.Panner3D._aliasProperty = function (prop) {\n\t        Object.defineProperty(Tone.Panner3D.prototype, prop, {\n\t            set: function (val) {\n\t                this._panner[prop] = val;\n\t            },\n\t            get: function () {\n\t                return this._panner[prop];\n\t            }\n\t        });\n\t    };\n\t    /**\n\t\t *  The panning model. Either \"equalpower\" or \"HRTF\".\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name panningModel\n\t\t */\n\t    Tone.Panner3D._aliasProperty('panningModel');\n\t    /**\n\t\t *  A reference distance for reducing volume as source move further from the listener\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name refDistance\n\t\t */\n\t    Tone.Panner3D._aliasProperty('refDistance');\n\t    /**\n\t\t *  Describes how quickly the volume is reduced as source moves away from listener.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name rolloffFactor\n\t\t */\n\t    Tone.Panner3D._aliasProperty('rolloffFactor');\n\t    /**\n\t\t *  The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name distanceModel\n\t\t */\n\t    Tone.Panner3D._aliasProperty('distanceModel');\n\t    /**\n\t\t *  The angle, in degrees, inside of which there will be no volume reduction\n\t\t *  @type {Degrees}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneInnerAngle\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneInnerAngle');\n\t    /**\n\t\t *  The angle, in degrees, outside of which the volume will be reduced\n\t\t *  to a constant value of coneOuterGain\n\t\t *  @type {Degrees}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneOuterAngle\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneOuterAngle');\n\t    /**\n\t\t *  The gain outside of the coneOuterAngle\n\t\t *  @type {Gain}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneOuterGain\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneOuterGain');\n\t    /**\n\t\t *  The maximum distance between source and listener,\n\t\t *  after which the volume will not be reduced any further.\n\t\t *  @type {Positive}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name maxDistance\n\t\t */\n\t    Tone.Panner3D._aliasProperty('maxDistance');\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._panner.disconnect();\n\t        this._panner = null;\n\t        this._orientation = null;\n\t        this._position = null;\n\t        return this;\n\t    };\n\t    return Tone.Panner3D;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PanVol is a Tone.Panner and Tone.Volume in one.\n\t\t *\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @constructor\n\t\t *  @param {AudioRange} pan the initial pan\n\t\t *  @param {number} volume The output volume.\n\t\t *  @example\n\t\t * //pan the incoming signal left and drop the volume\n\t\t * var panVol = new Tone.PanVol(-0.25, -12);\n\t\t */\n\t    Tone.PanVol = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'pan',\n\t            'volume'\n\t        ], Tone.PanVol);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The panning node\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = this.input = new Tone.Panner(options.pan);\n\t        /**\n\t\t\t *  The L/R panning control.\n\t\t\t *  @type {AudioRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.pan = this._panner.pan;\n\t        /**\n\t\t\t *  The volume node\n\t\t\t *  @type {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t *  The volume control in decibels.\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        //connections\n\t        this._panner.connect(this._volume);\n\t        this.mute = options.mute;\n\t        this._readOnly([\n\t            'pan',\n\t            'volume'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PanVol, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.PanVol.defaults = {\n\t        'pan': 0,\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute/unmute the volume\n\t\t * @memberOf Tone.PanVol#\n\t\t * @name mute\n\t\t * @type {Boolean}\n\t\t */\n\t    Object.defineProperty(Tone.PanVol.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.PanVol} this\n\t\t */\n\t    Tone.PanVol.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._writable([\n\t            'pan',\n\t            'volume'\n\t        ]);\n\t        this._panner.dispose();\n\t        this._panner = null;\n\t        this.pan = null;\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.PanVol;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Solo lets you isolate a specific audio stream. When\n\t\t *         an instance is set to `solo=true`, it will mute all other instances.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @example\n\t\t * var soloA = new Tone.Solo()\n\t\t * var soloB = new Tone.Solo()\n\t\t * soloA.solo = true\n\t\t * //no audio will pass through soloB\n\t\t */\n\t    Tone.Solo = function () {\n\t        var options = Tone.defaults(arguments, ['solo'], Tone.Solo);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The input and output node\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.input = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  A bound _soloed method\n\t\t\t *  @type  {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._soloBind = this._soloed.bind(this);\n\t        //listen for solo events class-wide.\n\t        this.context.on('solo', this._soloBind);\n\t        //set initially\n\t        this.solo = options.solo;\n\t    };\n\t    Tone.extend(Tone.Solo, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t */\n\t    Tone.Solo.defaults = { solo: false };\n\t    /**\n\t\t *  Isolates this instance and mutes all other instances of Tone.Solo.\n\t\t *  Only one instance can be soloed at a time. A soloed\n\t\t *  instance will report `solo=false` when another instance is soloed.\n\t\t *  @memberOf Tone.Solo#\n\t\t *  @type {Boolean}\n\t\t *  @name solo\n\t\t */\n\t    Object.defineProperty(Tone.Solo.prototype, 'solo', {\n\t        get: function () {\n\t            return this._isSoloed();\n\t        },\n\t        set: function (solo) {\n\t            if (solo) {\n\t                this._addSolo();\n\t            } else {\n\t                this._removeSolo();\n\t            }\n\t            this.context.emit('solo', this);\n\t        }\n\t    });\n\t    /**\n\t\t *  If the current instance is muted, i.e. another instance is soloed\n\t\t *  @memberOf Tone.Solo#\n\t\t *  @type {Boolean}\n\t\t *  @name muted\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Solo.prototype, 'muted', {\n\t        get: function () {\n\t            return this.input.gain.value === 0;\n\t        }\n\t    });\n\t    /**\n\t\t * Add this to the soloed array\n\t\t * @private\n\t\t */\n\t    Tone.Solo.prototype._addSolo = function () {\n\t        if (!Tone.isArray(this.context._currentSolo)) {\n\t            this.context._currentSolo = [];\n\t        }\n\t        if (!this._isSoloed()) {\n\t            this.context._currentSolo.push(this);\n\t        }\n\t    };\n\t    /**\n\t\t * Remove this from the soloed array\n\t\t * @private\n\t\t */\n\t    Tone.Solo.prototype._removeSolo = function () {\n\t        if (this._isSoloed()) {\n\t            var index = this.context._currentSolo.indexOf(this);\n\t            this.context._currentSolo.splice(index, 1);\n\t        }\n\t    };\n\t    /**\n\t\t * @return {Boolean} Is this on the soloed array\n\t\t * @private\n\t\t */\n\t    Tone.Solo.prototype._isSoloed = function () {\n\t        if (Tone.isArray(this.context._currentSolo)) {\n\t            return this.context._currentSolo.length !== 0 && this.context._currentSolo.indexOf(this) !== -1;\n\t        } else {\n\t            return false;\n\t        }\n\t    };\n\t    /**\n\t\t * @return {Boolean} Returns true if no one is soloed\n\t\t * @private\n\t\t */\n\t    Tone.Solo.prototype._noSolos = function () {\n\t        return !Tone.isArray(this.context._currentSolo) || this.context._currentSolo.length === 0;\n\t    };\n\t    /**\n\t\t *  Solo the current instance and unsolo all other instances.\n\t\t *  @param  {Tone.Solo}  instance  The instance which is being soloed/unsoloed.\n\t\t *  @private\n\t\t */\n\t    Tone.Solo.prototype._soloed = function () {\n\t        if (this._isSoloed()) {\n\t            this.input.gain.value = 1;\n\t        } else if (this._noSolos()) {\n\t            //no one is soloed\n\t            this.input.gain.value = 1;\n\t        } else {\n\t            this.input.gain.value = 0;\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Solo}  this\n\t\t */\n\t    Tone.Solo.prototype.dispose = function () {\n\t        this.context.off('solo', this._soloBind);\n\t        this._removeSolo();\n\t        this._soloBind = null;\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.Solo;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class  Get the current waveform data of the connected audio source.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Number=} size The size of the FFT. Value must be a power of\n\t\t *                       two in the range 32 to 32768.\n\t\t */\n\t    Tone.Waveform = function () {\n\t        var options = Tone.defaults(arguments, ['size'], Tone.Waveform);\n\t        options.type = Tone.Analyser.Type.Waveform;\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The analyser node.\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Analyser}\n\t\t\t */\n\t        this._analyser = this.input = this.output = new Tone.Analyser(options);\n\t    };\n\t    Tone.extend(Tone.Waveform, Tone.AudioNode);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Waveform.defaults = { 'size': 1024 };\n\t    /**\n\t\t *  Gets the waveform of the audio source. Returns the waveform data\n\t\t *  of length [size](#size) as a Float32Array with values between -1 and 1.\n\t\t *  @returns {TypedArray}\n\t\t */\n\t    Tone.Waveform.prototype.getValue = function () {\n\t        return this._analyser.getValue();\n\t    };\n\t    /**\n\t\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t\t *  @memberOf Tone.Waveform#\n\t\t *  @type {Number}\n\t\t *  @name size\n\t\t */\n\t    Object.defineProperty(Tone.Waveform.prototype, 'size', {\n\t        get: function () {\n\t            return this._analyser.size;\n\t        },\n\t        set: function (size) {\n\t            this._analyser.size = size;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Waveform}  this\n\t\t */\n\t    Tone.Waveform.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._analyser.dispose();\n\t        this._analyser = null;\n\t    };\n\t    return Tone.Waveform;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.CtrlInterpolate will interpolate between given values based\n\t\t *         on the \"index\" property. Passing in an array or object literal\n\t\t *         will interpolate each of the parameters. Note (i.e. \"C3\")\n\t\t *         and Time (i.e. \"4n + 2\") can be interpolated. All other values are\n\t\t *         assumed to be numbers. \n\t\t *  @example\n\t\t * var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);\n\t\t * interp.index = 0.75;\n\t\t * interp.value; //returns 1.5\n\t\t *\n\t\t *  @example\n\t\t * var interp = new Tone.CtrlInterpolate([\n\t\t * \t[2, 4, 5],\n\t\t * \t[9, 3, 2],\n\t\t * ]);\n\t\t * @param {Array} values The array of values to interpolate over\n\t\t * @param {Positive} index The initial interpolation index.\n\t\t * @extends {Tone}\n\t\t */\n\t    Tone.CtrlInterpolate = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'values',\n\t            'index'\n\t        ], Tone.CtrlInterpolate);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The values to interpolate between\n\t\t\t *  @type  {Array}\n\t\t\t */\n\t        this.values = options.values;\n\t        /**\n\t\t\t *  The interpolated index between values. For example: a value of 1.5\n\t\t\t *  would interpolate equally between the value at index 1\n\t\t\t *  and the value at index 2. \n\t\t\t *  @example\n\t\t\t * interp.index = 0; \n\t\t\t * interp.value; //returns the value at 0\n\t\t\t * interp.index = 0.5;\n\t\t\t * interp.value; //returns the value between indices 0 and 1. \n\t\t\t *  @type  {Positive}\n\t\t\t */\n\t        this.index = options.index;\n\t    };\n\t    Tone.extend(Tone.CtrlInterpolate);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlInterpolate.defaults = {\n\t        'index': 0,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  The current interpolated value based on the index\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlInterpolate#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlInterpolate.prototype, 'value', {\n\t        get: function () {\n\t            var index = this.index;\n\t            index = Math.min(index, this.values.length - 1);\n\t            var lowerPosition = Math.floor(index);\n\t            var lower = this.values[lowerPosition];\n\t            var upper = this.values[Math.ceil(index)];\n\t            return this._interpolate(index - lowerPosition, lower, upper);\n\t        }\n\t    });\n\t    /**\n\t\t *  Internal interpolation routine\n\t\t *  @param  {NormalRange}  index  The index between the lower and upper\n\t\t *  @param  {*}  lower \n\t\t *  @param  {*}  upper \n\t\t *  @return  {*}  The interpolated value\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlInterpolate.prototype._interpolate = function (index, lower, upper) {\n\t        if (Tone.isArray(lower)) {\n\t            var retArray = [];\n\t            for (var i = 0; i < lower.length; i++) {\n\t                retArray[i] = this._interpolate(index, lower[i], upper[i]);\n\t            }\n\t            return retArray;\n\t        } else if (Tone.isObject(lower)) {\n\t            var retObj = {};\n\t            for (var attr in lower) {\n\t                retObj[attr] = this._interpolate(index, lower[attr], upper[attr]);\n\t            }\n\t            return retObj;\n\t        } else {\n\t            lower = this._toNumber(lower);\n\t            upper = this._toNumber(upper);\n\t            return (1 - index) * lower + index * upper;\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert from the given type into a number\n\t\t *  @param  {Number|String}  value\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlInterpolate.prototype._toNumber = function (val) {\n\t        if (Tone.isNumber(val)) {\n\t            return val;\n\t        } else {\n\t            //otherwise assume that it's Time...\n\t            return this.toSeconds(val);\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.CtrlInterpolate}  this\n\t\t */\n\t    Tone.CtrlInterpolate.prototype.dispose = function () {\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlInterpolate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.CtrlMarkov represents a Markov Chain where each call\n\t\t *         to Tone.CtrlMarkov.next will move to the next state. If the next\n\t\t *         state choice is an array, the next state is chosen randomly with\n\t\t *         even probability for all of the choices. For a weighted probability\n\t\t *         of the next choices, pass in an object with \"state\" and \"probability\" attributes. \n\t\t *         The probabilities will be normalized and then chosen. If no next options\n\t\t *         are given for the current state, the state will stay there. \n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var chain = new Tone.CtrlMarkov({\n\t\t * \t\"beginning\" : [\"end\", \"middle\"],\n\t\t * \t\"middle\" : \"end\"\n\t\t * });\n\t\t * chain.value = \"beginning\";\n\t\t * chain.next(); //returns \"end\" or \"middle\" with 50% probability\n\t\t *\n\t\t *  @example\n\t\t * var chain = new Tone.CtrlMarkov({\n\t\t * \t\"beginning\" : [{\"value\" : \"end\", \"probability\" : 0.8}, \n\t\t * \t\t\t\t\t{\"value\" : \"middle\", \"probability\" : 0.2}],\n\t\t * \t\"middle\" : \"end\"\n\t\t * });\n\t\t * chain.value = \"beginning\";\n\t\t * chain.next(); //returns \"end\" with 80% probability or \"middle\" with 20%.\n\t\t *  @param {Object} values An object with the state names as the keys\n\t\t *                         and the next state(s) as the values. \n\t\t */\n\t    Tone.CtrlMarkov = function (values, initial) {\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The Markov values with states as the keys\n\t\t\t *  and next state(s) as the values. \n\t\t\t *  @type {Object}\n\t\t\t */\n\t        this.values = Tone.defaultArg(values, {});\n\t        /**\n\t\t\t *  The current state of the Markov values. The next\n\t\t\t *  state will be evaluated and returned when Tone.CtrlMarkov.next\n\t\t\t *  is invoked.\n\t\t\t *  @type {String}\n\t\t\t */\n\t        this.value = Tone.defaultArg(initial, Object.keys(this.values)[0]);\n\t    };\n\t    Tone.extend(Tone.CtrlMarkov);\n\t    /**\n\t\t *  Returns the next state of the Markov values. \n\t\t *  @return  {String}\n\t\t */\n\t    Tone.CtrlMarkov.prototype.next = function () {\n\t        if (this.values.hasOwnProperty(this.value)) {\n\t            var next = this.values[this.value];\n\t            if (Tone.isArray(next)) {\n\t                var distribution = this._getProbDistribution(next);\n\t                var rand = Math.random();\n\t                var total = 0;\n\t                for (var i = 0; i < distribution.length; i++) {\n\t                    var dist = distribution[i];\n\t                    if (rand > total && rand < total + dist) {\n\t                        var chosen = next[i];\n\t                        if (Tone.isObject(chosen)) {\n\t                            this.value = chosen.value;\n\t                        } else {\n\t                            this.value = chosen;\n\t                        }\n\t                    }\n\t                    total += dist;\n\t                }\n\t            } else {\n\t                this.value = next;\n\t            }\n\t        }\n\t        return this.value;\n\t    };\n\t    /**\n\t\t *  Choose randomly from an array weighted options in the form \n\t\t *  {\"state\" : string, \"probability\" : number} or an array of values\n\t\t *  @param  {Array}  options \n\t\t *  @return  {Array}  The randomly selected choice\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlMarkov.prototype._getProbDistribution = function (options) {\n\t        var distribution = [];\n\t        var total = 0;\n\t        var needsNormalizing = false;\n\t        for (var i = 0; i < options.length; i++) {\n\t            var option = options[i];\n\t            if (Tone.isObject(option)) {\n\t                needsNormalizing = true;\n\t                distribution[i] = option.probability;\n\t            } else {\n\t                distribution[i] = 1 / options.length;\n\t            }\n\t            total += distribution[i];\n\t        }\n\t        if (needsNormalizing) {\n\t            //normalize the values\n\t            for (var j = 0; j < distribution.length; j++) {\n\t                distribution[j] = distribution[j] / total;\n\t            }\n\t        }\n\t        return distribution;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.CtrlMarkov}  this\n\t\t */\n\t    Tone.CtrlMarkov.prototype.dispose = function () {\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlMarkov;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Generate patterns from an array of values.\n\t\t *         Has a number of arpeggiation and randomized\n\t\t *         selection patterns. \n\t\t *           <ul>\n\t\t *  \t        <li>\"up\" - cycles upward</li>\n\t\t *  \t\t\t<li>\"down\" - cycles downward</li>\n\t\t *  \t\t\t<li>\"upDown\" - up then and down</li>\n\t\t *  \t\t\t<li>\"downUp\" - cycles down then and up</li>\n\t\t *  \t\t\t<li>\"alternateUp\" - jump up two and down one</li>\n\t\t *  \t\t\t<li>\"alternateDown\" - jump down two and up one</li>\n\t\t *  \t\t\t<li>\"random\" - randomly select an index</li>\n\t\t *  \t\t\t<li>\"randomWalk\" - randomly moves one index away from the current position</li>\n\t\t *  \t\t\t<li>\"randomOnce\" - randomly select an index without repeating until all values have been chosen.</li>\n\t\t *     \t\t</ul>\n\t\t *  @param  {Array}  values   An array of options to choose from.\n\t\t *  @param  {Tone.CtrlPattern.Type=}  type  The name of the pattern.\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.CtrlPattern = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'values',\n\t            'type'\n\t        ], Tone.CtrlPattern);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The array of values to arpeggiate over\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.values = options.values;\n\t        /**\n\t\t\t *  The current position in the values array\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.index = 0;\n\t        /**\n\t\t\t *  The type placeholder\n\t\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = null;\n\t        /**\n\t\t\t *  Shuffled values for the RandomOnce type\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shuffled = null;\n\t        /**\n\t\t\t *  The direction of the movement\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._direction = null;\n\t        this.type = options.type;\n\t    };\n\t    Tone.extend(Tone.CtrlPattern);\n\t    /**\n\t\t *  The Control Patterns\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t */\n\t    Tone.CtrlPattern.Type = {\n\t        Up: 'up',\n\t        Down: 'down',\n\t        UpDown: 'upDown',\n\t        DownUp: 'downUp',\n\t        AlternateUp: 'alternateUp',\n\t        AlternateDown: 'alternateDown',\n\t        Random: 'random',\n\t        RandomWalk: 'randomWalk',\n\t        RandomOnce: 'randomOnce'\n\t    };\n\t    /**\n\t\t *  The default values. \n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlPattern.defaults = {\n\t        'type': Tone.CtrlPattern.Type.Up,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  The value at the current index of the pattern.\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlPattern#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'value', {\n\t        get: function () {\n\t            //some safeguards\n\t            if (this.values.length === 0) {\n\t                return;\n\t            } else if (this.values.length === 1) {\n\t                return this.values[0];\n\t            }\n\t            this.index = Math.min(this.index, this.values.length - 1);\n\t            var val = this.values[this.index];\n\t            if (this.type === Tone.CtrlPattern.Type.RandomOnce) {\n\t                if (this.values.length !== this._shuffled.length) {\n\t                    this._shuffleValues();\n\t                }\n\t                val = this.values[this._shuffled[this.index]];\n\t            }\n\t            return val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The pattern used to select the next\n\t\t *  item from the values array\n\t\t *  @memberOf Tone.CtrlPattern#\n\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._type = type;\n\t            this._shuffled = null;\n\t            //the first index\n\t            if (this._type === Tone.CtrlPattern.Type.Up || this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.RandomOnce || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t                this.index = 0;\n\t            } else if (this._type === Tone.CtrlPattern.Type.Down || this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t                this.index = this.values.length - 1;\n\t            }\n\t            //the direction\n\t            if (this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            } else if (this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t            //randoms\n\t            if (this._type === Tone.CtrlPattern.Type.RandomOnce) {\n\t                this._shuffleValues();\n\t            } else if (this._type === Tone.CtrlPattern.Random) {\n\t                this.index = Math.floor(Math.random() * this.values.length);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Return the next value given the current position\n\t\t *  and pattern.\n\t\t *  @return {*} The next value\n\t\t */\n\t    Tone.CtrlPattern.prototype.next = function () {\n\t        var type = this.type;\n\t        //choose the next index\n\t        if (type === Tone.CtrlPattern.Type.Up) {\n\t            this.index++;\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.Down) {\n\t            this.index--;\n\t            if (this.index < 0) {\n\t                this.index = this.values.length - 1;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.UpDown || type === Tone.CtrlPattern.Type.DownUp) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index++;\n\t            } else {\n\t                this.index--;\n\t            }\n\t            if (this.index < 0) {\n\t                this.index = 1;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            } else if (this.index >= this.values.length) {\n\t                this.index = this.values.length - 2;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.Random) {\n\t            this.index = Math.floor(Math.random() * this.values.length);\n\t        } else if (type === Tone.CtrlPattern.Type.RandomWalk) {\n\t            if (Math.random() < 0.5) {\n\t                this.index--;\n\t                this.index = Math.max(this.index, 0);\n\t            } else {\n\t                this.index++;\n\t                this.index = Math.min(this.index, this.values.length - 1);\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.RandomOnce) {\n\t            this.index++;\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t                //reshuffle the values for next time\n\t                this._shuffleValues();\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.AlternateUp) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index += 2;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            } else {\n\t                this.index -= 1;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.AlternateDown) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index += 1;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            } else {\n\t                this.index -= 2;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t            if (this.index < 0) {\n\t                this.index = this.values.length - 1;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t        }\n\t        return this.value;\n\t    };\n\t    /**\n\t\t *  Shuffles the values and places the results into the _shuffled\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlPattern.prototype._shuffleValues = function () {\n\t        var copy = [];\n\t        this._shuffled = [];\n\t        for (var i = 0; i < this.values.length; i++) {\n\t            copy[i] = i;\n\t        }\n\t        while (copy.length > 0) {\n\t            var randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n\t            this._shuffled.push(randVal[0]);\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.CtrlPattern} this\n\t\t */\n\t    Tone.CtrlPattern.prototype.dispose = function () {\n\t        this._shuffled = null;\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlPattern;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Choose a random value.\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var randomWalk = new Tone.CtrlRandom({\n\t\t * \t\"min\" : 0,\n\t\t * \t\"max\" : 10,\n\t\t * \t\"integer\" : true\n\t\t * });\n\t\t * randomWalk.eval();\n\t\t *\n\t\t *  @param {Number|Time=} min The minimum return value.\n\t\t *  @param {Number|Time=} max The maximum return value.\n\t\t */\n\t    Tone.CtrlRandom = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'min',\n\t            'max'\n\t        ], Tone.CtrlRandom);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The minimum return value\n\t\t\t *  @type  {Number|Time}\n\t\t\t */\n\t        this.min = options.min;\n\t        /**\n\t\t\t *  The maximum return value\n\t\t\t *  @type  {Number|Time}\n\t\t\t */\n\t        this.max = options.max;\n\t        /**\n\t\t\t *  If the return value should be an integer\n\t\t\t *  @type  {Boolean}\n\t\t\t */\n\t        this.integer = options.integer;\n\t    };\n\t    Tone.extend(Tone.CtrlRandom);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlRandom.defaults = {\n\t        'min': 0,\n\t        'max': 1,\n\t        'integer': false\n\t    };\n\t    /**\n\t\t *  Return a random value between min and max. \n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlRandom#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlRandom.prototype, 'value', {\n\t        get: function () {\n\t            var min = this.toSeconds(this.min);\n\t            var max = this.toSeconds(this.max);\n\t            var rand = Math.random();\n\t            var val = rand * min + (1 - rand) * max;\n\t            if (this.integer) {\n\t                val = Math.floor(val);\n\t            }\n\t            return val;\n\t        }\n\t    });\n\t    return Tone.CtrlRandom;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  AudioBuffer.copyToChannel polyfill\n\t\t *  @private\n\t\t */\n\t    if (window.AudioBuffer && !AudioBuffer.prototype.copyToChannel) {\n\t        AudioBuffer.prototype.copyToChannel = function (src, chanNum, start) {\n\t            var channel = this.getChannelData(chanNum);\n\t            start = start || 0;\n\t            for (var i = 0; i < channel.length; i++) {\n\t                channel[i + start] = src[i];\n\t            }\n\t        };\n\t        AudioBuffer.prototype.copyFromChannel = function (dest, chanNum, start) {\n\t            var channel = this.getChannelData(chanNum);\n\t            start = start || 0;\n\t            for (var i = 0; i < dest.length; i++) {\n\t                dest[i] = channel[i + start];\n\t            }\n\t        };\n\t    }\n\t    /**\n\t\t *  @class  Buffer loading and storage. Tone.Buffer is used internally by all \n\t\t *          classes that make requests for audio files such as Tone.Player,\n\t\t *          Tone.Sampler and Tone.Convolver.\n\t\t *          \n\t\t *          Aside from load callbacks from individual buffers, Tone.Buffer \n\t\t *  \t\tprovides events which keep track of the loading progress \n\t\t *  \t\tof _all_ of the buffers. These are Tone.Buffer.on(\"load\" / \"progress\" / \"error\")\n\t\t *\n\t\t *  @constructor \n\t\t *  @extends {Tone}\n\t\t *  @param {AudioBuffer|String} url The url to load, or the audio buffer to set. \n\t\t *  @param {Function=} onload A callback which is invoked after the buffer is loaded. \n\t\t *                            It's recommended to use `Tone.Buffer.on('load', callback)` instead \n\t\t *                            since it will give you a callback when _all_ buffers are loaded.\n\t\t *  @param {Function=} onerror The callback to invoke if there is an error\n\t\t *  @example\n\t\t * var buffer = new Tone.Buffer(\"path/to/sound.mp3\", function(){\n\t\t * \t//the buffer is now available.\n\t\t * \tvar buff = buffer.get();\n\t\t * });\n\t\t *  @example\n\t\t * //can load provide fallback extension types if the first type is not supported.\n\t\t * var buffer = new Tone.Buffer(\"path/to/sound.[mp3|ogg|wav]\");\n\t\t */\n\t    Tone.Buffer = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'url',\n\t            'onload',\n\t            'onerror'\n\t        ], Tone.Buffer);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  stores the loaded AudioBuffer\n\t\t\t *  @type {AudioBuffer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = null;\n\t        /**\n\t\t\t *  indicates if the buffer should be reversed or not\n\t\t\t *  @type {Boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._reversed = options.reverse;\n\t        /**\n\t\t\t *  The XHR\n\t\t\t *  @type  {XMLHttpRequest}\n\t\t\t *  @private\n\t\t\t */\n\t        this._xhr = null;\n\t        if (options.url instanceof AudioBuffer || options.url instanceof Tone.Buffer) {\n\t            this.set(options.url);\n\t            // invoke the onload callback\n\t            if (options.onload) {\n\t                options.onload(this);\n\t            }\n\t        } else if (Tone.isString(options.url)) {\n\t            this.load(options.url, options.onload, options.onerror);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Buffer);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Buffer.defaults = {\n\t        'url': undefined,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Pass in an AudioBuffer or Tone.Buffer to set the value\n\t\t *  of this buffer.\n\t\t *  @param {AudioBuffer|Tone.Buffer} buffer the buffer\n\t\t *  @returns {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.set = function (buffer) {\n\t        if (buffer instanceof Tone.Buffer) {\n\t            this._buffer = buffer.get();\n\t        } else {\n\t            this._buffer = buffer;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  @return {AudioBuffer} The audio buffer stored in the object.\n\t\t */\n\t    Tone.Buffer.prototype.get = function () {\n\t        return this._buffer;\n\t    };\n\t    /**\n\t\t *  Makes an xhr reqest for the selected url then decodes\n\t\t *  the file as an audio buffer. Invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {String} url The url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer\n\t\t */\n\t    Tone.Buffer.prototype.load = function (url, onload, onerror) {\n\t        var promise = new Promise(function (load, error) {\n\t            this._xhr = Tone.Buffer.load(url, //success\n\t            function (buff) {\n\t                this._xhr = null;\n\t                this.set(buff);\n\t                load(this);\n\t                if (onload) {\n\t                    onload(this);\n\t                }\n\t            }.bind(this), //error\n\t            function (err) {\n\t                this._xhr = null;\n\t                error(err);\n\t                if (onerror) {\n\t                    onerror(err);\n\t                }\n\t            }.bind(this));\n\t        }.bind(this));\n\t        return promise;\n\t    };\n\t    /**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._buffer = null;\n\t        if (this._xhr) {\n\t            Tone.Buffer._removeFromDownloadQueue(this._xhr);\n\t            this._xhr.abort();\n\t            this._xhr = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * If the buffer is loaded or not\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'loaded', {\n\t        get: function () {\n\t            return this.length > 0;\n\t        }\n\t    });\n\t    /**\n\t\t * The duration of the buffer. \n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name duration\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'duration', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.duration;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The length of the buffer in samples\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name length\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'length', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.length;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of discrete audio channels. Returns 0 if no buffer\n\t\t * is loaded.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name numberOfChannels\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'numberOfChannels', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.numberOfChannels;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the audio buffer from the array. To create a multichannel AudioBuffer,\n\t\t *  pass in a multidimensional array. \n\t\t *  @param {Float32Array} array The array to fill the audio buffer\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.fromArray = function (array) {\n\t        var isMultidimensional = array[0].length > 0;\n\t        var channels = isMultidimensional ? array.length : 1;\n\t        var len = isMultidimensional ? array[0].length : array.length;\n\t        var buffer = this.context.createBuffer(channels, len, this.context.sampleRate);\n\t        if (!isMultidimensional && channels === 1) {\n\t            array = [array];\n\t        }\n\t        for (var c = 0; c < channels; c++) {\n\t            buffer.copyToChannel(array[c], c);\n\t        }\n\t        this._buffer = buffer;\n\t        return this;\n\t    };\n\t    /**\n\t\t * \tSums muliple channels into 1 channel\n\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t *  @return {Array}\n\t\t */\n\t    Tone.Buffer.prototype.toMono = function (chanNum) {\n\t        if (Tone.isNumber(chanNum)) {\n\t            this.fromArray(this.toArray(chanNum));\n\t        } else {\n\t            var outputArray = new Float32Array(this.length);\n\t            var numChannels = this.numberOfChannels;\n\t            for (var channel = 0; channel < numChannels; channel++) {\n\t                var channelArray = this.toArray(channel);\n\t                for (var i = 0; i < channelArray.length; i++) {\n\t                    outputArray[i] += channelArray[i];\n\t                }\n\t            }\n\t            //divide by the number of channels\n\t            outputArray = outputArray.map(function (sample) {\n\t                return sample / numChannels;\n\t            });\n\t            this.fromArray(outputArray);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional \n\t\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t *  @return {Array}\n\t\t */\n\t    Tone.Buffer.prototype.toArray = function (channel) {\n\t        if (Tone.isNumber(channel)) {\n\t            return this.getChannelData(channel);\n\t        } else if (this.numberOfChannels === 1) {\n\t            return this.toArray(0);\n\t        } else {\n\t            var ret = [];\n\t            for (var c = 0; c < this.numberOfChannels; c++) {\n\t                ret[c] = this.getChannelData(c);\n\t            }\n\t            return ret;\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t\t *  @param  {Number}  channel  The channel number to return\n\t\t *  @return  {Float32Array}  The audio as a TypedArray\n\t\t */\n\t    Tone.Buffer.prototype.getChannelData = function (channel) {\n\t        return this._buffer.getChannelData(channel);\n\t    };\n\t    /**\n\t\t *  Cut a subsection of the array and return a buffer of the\n\t\t *  subsection. Does not modify the original buffer\n\t\t *  @param {Time} start The time to start the slice\n\t\t *  @param {Time=} end The end time to slice. If none is given\n\t\t *                     will default to the end of the buffer\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.slice = function (start, end) {\n\t        end = Tone.defaultArg(end, this.duration);\n\t        var startSamples = Math.floor(this.context.sampleRate * this.toSeconds(start));\n\t        var endSamples = Math.floor(this.context.sampleRate * this.toSeconds(end));\n\t        var replacement = [];\n\t        for (var i = 0; i < this.numberOfChannels; i++) {\n\t            replacement[i] = this.toArray(i).slice(startSamples, endSamples);\n\t        }\n\t        var retBuffer = new Tone.Buffer().fromArray(replacement);\n\t        return retBuffer;\n\t    };\n\t    /**\n\t\t *  Reverse the buffer.\n\t\t *  @private\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype._reverse = function () {\n\t        if (this.loaded) {\n\t            for (var i = 0; i < this.numberOfChannels; i++) {\n\t                Array.prototype.reverse.call(this.getChannelData(i));\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Reverse the buffer.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'reverse', {\n\t        get: function () {\n\t            return this._reversed;\n\t        },\n\t        set: function (rev) {\n\t            if (this._reversed !== rev) {\n\t                this._reversed = rev;\n\t                this._reverse();\n\t            }\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // STATIC METHODS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //statically inherits Emitter methods\n\t    Tone.Emitter.mixin(Tone.Buffer);\n\t    /**\n\t\t *  the static queue for all of the xhr requests\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t    Tone.Buffer._downloadQueue = [];\n\t    /**\n\t\t *  A path which is prefixed before every url.\n\t\t *  @type  {String}\n\t\t *  @static\n\t\t */\n\t    Tone.Buffer.baseUrl = '';\n\t    /**\n\t\t *  Create a Tone.Buffer from the array. To create a multichannel AudioBuffer,\n\t\t *  pass in a multidimensional array. \n\t\t *  @param {Float32Array} array The array to fill the audio buffer\n\t\t *  @return {Tone.Buffer} A Tone.Buffer created from the array\n\t\t */\n\t    Tone.Buffer.fromArray = function (array) {\n\t        return new Tone.Buffer().fromArray(array);\n\t    };\n\t    /**\n\t\t * Remove an xhr request from the download queue\n\t\t * @private\n\t\t */\n\t    Tone.Buffer._removeFromDownloadQueue = function (request) {\n\t        var index = Tone.Buffer._downloadQueue.indexOf(request);\n\t        if (index !== -1) {\n\t            Tone.Buffer._downloadQueue.splice(index, 1);\n\t        }\n\t    };\n\t    /**\n\t\t *  Loads a url using XMLHttpRequest.\n\t\t *  @param {String} url\n\t\t *  @param {Function} onload\n\t\t *  @param {Function} onerror\n\t\t *  @param {Function} onprogress\n\t\t *  @return {XMLHttpRequest}\n\t\t */\n\t    Tone.Buffer.load = function (url, onload, onerror) {\n\t        //default\n\t        onload = Tone.defaultArg(onload, Tone.noOp);\n\t        // test if the url contains multiple extensions\n\t        var matches = url.match(/\\[(.+\\|?)+\\]$/);\n\t        if (matches) {\n\t            var extensions = matches[1].split('|');\n\t            var extension = extensions[0];\n\t            for (var i = 0; i < extensions.length; i++) {\n\t                if (Tone.Buffer.supportsType(extensions[i])) {\n\t                    extension = extensions[i];\n\t                    break;\n\t                }\n\t            }\n\t            url = url.replace(matches[0], extension);\n\t        }\n\t        function onError(e) {\n\t            Tone.Buffer._removeFromDownloadQueue(request);\n\t            Tone.Buffer.emit('error', e);\n\t            if (onerror) {\n\t                onerror(e);\n\t            } else {\n\t                throw e;\n\t            }\n\t        }\n\t        function onProgress() {\n\t            //calculate the progress\n\t            var totalProgress = 0;\n\t            for (var i = 0; i < Tone.Buffer._downloadQueue.length; i++) {\n\t                totalProgress += Tone.Buffer._downloadQueue[i].progress;\n\t            }\n\t            Tone.Buffer.emit('progress', totalProgress / Tone.Buffer._downloadQueue.length);\n\t        }\n\t        var request = new XMLHttpRequest();\n\t        request.open('GET', Tone.Buffer.baseUrl + url, true);\n\t        request.responseType = 'arraybuffer';\n\t        //start out as 0\n\t        request.progress = 0;\n\t        Tone.Buffer._downloadQueue.push(request);\n\t        request.addEventListener('load', function () {\n\t            if (request.status === 200) {\n\t                Tone.context.decodeAudioData(request.response, function (buff) {\n\t                    request.progress = 1;\n\t                    onProgress();\n\t                    onload(buff);\n\t                    Tone.Buffer._removeFromDownloadQueue(request);\n\t                    if (Tone.Buffer._downloadQueue.length === 0) {\n\t                        //emit the event at the end\n\t                        Tone.Buffer.emit('load');\n\t                    }\n\t                }, function () {\n\t                    Tone.Buffer._removeFromDownloadQueue(request);\n\t                    onError('Tone.Buffer: could not decode audio data: ' + url);\n\t                });\n\t            } else {\n\t                onError('Tone.Buffer: could not locate file: ' + url);\n\t            }\n\t        });\n\t        request.addEventListener('error', onError);\n\t        request.addEventListener('progress', function (event) {\n\t            if (event.lengthComputable) {\n\t                //only go to 95%, the last 5% is when the audio is decoded\n\t                request.progress = event.loaded / event.total * 0.95;\n\t                onProgress();\n\t            }\n\t        });\n\t        request.send();\n\t        return request;\n\t    };\n\t    /**\n\t\t *  Stop all of the downloads in progress\n\t\t *  @return {Tone.Buffer}\n\t\t *  @static\n\t\t */\n\t    Tone.Buffer.cancelDownloads = function () {\n\t        Tone.Buffer._downloadQueue.slice().forEach(function (request) {\n\t            Tone.Buffer._removeFromDownloadQueue(request);\n\t            request.abort();\n\t        });\n\t        return Tone.Buffer;\n\t    };\n\t    /**\n\t\t *  Checks a url's extension to see if the current browser can play that file type.\n\t\t *  @param {String} url The url/extension to test\n\t\t *  @return {Boolean} If the file extension can be played\n\t\t *  @static\n\t\t *  @example\n\t\t * Tone.Buffer.supportsType(\"wav\"); //returns true\n\t\t * Tone.Buffer.supportsType(\"path/to/file.wav\"); //returns true\n\t\t */\n\t    Tone.Buffer.supportsType = function (url) {\n\t        var extension = url.split('.');\n\t        extension = extension[extension.length - 1];\n\t        var response = document.createElement('audio').canPlayType('audio/' + extension);\n\t        return response !== '';\n\t    };\n\t    /**\n\t\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t\t *  @return {Promise}\n\t\t */\n\t    Tone.loaded = function () {\n\t        var onload, onerror;\n\t        function removeEvents() {\n\t            //remove the events when it's resolved\n\t            Tone.Buffer.off('load', onload);\n\t            Tone.Buffer.off('error', onerror);\n\t        }\n\t        return new Promise(function (success, fail) {\n\t            onload = function () {\n\t                success();\n\t            };\n\t            onerror = function () {\n\t                fail();\n\t            };\n\t            //add the event listeners\n\t            Tone.Buffer.on('load', onload);\n\t            Tone.Buffer.on('error', onerror);\n\t        }).then(removeEvents).catch(function (e) {\n\t            removeEvents();\n\t            throw new Error(e);\n\t        });\n\t    };\n\t    return Tone.Buffer;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class A data structure for holding multiple buffers.\n\t\t *  \n\t\t *  @param  {Object|Array}    urls      An object literal or array\n\t\t *                                      of urls to load.\n\t\t *  @param  {Function=}  callback  The callback to invoke when\n\t\t *                                 the buffers are loaded. \n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * //load a whole bank of piano samples\n\t\t * var pianoSamples = new Tone.Buffers({\n\t\t * \t\"C4\" : \"path/to/C4.mp3\"\n\t\t * \t\"C#4\" : \"path/to/C#4.mp3\"\n\t\t * \t\"D4\" : \"path/to/D4.mp3\"\n\t\t * \t\"D#4\" : \"path/to/D#4.mp3\"\n\t\t * \t...\n\t\t * }, function(){\n\t\t * \t//play one of the samples when they all load\n\t\t * \tplayer.buffer = pianoSamples.get(\"C4\");\n\t\t * \tplayer.start();\n\t\t * });\n\t\t * \t@example\n\t\t * //To pass in additional parameters in the second parameter\n\t\t * var buffers = new Tone.Buffers(urls, {\n\t\t * \t\"onload\" : callback,\n\t\t * \t\"baseUrl\" : \"../path/to/audio/\"\n\t\t * })\n\t\t */\n\t    Tone.Buffers = function (urls) {\n\t        //remove the urls from the options\n\t        var args = Array.prototype.slice.call(arguments);\n\t        args.shift();\n\t        var options = Tone.defaults(args, [\n\t            'onload',\n\t            'baseUrl'\n\t        ], Tone.Buffers);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  All of the buffers\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffers = {};\n\t        /**\n\t\t\t *  A path which is prefixed before every url.\n\t\t\t *  @type  {String}\n\t\t\t */\n\t        this.baseUrl = options.baseUrl;\n\t        this._loadingCount = 0;\n\t        //add each one\n\t        for (var key in urls) {\n\t            this._loadingCount++;\n\t            this.add(key, urls[key], this._bufferLoaded.bind(this, options.onload));\n\t        }\n\t    };\n\t    Tone.extend(Tone.Buffers);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Buffers.defaults = {\n\t        'onload': Tone.noOp,\n\t        'baseUrl': ''\n\t    };\n\t    /**\n\t\t *  True if the buffers object has a buffer by that name.\n\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t *                                 buffer.\n\t\t *  @return  {Boolean}\n\t\t */\n\t    Tone.Buffers.prototype.has = function (name) {\n\t        return this._buffers.hasOwnProperty(name);\n\t    };\n\t    /**\n\t\t *  Get a buffer by name. If an array was loaded, \n\t\t *  then use the array index.\n\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t *                                 buffer.\n\t\t *  @return  {Tone.Buffer}\n\t\t */\n\t    Tone.Buffers.prototype.get = function (name) {\n\t        if (this.has(name)) {\n\t            return this._buffers[name];\n\t        } else {\n\t            throw new Error('Tone.Buffers: no buffer named ' + name);\n\t        }\n\t    };\n\t    /**\n\t\t *  A buffer was loaded. decrement the counter.\n\t\t *  @param  {Function}  callback \n\t\t *  @private\n\t\t */\n\t    Tone.Buffers.prototype._bufferLoaded = function (callback) {\n\t        this._loadingCount--;\n\t        if (this._loadingCount === 0 && callback) {\n\t            callback(this);\n\t        }\n\t    };\n\t    /**\n\t\t * If the buffers are loaded or not\n\t\t * @memberOf Tone.Buffers#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffers.prototype, 'loaded', {\n\t        get: function () {\n\t            var isLoaded = true;\n\t            for (var buffName in this._buffers) {\n\t                var buff = this.get(buffName);\n\t                isLoaded = isLoaded && buff.loaded;\n\t            }\n\t            return isLoaded;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a buffer by name and url to the Buffers\n\t\t *  @param  {String}    name      A unique name to give\n\t\t *                                the buffer\n\t\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, \n\t\t *                                                 or a buffer which will be added\n\t\t *                                                 with the given name.\n\t\t *  @param  {Function=}  callback  The callback to invoke \n\t\t *                                 when the url is loaded.\n\t\t */\n\t    Tone.Buffers.prototype.add = function (name, url, callback) {\n\t        callback = Tone.defaultArg(callback, Tone.noOp);\n\t        if (url instanceof Tone.Buffer) {\n\t            this._buffers[name] = url;\n\t            callback(this);\n\t        } else if (url instanceof AudioBuffer) {\n\t            this._buffers[name] = new Tone.Buffer(url);\n\t            callback(this);\n\t        } else if (Tone.isString(url)) {\n\t            this._buffers[name] = new Tone.Buffer(this.baseUrl + url, callback);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Buffers} this\n\t\t */\n\t    Tone.Buffers.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        for (var name in this._buffers) {\n\t            this._buffers[name].dispose();\n\t        }\n\t        this._buffers = null;\n\t        return this;\n\t    };\n\t    return Tone.Buffers;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  buses are another way of routing audio\n\t\t *\n\t\t *  augments Tone.prototype to include send and recieve\n\t\t */\n\t    /**\n\t\t  *  All of the routes\n\t\t  *  \n\t\t  *  @type {Object}\n\t\t  *  @static\n\t\t  *  @private\n\t\t  */\n\t    var Buses = {};\n\t    /**\n\t\t *  Send this signal to the channel name. \n\t\t *  @param  {String} channelName A named channel to send the signal to.\n\t\t *  @param  {Decibels} amount The amount of the source to send to the bus. \n\t\t *  @return {GainNode} The gain node which connects this node to the desired channel. \n\t\t *                     Can be used to adjust the levels of the send.\n\t\t *  @example\n\t\t * source.send(\"reverb\", -12);\n\t\t */\n\t    Tone.prototype.send = function (channelName, amount) {\n\t        if (!Buses.hasOwnProperty(channelName)) {\n\t            Buses[channelName] = this.context.createGain();\n\t        }\n\t        amount = Tone.defaultArg(amount, 0);\n\t        var sendKnob = new Tone.Gain(amount, Tone.Type.Decibels);\n\t        this.output.chain(sendKnob, Buses[channelName]);\n\t        return sendKnob;\n\t    };\n\t    /**\n\t\t *  Recieve the input from the desired channelName to the input\n\t\t *\n\t\t *  @param  {String} channelName A named channel to send the signal to.\n\t\t *  @param  {Number=} channelNumber The channel to connect to\n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * reverbEffect.receive(\"reverb\");\n\t\t */\n\t    Tone.prototype.receive = function (channelName, inputNum) {\n\t        if (!Buses.hasOwnProperty(channelName)) {\n\t            Buses[channelName] = this.context.createGain();\n\t        }\n\t        Buses[channelName].connect(this, 0, inputNum);\n\t        return this;\n\t    };\n\t    //remove all the send/receives when a new audio context is passed in\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Buses) {\n\t            Buses = context.Buses;\n\t        } else {\n\t            Buses = {};\n\t            context.Buses = Buses;\n\t        }\n\t    });\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Draw is useful for synchronizing visuals and audio events.\n\t\t *         Callbacks from Tone.Transport or any of the Tone.Event classes\n\t\t *         always happen _before_ the scheduled time and are not synchronized\n\t\t *         to the animation frame so they are not good for triggering tightly\n\t\t *         synchronized visuals and sound. Tone.Draw makes it easy to schedule\n\t\t *         callbacks using the AudioContext time and uses requestAnimationFrame.\n\t\t *         \n\t\t *  @singleton\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \t//use the time argument to schedule a callback with Tone.Draw\n\t\t * \tTone.Draw.schedule(function(){\n\t\t * \t\t//do drawing or DOM manipulation here\n\t\t * \t}, time)\n\t\t * }, \"+0.5\")\n\t\t */\n\t    Tone.Draw = function () {\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  All of the events.\n\t\t\t *  @type  {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = new Tone.Timeline();\n\t        /**\n\t\t\t *  The duration after which events are not invoked.\n\t\t\t *  @type  {Number}\n\t\t\t *  @default 0.25\n\t\t\t */\n\t        this.expiration = 0.25;\n\t        /**\n\t\t\t *  The amount of time before the scheduled time \n\t\t\t *  that the callback can be invoked. Default is\n\t\t\t *  half the time of an animation frame (0.008 seconds).\n\t\t\t *  @type  {Number}\n\t\t\t *  @default 0.008\n\t\t\t */\n\t        this.anticipation = 0.008;\n\t        /**\n\t\t\t *  The draw loop\n\t\t\t *  @type  {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._boundDrawLoop = this._drawLoop.bind(this);\n\t    };\n\t    Tone.extend(Tone.Draw);\n\t    /**\n\t\t *  Schedule a function at the given time to be invoked\n\t\t *  on the nearest animation frame.\n\t\t *  @param  {Function}  callback  Callback is invoked at the given time.\n\t\t *  @param  {Time}    time      The time relative to the AudioContext time\n\t\t *                              to invoke the callback.\n\t\t *  @return  {Tone.Draw}    this\n\t\t */\n\t    Tone.Draw.prototype.schedule = function (callback, time) {\n\t        this._events.add({\n\t            callback: callback,\n\t            time: this.toSeconds(time)\n\t        });\n\t        //start the draw loop on the first event\n\t        if (this._events.length === 1) {\n\t            requestAnimationFrame(this._boundDrawLoop);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel events scheduled after the given time\n\t\t *  @param  {Time=}  after  Time after which scheduled events will \n\t\t *                          be removed from the scheduling timeline.\n\t\t *  @return  {Tone.Draw}  this\n\t\t */\n\t    Tone.Draw.prototype.cancel = function (after) {\n\t        this._events.cancel(this.toSeconds(after));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The draw loop\n\t\t *  @private\n\t\t */\n\t    Tone.Draw.prototype._drawLoop = function () {\n\t        var now = Tone.now();\n\t        while (this._events.length && this._events.peek().time - this.anticipation <= now) {\n\t            var event = this._events.shift();\n\t            if (now - event.time <= this.expiration) {\n\t                event.callback();\n\t            }\n\t        }\n\t        if (this._events.length > 0) {\n\t            requestAnimationFrame(this._boundDrawLoop);\n\t        }\n\t    };\n\t    //make a singleton\n\t    Tone.Draw = new Tone.Draw();\n\t    return Tone.Draw;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Both Tone.Panner3D and Tone.Listener have a position in 3D space \n\t\t *          using a right-handed cartesian coordinate system. \n\t\t *          The units used in the coordinate system are not defined; \n\t\t *          these coordinates are independent/invariant of any particular \n\t\t *          units such as meters or feet. Tone.Panner3D objects have an forward \n\t\t *          vector representing the direction the sound is projecting. Additionally, \n\t\t *          they have a sound cone representing how directional the sound is. \n\t\t *          For example, the sound could be omnidirectional, in which case it would \n\t\t *          be heard anywhere regardless of its forward, or it can be more directional \n\t\t *          and heard only if it is facing the listener. Tone.Listener objects \n\t\t *          (representing a person's ears) have an forward and up vector \n\t\t *          representing in which direction the person is facing. Because both the \n\t\t *          source stream and the listener can be moving, they both have a velocity \n\t\t *          vector representing both the speed and direction of movement. Taken together, \n\t\t *          these two velocities can be used to generate a doppler shift effect which changes the pitch.\n\t\t *          <br><br>\n\t\t *          Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @singleton\n\t\t */\n\t    Tone.Listener = function () {\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  Holds the current forward orientation\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._orientation = [\n\t            0,\n\t            0,\n\t            0,\n\t            0,\n\t            0,\n\t            0\n\t        ];\n\t        /**\n\t\t\t *  Holds the current position\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._position = [\n\t            0,\n\t            0,\n\t            0\n\t        ];\n\t        Tone.getContext(function () {\n\t            // set the default position/forward\n\t            this.set(ListenerConstructor.defaults);\n\t        }.bind(this));\n\t    };\n\t    Tone.extend(Tone.Listener);\n\t    /**\n\t\t *  Defaults according to the specification\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Listener.defaults = {\n\t        'positionX': 0,\n\t        'positionY': 0,\n\t        'positionZ': 0,\n\t        'forwardX': 0,\n\t        'forwardY': 0,\n\t        'forwardZ': 1,\n\t        'upX': 0,\n\t        'upY': 1,\n\t        'upZ': 0\n\t    };\n\t    /**\n\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.Listener.prototype._rampTimeConstant = 0.01;\n\t    /**\n\t\t *  Sets the position of the listener in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.setPosition = function (x, y, z) {\n\t        if (this.context.listener.positionX) {\n\t            var now = this.now();\n\t            this.context.listener.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this.context.listener.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this.context.listener.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this.context.listener.setPosition(x, y, z);\n\t        }\n\t        this._position = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the orientation of the listener using two vectors, the forward\n\t\t *  vector (which direction the listener is facing) and the up vector \n\t\t *  (which the up direction of the listener). An up vector\n\t\t *  of 0, 0, 1 is equivalent to the listener standing up in the Z direction. \n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @param  {Number}  upX\n\t\t *  @param  {Number}  upY\n\t\t *  @param  {Number}  upZ\n\t\t *  @return {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.setOrientation = function (x, y, z, upX, upY, upZ) {\n\t        if (this.context.listener.forwardX) {\n\t            var now = this.now();\n\t            this.context.listener.forwardX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this.context.listener.forwardY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this.context.listener.forwardZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t            this.context.listener.upX.setTargetAtTime(upX, now, this._rampTimeConstant);\n\t            this.context.listener.upY.setTargetAtTime(upY, now, this._rampTimeConstant);\n\t            this.context.listener.upZ.setTargetAtTime(upZ, now, this._rampTimeConstant);\n\t        } else {\n\t            this.context.listener.setOrientation(x, y, z, upX, upY, upZ);\n\t        }\n\t        this._orientation = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The x position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionX', {\n\t        set: function (pos) {\n\t            this._position[0] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionY', {\n\t        set: function (pos) {\n\t            this._position[1] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionZ', {\n\t        set: function (pos) {\n\t            this._position[2] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardX', {\n\t        set: function (pos) {\n\t            this._orientation[0] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardY', {\n\t        set: function (pos) {\n\t            this._orientation[1] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardZ', {\n\t        set: function (pos) {\n\t            this._orientation[2] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upX', {\n\t        set: function (pos) {\n\t            this._orientation[3] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[3];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upY', {\n\t        set: function (pos) {\n\t            this._orientation[4] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[4];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upZ', {\n\t        set: function (pos) {\n\t            this._orientation[5] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[5];\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.dispose = function () {\n\t        this._orientation = null;\n\t        this._position = null;\n\t        return this;\n\t    };\n\t    //SINGLETON SETUP\n\t    var ListenerConstructor = Tone.Listener;\n\t    Tone.Listener = new ListenerConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Listener instanceof ListenerConstructor) {\n\t            //a single listener object\n\t            Tone.Listener = context.Listener;\n\t        } else {\n\t            //make new Listener insides\n\t            Tone.Listener = new ListenerConstructor();\n\t        }\n\t        context.Listener = Tone.Listener;\n\t    });\n\t    //END SINGLETON SETUP\n\t    return Tone.Listener;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  shim\n\t\t *  @private\n\t\t */\n\t    if (!window.hasOwnProperty('OfflineAudioContext') && window.hasOwnProperty('webkitOfflineAudioContext')) {\n\t        window.OfflineAudioContext = window.webkitOfflineAudioContext;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the OfflineAudioContext\n\t\t *  @extends {Tone.Context}\n\t\t *  @param  {Number}  channels  The number of channels to render\n\t\t *  @param  {Number}  duration  The duration to render in samples\n\t\t *  @param {Number} sampleRate the sample rate to render at\n\t\t */\n\t    Tone.OfflineContext = function (channels, duration, sampleRate) {\n\t        /**\n\t\t\t *  The offline context\n\t\t\t *  @private\n\t\t\t *  @type  {OfflineAudioContext}\n\t\t\t */\n\t        var offlineContext = new OfflineAudioContext(channels, duration * sampleRate, sampleRate);\n\t        //wrap the methods/members\n\t        Tone.Context.call(this, {\n\t            'context': offlineContext,\n\t            'clockSource': 'offline',\n\t            'lookAhead': 0,\n\t            'updateInterval': 128 / sampleRate\n\t        });\n\t        /**\n\t\t\t *  A private reference to the duration\n\t\t\t *  @private\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this._duration = duration;\n\t        /**\n\t\t\t *  An artificial clock source\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._currentTime = 0;\n\t    };\n\t    Tone.extend(Tone.OfflineContext, Tone.Context);\n\t    /**\n\t\t *  Override the now method to point to the internal clock time\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.OfflineContext.prototype.now = function () {\n\t        return this._currentTime;\n\t    };\n\t    /**\n\t\t *  Render the output of the OfflineContext\n\t\t *  @return  {Promise}\n\t\t */\n\t    Tone.OfflineContext.prototype.render = function () {\n\t        while (this._duration - this._currentTime >= 0) {\n\t            //invoke all the callbacks on that time\n\t            this.emit('tick');\n\t            //increment the clock\n\t            this._currentTime += this.blockTime;\n\t        }\n\t        //promise returned is not yet implemented in all browsers\n\t        return new Promise(function (done) {\n\t            this._context.oncomplete = function (e) {\n\t                done(e.renderedBuffer);\n\t            };\n\t            this._context.startRendering();\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Close the context\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.OfflineContext.prototype.close = function () {\n\t        this._context = null;\n\t    };\n\t    return Tone.OfflineContext;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext. \n\t\t *  The OfflineAudioContext is capable of rendering much faster than real time in many cases. \n\t\t *  The callback function also passes in an offline instance of Tone.Transport which can be used\n\t\t *  to schedule events along the Transport. \n\t\t *  @param  {Function}  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n\t\t *  @param  {Time}  duration     the amount of time to record for.\n\t\t *  @return  {Promise}  The promise which is invoked with the Tone.Buffer of the recorded output.\n\t\t *  @example\n\t\t * //render 2 seconds of the oscillator\n\t\t * Tone.Offline(function(){\n\t\t * \t//only nodes created in this callback will be recorded\n\t\t * \tvar oscillator = new Tone.Oscillator().toMaster().start(0)\n\t\t * \t//schedule their events\n\t\t * }, 2).then(function(buffer){\n\t\t * \t//do something with the output buffer\n\t\t * })\n\t\t * @example\n\t\t * //can also schedule events along the Transport\n\t\t * //using the passed in Offline Transport\n\t\t * Tone.Offline(function(Transport){\n\t\t * \tvar osc = new Tone.Oscillator().toMaster()\n\t\t * \tTransport.schedule(function(time){\n\t\t * \t\tosc.start(time).stop(time + 0.1)\n\t\t * \t}, 1)\n\t\t * \tTransport.start(0.2)\n\t\t * }, 4).then(function(buffer){\n\t\t * \t//do something with the output buffer\n\t\t * })\n\t\t */\n\t    Tone.Offline = function (callback, duration) {\n\t        //set the OfflineAudioContext\n\t        var sampleRate = Tone.context.sampleRate;\n\t        var originalContext = Tone.context;\n\t        var context = new Tone.OfflineContext(2, duration, sampleRate);\n\t        Tone.context = context;\n\t        //invoke the callback/scheduling\n\t        callback(Tone.Transport);\n\t        //process the audio\n\t        var rendered = context.render();\n\t        //return the original AudioContext\n\t        Tone.context = originalContext;\n\t        //return the audio\n\t        return rendered.then(function (buffer) {\n\t            //wrap it in a Tone.Buffer\n\t            return new Tone.Buffer(buffer);\n\t        });\n\t    };\n\t    return Tone.Offline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * \t@class  Tone.Effect is the base class for effects. Connect the effect between\n\t\t * \t        the effectSend and effectReturn GainNodes, then control the amount of\n\t\t * \t        effect which goes to the output using the wet control.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {NormalRange|Object} [wet] The starting wet value.\n\t\t */\n\t    Tone.Effect = function () {\n\t        var options = Tone.defaults(arguments, ['wet'], Tone.Effect);\n\t        Tone.AudioNode.call(this);\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t        /**\n\t\t\t *  The wet control is how much of the effected\n\t\t\t *  will pass through to the output. 1 = 100% effected\n\t\t\t *  signal, 0 = 100% dry signal.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.wet = this._dryWet.fade;\n\t        /**\n\t\t\t *  connect the effectSend to the input of hte effect\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSend = new Tone.Gain();\n\t        /**\n\t\t\t *  connect the output of the effect to the effectReturn\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturn = new Tone.Gain();\n\t        //connections\n\t        this.input.connect(this._dryWet.a);\n\t        this.input.connect(this.effectSend);\n\t        this.effectReturn.connect(this._dryWet.b);\n\t        this._dryWet.connect(this.output);\n\t        this._readOnly(['wet']);\n\t    };\n\t    Tone.extend(Tone.Effect, Tone.AudioNode);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Effect.defaults = { 'wet': 1 };\n\t    /**\n\t\t *  chains the effect in between the effectSend and effectReturn\n\t\t *  @param  {Tone} effect\n\t\t *  @private\n\t\t *  @returns {Tone.Effect} this\n\t\t */\n\t    Tone.Effect.prototype.connectEffect = function (effect) {\n\t        this.effectSend.chain(effect, this.effectReturn);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Effect} this\n\t\t */\n\t    Tone.Effect.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._dryWet.dispose();\n\t        this._dryWet = null;\n\t        this.effectSend.dispose();\n\t        this.effectSend = null;\n\t        this.effectReturn.dispose();\n\t        this.effectReturn = null;\n\t        this._writable(['wet']);\n\t        this.wet = null;\n\t        return this;\n\t    };\n\t    return Tone.Effect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n\t\t *         Setting the LFO rate and depth allows for control over the filter modulation rate \n\t\t *         and depth.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Time|Object} [frequency] The rate of the LFO.\n\t\t *  @param {Frequency=} baseFrequency The lower value of the LFOs oscillation\n\t \t *  @param {Frequency=} octaves The number of octaves above the baseFrequency\n\t\t *  @example\n\t\t * //create an autofilter and start it's LFO\n\t\t * var autoFilter = new Tone.AutoFilter(\"4n\").toMaster().start();\n\t\t * //route an oscillator through the filter and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(autoFilter).start();\n\t\t */\n\t    Tone.AutoFilter = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'baseFrequency',\n\t            'octaves'\n\t        ], Tone.AutoFilter);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which drives the filter cutoff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'amplitude': options.depth\n\t        });\n\t        /**\n\t\t\t * The range of the filter modulating between the min and max frequency. \n\t\t\t * 0 = no modulation. 1 = full modulation.\n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        /**\n\t\t\t * How fast the filter modulates between min and max. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        /**\n\t\t\t *  The filter node\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.filter = new Tone.Filter(options.filter);\n\t        /**\n\t\t\t *  The octaves placeholder\n\t\t\t *  @type {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = 0;\n\t        //connections\n\t        this.connectEffect(this.filter);\n\t        this._lfo.connect(this.filter.frequency);\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.octaves = options.octaves;\n\t        this.baseFrequency = options.baseFrequency;\n\t    };\n\t    //extend Effect\n\t    Tone.extend(Tone.AutoFilter, Tone.Effect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoFilter.defaults = {\n\t        'frequency': 1,\n\t        'type': 'sine',\n\t        'depth': 1,\n\t        'baseFrequency': 200,\n\t        'octaves': 2.6,\n\t        'filter': {\n\t            'type': 'lowpass',\n\t            'rolloff': -12,\n\t            'Q': 1\n\t        }\n\t    };\n\t    /**\n\t\t * Start the effect.\n\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.start = function (time) {\n\t        this._lfo.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the effect.\n\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.stop = function (time) {\n\t        this._lfo.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the filter to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                               Transport has started. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.sync = function (delay) {\n\t        this._lfo.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the filter from the transport.\n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.unsync = function () {\n\t        this._lfo.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the AutoFilter. \n\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum value of the filter's cutoff frequency.\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {Frequency}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._lfo.min;\n\t        },\n\t        set: function (freq) {\n\t            this._lfo.min = this.toFrequency(freq);\n\t            //and set the max\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum value of the filter's cutoff frequency. \n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (oct) {\n\t            this._octaves = oct;\n\t            this._lfo.max = this.baseFrequency * Math.pow(2, oct);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this.filter.dispose();\n\t        this.filter = null;\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. \n\t\t *         More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency|Object} [frequency] Rate of left-right oscillation. \n\t\t *  @example\n\t\t * //create an autopanner and start it's LFO\n\t\t * var autoPanner = new Tone.AutoPanner(\"4n\").toMaster().start();\n\t\t * //route an oscillator through the panner and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(autoPanner).start();\n\t\t */\n\t    Tone.AutoPanner = function () {\n\t        var options = Tone.defaults(arguments, ['frequency'], Tone.AutoPanner);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which drives the panning\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'amplitude': options.depth,\n\t            'min': -1,\n\t            'max': 1\n\t        });\n\t        /**\n\t\t\t * The amount of panning between left and right. \n\t\t\t * 0 = always center. 1 = full range between left and right. \n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        /**\n\t\t\t *  the panner node which does the panning\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = new Tone.Panner();\n\t        /**\n\t\t\t * How fast the panner modulates between left and right. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        //connections\n\t        this.connectEffect(this._panner);\n\t        this._lfo.connect(this._panner.pan);\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'depth',\n\t            'frequency'\n\t        ]);\n\t    };\n\t    //extend Effect\n\t    Tone.extend(Tone.AutoPanner, Tone.Effect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoPanner.defaults = {\n\t        'frequency': 1,\n\t        'type': 'sine',\n\t        'depth': 1\n\t    };\n\t    /**\n\t\t * Start the effect.\n\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.start = function (time) {\n\t        this._lfo.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the effect.\n\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.stop = function (time) {\n\t        this._lfo.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the panner to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                               Transport has started. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.sync = function (delay) {\n\t        this._lfo.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the panner from the transport\n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.unsync = function () {\n\t        this._lfo.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the AutoFilter. \n\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AutoPanner.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this._panner.dispose();\n\t        this._panner = null;\n\t        this._writable([\n\t            'depth',\n\t            'frequency'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoPanner;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).\n\t\t *          The frequency of the filter is adjusted proportionally to the \n\t\t *          incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency|Object} [baseFrequency] The frequency the filter is set \n\t\t *                                            to at the low point of the wah\n\t\t *  @param {Positive} [octaves] The number of octaves above the baseFrequency\n\t\t *                                the filter will sweep to when fully open\n\t\t *  @param {Decibels} [sensitivity] The decibel threshold sensitivity for \n\t\t *                                   the incoming signal. Normal range of -40 to 0. \n\t\t *  @example\n\t\t * var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();\n\t\t * //initialize the synth and connect to autowah\n\t\t * var synth = new Synth.connect(autoWah);\n\t\t * //Q value influences the effect of the wah - default is 2\n\t\t * autoWah.Q.value = 6;\n\t\t * //more audible on higher notes\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\")\n\t\t */\n\t    Tone.AutoWah = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'baseFrequency',\n\t            'octaves',\n\t            'sensitivity'\n\t        ], Tone.AutoWah);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  The envelope follower. Set the attack/release\n\t\t\t *  timing to adjust how the envelope is followed. \n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t        this.follower = new Tone.Follower(options.follower);\n\t        /**\n\t\t\t *  scales the follower value to the frequency domain\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sweepRange = new Tone.ScaleExp(0, 1, 0.5);\n\t        /**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._baseFrequency = options.baseFrequency;\n\t        /**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  the input gain to adjust the sensitivity\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputBoost = new Tone.Gain();\n\t        /**\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._bandpass = new Tone.Filter({\n\t            'rolloff': -48,\n\t            'frequency': 0,\n\t            'Q': options.Q\n\t        });\n\t        /**\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._peaking = new Tone.Filter(0, 'peaking');\n\t        this._peaking.gain.value = options.gain;\n\t        /**\n\t\t\t * The gain of the filter.\n\t\t\t * @type {Number}\n\t\t\t * @signal\n\t\t\t */\n\t        this.gain = this._peaking.gain;\n\t        /**\n\t\t\t * The quality of the filter.\n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t */\n\t        this.Q = this._bandpass.Q;\n\t        //the control signal path\n\t        this.effectSend.chain(this._inputBoost, this.follower, this._sweepRange);\n\t        this._sweepRange.connect(this._bandpass.frequency);\n\t        this._sweepRange.connect(this._peaking.frequency);\n\t        //the filtered path\n\t        this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t        //set the initial value\n\t        this._setSweepRange();\n\t        this.sensitivity = options.sensitivity;\n\t        this._readOnly([\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AutoWah, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoWah.defaults = {\n\t        'baseFrequency': 100,\n\t        'octaves': 6,\n\t        'sensitivity': 0,\n\t        'Q': 2,\n\t        'gain': 2,\n\t        'follower': {\n\t            'attack': 0.3,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t * The number of octaves that the filter will sweep above the \n\t\t * baseFrequency. \n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Number}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            this._setSweepRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The base frequency from which the sweep will start from.\n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._baseFrequency;\n\t        },\n\t        set: function (baseFreq) {\n\t            this._baseFrequency = baseFreq;\n\t            this._setSweepRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The sensitivity to control how responsive to the input signal the filter is. \n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Decibels}\n\t\t * @name sensitivity\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'sensitivity', {\n\t        get: function () {\n\t            return Tone.gainToDb(1 / this._inputBoost.gain.value);\n\t        },\n\t        set: function (sensitivy) {\n\t            this._inputBoost.gain.value = 1 / Tone.dbToGain(sensitivy);\n\t        }\n\t    });\n\t    /**\n\t\t *  sets the sweep range of the scaler\n\t\t *  @private\n\t\t */\n\t    Tone.AutoWah.prototype._setSweepRange = function () {\n\t        this._sweepRange.min = this._baseFrequency;\n\t        this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.AutoWah} this\n\t\t */\n\t    Tone.AutoWah.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this.follower.dispose();\n\t        this.follower = null;\n\t        this._sweepRange.dispose();\n\t        this._sweepRange = null;\n\t        this._bandpass.dispose();\n\t        this._bandpass = null;\n\t        this._peaking.dispose();\n\t        this._peaking = null;\n\t        this._inputBoost.dispose();\n\t        this._inputBoost = null;\n\t        this._writable([\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t        this.gain = null;\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoWah;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Bitcrusher downsamples the incoming signal to a different bitdepth. \n\t\t *         Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing\n\t\t *         on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Number} bits The number of bits to downsample the signal. Nominal range\n\t\t *                       of 1 to 8. \n\t\t *  @example\n\t\t * //initialize crusher and route a synth through it\n\t\t * var crusher = new Tone.BitCrusher(4).toMaster();\n\t\t * var synth = new Tone.MonoSynth().connect(crusher);\n\t\t */\n\t    Tone.BitCrusher = function () {\n\t        var options = Tone.defaults(arguments, ['bits'], Tone.BitCrusher);\n\t        Tone.Effect.call(this, options);\n\t        var invStepSize = 1 / Math.pow(2, options.bits - 1);\n\t        /**\n\t\t\t *  Subtract the input signal and the modulus of the input signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subtract = new Tone.Subtract();\n\t        /**\n\t\t\t *  The mod function\n\t\t\t *  @type  {Tone.Modulo}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulo = new Tone.Modulo(invStepSize);\n\t        /**\n\t\t\t *  keeps track of the bits\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._bits = options.bits;\n\t        //connect it up\n\t        this.effectSend.fan(this._subtract, this._modulo);\n\t        this._modulo.connect(this._subtract, 0, 1);\n\t        this._subtract.connect(this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.BitCrusher, Tone.Effect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.BitCrusher.defaults = { 'bits': 4 };\n\t    /**\n\t\t * The bit depth of the effect. Nominal range of 1-8. \n\t\t * @memberOf Tone.BitCrusher#\n\t\t * @type {number}\n\t\t * @name bits\n\t\t */\n\t    Object.defineProperty(Tone.BitCrusher.prototype, 'bits', {\n\t        get: function () {\n\t            return this._bits;\n\t        },\n\t        set: function (bits) {\n\t            this._bits = bits;\n\t            var invStepSize = 1 / Math.pow(2, bits - 1);\n\t            this._modulo.value = invStepSize;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.BitCrusher} this\n\t\t */\n\t    Tone.BitCrusher.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._subtract.dispose();\n\t        this._subtract = null;\n\t        this._modulo.dispose();\n\t        this._modulo = null;\n\t        return this;\n\t    };\n\t    return Tone.BitCrusher;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good \n\t\t *         for making different types of distortion sounds.\n\t\t *         Note that odd orders sound very different from even ones, \n\t\t *         and order = 1 is no change. \n\t\t *         Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {Positive|Object} [order] The order of the chebyshev polynomial. Normal range between 1-100. \n\t\t *  @example\n\t\t * //create a new cheby\n\t\t * var cheby = new Tone.Chebyshev(50);\n\t\t * //create a monosynth connected to our cheby\n\t\t * synth = new Tone.MonoSynth().connect(cheby);\n\t\t */\n\t    Tone.Chebyshev = function () {\n\t        var options = Tone.defaults(arguments, ['order'], Tone.Chebyshev);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(4096);\n\t        /**\n\t\t\t * holds onto the order of the filter\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t        this._order = options.order;\n\t        this.connectEffect(this._shaper);\n\t        this.order = options.order;\n\t        this.oversample = options.oversample;\n\t    };\n\t    Tone.extend(Tone.Chebyshev, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Chebyshev.defaults = {\n\t        'order': 1,\n\t        'oversample': 'none'\n\t    };\n\t    /**\n\t\t *  get the coefficient for that degree\n\t\t *  @param {number} x the x value\n\t\t *  @param   {number} degree \n\t\t *  @param {Object} memo memoize the computed value. \n\t\t *                       this speeds up computation greatly. \n\t\t *  @return  {number}       the coefficient \n\t\t *  @private\n\t\t */\n\t    Tone.Chebyshev.prototype._getCoefficient = function (x, degree, memo) {\n\t        if (memo.hasOwnProperty(degree)) {\n\t            return memo[degree];\n\t        } else if (degree === 0) {\n\t            memo[degree] = 0;\n\t        } else if (degree === 1) {\n\t            memo[degree] = x;\n\t        } else {\n\t            memo[degree] = 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo);\n\t        }\n\t        return memo[degree];\n\t    };\n\t    /**\n\t\t * The order of the Chebyshev polynomial which creates\n\t\t * the equation which is applied to the incoming \n\t\t * signal through a Tone.WaveShaper. The equations\n\t\t * are in the form:<br>\n\t\t * order 2: 2x^2 + 1<br>\n\t\t * order 3: 4x^3 + 3x <br>\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {Positive}\n\t\t * @name order\n\t\t */\n\t    Object.defineProperty(Tone.Chebyshev.prototype, 'order', {\n\t        get: function () {\n\t            return this._order;\n\t        },\n\t        set: function (order) {\n\t            this._order = order;\n\t            var curve = new Array(4096);\n\t            var len = curve.length;\n\t            for (var i = 0; i < len; ++i) {\n\t                var x = i * 2 / len - 1;\n\t                if (x === 0) {\n\t                    //should output 0 when input is 0\n\t                    curve[i] = 0;\n\t                } else {\n\t                    curve[i] = this._getCoefficient(x, order, {});\n\t                }\n\t            }\n\t            this._shaper.curve = curve;\n\t        }\n\t    });\n\t    /**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.Chebyshev.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            this._shaper.oversample = oversampling;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Chebyshev} this\n\t\t */\n\t    Tone.Chebyshev.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        return this;\n\t    };\n\t    return Tone.Chebyshev;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R.\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.Effect}\n\t\t */\n\t    Tone.StereoEffect = function () {\n\t        //get the defaults\n\t        Tone.AudioNode.call(this);\n\t        var options = Tone.defaults(arguments, ['wet'], Tone.Effect);\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t        /**\n\t\t\t *  The wet control, i.e. how much of the effected\n\t\t\t *  will pass through to the output.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.wet = this._dryWet.fade;\n\t        /**\n\t\t\t *  then split it\n\t\t\t *  @type {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t        this._split = new Tone.Split();\n\t        /**\n\t\t\t *  the effects send LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSendL = this._split.left;\n\t        /**\n\t\t\t *  the effects send RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSendR = this._split.right;\n\t        /**\n\t\t\t *  the stereo effect merger\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = new Tone.Merge();\n\t        /**\n\t\t\t *  the effect return LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturnL = this._merge.left;\n\t        /**\n\t\t\t *  the effect return RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturnR = this._merge.right;\n\t        //connections\n\t        this.input.connect(this._split);\n\t        //dry wet connections\n\t        this.input.connect(this._dryWet, 0, 0);\n\t        this._merge.connect(this._dryWet, 0, 1);\n\t        this._dryWet.connect(this.output);\n\t        this._readOnly(['wet']);\n\t    };\n\t    Tone.extend(Tone.StereoEffect, Tone.Effect);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.StereoEffect} this\n\t\t */\n\t    Tone.StereoEffect.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._dryWet.dispose();\n\t        this._dryWet = null;\n\t        this._split.dispose();\n\t        this._split = null;\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        this.effectSendL = null;\n\t        this.effectSendR = null;\n\t        this.effectReturnL = null;\n\t        this.effectReturnR = null;\n\t        this._writable(['wet']);\n\t        this.wet = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * \t@class  Tone.FeedbackEffect provides a loop between an \n\t\t * \t        audio source and its own output. This is a base-class\n\t\t * \t        for feedback effects. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {NormalRange|Object} [feedback] The initial feedback value.\n\t\t */\n\t    Tone.FeedbackEffect = function () {\n\t        var options = Tone.defaults(arguments, ['feedback'], Tone.FeedbackEffect);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the gain which controls the feedback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackGain = new Tone.Gain(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of signal which is fed back into the effect input. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = this._feedbackGain.gain;\n\t        //the feedback loop\n\t        this.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.FeedbackEffect, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackEffect.defaults = { 'feedback': 0.125 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.FeedbackEffect} this\n\t\t */\n\t    Tone.FeedbackEffect.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this._feedbackGain.dispose();\n\t        this._feedbackGain = null;\n\t        this.feedback = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Just like a stereo feedback effect, but the feedback is routed from left to right\n\t\t *         and right to left instead of on the same channel.\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.StereoEffect}\n\t\t */\n\t    Tone.StereoXFeedbackEffect = function () {\n\t        var options = Tone.defaults(arguments, ['feedback'], Tone.FeedbackEffect);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The amount of feedback from the output\n\t\t\t *  back into the input of the effect (routed\n\t\t\t *  across left and right channels).\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackLR = new Tone.Gain();\n\t        /**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackRL = new Tone.Gain();\n\t        //connect it up\n\t        this.effectReturnL.chain(this._feedbackLR, this.effectSendR);\n\t        this.effectReturnR.chain(this._feedbackRL, this.effectSendL);\n\t        this.feedback.fan(this._feedbackLR.gain, this._feedbackRL.gain);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.StereoXFeedbackEffect, Tone.StereoEffect);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoXFeedbackEffect} this\n\t\t */\n\t    Tone.StereoXFeedbackEffect.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this.feedback.dispose();\n\t        this.feedback = null;\n\t        this._feedbackLR.dispose();\n\t        this._feedbackLR = null;\n\t        this._feedbackRL.dispose();\n\t        this._feedbackRL = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoXFeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Chorus is a stereo chorus effect with feedback composed of \n\t\t *         a left and right delay with a Tone.LFO applied to the delayTime of each channel. \n\t\t *         Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n\t\t *         Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.StereoXFeedbackEffect}\n\t\t *\t@param {Frequency|Object} [frequency] The frequency of the LFO.\n\t\t *\t@param {Milliseconds} [delayTime] The delay of the chorus effect in ms. \n\t\t *\t@param {NormalRange} [depth] The depth of the chorus.\n\t\t *\t@example\n\t\t * var chorus = new Tone.Chorus(4, 2.5, 0.5);\n\t\t * var synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);\n\t\t * synth.triggerAttackRelease([\"C3\",\"E3\",\"G3\"], \"8n\");\n\t\t */\n\t    Tone.Chorus = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'delayTime',\n\t            'depth'\n\t        ], Tone.Chorus);\n\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the depth of the chorus\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._depth = options.depth;\n\t        /**\n\t\t\t *  the delayTime\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayTime = options.delayTime / 1000;\n\t        /**\n\t\t\t *  the lfo which controls the delayTime\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'min': 0,\n\t            'max': 1\n\t        });\n\t        /**\n\t\t\t *  another LFO for the right side with a 180 degree phase diff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'min': 0,\n\t            'max': 1,\n\t            'phase': 180\n\t        });\n\t        /**\n\t\t\t *  delay for left\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNodeL = new Tone.Delay();\n\t        /**\n\t\t\t *  delay for right\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNodeR = new Tone.Delay();\n\t        /**\n\t\t\t * The frequency of the LFO which modulates the delayTime. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfoL.frequency;\n\t        //connections\n\t        this.effectSendL.chain(this._delayNodeL, this.effectReturnL);\n\t        this.effectSendR.chain(this._delayNodeR, this.effectReturnR);\n\t        //and pass through to make the detune apparent\n\t        this.effectSendL.connect(this.effectReturnL);\n\t        this.effectSendR.connect(this.effectReturnR);\n\t        //lfo setup\n\t        this._lfoL.connect(this._delayNodeL.delayTime);\n\t        this._lfoR.connect(this._delayNodeR.delayTime);\n\t        //start the lfo\n\t        this._lfoL.start();\n\t        this._lfoR.start();\n\t        //have one LFO frequency control the other\n\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t        //set the initial values\n\t        this.depth = this._depth;\n\t        this.frequency.value = options.frequency;\n\t        this.type = options.type;\n\t        this._readOnly(['frequency']);\n\t        this.spread = options.spread;\n\t    };\n\t    Tone.extend(Tone.Chorus, Tone.StereoXFeedbackEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Chorus.defaults = {\n\t        'frequency': 1.5,\n\t        'delayTime': 3.5,\n\t        'depth': 0.7,\n\t        'feedback': 0.1,\n\t        'type': 'sine',\n\t        'spread': 180\n\t    };\n\t    /**\n\t\t * The depth of the effect. A depth of 1 makes the delayTime\n\t\t * modulate between 0 and 2*delayTime (centered around the delayTime). \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {NormalRange}\n\t\t * @name depth\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'depth', {\n\t        get: function () {\n\t            return this._depth;\n\t        },\n\t        set: function (depth) {\n\t            this._depth = depth;\n\t            var deviation = this._delayTime * depth;\n\t            this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n\t            this._lfoL.max = this._delayTime + deviation;\n\t            this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n\t            this._lfoR.max = this._delayTime + deviation;\n\t        }\n\t    });\n\t    /**\n\t\t * The delayTime in milliseconds of the chorus. A larger delayTime\n\t\t * will give a more pronounced effect. Nominal range a delayTime\n\t\t * is between 2 and 20ms. \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {Milliseconds}\n\t\t * @name delayTime\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'delayTime', {\n\t        get: function () {\n\t            return this._delayTime * 1000;\n\t        },\n\t        set: function (delayTime) {\n\t            this._delayTime = delayTime / 1000;\n\t            this.depth = this._depth;\n\t        }\n\t    });\n\t    /**\n\t\t * The oscillator type of the LFO. \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfoL.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfoL.type = type;\n\t            this._lfoR.type = type;\n\t        }\n\t    });\n\t    /** \n\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {Degrees}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'spread', {\n\t        get: function () {\n\t            return this._lfoR.phase - this._lfoL.phase;\n\t        },\n\t        set: function (spread) {\n\t            this._lfoL.phase = 90 - spread / 2;\n\t            this._lfoR.phase = spread / 2 + 90;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Chorus} this\n\t\t */\n\t    Tone.Chorus.prototype.dispose = function () {\n\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        this._delayNodeL.dispose();\n\t        this._delayNodeL = null;\n\t        this._delayNodeR.dispose();\n\t        this._delayNodeR = null;\n\t        this._writable('frequency');\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.Chorus;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Convolver is a wrapper around the Native Web Audio \n\t\t *          [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n\t\t *          Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n\t\t *          [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {string|Tone.Buffer|Object} [url] The URL of the impulse response or the Tone.Buffer\n\t\t *                                           contianing the impulse response. \n\t\t *  @param {Function} onload The callback to invoke when the url is loaded.\n\t\t *  @example\n\t\t * //initializing the convolver with an impulse response\n\t\t * var convolver = new Tone.Convolver(\"./path/to/ir.wav\").toMaster();\n\t\t */\n\t    Tone.Convolver = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.Convolver);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  convolver node\n\t\t\t *  @type {ConvolverNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._convolver = this.context.createConvolver();\n\t        /**\n\t\t\t *  the convolution buffer\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = new Tone.Buffer();\n\t        if (Tone.isString(options.url)) {\n\t            this._buffer.load(options.url, function (buffer) {\n\t                this.buffer = buffer;\n\t                options.onload();\n\t            }.bind(this));\n\t        } else if (options.url) {\n\t            this.buffer = options.url;\n\t            options.onload();\n\t        }\n\t        this.connectEffect(this._convolver);\n\t    };\n\t    Tone.extend(Tone.Convolver, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Convolver.defaults = { 'onload': Tone.noOp };\n\t    /**\n\t\t *  The convolver's buffer\n\t\t *  @memberOf Tone.Convolver#\n\t\t *  @type {AudioBuffer}\n\t\t *  @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Convolver.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer.get();\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t            this._convolver.buffer = this._buffer.get();\n\t        }\n\t    });\n\t    /**\n\t\t *  Load an impulse response url as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {string} url The url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @param  {function=} callback\n\t\t *  @returns {Promise}\n\t\t */\n\t    Tone.Convolver.prototype.load = function (url, callback) {\n\t        return this._buffer.load(url, function (buff) {\n\t            this.buffer = buff;\n\t            if (callback) {\n\t                callback();\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Convolver} this\n\t\t */\n\t    Tone.Convolver.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._convolver.disconnect();\n\t        this._convolver = null;\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    return Tone.Convolver;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Distortion is a simple distortion effect using Tone.WaveShaper.\n\t\t *         Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {Number|Object} [distortion] The amount of distortion (nominal range of 0-1)\n\t\t *  @example\n\t\t * var dist = new Tone.Distortion(0.8).toMaster();\n\t\t * var fm = new Tone.SimpleFM().connect(dist);\n\t\t * //this sounds good on bass notes\n\t\t * fm.triggerAttackRelease(\"A1\", \"8n\");\n\t\t */\n\t    Tone.Distortion = function () {\n\t        var options = Tone.defaults(arguments, ['distortion'], Tone.Distortion);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(4096);\n\t        /**\n\t\t\t * holds the distortion amount\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t        this._distortion = options.distortion;\n\t        this.connectEffect(this._shaper);\n\t        this.distortion = options.distortion;\n\t        this.oversample = options.oversample;\n\t    };\n\t    Tone.extend(Tone.Distortion, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Distortion.defaults = {\n\t        'distortion': 0.4,\n\t        'oversample': 'none'\n\t    };\n\t    /**\n\t\t * The amount of distortion.\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {NormalRange}\n\t\t * @name distortion\n\t\t */\n\t    Object.defineProperty(Tone.Distortion.prototype, 'distortion', {\n\t        get: function () {\n\t            return this._distortion;\n\t        },\n\t        set: function (amount) {\n\t            this._distortion = amount;\n\t            var k = amount * 100;\n\t            var deg = Math.PI / 180;\n\t            this._shaper.setMap(function (x) {\n\t                if (Math.abs(x) < 0.001) {\n\t                    //should output 0 when input is 0\n\t                    return 0;\n\t                } else {\n\t                    return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n\t                }\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.Distortion.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            this._shaper.oversample = oversampling;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Distortion} this\n\t\t */\n\t    Tone.Distortion.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        return this;\n\t    };\n\t    return Tone.Distortion;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.FeedbackDelay is a DelayNode in which part of output\n\t\t *          signal is fed back into the delay. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Time|Object} [delayTime] The delay applied to the incoming signal. \n\t\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t\t *                            is fed back through the delay.\n\t\t *  @example\n\t\t * var feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toMaster();\n\t\t * var tom = new Tone.DrumSynth({\n\t\t * \t\"octaves\" : 4,\n\t\t * \t\"pitchDecay\" : 0.1\n\t\t * }).connect(feedbackDelay);\n\t\t * tom.triggerAttackRelease(\"A2\",\"32n\");\n\t\t */\n\t    Tone.FeedbackDelay = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'delayTime',\n\t            'feedback'\n\t        ], Tone.FeedbackDelay);\n\t        Tone.FeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The delayTime of the DelayNode. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delayNode.delayTime;\n\t        // connect it up\n\t        this.connectEffect(this._delayNode);\n\t        this._readOnly(['delayTime']);\n\t    };\n\t    Tone.extend(Tone.FeedbackDelay, Tone.FeedbackEffect);\n\t    /**\n\t\t *  The default values. \n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackDelay.defaults = { 'delayTime': 0.25 };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackDelay} this\n\t\t */\n\t    Tone.FeedbackDelay.prototype.dispose = function () {\n\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t        this._delayNode.dispose();\n\t        this._delayNode = null;\n\t        this._writable(['delayTime']);\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackDelay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  an array of comb filter delay values from Freeverb implementation\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterTunings = [\n\t        1557 / 44100,\n\t        1617 / 44100,\n\t        1491 / 44100,\n\t        1422 / 44100,\n\t        1277 / 44100,\n\t        1356 / 44100,\n\t        1188 / 44100,\n\t        1116 / 44100\n\t    ];\n\t    /**\n\t\t *  an array of allpass filter frequency values from Freeverb implementation\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var allpassFilterFrequencies = [\n\t        225,\n\t        556,\n\t        441,\n\t        341\n\t    ];\n\t    /**\n\t\t *  @class Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n\t\t *         Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [roomSize] Correlated to the decay time.\n\t\t *  @param {Frequency} [dampening] The cutoff frequency of a lowpass filter as part\n\t\t *                                 of the reverb.\n\t\t *  @example\n\t\t * var freeverb = new Tone.Freeverb().toMaster();\n\t\t * freeverb.dampening.value = 1000;\n\t\t * //routing synth through the reverb\n\t\t * var synth = new Tone.AMSynth().connect(freeverb);\n\t\t */\n\t    Tone.Freeverb = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'roomSize',\n\t            'dampening'\n\t        ], Tone.Freeverb);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The roomSize value between. A larger roomSize\n\t\t\t *  will result in a longer decay.\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of dampening of the reverberant signal.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = new Tone.Signal(options.dampening, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  the comb filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._combFilters = [];\n\t        /**\n\t\t\t *  the allpass filters on the left\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFiltersL = [];\n\t        /**\n\t\t\t *  the allpass filters on the right\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFiltersR = [];\n\t        //make the allpass filters on the right\n\t        for (var l = 0; l < allpassFilterFrequencies.length; l++) {\n\t            var allpassL = this.context.createBiquadFilter();\n\t            allpassL.type = 'allpass';\n\t            allpassL.frequency.value = allpassFilterFrequencies[l];\n\t            this._allpassFiltersL.push(allpassL);\n\t        }\n\t        //make the allpass filters on the left\n\t        for (var r = 0; r < allpassFilterFrequencies.length; r++) {\n\t            var allpassR = this.context.createBiquadFilter();\n\t            allpassR.type = 'allpass';\n\t            allpassR.frequency.value = allpassFilterFrequencies[r];\n\t            this._allpassFiltersR.push(allpassR);\n\t        }\n\t        //make the comb filters\n\t        for (var c = 0; c < combFilterTunings.length; c++) {\n\t            var lfpf = new Tone.LowpassCombFilter(combFilterTunings[c]);\n\t            if (c < combFilterTunings.length / 2) {\n\t                this.effectSendL.chain(lfpf, this._allpassFiltersL[0]);\n\t            } else {\n\t                this.effectSendR.chain(lfpf, this._allpassFiltersR[0]);\n\t            }\n\t            this.roomSize.connect(lfpf.resonance);\n\t            this.dampening.connect(lfpf.dampening);\n\t            this._combFilters.push(lfpf);\n\t        }\n\t        //chain the allpass filters togetehr\n\t        Tone.connectSeries.apply(Tone, this._allpassFiltersL);\n\t        Tone.connectSeries.apply(Tone, this._allpassFiltersR);\n\t        this._allpassFiltersL[this._allpassFiltersL.length - 1].connect(this.effectReturnL);\n\t        this._allpassFiltersR[this._allpassFiltersR.length - 1].connect(this.effectReturnR);\n\t        this._readOnly([\n\t            'roomSize',\n\t            'dampening'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Freeverb, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Freeverb.defaults = {\n\t        'roomSize': 0.7,\n\t        'dampening': 3000\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Freeverb} this\n\t\t */\n\t    Tone.Freeverb.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        for (var al = 0; al < this._allpassFiltersL.length; al++) {\n\t            this._allpassFiltersL[al].disconnect();\n\t            this._allpassFiltersL[al] = null;\n\t        }\n\t        this._allpassFiltersL = null;\n\t        for (var ar = 0; ar < this._allpassFiltersR.length; ar++) {\n\t            this._allpassFiltersR[ar].disconnect();\n\t            this._allpassFiltersR[ar] = null;\n\t        }\n\t        this._allpassFiltersR = null;\n\t        for (var cf = 0; cf < this._combFilters.length; cf++) {\n\t            this._combFilters[cf].dispose();\n\t            this._combFilters[cf] = null;\n\t        }\n\t        this._combFilters = null;\n\t        this._writable([\n\t            'roomSize',\n\t            'dampening'\n\t        ]);\n\t        this.roomSize.dispose();\n\t        this.roomSize = null;\n\t        this.dampening.dispose();\n\t        this.dampening = null;\n\t        return this;\n\t    };\n\t    return Tone.Freeverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  an array of the comb filter delay time values\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterDelayTimes = [\n\t        1687 / 25000,\n\t        1601 / 25000,\n\t        2053 / 25000,\n\t        2251 / 25000\n\t    ];\n\t    /**\n\t\t *  the resonances of each of the comb filters\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterResonances = [\n\t        0.773,\n\t        0.802,\n\t        0.753,\n\t        0.733\n\t    ];\n\t    /**\n\t\t *  the allpass filter frequencies\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var allpassFilterFreqs = [\n\t        347,\n\t        113,\n\t        37\n\t    ];\n\t    /**\n\t\t *  @class Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n\t\t *         tuned by John Chowning in 1970.\n\t\t *         It is made up of three allpass filters and four Tone.FeedbackCombFilter. \n\t\t *         \n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [roomSize] Coorelates to the decay time.\n\t\t *  @example\n\t\t * var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);\n\t\t * var delay = new Tone.FeedbackDelay(0.5); \n\t\t * //connecting the synth to reverb through delay\n\t\t * var synth = new Tone.DuoSynth().chain(delay, reverb);\n\t\t * synth.triggerAttackRelease(\"A4\",\"8n\");\n\t\t */\n\t    Tone.JCReverb = function () {\n\t        var options = Tone.defaults(arguments, ['roomSize'], Tone.JCReverb);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  room size control values between [0,1]\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  scale the room size\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scaleRoomSize = new Tone.Scale(-0.733, 0.197);\n\t        /**\n\t\t\t *  a series of allpass filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFilters = [];\n\t        /**\n\t\t\t *  parallel feedback comb filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackCombFilters = [];\n\t        //make the allpass filters\n\t        for (var af = 0; af < allpassFilterFreqs.length; af++) {\n\t            var allpass = this.context.createBiquadFilter();\n\t            allpass.type = 'allpass';\n\t            allpass.frequency.value = allpassFilterFreqs[af];\n\t            this._allpassFilters.push(allpass);\n\t        }\n\t        //and the comb filters\n\t        for (var cf = 0; cf < combFilterDelayTimes.length; cf++) {\n\t            var fbcf = new Tone.FeedbackCombFilter(combFilterDelayTimes[cf], 0.1);\n\t            this._scaleRoomSize.connect(fbcf.resonance);\n\t            fbcf.resonance.value = combFilterResonances[cf];\n\t            this._allpassFilters[this._allpassFilters.length - 1].connect(fbcf);\n\t            if (cf < combFilterDelayTimes.length / 2) {\n\t                fbcf.connect(this.effectReturnL);\n\t            } else {\n\t                fbcf.connect(this.effectReturnR);\n\t            }\n\t            this._feedbackCombFilters.push(fbcf);\n\t        }\n\t        //chain the allpass filters together\n\t        this.roomSize.connect(this._scaleRoomSize);\n\t        Tone.connectSeries.apply(Tone, this._allpassFilters);\n\t        this.effectSendL.connect(this._allpassFilters[0]);\n\t        this.effectSendR.connect(this._allpassFilters[0]);\n\t        this._readOnly(['roomSize']);\n\t    };\n\t    Tone.extend(Tone.JCReverb, Tone.StereoEffect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.JCReverb.defaults = { 'roomSize': 0.5 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.JCReverb} this\n\t\t */\n\t    Tone.JCReverb.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        for (var apf = 0; apf < this._allpassFilters.length; apf++) {\n\t            this._allpassFilters[apf].disconnect();\n\t            this._allpassFilters[apf] = null;\n\t        }\n\t        this._allpassFilters = null;\n\t        for (var fbcf = 0; fbcf < this._feedbackCombFilters.length; fbcf++) {\n\t            this._feedbackCombFilters[fbcf].dispose();\n\t            this._feedbackCombFilters[fbcf] = null;\n\t        }\n\t        this._feedbackCombFilters = null;\n\t        this._writable(['roomSize']);\n\t        this.roomSize.dispose();\n\t        this.roomSize = null;\n\t        this._scaleRoomSize.dispose();\n\t        this._scaleRoomSize = null;\n\t        return this;\n\t    };\n\t    return Tone.JCReverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels) \n\t\t *         and effects them separately before being recombined.\n\t\t *         Applies a Mid/Side seperation and recombination.\n\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t *         <br><br>\n\t\t *         This is a base-class for Mid/Side Effects. \n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideEffect = function () {\n\t        Tone.Effect.apply(this, arguments);\n\t        /**\n\t\t\t *  The mid/side split\n\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideSplit = new Tone.MidSideSplit();\n\t        /**\n\t\t\t *  The mid/side merge\n\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideMerge = new Tone.MidSideMerge();\n\t        /**\n\t\t\t *  The mid send. Connect to mid processing\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this.midSend = this._midSideSplit.mid;\n\t        /**\n\t\t\t *  The side send. Connect to side processing\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this.sideSend = this._midSideSplit.side;\n\t        /**\n\t\t\t *  The mid return connection\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.midReturn = this._midSideMerge.mid;\n\t        /**\n\t\t\t *  The side return connection\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.sideReturn = this._midSideMerge.side;\n\t        //the connections\n\t        this.effectSend.connect(this._midSideSplit);\n\t        this._midSideMerge.connect(this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.MidSideEffect, Tone.Effect);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.MidSideEffect} this\n\t\t */\n\t    Tone.MidSideEffect.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._midSideSplit.dispose();\n\t        this._midSideSplit = null;\n\t        this._midSideMerge.dispose();\n\t        this._midSideMerge = null;\n\t        this.midSend = null;\n\t        this.sideSend = null;\n\t        this.midReturn = null;\n\t        this.sideReturn = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Phaser is a phaser effect. Phasers work by changing the phase\n\t\t *         of different frequency components of an incoming signal. Read more on \n\t\t *         [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)). \n\t\t *         Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n\t\t *\n\t\t *\t@extends {Tone.StereoEffect}\n\t\t *\t@constructor\n\t\t *\t@param {Frequency|Object} [frequency] The speed of the phasing. \n\t\t *\t@param {number} [octaves] The octaves of the effect. \n\t\t *\t@param {Frequency} [baseFrequency] The base frequency of the filters. \n\t\t *\t@example\n\t\t * var phaser = new Tone.Phaser({\n\t\t * \t\"frequency\" : 15, \n\t\t * \t\"octaves\" : 5, \n\t\t * \t\"baseFrequency\" : 1000\n\t\t * }).toMaster();\n\t\t * var synth = new Tone.FMSynth().connect(phaser);\n\t\t * synth.triggerAttackRelease(\"E3\", \"2n\");\n\t\t */\n\t    Tone.Phaser = function () {\n\t        //set the defaults\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'octaves',\n\t            'baseFrequency'\n\t        ], Tone.Phaser);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which controls the frequency on the left side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO(options.frequency, 0, 1);\n\t        /**\n\t\t\t *  the lfo which controls the frequency on the right side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO(options.frequency, 0, 1);\n\t        this._lfoR.phase = 180;\n\t        /**\n\t\t\t *  the base modulation frequency\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._baseFrequency = options.baseFrequency;\n\t        /**\n\t\t\t *  the octaves of the phasing\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  The quality factor of the filters\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q, Tone.Type.Positive);\n\t        /**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filtersL = this._makeFilters(options.stages, this._lfoL, this.Q);\n\t        /**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filtersR = this._makeFilters(options.stages, this._lfoR, this.Q);\n\t        /**\n\t\t\t * the frequency of the effect\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t        this.frequency = this._lfoL.frequency;\n\t        this.frequency.value = options.frequency;\n\t        //connect them up\n\t        this.effectSendL.connect(this._filtersL[0]);\n\t        this.effectSendR.connect(this._filtersR[0]);\n\t        this._filtersL[options.stages - 1].connect(this.effectReturnL);\n\t        this._filtersR[options.stages - 1].connect(this.effectReturnR);\n\t        //control the frequency with one LFO\n\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t        //set the options\n\t        this.baseFrequency = options.baseFrequency;\n\t        this.octaves = options.octaves;\n\t        //start the lfo\n\t        this._lfoL.start();\n\t        this._lfoR.start();\n\t        this._readOnly([\n\t            'frequency',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Phaser, Tone.StereoEffect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {object}\n\t\t */\n\t    Tone.Phaser.defaults = {\n\t        'frequency': 0.5,\n\t        'octaves': 3,\n\t        'stages': 10,\n\t        'Q': 10,\n\t        'baseFrequency': 350\n\t    };\n\t    /**\n\t\t *  @param {number} stages\n\t\t *  @returns {Array} the number of filters all connected together\n\t\t *  @private\n\t\t */\n\t    Tone.Phaser.prototype._makeFilters = function (stages, connectToFreq, Q) {\n\t        var filters = new Array(stages);\n\t        //make all the filters\n\t        for (var i = 0; i < stages; i++) {\n\t            var filter = this.context.createBiquadFilter();\n\t            filter.type = 'allpass';\n\t            Q.connect(filter.Q);\n\t            connectToFreq.connect(filter.frequency);\n\t            filters[i] = filter;\n\t        }\n\t        Tone.connectSeries.apply(Tone, filters);\n\t        return filters;\n\t    };\n\t    /**\n\t\t * The number of octaves the phase goes above\n\t\t * the baseFrequency\n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.Phaser.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            var max = this._baseFrequency * Math.pow(2, octaves);\n\t            this._lfoL.max = max;\n\t            this._lfoR.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The the base frequency of the filters. \n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {number}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.Phaser.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._baseFrequency;\n\t        },\n\t        set: function (freq) {\n\t            this._baseFrequency = freq;\n\t            this._lfoL.min = freq;\n\t            this._lfoR.min = freq;\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Phaser} this\n\t\t */\n\t    Tone.Phaser.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'Q'\n\t        ]);\n\t        this.Q.dispose();\n\t        this.Q = null;\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        for (var i = 0; i < this._filtersL.length; i++) {\n\t            this._filtersL[i].disconnect();\n\t            this._filtersL[i] = null;\n\t        }\n\t        this._filtersL = null;\n\t        for (var j = 0; j < this._filtersR.length; j++) {\n\t            this._filtersR[j].disconnect();\n\t            this._filtersR[j] = null;\n\t        }\n\t        this._filtersR = null;\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.Phaser;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.PingPongDelay is a feedback delay effect where the echo is heard\n\t\t *          first in one channel and next in the opposite channel. In a stereo\n\t\t *          system these are the right and left channels.\n\t\t *          PingPongDelay in more simplified terms is two Tone.FeedbackDelays \n\t\t *          with independent delay values. Each delay is routed to one channel\n\t\t *          (left or right), and the channel triggered second will always \n\t\t *          trigger at the same interval after the first.\n\t\t *\n\t\t * \t@constructor\n\t\t * \t@extends {Tone.StereoXFeedbackEffect}\n\t\t *  @param {Time|Object} [delayTime] The delayTime between consecutive echos.\n\t\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t\t *                                 is fed back through the delay.\n\t\t *  @example\n\t\t * var pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toMaster();\n\t\t * var drum = new Tone.DrumSynth().connect(pingPong);\n\t\t * drum.triggerAttackRelease(\"C4\", \"32n\");\n\t\t */\n\t    Tone.PingPongDelay = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'delayTime',\n\t            'feedback'\n\t        ], Tone.PingPongDelay);\n\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the delay node on the left side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._leftDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the delay node on the right side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rightDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the predelay on the right side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rightPreDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the delay time signal\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = new Tone.Signal(options.delayTime, Tone.Type.Time);\n\t        //connect it up\n\t        this.effectSendL.chain(this._leftDelay, this.effectReturnL);\n\t        this.effectSendR.chain(this._rightPreDelay, this._rightDelay, this.effectReturnR);\n\t        this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n\t        //rearranged the feedback to be after the rightPreDelay\n\t        this._feedbackLR.disconnect();\n\t        this._feedbackLR.connect(this._rightDelay);\n\t        this._readOnly(['delayTime']);\n\t    };\n\t    Tone.extend(Tone.PingPongDelay, Tone.StereoXFeedbackEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PingPongDelay.defaults = {\n\t        'delayTime': 0.25,\n\t        'maxDelayTime': 1\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.PingPongDelay} this\n\t\t */\n\t    Tone.PingPongDelay.prototype.dispose = function () {\n\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t        this._leftDelay.dispose();\n\t        this._leftDelay = null;\n\t        this._rightDelay.dispose();\n\t        this._rightDelay = null;\n\t        this._rightPreDelay.dispose();\n\t        this._rightPreDelay = null;\n\t        this._writable(['delayTime']);\n\t        this.delayTime.dispose();\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.PingPongDelay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PitchShift does near-realtime pitch shifting to the incoming signal. \n\t\t *         The effect is achieved by speeding up or slowing down the delayTime\n\t\t *         of a DelayNode using a sawtooth wave. \n\t\t *         Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n\t\t *         Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n\t\t *         \n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Interval=} pitch The interval to transpose the incoming signal by. \n\t\t */\n\t    Tone.PitchShift = function () {\n\t        var options = Tone.defaults(arguments, ['pitch'], Tone.PitchShift);\n\t        Tone.FeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  The pitch signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._frequency = new Tone.Signal(0);\n\t        /**\n\t\t\t *  Uses two DelayNodes to cover up the jump in\n\t\t\t *  the sawtooth wave. \n\t\t\t *  @type  {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayA = new Tone.Delay(0, 1);\n\t        /**\n\t\t\t *  The first LFO.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoA = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 0.1,\n\t            'type': 'sawtooth'\n\t        }).connect(this._delayA.delayTime);\n\t        /**\n\t\t\t *  The second DelayNode\n\t\t\t *  @type  {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayB = new Tone.Delay(0, 1);\n\t        /**\n\t\t\t *  The first LFO.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoB = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 0.1,\n\t            'type': 'sawtooth',\n\t            'phase': 180\n\t        }).connect(this._delayB.delayTime);\n\t        /**\n\t\t\t *  Crossfade quickly between the two delay lines\n\t\t\t *  to cover up the jump in the sawtooth wave\n\t\t\t *  @type  {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._crossFade = new Tone.CrossFade();\n\t        /**\n\t\t\t *  LFO which alternates between the two\n\t\t\t *  delay lines to cover up the disparity in the\n\t\t\t *  sawtooth wave. \n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._crossFadeLFO = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 1,\n\t            'type': 'triangle',\n\t            'phase': 90\n\t        }).connect(this._crossFade.fade);\n\t        /**\n\t\t\t *  The delay node\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackDelay = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The amount of delay on the input signal\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._feedbackDelay.delayTime;\n\t        this._readOnly('delayTime');\n\t        /**\n\t\t\t *  Hold the current pitch\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pitch = options.pitch;\n\t        /**\n\t\t\t *  Hold the current windowSize\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._windowSize = options.windowSize;\n\t        //connect the two delay lines up\n\t        this._delayA.connect(this._crossFade.a);\n\t        this._delayB.connect(this._crossFade.b);\n\t        //connect the frequency\n\t        this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n\t        //route the input\n\t        this.effectSend.fan(this._delayA, this._delayB);\n\t        this._crossFade.chain(this._feedbackDelay, this.effectReturn);\n\t        //start the LFOs at the same time\n\t        var now = this.now();\n\t        this._lfoA.start(now);\n\t        this._lfoB.start(now);\n\t        this._crossFadeLFO.start(now);\n\t        //set the initial value\n\t        this.windowSize = this._windowSize;\n\t    };\n\t    Tone.extend(Tone.PitchShift, Tone.FeedbackEffect);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.PitchShift.defaults = {\n\t        'pitch': 0,\n\t        'windowSize': 0.1,\n\t        'delayTime': 0,\n\t        'feedback': 0\n\t    };\n\t    /**\n\t\t * Repitch the incoming signal by some interval (measured\n\t\t * in semi-tones). \n\t\t * @memberOf Tone.PitchShift#\n\t\t * @type {Interval}\n\t\t * @name pitch\n\t\t * @example\n\t\t * pitchShift.pitch = -12; //down one octave\n\t\t * pitchShift.pitch = 7; //up a fifth\n\t\t */\n\t    Object.defineProperty(Tone.PitchShift.prototype, 'pitch', {\n\t        get: function () {\n\t            return this._pitch;\n\t        },\n\t        set: function (interval) {\n\t            this._pitch = interval;\n\t            var factor = 0;\n\t            if (interval < 0) {\n\t                this._lfoA.min = 0;\n\t                this._lfoA.max = this._windowSize;\n\t                this._lfoB.min = 0;\n\t                this._lfoB.max = this._windowSize;\n\t                factor = Tone.intervalToFrequencyRatio(interval - 1) + 1;\n\t            } else {\n\t                this._lfoA.min = this._windowSize;\n\t                this._lfoA.max = 0;\n\t                this._lfoB.min = this._windowSize;\n\t                this._lfoB.max = 0;\n\t                factor = Tone.intervalToFrequencyRatio(interval) - 1;\n\t            }\n\t            this._frequency.value = factor * (1.2 / this._windowSize);\n\t        }\n\t    });\n\t    /**\n\t\t * The window size corresponds roughly to the sample length in a looping sampler. \n\t\t * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n\t\t * signal, but larger values will result in smoother pitch shifting for larger intervals. \n\t\t * A nominal range of 0.03 to 0.1 is recommended. \n\t\t * @memberOf Tone.PitchShift#\n\t\t * @type {Time}\n\t\t * @name windowSize\n\t\t * @example\n\t\t * pitchShift.windowSize = 0.1;\n\t\t */\n\t    Object.defineProperty(Tone.PitchShift.prototype, 'windowSize', {\n\t        get: function () {\n\t            return this._windowSize;\n\t        },\n\t        set: function (size) {\n\t            this._windowSize = this.toSeconds(size);\n\t            this.pitch = this._pitch;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.PitchShift}  this\n\t\t */\n\t    Tone.PitchShift.prototype.dispose = function () {\n\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t        this._frequency.dispose();\n\t        this._frequency = null;\n\t        this._delayA.disconnect();\n\t        this._delayA = null;\n\t        this._delayB.disconnect();\n\t        this._delayB = null;\n\t        this._lfoA.dispose();\n\t        this._lfoA = null;\n\t        this._lfoB.dispose();\n\t        this._lfoB = null;\n\t        this._crossFade.dispose();\n\t        this._crossFade = null;\n\t        this._crossFadeLFO.dispose();\n\t        this._crossFadeLFO = null;\n\t        this._writable('delayTime');\n\t        this._feedbackDelay.dispose();\n\t        this._feedbackDelay = null;\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.PitchShift;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Base class for stereo feedback effects where the effectReturn\n\t\t *         is fed back into the same channel. \n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.StereoEffect}\n\t\t */\n\t    Tone.StereoFeedbackEffect = function () {\n\t        var options = Tone.defaults(arguments, ['feedback'], Tone.FeedbackEffect);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  controls the amount of feedback\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackL = new Tone.Gain();\n\t        /**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackR = new Tone.Gain();\n\t        //connect it up\n\t        this.effectReturnL.chain(this._feedbackL, this.effectSendL);\n\t        this.effectReturnR.chain(this._feedbackR, this.effectSendR);\n\t        this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.StereoFeedbackEffect, Tone.StereoEffect);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoFeedbackEffect} this\n\t\t */\n\t    Tone.StereoFeedbackEffect.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this.feedback.dispose();\n\t        this.feedback = null;\n\t        this._feedbackL.dispose();\n\t        this._feedbackL = null;\n\t        this._feedbackR.dispose();\n\t        this._feedbackR = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoFeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Applies a width factor to the mid/side seperation. \n\t\t *         0 is all mid and 1 is all side.\n\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t *         <br><br>\n\t\t *         <code>\n\t\t *         Mid *= 2*(1-width)<br>\n\t\t *         Side *= 2*width\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.MidSideEffect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [width] The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t\t */\n\t    Tone.StereoWidener = function () {\n\t        var options = Tone.defaults(arguments, ['width'], Tone.StereoWidener);\n\t        Tone.MidSideEffect.call(this, options);\n\t        /**\n\t\t\t *  The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  Mid multiplier\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midMult = new Tone.Expr('$0 * ($1 * (1 - $2))');\n\t        /**\n\t\t\t *  Side multiplier\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sideMult = new Tone.Expr('$0 * ($1 * $2)');\n\t        /**\n\t\t\t *  constant output of 2\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this._two = new Tone.Signal(2);\n\t        //the mid chain\n\t        this._two.connect(this._midMult, 0, 1);\n\t        this.width.connect(this._midMult, 0, 2);\n\t        //the side chain\n\t        this._two.connect(this._sideMult, 0, 1);\n\t        this.width.connect(this._sideMult, 0, 2);\n\t        //connect it to the effect send/return\n\t        this.midSend.chain(this._midMult, this.midReturn);\n\t        this.sideSend.chain(this._sideMult, this.sideReturn);\n\t        this._readOnly(['width']);\n\t    };\n\t    Tone.extend(Tone.StereoWidener, Tone.MidSideEffect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.StereoWidener.defaults = { 'width': 0.5 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.StereoWidener} this\n\t\t */\n\t    Tone.StereoWidener.prototype.dispose = function () {\n\t        Tone.MidSideEffect.prototype.dispose.call(this);\n\t        this._writable(['width']);\n\t        this.width.dispose();\n\t        this.width = null;\n\t        this._midMult.dispose();\n\t        this._midMult = null;\n\t        this._sideMult.dispose();\n\t        this._sideMult = null;\n\t        this._two.dispose();\n\t        this._two = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoWidener;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.\n\t\t *         The type, frequency, and depth of the LFO is controllable.\n\t\t *\n\t\t *  @extends {Tone.StereoEffect}\n\t\t *  @constructor\n\t\t *  @param {Frequency} [frequency] The rate of the effect.\n\t\t *  @param {NormalRange} [depth] The depth of the effect.\n\t\t *  @example\n\t\t * //create a tremolo and start it's LFO\n\t\t * var tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();\n\t\t * //route an oscillator through the tremolo and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(tremolo).start();\n\t\t */\n\t    Tone.Tremolo = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'depth'\n\t        ], Tone.Tremolo);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The tremelo LFO in the left channel\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO({\n\t            'phase': options.spread,\n\t            'min': 1,\n\t            'max': 0\n\t        });\n\t        /**\n\t\t\t *  The tremelo LFO in the left channel\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO({\n\t            'phase': options.spread,\n\t            'min': 1,\n\t            'max': 0\n\t        });\n\t        /**\n\t\t\t *  Where the gain is multiplied\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitudeL = new Tone.Gain();\n\t        /**\n\t\t\t *  Where the gain is multiplied\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitudeR = new Tone.Gain();\n\t        /**\n\t\t\t *  The frequency of the tremolo.\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The depth of the effect. A depth of 0, has no effect\n\t\t\t *  on the amplitude, and a depth of 1 makes the amplitude\n\t\t\t *  modulate fully between 0 and 1.\n\t\t\t *  @type  {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.depth = new Tone.Signal(options.depth, Tone.Type.NormalRange);\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.effectSendL.chain(this._amplitudeL, this.effectReturnL);\n\t        this.effectSendR.chain(this._amplitudeR, this.effectReturnR);\n\t        this._lfoL.connect(this._amplitudeL.gain);\n\t        this._lfoR.connect(this._amplitudeR.gain);\n\t        this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n\t        this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n\t        this.type = options.type;\n\t        this.spread = options.spread;\n\t    };\n\t    Tone.extend(Tone.Tremolo, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Tremolo.defaults = {\n\t        'frequency': 10,\n\t        'type': 'sine',\n\t        'depth': 0.5,\n\t        'spread': 180\n\t    };\n\t    /**\n\t\t * Start the tremolo.\n\t\t * @param {Time} [time=now] When the tremolo begins.\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.start = function (time) {\n\t        this._lfoL.start(time);\n\t        this._lfoR.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the tremolo.\n\t\t * @param {Time} [time=now] When the tremolo stops.\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.stop = function (time) {\n\t        this._lfoL.stop(time);\n\t        this._lfoR.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the effect to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                              Transport has started.\n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.Tremolo.prototype.sync = function (delay) {\n\t        this._lfoL.sync(delay);\n\t        this._lfoR.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the filter from the transport\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.unsync = function () {\n\t        this._lfoL.unsync();\n\t        this._lfoR.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * The Tremolo's oscillator type.\n\t\t * @memberOf Tone.Tremolo#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Tremolo.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfoL.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfoL.type = type;\n\t            this._lfoR.type = type;\n\t        }\n\t    });\n\t    /** \n\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t * @memberOf Tone.Tremolo#\n\t\t * @type {Degrees}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.Tremolo.prototype, 'spread', {\n\t        get: function () {\n\t            return this._lfoR.phase - this._lfoL.phase;    //180\n\t        },\n\t        set: function (spread) {\n\t            this._lfoL.phase = 90 - spread / 2;\n\t            this._lfoR.phase = spread / 2 + 90;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        this._amplitudeL.dispose();\n\t        this._amplitudeL = null;\n\t        this._amplitudeR.dispose();\n\t        this._amplitudeR = null;\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.Tremolo;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n\t\t *         modulates the delayTime of the delay, causing the pitch to rise\n\t\t *         and fall. \n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency} frequency The frequency of the vibrato.\n\t\t *  @param {NormalRange} depth The amount the pitch is modulated.\n\t\t */\n\t    Tone.Vibrato = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'depth'\n\t        ], Tone.Vibrato);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  The delay node used for the vibrato effect\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = new Tone.Delay(0, options.maxDelay);\n\t        /**\n\t\t\t *  The LFO used to control the vibrato\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'type': options.type,\n\t            'min': 0,\n\t            'max': options.maxDelay,\n\t            'frequency': options.frequency,\n\t            'phase': -90    //offse the phase so the resting position is in the center\n\t        }).start().connect(this._delayNode.delayTime);\n\t        /**\n\t\t\t *  The frequency of the vibrato\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        /**\n\t\t\t *  The depth of the vibrato. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        this.depth.value = options.depth;\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.effectSend.chain(this._delayNode, this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.Vibrato, Tone.Effect);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Vibrato.defaults = {\n\t        'maxDelay': 0.005,\n\t        'frequency': 5,\n\t        'depth': 0.1,\n\t        'type': 'sine'\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the Vibrato.\n\t\t * @memberOf Tone.Vibrato#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Vibrato.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Vibrato} this\n\t\t */\n\t    Tone.Vibrato.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._delayNode.dispose();\n\t        this._delayNode = null;\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t    };\n\t    return Tone.Vibrato;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable\n\t\t *          callback for a single or repeatable events along the timeline. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @param {function} callback The callback to invoke at the time. \n\t\t *  @param {*} value The value or values which should be passed to\n\t\t *                      the callback function on invocation.  \n\t\t *  @example\n\t\t * var chord = new Tone.Event(function(time, chord){\n\t\t * \t//the chord as well as the exact time of the event\n\t\t * \t//are passed in as arguments to the callback function\n\t\t * }, [\"D4\", \"E4\", \"F4\"]);\n\t\t * //start the chord at the beginning of the transport timeline\n\t\t * chord.start();\n\t\t * //loop it every measure for 8 measures\n\t\t * chord.loop = 8;\n\t\t * chord.loopEnd = \"1m\";\n\t\t */\n\t    Tone.Event = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'callback',\n\t            'value'\n\t        ], Tone.Event);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  Loop value\n\t\t\t *  @type  {Boolean|Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  The callback to invoke. \n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  The value which is passed to the\n\t\t\t *  callback function.\n\t\t\t *  @type  {*}\n\t\t\t *  @private\n\t\t\t */\n\t        this.value = options.value;\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = this.toTicks(options.loopStart);\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = this.toTicks(options.loopEnd);\n\t        /**\n\t\t\t *  Tracks the scheduled events\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  The playback speed of the note. A speed of 1\n\t\t\t *  is no change. \n\t\t\t *  @private\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this._playbackRate = 1;\n\t        /**\n\t\t\t *  A delay time from when the event is scheduled to start\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startOffset = 0;\n\t        /**\n\t\t\t *  private holder of probability value\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._probability = options.probability;\n\t        /**\n\t\t\t *  the amount of variation from the\n\t\t\t *  given time. \n\t\t\t *  @type {Boolean|Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._humanize = options.humanize;\n\t        /**\n\t\t\t *  If mute is true, the callback won't be\n\t\t\t *  invoked.\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.mute = options.mute;\n\t        //set the initial values\n\t        this.playbackRate = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.Event);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Event.defaults = {\n\t        'callback': Tone.noOp,\n\t        'loop': false,\n\t        'loopEnd': '1m',\n\t        'loopStart': 0,\n\t        'playbackRate': 1,\n\t        'value': null,\n\t        'probability': 1,\n\t        'mute': false,\n\t        'humanize': false\n\t    };\n\t    /**\n\t\t *  Reschedule all of the events along the timeline\n\t\t *  with the updated values.\n\t\t *  @param {Time} after Only reschedules events after the given time.\n\t\t *  @return  {Tone.Event}  this\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._rescheduleEvents = function (after) {\n\t        //if no argument is given, schedules all of the events\n\t        after = Tone.defaultArg(after, -1);\n\t        this._state.forEachFrom(after, function (event) {\n\t            var duration;\n\t            if (event.state === Tone.State.Started) {\n\t                if (!Tone.isUndef(event.id)) {\n\t                    Tone.Transport.clear(event.id);\n\t                }\n\t                var startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t                if (this._loop) {\n\t                    duration = Infinity;\n\t                    if (Tone.isNumber(this._loop)) {\n\t                        duration = this._loop * this._getLoopDuration();\n\t                    }\n\t                    var nextEvent = this._state.getAfter(startTick);\n\t                    if (nextEvent !== null) {\n\t                        duration = Math.min(duration, nextEvent.time - startTick);\n\t                    }\n\t                    if (duration !== Infinity) {\n\t                        //schedule a stop since it's finite duration\n\t                        this._state.setStateAtTime(Tone.State.Stopped, startTick + duration + 1);\n\t                        duration = Tone.Time(duration, 'i');\n\t                    }\n\t                    var interval = Tone.Time(this._getLoopDuration(), 'i');\n\t                    event.id = Tone.Transport.scheduleRepeat(this._tick.bind(this), interval, Tone.TransportTime(startTick, 'i'), duration);\n\t                } else {\n\t                    event.id = Tone.Transport.schedule(this._tick.bind(this), startTick + 'i');\n\t                }\n\t            }\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Event#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(Tone.Transport.ticks);\n\t        }\n\t    });\n\t    /**\n\t\t *  The start from the scheduled start time\n\t\t *  @type {Ticks}\n\t\t *  @memberOf Tone.Event#\n\t\t *  @name startOffset\n\t\t *  @private\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'startOffset', {\n\t        get: function () {\n\t            return this._startOffset;\n\t        },\n\t        set: function (offset) {\n\t            this._startOffset = offset;\n\t        }\n\t    });\n\t    /**\n\t\t *  The probability of the notes being triggered.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'probability', {\n\t        get: function () {\n\t            return this._probability;\n\t        },\n\t        set: function (prob) {\n\t            this._probability = prob;\n\t        }\n\t    });\n\t    /**\n\t\t *  If set to true, will apply small random variation\n\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t *  by that amount.\n\t\t *  @example\n\t\t * event.humanize = true;\n\t\t *  @type {Boolean|Time}\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._humanize = variation;\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the note at the given time. \n\t\t *  @param  {TimelinePosition}  time  When the note should start.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.start = function (time) {\n\t        time = this.toTicks(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Stopped) {\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': time,\n\t                'id': undefined\n\t            });\n\t            this._rescheduleEvents(time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the Event at the given time.\n\t\t *  @param  {TimelinePosition}  time  When the note should stop.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.stop = function (time) {\n\t        this.cancel(time);\n\t        time = this.toTicks(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Stopped, time);\n\t            var previousEvent = this._state.getBefore(time);\n\t            var reschedulTime = time;\n\t            if (previousEvent !== null) {\n\t                reschedulTime = previousEvent.time;\n\t            }\n\t            this._rescheduleEvents(reschedulTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.cancel = function (time) {\n\t        time = Tone.defaultArg(time, -Infinity);\n\t        time = this.toTicks(time);\n\t        this._state.forEachFrom(time, function (event) {\n\t            Tone.Transport.clear(event.id);\n\t        });\n\t        this._state.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The callback function invoker. Also \n\t\t *  checks if the Event is done playing\n\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._tick = function (time) {\n\t        if (!this.mute && this._state.getValueAtTime(Tone.Transport.ticks) === Tone.State.Started) {\n\t            if (this.probability < 1 && Math.random() > this.probability) {\n\t                return;\n\t            }\n\t            if (this.humanize) {\n\t                var variation = 0.02;\n\t                if (!Tone.isBoolean(this.humanize)) {\n\t                    variation = this.toSeconds(this.humanize);\n\t                }\n\t                time += (Math.random() * 2 - 1) * variation;\n\t            }\n\t            this.callback(time, this.value);\n\t        }\n\t    };\n\t    /**\n\t\t *  Get the duration of the loop.\n\t\t *  @return  {Ticks}\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._getLoopDuration = function () {\n\t        return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t    };\n\t    /**\n\t\t *  If the note should loop or not\n\t\t *  between Tone.Event.loopStart and \n\t\t *  Tone.Event.loopEnd. An integer\n\t\t *  value corresponds to the number of\n\t\t *  loops the Event does after it starts.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Boolean|Positive}\n\t\t *  @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            this._rescheduleEvents();\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe playback rate of the note. Defaults to 1.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Positive}\n\t\t *  @name playbackRate\n\t\t *  @example\n\t\t * note.loop = true;\n\t\t * //repeat the note twice as fast\n\t\t * note.playbackRate = 2;\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this._rescheduleEvents();\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopEnd point is the time the event will loop\n\t\t *  if Tone.Event.loop is true.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toNotation();\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = this.toTicks(loopEnd);\n\t            if (this._loop) {\n\t                this._rescheduleEvents();\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The time when the loop should start. \n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toNotation();\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = this.toTicks(loopStart);\n\t            if (this._loop) {\n\t                this._rescheduleEvents();\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The current progress of the loop interval.\n\t\t *  Returns 0 if the event is not started yet or\n\t\t *  it is not set to loop.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {NormalRange}\n\t\t *  @name progress\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'progress', {\n\t        get: function () {\n\t            if (this._loop) {\n\t                var ticks = Tone.Transport.ticks;\n\t                var lastEvent = this._state.get(ticks);\n\t                if (lastEvent !== null && lastEvent.state === Tone.State.Started) {\n\t                    var loopDuration = this._getLoopDuration();\n\t                    var progress = (ticks - lastEvent.time) % loopDuration;\n\t                    return progress / loopDuration;\n\t                } else {\n\t                    return 0;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.dispose = function () {\n\t        this.cancel();\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this.callback = null;\n\t        this.value = null;\n\t    };\n\t    return Tone.Event;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Loop creates a looped callback at the \n\t\t *         specified interval. The callback can be \n\t\t *         started, stopped and scheduled along\n\t\t *         the Transport's timeline. \n\t\t *  @example\n\t\t * var loop = new Tone.Loop(function(time){\n\t\t * \t//triggered every eighth note. \n\t\t * \tconsole.log(time);\n\t\t * }, \"8n\").start(0);\n\t\t * Tone.Transport.start();\n\t\t *  @extends {Tone}\n\t\t *  @param {Function} callback The callback to invoke with the event.\n\t\t *  @param {Time} interval The time between successive callback calls. \n\t\t */\n\t    Tone.Loop = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'callback',\n\t            'interval'\n\t        ], Tone.Loop);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The event which produces the callbacks\n\t\t\t */\n\t        this._event = new Tone.Event({\n\t            'callback': this._tick.bind(this),\n\t            'loop': true,\n\t            'loopEnd': options.interval,\n\t            'playbackRate': options.playbackRate,\n\t            'probability': options.probability\n\t        });\n\t        /**\n\t\t\t *  The callback to invoke with the next event in the pattern\n\t\t\t *  @type {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        //set the iterations\n\t        this.iterations = options.iterations;\n\t    };\n\t    Tone.extend(Tone.Loop);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Loop.defaults = {\n\t        'interval': '4n',\n\t        'callback': Tone.noOp,\n\t        'playbackRate': 1,\n\t        'iterations': Infinity,\n\t        'probability': true,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Start the loop at the specified time along the Transport's\n\t\t *  timeline.\n\t\t *  @param  {TimelinePosition=}  time  When to start the Loop.\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.start = function (time) {\n\t        this._event.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the loop at the given time.\n\t\t *  @param  {TimelinePosition=}  time  When to stop the Arpeggio\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.stop = function (time) {\n\t        this._event.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.cancel = function (time) {\n\t        this._event.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Internal function called when the notes should be called\n\t\t *  @param  {Number}  time  The time the event occurs\n\t\t *  @private\n\t\t */\n\t    Tone.Loop.prototype._tick = function (time) {\n\t        this.callback(time);\n\t    };\n\t    /**\n\t\t *  The state of the Loop, either started or stopped.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {String}\n\t\t *  @name state\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'state', {\n\t        get: function () {\n\t            return this._event.state;\n\t        }\n\t    });\n\t    /**\n\t\t *  The progress of the loop as a value between 0-1. 0, when\n\t\t *  the loop is stopped or done iterating. \n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {NormalRange}\n\t\t *  @name progress\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'progress', {\n\t        get: function () {\n\t            return this._event.progress;\n\t        }\n\t    });\n\t    /**\n\t\t *  The time between successive callbacks. \n\t\t *  @example\n\t\t * loop.interval = \"8n\"; //loop every 8n\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Time}\n\t\t *  @name interval\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'interval', {\n\t        get: function () {\n\t            return this._event.loopEnd;\n\t        },\n\t        set: function (interval) {\n\t            this._event.loopEnd = interval;\n\t        }\n\t    });\n\t    /**\n\t\t *  The playback rate of the loop. The normal playback rate is 1 (no change). \n\t\t *  A `playbackRate` of 2 would be twice as fast. \n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Time}\n\t\t *  @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._event.playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._event.playbackRate = rate;\n\t        }\n\t    });\n\t    /**\n\t\t *  Random variation +/-0.01s to the scheduled time. \n\t\t *  Or give it a time value which it will randomize by.\n\t\t *  @type {Boolean|Time}\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._event.humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._event.humanize = variation;\n\t        }\n\t    });\n\t    /**\n\t\t *  The probably of the callback being invoked.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'probability', {\n\t        get: function () {\n\t            return this._event.probability;\n\t        },\n\t        set: function (prob) {\n\t            this._event.probability = prob;\n\t        }\n\t    });\n\t    /**\n\t\t *  Muting the Loop means that no callbacks are invoked.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Boolean}\n\t\t *  @name mute\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'mute', {\n\t        get: function () {\n\t            return this._event.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._event.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of iterations of the loop. The default\n\t\t *  value is Infinity (loop forever).\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Positive}\n\t\t *  @name iterations\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'iterations', {\n\t        get: function () {\n\t            if (this._event.loop === true) {\n\t                return Infinity;\n\t            } else {\n\t                return this._event.loop;\n\t            }\n\t        },\n\t        set: function (iters) {\n\t            if (iters === Infinity) {\n\t                this._event.loop = true;\n\t            } else {\n\t                this._event.loop = iters;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.dispose = function () {\n\t        this._event.dispose();\n\t        this._event = null;\n\t        this.callback = null;\n\t    };\n\t    return Tone.Loop;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Part is a collection Tone.Events which can be\n\t\t *         started/stopped and looped as a single unit.\n\t\t *\n\t\t *  @extends {Tone.Event}\n\t\t *  @param {Function} callback The callback to invoke on each event\n\t\t *  @param {Array} events the array of events\n\t\t *  @example\n\t\t * var part = new Tone.Part(function(time, note){\n\t\t * \t//the notes given as the second element in the array\n\t\t * \t//will be passed in as the second argument\n\t\t * \tsynth.triggerAttackRelease(note, \"8n\", time);\n\t\t * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n\t\t *  @example\n\t\t * //use an array of objects as long as the object has a \"time\" attribute\n\t\t * var part = new Tone.Part(function(time, value){\n\t\t * \t//the value is an object which contains both the note and the velocity\n\t\t * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n\t\t * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9}, \n\t\t * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n\t\t * ]).start(0);\n\t\t */\n\t    Tone.Part = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'callback',\n\t            'events'\n\t        ], Tone.Part);\n\t        Tone.Event.call(this, options);\n\t        /**\n\t\t\t *  An array of Objects. \n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = [];\n\t        //add the events\n\t        for (var i = 0; i < options.events.length; i++) {\n\t            if (Array.isArray(options.events[i])) {\n\t                this.add(options.events[i][0], options.events[i][1]);\n\t            } else {\n\t                this.add(options.events[i]);\n\t            }\n\t        }\n\t    };\n\t    Tone.extend(Tone.Part, Tone.Event);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Part.defaults = {\n\t        'callback': Tone.noOp,\n\t        'loop': false,\n\t        'loopEnd': '1m',\n\t        'loopStart': 0,\n\t        'playbackRate': 1,\n\t        'probability': 1,\n\t        'humanize': false,\n\t        'mute': false,\n\t        'events': []\n\t    };\n\t    /**\n\t\t *  Start the part at the given time. \n\t\t *  @param  {TransportTime}  time    When to start the part.\n\t\t *  @param  {Time=}  offset  The offset from the start of the part\n\t\t *                           to begin playing at.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.start = function (time, offset) {\n\t        var ticks = this.toTicks(time);\n\t        if (this._state.getValueAtTime(ticks) !== Tone.State.Started) {\n\t            if (this._loop) {\n\t                offset = Tone.defaultArg(offset, this._loopStart);\n\t            } else {\n\t                offset = Tone.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toTicks(offset);\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': ticks,\n\t                'offset': offset\n\t            });\n\t            this._forEach(function (event) {\n\t                this._startNote(event, ticks, offset);\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the event in the given event at the correct time given\n\t\t *  the ticks and offset and looping.\n\t\t *  @param  {Tone.Event}  event \n\t\t *  @param  {Ticks}  ticks\n\t\t *  @param  {Ticks}  offset\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._startNote = function (event, ticks, offset) {\n\t        ticks -= offset;\n\t        if (this._loop) {\n\t            if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t                if (event.startOffset < offset) {\n\t                    //start it on the next loop\n\t                    ticks += this._getLoopDuration();\n\t                }\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t                event.loop = false;\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            }\n\t        } else {\n\t            if (event.startOffset >= offset) {\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  The start from the scheduled start time\n\t\t *  @type {Ticks}\n\t\t *  @memberOf Tone.Part#\n\t\t *  @name startOffset\n\t\t *  @private\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'startOffset', {\n\t        get: function () {\n\t            return this._startOffset;\n\t        },\n\t        set: function (offset) {\n\t            this._startOffset = offset;\n\t            this._forEach(function (event) {\n\t                event.startOffset += this._startOffset;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  Stop the part at the given time.\n\t\t *  @param  {TimelinePosition}  time  When to stop the part.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.stop = function (time) {\n\t        var ticks = this.toTicks(time);\n\t        this._state.cancel(ticks);\n\t        this._state.setStateAtTime(Tone.State.Stopped, ticks);\n\t        this._forEach(function (event) {\n\t            event.stop(time);\n\t        });\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get/Set an Event's value at the given time. \n\t\t *  If a value is passed in and no event exists at\n\t\t *  the given time, one will be created with that value. \n\t\t *  If two events are at the same time, the first one will\n\t\t *  be returned.\n\t\t *  @example\n\t\t * part.at(\"1m\"); //returns the part at the first measure\n\t\t *\n\t\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2. \n\t\t * //if an event didn't exist at that time, it will be created.\n\t\t *  @param {TransportTime} time The time of the event to get or set.\n\t\t *  @param {*=} value If a value is passed in, the value of the\n\t\t *                    event at the given time will be set to it.\n\t\t *  @return {Tone.Event} the event at the time\n\t\t */\n\t    Tone.Part.prototype.at = function (time, value) {\n\t        time = Tone.TransportTime(time);\n\t        var tickTime = Tone.Time(1, 'i').toSeconds();\n\t        for (var i = 0; i < this._events.length; i++) {\n\t            var event = this._events[i];\n\t            if (Math.abs(time.toTicks() - event.startOffset) < tickTime) {\n\t                if (!Tone.isUndef(value)) {\n\t                    event.value = value;\n\t                }\n\t                return event;\n\t            }\n\t        }\n\t        //if there was no event at that time, create one\n\t        if (!Tone.isUndef(value)) {\n\t            this.add(time, value);\n\t            //return the new event\n\t            return this._events[this._events.length - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Add a an event to the part. \n\t\t *  @param {Time} time The time the note should start.\n\t\t *                            If an object is passed in, it should\n\t\t *                            have a 'time' attribute and the rest\n\t\t *                            of the object will be used as the 'value'.\n\t\t *  @param  {Tone.Event|*}  value \n\t\t *  @returns {Tone.Part} this\n\t\t *  @example\n\t\t * part.add(\"1m\", \"C#+11\");\n\t\t */\n\t    Tone.Part.prototype.add = function (time, value) {\n\t        //extract the parameters\n\t        if (time.hasOwnProperty('time')) {\n\t            value = time;\n\t            time = value.time;\n\t        }\n\t        time = this.toTicks(time);\n\t        var event;\n\t        if (value instanceof Tone.Event) {\n\t            event = value;\n\t            event.callback = this._tick.bind(this);\n\t        } else {\n\t            event = new Tone.Event({\n\t                'callback': this._tick.bind(this),\n\t                'value': value\n\t            });\n\t        }\n\t        //the start offset\n\t        event.startOffset = time;\n\t        //initialize the values\n\t        event.set({\n\t            'loopEnd': this.loopEnd,\n\t            'loopStart': this.loopStart,\n\t            'loop': this.loop,\n\t            'humanize': this.humanize,\n\t            'playbackRate': this.playbackRate,\n\t            'probability': this.probability\n\t        });\n\t        this._events.push(event);\n\t        //start the note if it should be played right now\n\t        this._restartEvent(event);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Restart the given event\n\t\t *  @param  {Tone.Event}  event \n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._restartEvent = function (event) {\n\t        this._state.forEach(function (stateEvent) {\n\t            if (stateEvent.state === Tone.State.Started) {\n\t                this._startNote(event, stateEvent.time, stateEvent.offset);\n\t            } else {\n\t                //stop the note\n\t                event.stop(Tone.TransportTime(stateEvent.time, 'i'));\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Remove an event from the part. Will recursively iterate\n\t\t *  into nested parts to find the event.\n\t\t *  @param {Time} time The time of the event\n\t\t *  @param {*} value Optionally select only a specific event value\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.remove = function (time, value) {\n\t        //extract the parameters\n\t        if (time.hasOwnProperty('time')) {\n\t            value = time;\n\t            time = value.time;\n\t        }\n\t        time = this.toTicks(time);\n\t        for (var i = this._events.length - 1; i >= 0; i--) {\n\t            var event = this._events[i];\n\t            if (event instanceof Tone.Part) {\n\t                event.remove(time, value);\n\t            } else {\n\t                if (event.startOffset === time) {\n\t                    if (Tone.isUndef(value) || !Tone.isUndef(value) && event.value === value) {\n\t                        this._events.splice(i, 1);\n\t                        event.dispose();\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove all of the notes from the group. \n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.removeAll = function () {\n\t        this._forEach(function (event) {\n\t            event.dispose();\n\t        });\n\t        this._events = [];\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t\t *  @param {TimelinePosition} after The time after which to cancel the scheduled events.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.cancel = function (after) {\n\t        this._forEach(function (event) {\n\t            event.cancel(after);\n\t        });\n\t        this._state.cancel(this.toTicks(after));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over all of the events\n\t\t *  @param {Function} callback\n\t\t *  @param {Object} ctx The context\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._forEach = function (callback, ctx) {\n\t        if (this._events) {\n\t            ctx = Tone.defaultArg(ctx, this);\n\t            for (var i = this._events.length - 1; i >= 0; i--) {\n\t                var e = this._events[i];\n\t                if (e instanceof Tone.Part) {\n\t                    e._forEach(callback, ctx);\n\t                } else {\n\t                    callback.call(ctx, e);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the attribute of all of the events\n\t\t *  @param  {String}  attr  the attribute to set\n\t\t *  @param  {*}  value      The value to set it to\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._setAll = function (attr, value) {\n\t        this._forEach(function (event) {\n\t            event[attr] = value;\n\t        });\n\t    };\n\t    /**\n\t\t *  Internal tick method\n\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._tick = function (time, value) {\n\t        if (!this.mute) {\n\t            this.callback(time, value);\n\t        }\n\t    };\n\t    /**\n\t\t *  Determine if the event should be currently looping\n\t\t *  given the loop boundries of this Part.\n\t\t *  @param  {Tone.Event}  event  The event to test\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._testLoopBoundries = function (event) {\n\t        if (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd) {\n\t            event.cancel(0);\n\t        } else {\n\t            //reschedule it if it's stopped\n\t            if (event.state === Tone.State.Stopped) {\n\t                this._restartEvent(event);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  The probability of the notes being triggered.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'probability', {\n\t        get: function () {\n\t            return this._probability;\n\t        },\n\t        set: function (prob) {\n\t            this._probability = prob;\n\t            this._setAll('probability', prob);\n\t        }\n\t    });\n\t    /**\n\t\t *  If set to true, will apply small random variation\n\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t *  by that amount.\n\t\t *  @example\n\t\t * event.humanize = true;\n\t\t *  @type {Boolean|Time}\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._humanize = variation;\n\t            this._setAll('humanize', variation);\n\t        }\n\t    });\n\t    /**\n\t\t *  If the part should loop or not\n\t\t *  between Tone.Part.loopStart and \n\t\t *  Tone.Part.loopEnd. An integer\n\t\t *  value corresponds to the number of\n\t\t *  loops the Part does after it starts.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Boolean|Positive}\n\t\t *  @name loop\n\t\t *  @example\n\t\t * //loop the part 8 times\n\t\t * part.loop = 8;\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            this._forEach(function (event) {\n\t                event._loopStart = this._loopStart;\n\t                event._loopEnd = this._loopEnd;\n\t                event.loop = loop;\n\t                this._testLoopBoundries(event);\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopEnd point determines when it will \n\t\t *  loop if Tone.Part.loop is true.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toNotation();\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = this.toTicks(loopEnd);\n\t            if (this._loop) {\n\t                this._forEach(function (event) {\n\t                    event.loopEnd = loopEnd;\n\t                    this._testLoopBoundries(event);\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopStart point determines when it will \n\t\t *  loop if Tone.Part.loop is true.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toNotation();\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = this.toTicks(loopStart);\n\t            if (this._loop) {\n\t                this._forEach(function (event) {\n\t                    event.loopStart = this.loopStart;\n\t                    this._testLoopBoundries(event);\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe playback rate of the part\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Positive}\n\t\t *  @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this._setAll('playbackRate', rate);\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe number of scheduled notes in the part. \n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Positive}\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'length', {\n\t        get: function () {\n\t            return this._events.length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.dispose = function () {\n\t        this.removeAll();\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this.callback = null;\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Part;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Pattern arpeggiates between the given notes\n\t\t *         in a number of patterns. See Tone.CtrlPattern for\n\t\t *         a full list of patterns.\n\t\t *  @example\n\t\t * var pattern = new Tone.Pattern(function(time, note){\n\t\t *   //the order of the notes passed in depends on the pattern\n\t\t * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n\t\t *  @extends {Tone.Loop}\n\t\t *  @param {Function} callback The callback to invoke with the\n\t\t *                             event.\n\t\t *  @param {Array} values The values to arpeggiate over.\n\t\t */\n\t    Tone.Pattern = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'callback',\n\t            'values',\n\t            'pattern'\n\t        ], Tone.Pattern);\n\t        Tone.Loop.call(this, options);\n\t        /**\n\t\t\t *  The pattern manager\n\t\t\t *  @type {Tone.CtrlPattern}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pattern = new Tone.CtrlPattern({\n\t            'values': options.values,\n\t            'type': options.pattern,\n\t            'index': options.index\n\t        });\n\t    };\n\t    Tone.extend(Tone.Pattern, Tone.Loop);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Pattern.defaults = {\n\t        'pattern': Tone.CtrlPattern.Type.Up,\n\t        'callback': Tone.noOp,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  Internal function called when the notes should be called\n\t\t *  @param  {Number}  time  The time the event occurs\n\t\t *  @private\n\t\t */\n\t    Tone.Pattern.prototype._tick = function (time) {\n\t        this.callback(time, this._pattern.value);\n\t        this._pattern.next();\n\t    };\n\t    /**\n\t\t *  The current index in the values array.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {Positive}\n\t\t *  @name index\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'index', {\n\t        get: function () {\n\t            return this._pattern.index;\n\t        },\n\t        set: function (i) {\n\t            this._pattern.index = i;\n\t        }\n\t    });\n\t    /**\n\t\t *  The array of events.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {Array}\n\t\t *  @name values\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'values', {\n\t        get: function () {\n\t            return this._pattern.values;\n\t        },\n\t        set: function (vals) {\n\t            this._pattern.values = vals;\n\t        }\n\t    });\n\t    /**\n\t\t *  The current value of the pattern.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'value', {\n\t        get: function () {\n\t            return this._pattern.value;\n\t        }\n\t    });\n\t    /**\n\t\t *  The pattern type. See Tone.CtrlPattern for the full list of patterns.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {String}\n\t\t *  @name pattern\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'pattern', {\n\t        get: function () {\n\t            return this._pattern.type;\n\t        },\n\t        set: function (pattern) {\n\t            this._pattern.type = pattern;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Pattern}  this\n\t\t */\n\t    Tone.Pattern.prototype.dispose = function () {\n\t        Tone.Loop.prototype.dispose.call(this);\n\t        this._pattern.dispose();\n\t        this._pattern = null;\n\t    };\n\t    return Tone.Pattern;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A sequence is an alternate notation of a part. Instead\n\t\t *         of passing in an array of [time, event] pairs, pass\n\t\t *         in an array of events which will be spaced at the\n\t\t *         given subdivision. Sub-arrays will subdivide that beat\n\t\t *         by the number of items are in the array. \n\t\t *         Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n\t\t *  @param  {Function}  callback  The callback to invoke with every note\n\t\t *  @param  {Array}    events  The sequence\n\t\t *  @param  {Time} subdivision  The subdivision between which events are placed. \n\t\t *  @extends {Tone.Part}\n\t\t *  @example\n\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t * \tconsole.log(note);\n\t\t * //straight quater notes\n\t\t * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n\t\t *  @example\n\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t * \tconsole.log(note);\n\t\t * //subdivisions are given as subarrays\n\t\t * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n\t\t */\n\t    Tone.Sequence = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'callback',\n\t            'events',\n\t            'subdivision'\n\t        ], Tone.Sequence);\n\t        //remove the events\n\t        var events = options.events;\n\t        delete options.events;\n\t        Tone.Part.call(this, options);\n\t        /**\n\t\t\t *  The subdivison of each note\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subdivision = this.toTicks(options.subdivision);\n\t        //if no time was passed in, the loop end is the end of the cycle\n\t        if (Tone.isUndef(options.loopEnd) && !Tone.isUndef(events)) {\n\t            this._loopEnd = events.length * this._subdivision;\n\t        }\n\t        //defaults to looping\n\t        this._loop = true;\n\t        //add all of the events\n\t        if (!Tone.isUndef(events)) {\n\t            for (var i = 0; i < events.length; i++) {\n\t                this.add(i, events[i]);\n\t            }\n\t        }\n\t    };\n\t    Tone.extend(Tone.Sequence, Tone.Part);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Sequence.defaults = { 'subdivision': '4n' };\n\t    /**\n\t\t *  The subdivision of the sequence. This can only be \n\t\t *  set in the constructor. The subdivision is the \n\t\t *  interval between successive steps. \n\t\t *  @type {Time}\n\t\t *  @memberOf Tone.Sequence#\n\t\t *  @name subdivision\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Sequence.prototype, 'subdivision', {\n\t        get: function () {\n\t            return Tone.Time(this._subdivision, 'i').toNotation();\n\t        }\n\t    });\n\t    /**\n\t\t *  Get/Set an index of the sequence. If the index contains a subarray, \n\t\t *  a Tone.Sequence representing that sub-array will be returned. \n\t\t *  @example\n\t\t * var sequence = new Tone.Sequence(playNote, [\"E4\", \"C4\", \"F#4\", [\"A4\", \"Bb3\"]])\n\t\t * sequence.at(0)// => returns \"E4\"\n\t\t * //set a value\n\t\t * sequence.at(0, \"G3\");\n\t\t * //get a nested sequence\n\t\t * sequence.at(3).at(1)// => returns \"Bb3\"\n\t\t * @param {Positive} index The index to get or set\n\t\t * @param {*} value Optionally pass in the value to set at the given index.\n\t\t */\n\t    Tone.Sequence.prototype.at = function (index, value) {\n\t        //if the value is an array, \n\t        if (Tone.isArray(value)) {\n\t            //remove the current event at that index\n\t            this.remove(index);\n\t        }\n\t        //call the parent's method\n\t        return Tone.Part.prototype.at.call(this, this._indexTime(index), value);\n\t    };\n\t    /**\n\t\t *  Add an event at an index, if there's already something\n\t\t *  at that index, overwrite it. If `value` is an array, \n\t\t *  it will be parsed as a subsequence.\n\t\t *  @param {Number} index The index to add the event to\n\t\t *  @param {*} value The value to add at that index\n\t\t *  @returns {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.add = function (index, value) {\n\t        if (value === null) {\n\t            return this;\n\t        }\n\t        if (Tone.isArray(value)) {\n\t            //make a subsequence and add that to the sequence\n\t            var subSubdivision = Math.round(this._subdivision / value.length);\n\t            value = new Tone.Sequence(this._tick.bind(this), value, Tone.Time(subSubdivision, 'i'));\n\t        }\n\t        Tone.Part.prototype.add.call(this, this._indexTime(index), value);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove a value from the sequence by index\n\t\t *  @param {Number} index The index of the event to remove\n\t\t *  @returns {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.remove = function (index, value) {\n\t        Tone.Part.prototype.remove.call(this, this._indexTime(index), value);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the time of the index given the Sequence's subdivision\n\t\t *  @param  {Number}  index \n\t\t *  @return  {Time}  The time of that index\n\t\t *  @private\n\t\t */\n\t    Tone.Sequence.prototype._indexTime = function (index) {\n\t        if (index instanceof Tone.TransportTime) {\n\t            return index;\n\t        } else {\n\t            return Tone.TransportTime(index * this._subdivision + this.startOffset, 'i');\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.dispose = function () {\n\t        Tone.Part.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.Sequence;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PulseOscillator is a pulse oscillator with control over pulse width,\n\t\t *         also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is \n\t\t *         a square and only odd-numbered harmonics are present. At all other widths \n\t\t *         even-numbered harmonics are present. Read more \n\t\t *         [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {Frequency} [frequency] The frequency of the oscillator\n\t\t *  @param {NormalRange} [width] The width of the pulse\n\t\t *  @example\n\t\t * var pulse = new Tone.PulseOscillator(\"E5\", 0.4).toMaster().start();\n\t\t */\n\t    Tone.PulseOscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'width'\n\t        ], Tone.Oscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The width of the pulse. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  gate the width amount\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._widthGate = new Tone.Gain();\n\t        /**\n\t\t\t *  the sawtooth oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sawtooth = new Tone.Oscillator({\n\t            frequency: options.frequency,\n\t            detune: options.detune,\n\t            type: 'sawtooth',\n\t            phase: options.phase\n\t        });\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._sawtooth.frequency;\n\t        /**\n\t\t\t *  The detune in cents. \n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._sawtooth.detune;\n\t        /**\n\t\t\t *  Threshold the signal to turn it into a square\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._thresh = new Tone.WaveShaper(function (val) {\n\t            if (val < 0) {\n\t                return -1;\n\t            } else {\n\t                return 1;\n\t            }\n\t        });\n\t        //connections\n\t        this._sawtooth.chain(this._thresh, this.output);\n\t        this.width.chain(this._widthGate, this._thresh);\n\t        this._readOnly([\n\t            'width',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PulseOscillator, Tone.Source);\n\t    /**\n\t\t *  The default parameters.\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PulseOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'width': 0.2\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} time \n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._sawtooth.start(time);\n\t        this._widthGate.gain.setValueAtTime(1, time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time \n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._sawtooth.stop(time);\n\t        //the width is still connected to the output. \n\t        //that needs to be stopped also\n\t        this._widthGate.gain.setValueAtTime(0, time);\n\t    };\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._sawtooth.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._sawtooth.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the oscillator. Always returns \"pulse\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return 'pulse';\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return [];\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up method.\n\t\t *  @return {Tone.PulseOscillator} this\n\t\t */\n\t    Tone.PulseOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._sawtooth.dispose();\n\t        this._sawtooth = null;\n\t        this._writable([\n\t            'width',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.width.dispose();\n\t        this.width = null;\n\t        this._widthGate.dispose();\n\t        this._widthGate = null;\n\t        this._thresh.dispose();\n\t        this._thresh = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.PulseOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PWMOscillator modulates the width of a Tone.PulseOscillator \n\t\t *         at the modulationFrequency. This has the effect of continuously\n\t\t *         changing the timbre of the oscillator by altering the harmonics \n\t\t *         generated.\n\t\t *\n\t\t *  @extends {Tone.Source}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse. \n\t\t *  @example\n\t\t *  var pwm = new Tone.PWMOscillator(\"Ab3\", 0.3).toMaster().start();\n\t\t */\n\t    Tone.PWMOscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'modulationFrequency'\n\t        ], Tone.PWMOscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  the pulse oscillator\n\t\t\t *  @type {Tone.PulseOscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pulse = new Tone.PulseOscillator(options.modulationFrequency);\n\t        //change the pulse oscillator type\n\t        this._pulse._sawtooth.type = 'sine';\n\t        /**\n\t\t\t *  the modulator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator({\n\t            'frequency': options.frequency,\n\t            'detune': options.detune,\n\t            'phase': options.phase\n\t        });\n\t        /**\n\t\t\t *  Scale the oscillator so it doesn't go silent \n\t\t\t *  at the extreme values.\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = new Tone.Multiply(2);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._modulator.frequency;\n\t        /**\n\t\t\t *  The detune of the oscillator.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._modulator.detune;\n\t        /**\n\t\t\t *  The modulation rate of the oscillator. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.modulationFrequency = this._pulse.frequency;\n\t        //connections\n\t        this._modulator.chain(this._scale, this._pulse.width);\n\t        this._pulse.connect(this.output);\n\t        this._readOnly([\n\t            'modulationFrequency',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PWMOscillator, Tone.Source);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.PWMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationFrequency': 0.4\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._pulse.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._pulse.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the oscillator. Always returns \"pwm\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return 'pwm';\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return [];\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._modulator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.PWMOscillator} this\n\t\t */\n\t    Tone.PWMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._pulse.dispose();\n\t        this._pulse = null;\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._writable([\n\t            'modulationFrequency',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.modulationFrequency = null;\n\t        return this;\n\t    };\n\t    return Tone.PWMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FMOscillator \n\t\t *\n\t\t *  @extends {Tone.Source}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.FMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.FMOscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'modulationType'\n\t        ], Tone.FMOscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The carrier oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._carrier.detune;\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t\t *  modulating signal (ma) -- as in ma/mf. \n\t\t\t *\t@type {Positive}\n\t\t\t *\t@signal\n\t\t\t */\n\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t        this.modulationIndex.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  The modulating oscillator\n\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t        /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //connections\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t        this._modulator.connect(this._modulationNode.gain);\n\t        this._modulationNode.connect(this._carrier.frequency);\n\t        this._carrier.connect(this.output);\n\t        this.detune.connect(this._modulator.detune);\n\t        this.phase = options.phase;\n\t        this._readOnly([\n\t            'modulationIndex',\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FMOscillator, Tone.Source);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationIndex': 2,\n\t        'modulationType': 'square',\n\t        'harmonicity': 1\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._carrier.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._carrier.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._carrier.type;\n\t        },\n\t        set: function (type) {\n\t            this._carrier.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {String}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            return this._modulator.type;\n\t        },\n\t        set: function (type) {\n\t            this._modulator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._carrier.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._carrier.phase = phase;\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._carrier.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._carrier.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.FMOscillator} this\n\t\t */\n\t    Tone.FMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'modulationIndex',\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.modulationIndex.dispose();\n\t        this.modulationIndex = null;\n\t        return this;\n\t    };\n\t    return Tone.FMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AMOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.AMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.AMOscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'modulationType'\n\t        ], Tone.AMOscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The carrier oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._carrier.frequency;\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._carrier.detune;\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The modulating oscillator\n\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t        /**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationScale = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //connections\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.detune.connect(this._modulator.detune);\n\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t        this._carrier.chain(this._modulationNode, this.output);\n\t        this.phase = options.phase;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.AMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationType': 'square',\n\t        'harmonicity': 1\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._carrier.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._carrier.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._carrier.type;\n\t        },\n\t        set: function (type) {\n\t            this._carrier.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {string}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            return this._modulator.type;\n\t        },\n\t        set: function (type) {\n\t            this._modulator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._carrier.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._carrier.phase = phase;\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._carrier.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._carrier.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.AMOscillator} this\n\t\t */\n\t    Tone.AMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this._modulationScale.dispose();\n\t        this._modulationScale = null;\n\t        return this;\n\t    };\n\t    return Tone.AMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FatOscillator \n\t\t *\n\t\t *  @extends {Tone.Source}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.FatOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.FatOscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'spread'\n\t        ], Tone.FatOscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  The array of oscillators\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillators = [];\n\t        /**\n\t\t\t *  The total spread of the oscillators\n\t\t\t *  @type  {Cents}\n\t\t\t *  @private\n\t\t\t */\n\t        this._spread = options.spread;\n\t        /**\n\t\t\t *  The type of the oscillator\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The phase of the oscillators\n\t\t\t *  @type {Degrees}\n\t\t\t *  @private\n\t\t\t */\n\t        this._phase = options.phase;\n\t        /**\n\t\t\t *  The partials array\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._partials = Tone.defaultArg(options.partials, []);\n\t        //set the count initially\n\t        this.count = options.count;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FatOscillator, Tone.Source);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FatOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'spread': 20,\n\t        'count': 3,\n\t        'type': 'sawtooth'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.start(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.stop(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  Iterate over all of the oscillators\n\t\t *  @param  {Function}  iterator  The iterator function\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._forEach = function (iterator) {\n\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t            iterator.call(this, this._oscillators[i], i);\n\t        }\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._type = type;\n\t            this._forEach(function (osc) {\n\t                osc.type = type;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t * for a total detune spread of 40 cents.\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Cents}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'spread', {\n\t        get: function () {\n\t            return this._spread;\n\t        },\n\t        set: function (spread) {\n\t            this._spread = spread;\n\t            if (this._oscillators.length > 1) {\n\t                var start = -spread / 2;\n\t                var step = spread / (this._oscillators.length - 1);\n\t                this._forEach(function (osc, i) {\n\t                    osc.detune.value = start + step * i;\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of detuned oscillators\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Number}\n\t\t * @name count\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'count', {\n\t        get: function () {\n\t            return this._oscillators.length;\n\t        },\n\t        set: function (count) {\n\t            count = Math.max(count, 1);\n\t            if (this._oscillators.length !== count) {\n\t                // var partials = this.partials;\n\t                // var type = this.type;\n\t                //dispose the previous oscillators\n\t                this._forEach(function (osc) {\n\t                    osc.dispose();\n\t                });\n\t                this._oscillators = [];\n\t                for (var i = 0; i < count; i++) {\n\t                    var osc = new Tone.Oscillator();\n\t                    if (this.type === Tone.Oscillator.Type.Custom) {\n\t                        osc.partials = this._partials;\n\t                    } else {\n\t                        osc.type = this._type;\n\t                    }\n\t                    osc.phase = this._phase;\n\t                    osc.volume.value = -6 - count;\n\t                    this.frequency.connect(osc.frequency);\n\t                    this.detune.connect(osc.detune);\n\t                    osc.connect(this.output);\n\t                    this._oscillators[i] = osc;\n\t                }\n\t                //set the spread\n\t                this.spread = this._spread;\n\t                if (this.state === Tone.State.Started) {\n\t                    this._forEach(function (osc) {\n\t                        osc.start();\n\t                    });\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._phase;\n\t        },\n\t        set: function (phase) {\n\t            this._phase = phase;\n\t            this._forEach(function (osc) {\n\t                osc.phase = phase;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._partials;\n\t        },\n\t        set: function (partials) {\n\t            this._partials = partials;\n\t            this._type = Tone.Oscillator.Type.Custom;\n\t            this._forEach(function (osc) {\n\t                osc.partials = partials;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.FatOscillator} this\n\t\t */\n\t    Tone.FatOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this._forEach(function (osc) {\n\t            osc.dispose();\n\t        });\n\t        this._oscillators = null;\n\t        this._partials = null;\n\t        return this;\n\t    };\n\t    return Tone.FatOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n\t\t *         Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n\t\t *         into one class. The oscillator class can be changed by setting the `type`. \n\t\t *         `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n\t\t *         any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n\t\t *         will use the FMOscillator, AMOscillator or FatOscillator respectively. \n\t\t *         For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n\t\t *         to a FatOscillator of type \"sawtooth\". \n\t\t *\n\t\t *  @extends {Tone.Source}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The initial frequency of the oscillator.\n\t\t *  @param {String} type The type of the oscillator.\n\t\t *  @example\n\t\t *  var omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\");\n\t\t */\n\t    Tone.OmniOscillator = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.OmniOscillator);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  the type of the oscillator source\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sourceType = undefined;\n\t        /**\n\t\t\t *  the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = null;\n\t        //set the oscillator\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        //set the options\n\t        this.set(options);\n\t    };\n\t    Tone.extend(Tone.OmniOscillator, Tone.Source);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.OmniOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'type': 'sine',\n\t        'phase': 0\n\t    };\n\t    /**\n\t\t *  @enum {String}\n\t\t *  @private\n\t\t */\n\t    var OmniOscType = {\n\t        Pulse: 'PulseOscillator',\n\t        PWM: 'PWMOscillator',\n\t        Osc: 'Oscillator',\n\t        FM: 'FMOscillator',\n\t        AM: 'AMOscillator',\n\t        Fat: 'FatOscillator'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._start = function (time) {\n\t        this._oscillator.start(time);\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._stop = function (time) {\n\t        this._oscillator.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error \n\t\t * when it's not.\n\t\t * \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {String}\n\t\t * @name type\n\t\t * @example\n\t\t * omniOsc.type = \"pwm\";\n\t\t * //modulationFrequency is parameter which is available\n\t\t * //only when the type is \"pwm\". \n\t\t * omniOsc.modulationFrequency.value = 0.5;\n\t\t * @example\n\t\t * //an square wave frequency modulated by a sawtooth\n\t\t * omniOsc.type = \"fmsquare\";\n\t\t * omniOsc.modulationType = \"sawtooth\";\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'type', {\n\t        get: function () {\n\t            var prefix = '';\n\t            if (this._sourceType === OmniOscType.FM) {\n\t                prefix = 'fm';\n\t            } else if (this._sourceType === OmniOscType.AM) {\n\t                prefix = 'am';\n\t            } else if (this._sourceType === OmniOscType.Fat) {\n\t                prefix = 'fat';\n\t            }\n\t            return prefix + this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            if (type.substr(0, 2) === 'fm') {\n\t                this._createNewOscillator(OmniOscType.FM);\n\t                this._oscillator.type = type.substr(2);\n\t            } else if (type.substr(0, 2) === 'am') {\n\t                this._createNewOscillator(OmniOscType.AM);\n\t                this._oscillator.type = type.substr(2);\n\t            } else if (type.substr(0, 3) === 'fat') {\n\t                this._createNewOscillator(OmniOscType.Fat);\n\t                this._oscillator.type = type.substr(3);\n\t            } else if (type === 'pwm') {\n\t                this._createNewOscillator(OmniOscType.PWM);\n\t            } else if (type === 'pulse') {\n\t                this._createNewOscillator(OmniOscType.Pulse);\n\t            } else {\n\t                this._createNewOscillator(OmniOscType.Osc);\n\t                this._oscillator.type = type;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._oscillator.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._oscillator.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Set a member/attribute of the oscillator. \n\t\t *  @param {Object|String} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone.OmniOscillator} this\n\t\t */\n\t    Tone.OmniOscillator.prototype.set = function (params, value) {\n\t        //make sure the type is set first\n\t        if (params === 'type') {\n\t            this.type = value;\n\t        } else if (Tone.isObject(params) && params.hasOwnProperty('type')) {\n\t            this.type = params.type;\n\t        }\n\t        //then set the rest\n\t        Tone.prototype.set.apply(this, arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the oscillator to the frequency and detune signals\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._createNewOscillator = function (oscType) {\n\t        if (oscType !== this._sourceType) {\n\t            this._sourceType = oscType;\n\t            var OscillatorConstructor = Tone[oscType];\n\t            //short delay to avoid clicks on the change\n\t            var now = this.now();\n\t            if (this._oscillator !== null) {\n\t                var oldOsc = this._oscillator;\n\t                oldOsc.stop(now);\n\t                //dispose the old one\n\t                this.context.setTimeout(function () {\n\t                    oldOsc.dispose();\n\t                    oldOsc = null;\n\t                }, this.blockTime);\n\t            }\n\t            this._oscillator = new OscillatorConstructor();\n\t            this.frequency.connect(this._oscillator.frequency);\n\t            this.detune.connect(this._oscillator.detune);\n\t            this._oscillator.connect(this.output);\n\t            if (this.state === Tone.State.Started) {\n\t                this._oscillator.start(now);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t * The phase of the oscillator in degrees. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._oscillator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._oscillator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The width of the oscillator (only if the oscillator is set to \"pulse\")\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {NormalRange}\n\t\t * @signal\n\t\t * @name width\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pulse\");\n\t\t * //can access the width attribute only if type === \"pulse\"\n\t\t * omniOsc.width.value = 0.2; \n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'width', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Pulse) {\n\t                return this._oscillator.width;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of detuned oscillators\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Number}\n\t\t * @name count\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'count', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                return this._oscillator.count;\n\t            }\n\t        },\n\t        set: function (count) {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                this._oscillator.count = count;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t\t * for more info.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Cents}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'spread', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                return this._oscillator.spread;\n\t            }\n\t        },\n\t        set: function (spread) {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                this._oscillator.spread = spread;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator. Only if the oscillator\n\t\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t\t * for more info. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {String}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                return this._oscillator.modulationType;\n\t            }\n\t        },\n\t        set: function (mType) {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                this._oscillator.modulationType = mType;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t * modulating signal (ma) -- as in ma/mf. \n\t\t * See Tone.FMOscillator for more info. \n\t\t * @type {Positive}\n\t\t * @signal\n\t\t * @name modulationIndex\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationIndex', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM) {\n\t                return this._oscillator.modulationIndex;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t\t *  for more info. \n\t\t *  @memberOf Tone.OmniOscillator#\n\t\t *  @signal\n\t\t *  @type {Positive}\n\t\t *  @name harmonicity\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'harmonicity', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                return this._oscillator.harmonicity;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The modulationFrequency Signal of the oscillator \n\t\t * (only if the oscillator type is set to pwm). See \n\t\t * Tone.PWMOscillator for more info. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Frequency}\n\t\t * @signal\n\t\t * @name modulationFrequency\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pwm\");\n\t\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t\t * omniOsc.modulationFrequency.value = 0.2; \n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationFrequency', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.PWM) {\n\t                return this._oscillator.modulationFrequency;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.OmniOscillator} this\n\t\t */\n\t    Tone.OmniOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._oscillator.dispose();\n\t        this._oscillator = null;\n\t        this._sourceType = null;\n\t        return this;\n\t    };\n\t    return Tone.OmniOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base-class for all instruments\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t */\n\t    Tone.Instrument = function (options) {\n\t        //get the defaults\n\t        options = Tone.defaultArg(options, Tone.Instrument.defaults);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The output and volume triming node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t    };\n\t    Tone.extend(Tone.Instrument, Tone.AudioNode);\n\t    /**\n\t\t *  the default attributes\n\t\t *  @type {object}\n\t\t */\n\t    Tone.Instrument.defaults = {\n\t        /** the volume of the output in decibels */\n\t        'volume': 0\n\t    };\n\t    /**\n\t\t *  @abstract\n\t\t *  @param {string|number} note the note to trigger\n\t\t *  @param {Time} [time=now] the time to trigger the ntoe\n\t\t *  @param {number} [velocity=1] the velocity to trigger the note\n\t\t */\n\t    Tone.Instrument.prototype.triggerAttack = Tone.noOp;\n\t    /**\n\t\t *  @abstract\n\t\t *  @param {Time} [time=now] when to trigger the release\n\t\t */\n\t    Tone.Instrument.prototype.triggerRelease = Tone.noOp;\n\t    /**\n\t\t *  Trigger the attack and then the release after the duration.\n\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t *  @param  {Time} duration How long the note should be held for before\n\t\t *                          triggering the release. This value must be greater than 0.\n\t\t *  @param {Time} [time=now]  When the note should be triggered.\n\t\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t\t *  @returns {Tone.Instrument} this\n\t\t *  @example\n\t\t * //trigger \"C4\" for the duration of an 8th note\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.Instrument.prototype.triggerAttackRelease = function (note, duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(note, time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Instrument} this\n\t\t */\n\t    Tone.Instrument.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this._writable(['volume']);\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.Instrument;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  This is an abstract base class for other monophonic instruments to \n\t\t *          extend. IMPORTANT: It does not make any sound on its own and\n\t\t *          shouldn't be directly instantiated.\n\t\t *\n\t\t *  @constructor\n\t\t *  @abstract\n\t\t *  @extends {Tone.Instrument}\n\t\t */\n\t    Tone.Monophonic = function (options) {\n\t        //get the defaults\n\t        options = Tone.defaultArg(options, Tone.Monophonic.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The glide time between notes. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.portamento = options.portamento;\n\t    };\n\t    Tone.extend(Tone.Monophonic, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Monophonic.defaults = { 'portamento': 0 };\n\t    /**\n\t\t *  Trigger the attack of the note optionally with a given velocity. \n\t\t *  \n\t\t *  \n\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t *  @param  {Time} [time=now]     When the note should start.\n\t\t *  @param  {number} [velocity=1] velocity The velocity scaler \n\t\t *                                determines how \"loud\" the note \n\t\t *                                will be triggered.\n\t\t *  @returns {Tone.Monophonic} this\n\t\t *  @example\n\t\t * synth.triggerAttack(\"C4\");\n\t\t *  @example\n\t\t * //trigger the note a half second from now at half velocity\n\t\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t\t */\n\t    Tone.Monophonic.prototype.triggerAttack = function (note, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this._triggerEnvelopeAttack(time, velocity);\n\t        this.setNote(note, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of the envelope\n\t\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t\t *  @returns {Tone.Monophonic} this\n\t\t *  @example\n\t\t * synth.triggerRelease();\n\t\t */\n\t    Tone.Monophonic.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._triggerEnvelopeRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @private\n\t\t */\n\t    Tone.Monophonic.prototype._triggerEnvelopeAttack = function () {\n\t    };\n\t    /**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @private\n\t\t */\n\t    Tone.Monophonic.prototype._triggerEnvelopeRelease = function () {\n\t    };\n\t    /**\n\t\t *  Set the note at the given time. If no time is given, the note\n\t\t *  will set immediately. \n\t\t *  @param {Frequency} note The note to change to.\n\t\t *  @param  {Time} [time=now] The time when the note should be set. \n\t\t *  @returns {Tone.Monophonic} this\n\t\t * @example\n\t\t * //change to F#6 in one quarter note from now.\n\t\t * synth.setNote(\"F#6\", \"+4n\");\n\t\t * @example\n\t\t * //change to Bb4 right now\n\t\t * synth.setNote(\"Bb4\");\n\t\t */\n\t    Tone.Monophonic.prototype.setNote = function (note, time) {\n\t        time = this.toSeconds(time);\n\t        if (this.portamento > 0) {\n\t            var currentNote = this.frequency.value;\n\t            this.frequency.setValueAtTime(currentNote, time);\n\t            var portTime = this.toSeconds(this.portamento);\n\t            this.frequency.exponentialRampToValueAtTime(note, time + portTime);\n\t        } else {\n\t            this.frequency.setValueAtTime(note, time);\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Monophonic;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Synth is composed simply of a Tone.OmniOscillator\n\t\t *          routed through a Tone.AmplitudeEnvelope. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.Synth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.Synth = function (options) {\n\t        //get the defaults\n\t        options = Tone.defaultArg(options, Tone.Synth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this.oscillator.frequency;\n\t        /**\n\t\t\t *  The detune control.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this.oscillator.detune;\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the oscillators to the output\n\t        this.oscillator.chain(this.envelope, this.output);\n\t        //start the oscillators\n\t        this.oscillator.start();\n\t        this._readOnly([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Synth, Tone.Monophonic);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Synth.defaults = {\n\t        'oscillator': { 'type': 'triangle' },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0.3,\n\t            'release': 1\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.Synth} this\n\t\t *  @private\n\t\t */\n\t    Tone.Synth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.Synth} this\n\t\t *  @private\n\t\t */\n\t    Tone.Synth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Synth} this\n\t\t */\n\t    Tone.Synth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.Synth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  AMSynth uses the output of one Tone.Synth to modulate the\n\t\t *          amplitude of another Tone.Synth. The harmonicity (the ratio between\n\t\t *          the two signals) affects the timbre of the output signal greatly.\n\t\t *          Read more about Amplitude Modulation Synthesis on\n\t\t *          [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth\n\t\t *                            see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.AMSynth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"4n\");\n\t\t */\n\t    Tone.AMSynth = function (options) {\n\t        options = Tone.defaultArg(options, Tone.AMSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The carrier voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Synth();\n\t        this._carrier.volume.value = -10;\n\t        /**\n\t\t\t *  The carrier's oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.oscillator = this._carrier.oscillator;\n\t        /**\n\t\t\t *  The carrier's envelope\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t        /**\n\t\t\t *  The modulator voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Synth();\n\t        this._modulator.volume.value = -10;\n\t        /**\n\t\t\t *  The modulator's oscillator which is applied\n\t\t\t *  to the amplitude of the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t        /**\n\t\t\t *  The modulator's envelope\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t        /**\n\t\t\t *  The frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationScale = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain();\n\t        //control the two voices frequency\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t        this._carrier.chain(this._modulationNode, this.output);\n\t        this._readOnly([\n\t            'frequency',\n\t            'harmonicity',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AMSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AMSynth.defaults = {\n\t        'harmonicity': 3,\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.01,\n\t            'decay': 0.01,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        },\n\t        'modulation': { 'type': 'square' },\n\t        'modulationEnvelope': {\n\t            'attack': 0.5,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t *  trigger the attack portion of the note\n\t\t *\n\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note\n\t\t *  @private\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the port glide\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.modulationEnvelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  trigger the release portion of the note\n\t\t *\n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @private\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        this.modulationEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'harmonicity',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._modulationScale.dispose();\n\t        this._modulationScale = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.oscillator = null;\n\t        this.envelope = null;\n\t        this.modulationEnvelope = null;\n\t        this.modulation = null;\n\t        return this;\n\t    };\n\t    return Tone.AMSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.\n\t\t *          The amplitude of the Tone.Oscillator and the cutoff frequency of the \n\t\t *          Tone.Filter are controlled by Tone.Envelopes. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n\t\t *          \n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.MonoSynth({\n\t\t * \t\"oscillator\" : {\n\t\t * \t\t\"type\" : \"square\"\n\t\t *  },\n\t\t *  \"envelope\" : {\n\t\t *  \t\"attack\" : 0.1\n\t\t *  }\n\t\t * }).toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.MonoSynth = function (options) {\n\t        //get the defaults\n\t        options = Tone.defaultArg(options, Tone.MonoSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this.oscillator.frequency;\n\t        /**\n\t\t\t *  The detune control.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this.oscillator.detune;\n\t        /**\n\t\t\t *  The filter.\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.filter = new Tone.Filter(options.filter);\n\t        /**\n\t\t\t *  The filter envelope.\n\t\t\t *  @type {Tone.FrequencyEnvelope}\n\t\t\t */\n\t        this.filterEnvelope = new Tone.FrequencyEnvelope(options.filterEnvelope);\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the oscillators to the output\n\t        this.oscillator.chain(this.filter, this.envelope, this.output);\n\t        //start the oscillators\n\t        this.oscillator.start();\n\t        //connect the filter envelope\n\t        this.filterEnvelope.connect(this.filter.frequency);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'filter',\n\t            'filterEnvelope',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MonoSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MonoSynth.defaults = {\n\t        'frequency': 'C4',\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'square' },\n\t        'filter': {\n\t            'Q': 6,\n\t            'type': 'lowpass',\n\t            'rolloff': -24\n\t        },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0.9,\n\t            'release': 1\n\t        },\n\t        'filterEnvelope': {\n\t            'attack': 0.06,\n\t            'decay': 0.2,\n\t            'sustain': 0.5,\n\t            'release': 2,\n\t            'baseFrequency': 200,\n\t            'octaves': 7,\n\t            'exponent': 2\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.MonoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.filterEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.MonoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        this.filterEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t */\n\t    Tone.MonoSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'filter',\n\t            'filterEnvelope',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this.filterEnvelope.dispose();\n\t        this.filterEnvelope = null;\n\t        this.filter.dispose();\n\t        this.filter = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.MonoSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.DuoSynth is a monophonic synth composed of two \n\t\t *          MonoSynths run in parallel with control over the \n\t\t *          frequency ratio between the two voices and vibrato effect.\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var duoSynth = new Tone.DuoSynth().toMaster();\n\t\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t\t */\n\t    Tone.DuoSynth = function (options) {\n\t        options = Tone.defaultArg(options, Tone.DuoSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  the first voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t        this.voice0 = new Tone.MonoSynth(options.voice0);\n\t        this.voice0.volume.value = -10;\n\t        /**\n\t\t\t *  the second voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t        this.voice1 = new Tone.MonoSynth(options.voice1);\n\t        this.voice1.volume.value = -10;\n\t        /**\n\t\t\t *  The vibrato LFO. \n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._vibrato = new Tone.LFO(options.vibratoRate, -50, 50);\n\t        this._vibrato.start();\n\t        /**\n\t\t\t * the vibrato frequency\n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.vibratoRate = this._vibrato.frequency;\n\t        /**\n\t\t\t *  the vibrato gain\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._vibratoGain = new Tone.Gain(options.vibratoAmount, Tone.Type.Positive);\n\t        /**\n\t\t\t * The amount of vibrato\n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t */\n\t        this.vibratoAmount = this._vibratoGain.gain;\n\t        /**\n\t\t\t *  the frequency control\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * duoSynth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        //control the two voices frequency\n\t        this.frequency.connect(this.voice0.frequency);\n\t        this.frequency.chain(this.harmonicity, this.voice1.frequency);\n\t        this._vibrato.connect(this._vibratoGain);\n\t        this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\t        this.voice0.connect(this.output);\n\t        this.voice1.connect(this.output);\n\t        this._readOnly([\n\t            'voice0',\n\t            'voice1',\n\t            'frequency',\n\t            'vibratoAmount',\n\t            'vibratoRate'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.DuoSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.DuoSynth.defaults = {\n\t        'vibratoAmount': 0.5,\n\t        'vibratoRate': 5,\n\t        'harmonicity': 1.5,\n\t        'voice0': {\n\t            'volume': -10,\n\t            'portamento': 0,\n\t            'oscillator': { 'type': 'sine' },\n\t            'filterEnvelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            },\n\t            'envelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            }\n\t        },\n\t        'voice1': {\n\t            'volume': -10,\n\t            'portamento': 0,\n\t            'oscillator': { 'type': 'sine' },\n\t            'filterEnvelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            },\n\t            'envelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelopes\n\t\t *  \n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.DuoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.voice0.envelope.triggerAttack(time, velocity);\n\t        this.voice1.envelope.triggerAttack(time, velocity);\n\t        this.voice0.filterEnvelope.triggerAttack(time);\n\t        this.voice1.filterEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelopes\n\t\t *  \n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.DuoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.voice0.triggerRelease(time);\n\t        this.voice1.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t */\n\t    Tone.DuoSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'voice0',\n\t            'voice1',\n\t            'frequency',\n\t            'vibratoAmount',\n\t            'vibratoRate'\n\t        ]);\n\t        this.voice0.dispose();\n\t        this.voice0 = null;\n\t        this.voice1.dispose();\n\t        this.voice1 = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._vibratoGain.dispose();\n\t        this._vibratoGain = null;\n\t        this._vibrato = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this.vibratoAmount.dispose();\n\t        this.vibratoAmount = null;\n\t        this.vibratoRate = null;\n\t        return this;\n\t    };\n\t    return Tone.DuoSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n\t\t *          the frequency of a second Tone.Synth. A lot of spectral content \n\t\t *          can be explored using the modulationIndex parameter. Read more about\n\t\t *          frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth\n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var fmSynth = new Tone.FMSynth().toMaster();\n\t\t * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t\t */\n\t    Tone.FMSynth = function (options) {\n\t        options = Tone.defaultArg(options, Tone.FMSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The carrier voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Synth(options.carrier);\n\t        this._carrier.volume.value = -10;\n\t        /**\n\t\t\t *  The carrier's oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.oscillator = this._carrier.oscillator;\n\t        /**\n\t\t\t *  The carrier's envelope\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t        /**\n\t\t\t *  The modulator voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Synth(options.modulator);\n\t        this._modulator.volume.value = -10;\n\t        /**\n\t\t\t *  The modulator's oscillator which is applied\n\t\t\t *  to the amplitude of the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t        /**\n\t\t\t *  The modulator's envelope\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  The modulation index which essentially the depth or amount of the modulation. It is the\n\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t\t\t *  modulating signal (ma) -- as in ma/mf.\n\t\t\t *\t@type {Positive}\n\t\t\t *\t@signal\n\t\t\t */\n\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t        this.modulationIndex.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //control the two voices frequency\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t        this._modulator.connect(this._modulationNode.gain);\n\t        this._modulationNode.connect(this._carrier.frequency);\n\t        this._carrier.connect(this.output);\n\t        this._readOnly([\n\t            'frequency',\n\t            'harmonicity',\n\t            'modulationIndex',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FMSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FMSynth.defaults = {\n\t        'harmonicity': 3,\n\t        'modulationIndex': 10,\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.01,\n\t            'decay': 0.01,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        },\n\t        'modulation': { 'type': 'square' },\n\t        'modulationEnvelope': {\n\t            'attack': 0.5,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t * \ttrigger the attack portion of the note\n\t\t *\n\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t *  @param {number} [velocity=1] the velocity of the note\n\t\t *  @returns {Tone.FMSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.FMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.modulationEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  trigger the release portion of the note\n\t\t *\n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.FMSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.FMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        this.modulationEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FMSynth} this\n\t\t */\n\t    Tone.FMSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'harmonicity',\n\t            'modulationIndex',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.modulationIndex.dispose();\n\t        this.modulationIndex = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.oscillator = null;\n\t        this.envelope = null;\n\t        this.modulationEnvelope = null;\n\t        this.modulation = null;\n\t        return this;\n\t    };\n\t    return Tone.FMSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.MembraneSynth makes kick and tom sounds using a single oscillator\n\t\t *          with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n\t\t *          is routed through a Tone.AmplitudeEnvelope to the output. The drum\n\t\t *          quality of the sound comes from the frequency envelope applied\n\t\t *          during during Tone.MembraneSynth.triggerAttack(note). The frequency\n\t\t *          envelope starts at <code>note * .octaves</code> and ramps to \n\t\t *          <code>note</code> over the duration of <code>.pitchDecay</code>. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.MembraneSynth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C2\", \"8n\");\n\t\t */\n\t    Tone.MembraneSynth = function (options) {\n\t        options = Tone.defaultArg(options, Tone.MembraneSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator).start();\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        /**\n\t\t\t *  The number of octaves the pitch envelope ramps.\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this.octaves = options.octaves;\n\t        /**\n\t\t\t *  The amount of time the frequency envelope takes. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.pitchDecay = options.pitchDecay;\n\t        this.oscillator.chain(this.envelope, this.output);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MembraneSynth, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MembraneSynth.defaults = {\n\t        'pitchDecay': 0.05,\n\t        'octaves': 10,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 0.4,\n\t            'sustain': 0.01,\n\t            'release': 1.4,\n\t            'attackCurve': 'exponential'\n\t        }\n\t    };\n\t    /**\n\t\t *  Trigger the note at the given time with the given velocity. \n\t\t *  \n\t\t *  @param  {Frequency} note     the note\n\t\t *  @param  {Time} [time=now]     the time, if not given is now\n\t\t *  @param  {number} [velocity=1] velocity defaults to 1\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t *  @example\n\t\t *  kick.triggerAttack(60);\n\t\t */\n\t    Tone.MembraneSynth.prototype.triggerAttack = function (note, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        note = this.toFrequency(note);\n\t        var maxNote = note * this.octaves;\n\t        this.oscillator.frequency.setValueAtTime(maxNote, time);\n\t        this.oscillator.frequency.exponentialRampToValueAtTime(note, time + this.toSeconds(this.pitchDecay));\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of the note.\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t */\n\t    Tone.MembraneSynth.prototype.triggerRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t */\n\t    Tone.MembraneSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.MembraneSynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  Inharmonic ratio of frequencies based on the Roland TR-808\n\t\t *  Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var inharmRatios = [\n\t        1,\n\t        1.483,\n\t        1.932,\n\t        2.546,\n\t        2.63,\n\t        3.897\n\t    ];\n\t    /**\n\t\t *  @class  A highly inharmonic and spectrally complex source with a highpass filter\n\t\t *          and amplitude envelope which is good for making metalophone sounds. Based\n\t\t *          on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n\t\t *          Inspiration from [Sound on Sound](https://web.archive.org/web/20160610143924/https://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] The options availble for the synth\n\t\t *                             see defaults below\n\t\t */\n\t    Tone.MetalSynth = function (options) {\n\t        options = Tone.defaultArg(options, Tone.MetalSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The frequency of the cymbal\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The array of FMOscillators\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillators = [];\n\t        /**\n\t\t\t *  The frequency multipliers\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._freqMultipliers = [];\n\t        /**\n\t\t\t *  The amplitude for the body\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitue = new Tone.Gain(0).connect(this.output);\n\t        /**\n\t\t\t *  highpass the output\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._highpass = new Tone.Filter({\n\t            'type': 'highpass',\n\t            'Q': -3.0102999566398125\n\t        }).connect(this._amplitue);\n\t        /**\n\t\t\t *  The number of octaves the highpass\n\t\t\t *  filter frequency ramps\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  Scale the body envelope\n\t\t\t *  for the bandpass\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filterFreqScaler = new Tone.Scale(options.resonance, 7000);\n\t        /**\n\t\t\t *  The envelope which is connected both to the\n\t\t\t *  amplitude and highpass filter's cutoff frequency\n\t\t\t *  @type  {Tone.Envelope}\n\t\t\t */\n\t        this.envelope = new Tone.Envelope({\n\t            'attack': options.envelope.attack,\n\t            'attackCurve': 'linear',\n\t            'decay': options.envelope.decay,\n\t            'sustain': 0,\n\t            'release': options.envelope.release\n\t        }).chain(this._filterFreqScaler, this._highpass.frequency);\n\t        this.envelope.connect(this._amplitue.gain);\n\t        for (var i = 0; i < inharmRatios.length; i++) {\n\t            var osc = new Tone.FMOscillator({\n\t                'type': 'square',\n\t                'modulationType': 'square',\n\t                'harmonicity': options.harmonicity,\n\t                'modulationIndex': options.modulationIndex\n\t            });\n\t            osc.connect(this._highpass).start();\n\t            this._oscillators[i] = osc;\n\t            var mult = new Tone.Multiply(inharmRatios[i]);\n\t            this._freqMultipliers[i] = mult;\n\t            this.frequency.chain(mult, osc.frequency);\n\t        }\n\t        //set the octaves\n\t        this.octaves = options.octaves;\n\t    };\n\t    Tone.extend(Tone.MetalSynth, Tone.Instrument);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MetalSynth.defaults = {\n\t        'frequency': 200,\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 1.4,\n\t            'release': 0.2\n\t        },\n\t        'harmonicity': 5.1,\n\t        'modulationIndex': 32,\n\t        'resonance': 4000,\n\t        'octaves': 1.5\n\t    };\n\t    /**\n\t\t *  Trigger the attack.\n\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t *  @param  {NormalRange}  [velocity=1]  The velocity that the envelope should be triggered at.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerAttack = function (time, vel) {\n\t        time = this.toSeconds(time);\n\t        vel = Tone.defaultArg(vel, 1);\n\t        this.envelope.triggerAttack(time, vel);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release of the envelope.\n\t\t *  @param  {Time}  time      When the release should be triggered.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and release of the envelope after the given\n\t\t *  duration.\n\t\t *  @param  {Time}  duration  The duration before triggering the release\n\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t *  @param  {NormalRange}  [velocity=1]  The velocity that the envelope should be triggered at.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The modulationIndex of the oscillators which make up the source.\n\t\t *  see Tone.FMOscillator.modulationIndex\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Positive}\n\t\t *  @name  modulationIndex\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'modulationIndex', {\n\t        get: function () {\n\t            return this._oscillators[0].modulationIndex.value;\n\t        },\n\t        set: function (val) {\n\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t                this._oscillators[i].modulationIndex.value = val;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The harmonicity of the oscillators which make up the source.\n\t\t *  see Tone.FMOscillator.harmonicity\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Positive}\n\t\t *  @name  harmonicity\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'harmonicity', {\n\t        get: function () {\n\t            return this._oscillators[0].harmonicity.value;\n\t        },\n\t        set: function (val) {\n\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t                this._oscillators[i].harmonicity.value = val;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The frequency of the highpass filter attached to the envelope\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Frequency}\n\t\t *  @name  resonance\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'resonance', {\n\t        get: function () {\n\t            return this._filterFreqScaler.min;\n\t        },\n\t        set: function (val) {\n\t            this._filterFreqScaler.min = val;\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of octaves above the \"resonance\" frequency\n\t\t *  that the filter ramps during the attack/decay envelope\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Number}\n\t\t *  @name  octaves\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octs) {\n\t            this._octaves = octs;\n\t            this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, octs);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.MetalSynth} this\n\t\t */\n\t    Tone.MetalSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t            this._oscillators[i].dispose();\n\t            this._freqMultipliers[i].dispose();\n\t        }\n\t        this._oscillators = null;\n\t        this._freqMultipliers = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._filterFreqScaler.dispose();\n\t        this._filterFreqScaler = null;\n\t        this._amplitue.dispose();\n\t        this._amplitue = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this._highpass.dispose();\n\t        this._highpass = null;\n\t    };\n\t    return Tone.MetalSynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  BufferSource polyfill\n\t\t */\n\t    if (window.AudioBufferSourceNode && !AudioBufferSourceNode.prototype.start) {\n\t        AudioBufferSourceNode.prototype.start = AudioBufferSourceNode.prototype.noteGrainOn;\n\t        AudioBufferSourceNode.prototype.stop = AudioBufferSourceNode.prototype.noteOff;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the native BufferSourceNode.\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n\t\t *  @param  {Function}  onload  The callback to invoke when the\n\t\t *                               buffer is done playing.\n\t\t */\n\t    Tone.BufferSource = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'buffer',\n\t            'onload'\n\t        ], Tone.BufferSource);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The callback to invoke after the\n\t\t\t *  buffer source is done playing.\n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.onended = options.onended;\n\t        /**\n\t\t\t *  The time that the buffer was started.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startTime = -1;\n\t        /**\n\t\t\t *  The time that the buffer is scheduled to stop.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stopTime = -1;\n\t        /**\n\t\t\t *  The gain node which envelopes the BufferSource\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gainNode = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  The buffer source\n\t\t\t *  @type  {AudioBufferSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._source = this.context.createBufferSource();\n\t        this._source.connect(this._gainNode);\n\t        /**\n\t\t\t * The private buffer instance\n\t\t\t * @type {Tone.Buffer}\n\t\t\t * @private\n\t\t\t */\n\t        this._buffer = new Tone.Buffer(options.buffer, options.onload);\n\t        /**\n\t\t\t *  The playbackRate of the buffer\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.playbackRate = new Tone.Param(this._source.playbackRate, Tone.Type.Positive);\n\t        /**\n\t\t\t *  The fadeIn time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeIn = options.fadeIn;\n\t        /**\n\t\t\t *  The fadeOut time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeOut = options.fadeOut;\n\t        /**\n\t\t\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t\t\t * @type {String}\n\t\t\t */\n\t        this.curve = options.curve;\n\t        /**\n\t\t\t *  The value that the buffer ramps to\n\t\t\t *  @type {Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = 1;\n\t        /**\n\t\t\t * The onended timeout\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._onendedTimeout = -1;\n\t        //set some values initially\n\t        this.loop = options.loop;\n\t        this.loopStart = options.loopStart;\n\t        this.loopEnd = options.loopEnd;\n\t        this.playbackRate.value = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.BufferSource, Tone.AudioNode);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.BufferSource.defaults = {\n\t        'onended': Tone.noOp,\n\t        'onload': Tone.noOp,\n\t        'loop': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0,\n\t        'curve': 'linear',\n\t        'playbackRate': 1\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.BufferSource#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'state', {\n\t        get: function () {\n\t            var now = this.now();\n\t            if (this._startTime !== -1 && now >= this._startTime && now < this._stopTime) {\n\t                return Tone.State.Started;\n\t            } else {\n\t                return Tone.State.Stopped;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the buffer\n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at.\n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length\n\t\t *                                of the sample (minus any offset)\n\t\t *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.\n\t\t *  @param  {Time=}  fadeInTime  The optional fadeIn ramp time.\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.start = function (time, offset, duration, gain, fadeInTime) {\n\t        if (this._startTime !== -1) {\n\t            throw new Error('Tone.BufferSource can only be started once.');\n\t        }\n\t        if (this.buffer.loaded) {\n\t            time = this.toSeconds(time);\n\t            //if it's a loop the default offset is the loopstart point\n\t            if (this.loop) {\n\t                offset = Tone.defaultArg(offset, this.loopStart);\n\t            } else {\n\t                //otherwise the default offset is 0\n\t                offset = Tone.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toSeconds(offset);\n\t            gain = Tone.defaultArg(gain, 1);\n\t            this._gain = gain;\n\t            fadeInTime = this.toSeconds(Tone.defaultArg(fadeInTime, this.fadeIn));\n\t            this.fadeIn = fadeInTime;\n\t            if (fadeInTime > 0) {\n\t                this._gainNode.gain.setValueAtTime(0, time);\n\t                if (this.curve === 'linear') {\n\t                    this._gainNode.gain.linearRampToValueAtTime(this._gain, time + fadeInTime);\n\t                } else {\n\t                    this._gainNode.gain.setTargetAtTime(this._gain, time, this._gainNode.gain.getTimeConstant(fadeInTime));\n\t                }\n\t            } else {\n\t                this._gainNode.gain.setValueAtTime(gain, time);\n\t            }\n\t            this._startTime = time;\n\t            var computedDur = this.toSeconds(Tone.defaultArg(duration, this.buffer.duration - offset));\n\t            computedDur = Math.max(computedDur, 0);\n\t            if (!this.loop || this.loop && !Tone.isUndef(duration)) {\n\t                //clip the duration when not looping\n\t                if (!this.loop) {\n\t                    computedDur = Math.min(computedDur, this.buffer.duration - offset);\n\t                }\n\t                this.stop(time + computedDur, this.fadeOut);\n\t            }\n\t            //start the buffer source\n\t            if (this.loop) {\n\t                //modify the offset if it's greater than the loop time\n\t                var loopEnd = this.loopEnd || this.buffer.duration;\n\t                var loopStart = this.loopStart;\n\t                var loopDuration = loopEnd - loopStart;\n\t                //move the offset back\n\t                if (offset > loopEnd) {\n\t                    offset = (offset - loopStart) % loopDuration + loopStart;\n\t                }\n\t            }\n\t            this._source.buffer = this.buffer.get();\n\t            this._source.loopEnd = this.loopEnd || this.buffer.duration;\n\t            Tone.isPast(time);\n\t            this._source.start(time, offset);\n\t        } else {\n\t            throw new Error('Tone.BufferSource: buffer is either not set or not loaded.');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the buffer. Optionally add a ramp time to fade the\n\t\t *  buffer out.\n\t\t *  @param  {Time=}  time         The time the buffer should stop.\n\t\t *  @param  {Time=}  fadeOutTime  How long the gain should fade out for\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.stop = function (time, fadeOutTime) {\n\t        if (this.buffer.loaded) {\n\t            time = this.toSeconds(time);\n\t            //if this is before the previous stop\n\t            if (this._stopTime === -1 || this._stopTime > time) {\n\t                //stop if it's schedule before the start time\n\t                if (time <= this._startTime) {\n\t                    this._gainNode.gain.cancelScheduledValues(time);\n\t                    this._gainNode.gain.value = 0;\n\t                    return this;\n\t                }\n\t                time = Math.max(this._startTime + this.fadeIn + this.sampleTime, time);\n\t                //cancel the previous curve\n\t                this._gainNode.gain.cancelScheduledValues(time);\n\t                this._stopTime = time;\n\t                //the fadeOut time\n\t                fadeOutTime = this.toSeconds(Tone.defaultArg(fadeOutTime, this.fadeOut));\n\t                //set a new one\n\t                var heldDuration = Math.min(time - this._startTime - this.fadeIn - this.sampleTime, this.buffer.duration);\n\t                fadeOutTime = Math.min(heldDuration, fadeOutTime);\n\t                var startFade = time - fadeOutTime;\n\t                if (fadeOutTime > this.sampleTime) {\n\t                    this._gainNode.gain.setValueAtTime(this._gain, startFade);\n\t                    if (this.curve === 'linear') {\n\t                        this._gainNode.gain.linearRampToValueAtTime(0, time);\n\t                    } else {\n\t                        this._gainNode.gain.setTargetAtTime(0, startFade, this._gainNode.gain.getTimeConstant(fadeOutTime));\n\t                    }\n\t                } else {\n\t                    this._gainNode.gain.setValueAtTime(0, time);\n\t                }\n\t                Tone.context.clearTimeout(this._onendedTimeout);\n\t                this._onendedTimeout = Tone.context.setTimeout(this._onended.bind(this), this._stopTime - this.now());\n\t            }\n\t        } else {\n\t            throw new Error('Tone.BufferSource: buffer is either not set or not loaded.');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Internal callback when the buffer is ended.\n\t\t *  Invokes `onended` and disposes the node.\n\t\t *  @private\n\t\t */\n\t    Tone.BufferSource.prototype._onended = function () {\n\t        this.onended(this);\n\t    };\n\t    /**\n\t\t * If loop is true, the loop will start at this position.\n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._source.loopStart;\n\t        },\n\t        set: function (loopStart) {\n\t            this._source.loopStart = this.toSeconds(loopStart);\n\t        }\n\t    });\n\t    /**\n\t\t * If loop is true, the loop will end at this position.\n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._source.loopEnd;\n\t        },\n\t        set: function (loopEnd) {\n\t            this._source.loopEnd = this.toSeconds(loopEnd);\n\t        }\n\t    });\n\t    /**\n\t\t * The audio buffer belonging to the player.\n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Tone.Buffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer;\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t        }\n\t    });\n\t    /**\n\t\t * If the buffer should loop once it's over.\n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Boolean}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loop', {\n\t        get: function () {\n\t            return this._source.loop;\n\t        },\n\t        set: function (loop) {\n\t            this._source.loop = loop;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.onended = null;\n\t        this._source.disconnect();\n\t        this._source = null;\n\t        this._gainNode.dispose();\n\t        this._gainNode = null;\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        this._startTime = -1;\n\t        this.playbackRate = null;\n\t        Tone.context.clearTimeout(this._onendedTimeout);\n\t        return this;\n\t    };\n\t    return Tone.BufferSource;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.\n\t\t *          Tone.Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n\t\t *          colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {string} type the noise type (white|pink|brown)\n\t\t *  @example\n\t\t * //initialize the noise and start\n\t\t * var noise = new Tone.Noise(\"pink\").start();\n\t\t * \n\t\t * //make an autofilter to shape the noise\n\t\t * var autoFilter = new Tone.AutoFilter({\n\t\t * \t\"frequency\" : \"8m\", \n\t\t * \t\"min\" : 800, \n\t\t * \t\"max\" : 15000\n\t\t * }).connect(Tone.Master);\n\t\t * \n\t\t * //connect the noise\n\t\t * noise.connect(autoFilter);\n\t\t * //start the autofilter LFO\n\t\t * autoFilter.start()\n\t\t */\n\t    Tone.Noise = function () {\n\t        var options = Tone.defaults(arguments, ['type'], Tone.Noise);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t        this._source = null;\n\t        /**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {AudioBuffer}\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The playback rate of the noise. Affects\n\t\t\t *  the \"frequency\" of the noise.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.Noise, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Noise.defaults = {\n\t        'type': 'white',\n\t        'playbackRate': 1\n\t    };\n\t    /**\n\t\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\". \n\t\t * @memberOf Tone.Noise#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * noise.type = \"white\";\n\t\t */\n\t    Object.defineProperty(Tone.Noise.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            if (this._type !== type) {\n\t                if (type in _noiseBuffers) {\n\t                    this._type = type;\n\t                    //if it's playing, stop and restart it\n\t                    if (this.state === Tone.State.Started) {\n\t                        var now = this.now();\n\t                        this._stop(now);\n\t                        this._start(now);\n\t                    }\n\t                } else {\n\t                    throw new TypeError('Tone.Noise: invalid type: ' + type);\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The playback rate of the noise. Affects\n\t\t *  the \"frequency\" of the noise.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */\n\t    Object.defineProperty(Tone.Noise.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            if (this._source) {\n\t                this._source.playbackRate.value = rate;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  internal start method\n\t\t *\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.Noise.prototype._start = function (time) {\n\t        var buffer = _noiseBuffers[this._type];\n\t        this._source = new Tone.BufferSource(buffer).connect(this.output);\n\t        this._source.loop = true;\n\t        this._source.playbackRate.value = this._playbackRate;\n\t        this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t    };\n\t    /**\n\t\t *  internal stop method\n\t\t *\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.Noise.prototype._stop = function (time) {\n\t        if (this._source) {\n\t            this._source.stop(this.toSeconds(time));\n\t            this._source = null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Noise} this\n\t\t */\n\t    Tone.Noise.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._source !== null) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // THE BUFFERS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //Noise buffer stats\n\t    var bufferLength = 44100 * 5;\n\t    var channels = 2;\n\t    /**\n\t\t *\tThe noise arrays. Generated on initialization.\n\t\t *  borrowed heavily from https://github.com/zacharydenton/noise.js \n\t\t *  (c) 2013 Zach Denton (MIT)\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t */\n\t    var _noiseArrays = {\n\t        'pink': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                var b0, b1, b2, b3, b4, b5, b6;\n\t                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    var white = Math.random() * 2 - 1;\n\t                    b0 = 0.99886 * b0 + white * 0.0555179;\n\t                    b1 = 0.99332 * b1 + white * 0.0750759;\n\t                    b2 = 0.969 * b2 + white * 0.153852;\n\t                    b3 = 0.8665 * b3 + white * 0.3104856;\n\t                    b4 = 0.55 * b4 + white * 0.5329522;\n\t                    b5 = -0.7616 * b5 - white * 0.016898;\n\t                    channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t                    channel[i] *= 0.11;\n\t                    // (roughly) compensate for gain\n\t                    b6 = white * 0.115926;\n\t                }\n\t            }\n\t            return buffer;\n\t        }(),\n\t        'brown': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                var lastOut = 0;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    var white = Math.random() * 2 - 1;\n\t                    channel[i] = (lastOut + 0.02 * white) / 1.02;\n\t                    lastOut = channel[i];\n\t                    channel[i] *= 3.5;    // (roughly) compensate for gain\n\t                }\n\t            }\n\t            return buffer;\n\t        }(),\n\t        'white': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    channel[i] = Math.random() * 2 - 1;\n\t                }\n\t            }\n\t            return buffer;\n\t        }()\n\t    };\n\t    /**\n\t\t *\tstatic noise buffers\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Tone.Buffer}\n\t\t */\n\t    var _noiseBuffers = {};\n\t    //create the Tone.Buffers\n\t    function createBuffers() {\n\t        for (var type in _noiseArrays) {\n\t            _noiseBuffers[type] = new Tone.Buffer().fromArray(_noiseArrays[type]);\n\t        }\n\t    }\n\t    //create the noise buffers\n\t    Tone.getContext(createBuffers);\n\t    Tone.Context.on('init', createBuffers);\n\t    return Tone.Noise;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter), \n\t\t *          and two envelopes (Tone.Envelop). One envelope controls the amplitude\n\t\t *          of the noise and the other is controls the cutoff frequency of the filter. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t * @example\n\t\t * var noiseSynth = new Tone.NoiseSynth().toMaster();\n\t\t * noiseSynth.triggerAttackRelease(\"8n\");\n\t\t */\n\t    Tone.NoiseSynth = function (options) {\n\t        //get the defaults\n\t        options = Tone.defaultArg(options, Tone.NoiseSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The noise source.\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @example\n\t\t\t * noiseSynth.set(\"noise.type\", \"brown\");\n\t\t\t */\n\t        this.noise = new Tone.Noise();\n\t        /**\n\t\t\t *  The amplitude envelope. \n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the noise to the output\n\t        this.noise.chain(this.envelope, this.output);\n\t        //start the noise\n\t        this.noise.start();\n\t        this._readOnly([\n\t            'noise',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.NoiseSynth, Tone.Instrument);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.NoiseSynth.defaults = {\n\t        'noise': { 'type': 'white' },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0\n\t        }\n\t    };\n\t    /**\n\t\t *  Start the attack portion of the envelopes. Unlike other \n\t\t *  instruments, Tone.NoiseSynth doesn't have a note. \n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t *  @example\n\t\t * noiseSynth.triggerAttack();\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the release portion of the envelopes.\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and then the release. \n\t\t *  @param  {Time} duration the duration of the note\n\t\t *  @param  {Time} [time=now]     the time of the attack\n\t\t *  @param  {number} [velocity=1] the velocity\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'noise',\n\t            'envelope'\n\t        ]);\n\t        this.noise.dispose();\n\t        this.noise = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.NoiseSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Karplus-String string synthesis. Often out of tune. \n\t\t *         Will change when the AudioWorkerNode is available across\n\t\t *         browsers. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] see the defaults\n\t\t *  @example\n\t\t * var plucky = new Tone.PluckSynth().toMaster();\n\t\t * plucky.triggerAttack(\"C4\");\n\t\t */\n\t    Tone.PluckSynth = function (options) {\n\t        options = Tone.defaultArg(options, Tone.PluckSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @private\n\t\t\t */\n\t        this._noise = new Tone.Noise('pink');\n\t        /**\n\t\t\t *  The amount of noise at the attack. \n\t\t\t *  Nominal range of [0.1, 20]\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this.attackNoise = options.attackNoise;\n\t        /**\n\t\t\t *  the LFCF\n\t\t\t *  @type {Tone.LowpassCombFilter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfcf = new Tone.LowpassCombFilter({\n\t            'resonance': options.resonance,\n\t            'dampening': options.dampening\n\t        });\n\t        /**\n\t\t\t *  The resonance control. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._lfcf.resonance;\n\t        /**\n\t\t\t *  The dampening control. i.e. the lowpass filter frequency of the comb filter\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = this._lfcf.dampening;\n\t        //connections\n\t        this._noise.connect(this._lfcf);\n\t        this._lfcf.connect(this.output);\n\t        this._readOnly([\n\t            'resonance',\n\t            'dampening'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PluckSynth, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PluckSynth.defaults = {\n\t        'attackNoise': 1,\n\t        'dampening': 4000,\n\t        'resonance': 0.9\n\t    };\n\t    /**\n\t\t *  Trigger the note. \n\t\t *  @param {Frequency} note The note to trigger.\n\t\t *  @param {Time} [time=now] When the note should be triggered.\n\t\t *  @returns {Tone.PluckSynth} this\n\t\t */\n\t    Tone.PluckSynth.prototype.triggerAttack = function (note, time) {\n\t        note = this.toFrequency(note);\n\t        time = this.toSeconds(time);\n\t        var delayAmount = 1 / note;\n\t        this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\t        this._noise.start(time);\n\t        this._noise.stop(time + delayAmount * this.attackNoise);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.PluckSynth} this\n\t\t */\n\t    Tone.PluckSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._noise.dispose();\n\t        this._lfcf.dispose();\n\t        this._noise = null;\n\t        this._lfcf = null;\n\t        this._writable([\n\t            'resonance',\n\t            'dampening'\n\t        ]);\n\t        this.dampening = null;\n\t        this.resonance = null;\n\t        return this;\n\t    };\n\t    return Tone.PluckSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.PolySynth handles voice creation and allocation for any\n\t\t *          instruments passed in as the second paramter. PolySynth is \n\t\t *          not a synthesizer by itself, it merely manages voices of \n\t\t *          one of the other types of synths, allowing any of the \n\t\t *          monophonic synthesizers to be polyphonic. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {number|Object} [polyphony=4] The number of voices to create\n\t\t *  @param {function} [voice=Tone.Synth] The constructor of the voices\n\t\t *                                            uses Tone.Synth by default. \n\t\t *  @example\n\t\t * //a polysynth composed of 6 Voices of Synth\n\t\t * var synth = new Tone.PolySynth(6, Tone.Synth).toMaster();\n\t\t * //set the attributes using the set interface\n\t\t * synth.set(\"detune\", -1200);\n\t\t * //play a chord\n\t\t * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], \"4n\");\n\t\t */\n\t    Tone.PolySynth = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'polyphony',\n\t            'voice'\n\t        ], Tone.PolySynth);\n\t        Tone.Instrument.call(this, options);\n\t        options = Tone.defaultArg(options, Tone.Instrument.defaults);\n\t        //max polyphony\n\t        options.polyphony = Math.min(Tone.PolySynth.MAX_POLYPHONY, options.polyphony);\n\t        /**\n\t\t\t *  the array of voices\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.voices = new Array(options.polyphony);\n\t        /**\n\t\t\t *  The queue of voices with data about last trigger\n\t\t\t *  and the triggered note\n\t\t\t *  @private\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this._triggers = new Array(options.polyphony);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        this._readOnly('detune');\n\t        //create the voices\n\t        for (var i = 0; i < options.polyphony; i++) {\n\t            var v = new options.voice(arguments[2], arguments[3]);\n\t            this.voices[i] = v;\n\t            v.connect(this.output);\n\t            if (v.hasOwnProperty('detune')) {\n\t                this.detune.connect(v.detune);\n\t            }\n\t            this._triggers[i] = {\n\t                release: -1,\n\t                note: null,\n\t                voice: v\n\t            };\n\t        }\n\t    };\n\t    Tone.extend(Tone.PolySynth, Tone.Instrument);\n\t    /**\n\t\t *  the defaults\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PolySynth.defaults = {\n\t        'polyphony': 4,\n\t        'volume': 0,\n\t        'detune': 0,\n\t        'voice': Tone.Synth\n\t    };\n\t    /**\n\t\t *  Trigger the attack portion of the note\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} [time=now]  The start time of the note.\n\t\t *  @param {number} [velocity=1] The velocity of the note.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * //trigger a chord immediately with a velocity of 0.2\n\t\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"], undefined, 0.2);\n\t\t */\n\t    Tone.PolySynth.prototype.triggerAttack = function (notes, time, velocity) {\n\t        if (!Array.isArray(notes)) {\n\t            notes = [notes];\n\t        }\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < notes.length; i++) {\n\t            var val = notes[i];\n\t            //trigger the oldest voice\n\t            var oldest = this._triggers[0];\n\t            var oldestIndex = 0;\n\t            for (var j = 1; j < this._triggers.length; j++) {\n\t                if (this._triggers[j].release < oldest.release) {\n\t                    oldest = this._triggers[j];\n\t                    oldestIndex = j;\n\t                }\n\t            }\n\t            oldest.release = Infinity;\n\t            oldest.note = JSON.stringify(val);\n\t            oldest.voice.triggerAttack(val, time, velocity);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and release after the specified duration\n\t\t *  \n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} duration the duration of the note\n\t\t *  @param  {Time} [time=now]     if no time is given, defaults to now\n\t\t *  @param  {number} [velocity=1] the velocity of the attack (0-1)\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * //trigger a chord for a duration of a half note \n\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], \"2n\");\n\t\t *  @example\n\t\t * //can pass in an array of durations as well\n\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], [\"2n\", \"4n\", \"4n\"]);\n\t\t */\n\t    Tone.PolySynth.prototype.triggerAttackRelease = function (notes, duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.triggerAttack(notes, time, velocity);\n\t        if (Tone.isArray(duration) && Tone.isArray(notes)) {\n\t            for (var i = 0; i < notes.length; i++) {\n\t                var d = duration[Math.min(i, duration.length - 1)];\n\t                this.triggerRelease(notes[i], time + this.toSeconds(d));\n\t            }\n\t        } else {\n\t            this.triggerRelease(notes, time + this.toSeconds(duration));\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release of the note. Unlike monophonic instruments, \n\t\t *  a note (or array of notes) needs to be passed in as the first argument.\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} [time=now]  When the release will be triggered. \n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * poly.triggerRelease([\"Ab3\", \"C4\", \"F5\"], \"+2n\");\n\t\t */\n\t    Tone.PolySynth.prototype.triggerRelease = function (notes, time) {\n\t        if (!Array.isArray(notes)) {\n\t            notes = [notes];\n\t        }\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < notes.length; i++) {\n\t            //get the voice\n\t            var stringified = JSON.stringify(notes[i]);\n\t            for (var v = 0; v < this._triggers.length; v++) {\n\t                var desc = this._triggers[v];\n\t                if (desc.note === stringified && desc.release > time) {\n\t                    desc.voice.triggerRelease(time);\n\t                    desc.release = time;\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set a member/attribute of the voices. \n\t\t *  @param {Object|string} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * poly.set({\n\t\t * \t\"filter\" : {\n\t\t * \t\t\"type\" : \"highpass\"\n\t\t * \t},\n\t\t * \t\"envelope\" : {\n\t\t * \t\t\"attack\" : 0.25\n\t\t * \t}\n\t\t * });\n\t\t */\n\t    Tone.PolySynth.prototype.set = function (params, value, rampTime) {\n\t        for (var i = 0; i < this.voices.length; i++) {\n\t            this.voices[i].set(params, value, rampTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the synth's attributes. Given no arguments get\n\t\t *  will return all available object properties and their corresponding\n\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t *  to access deeper properties.\n\t\t *  @param {Array=} params the parameters to get, otherwise will return \n\t\t *  \t\t\t\t\t   all available.\n\t\t */\n\t    Tone.PolySynth.prototype.get = function (params) {\n\t        return this.voices[0].get(params);\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of all the currently active voices.\n\t\t *  @param {Time} [time=now] When the notes should be released.\n\t\t *  @return {Tone.PolySynth} this\n\t\t */\n\t    Tone.PolySynth.prototype.releaseAll = function (time) {\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < this._triggers.length; i++) {\n\t            var desc = this._triggers[i];\n\t            if (desc.release > time) {\n\t                desc.release = time;\n\t                desc.voice.triggerRelease(time);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t */\n\t    Tone.PolySynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        for (var i = 0; i < this.voices.length; i++) {\n\t            this.voices[i].dispose();\n\t            this.voices[i] = null;\n\t        }\n\t        this._writable('detune');\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.voices = null;\n\t        this._triggers = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The maximum number of notes that can be allocated \n\t\t *  to a polysynth. \n\t\t *  @type  {Number}\n\t\t *  @static\n\t\t */\n\t    Tone.PolySynth.MAX_POLYPHONY = 20;\n\t    return Tone.PolySynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * @class Automatically interpolates between a set of pitched samples. Pass in an object which maps the note's pitch or midi value to the url, then you can trigger the attack and release of that note like other instruments. By automatically repitching the samples, it is possible to play pitches which were not explicitly included which can save loading time.\n\t\t *        For sample or buffer playback where repitching is not necessary, use [Tone.Player](https://tonejs.github.io/docs/Player).\n\t\t * @param {Object} samples An object of samples mapping either Midi\n\t\t *                         Note Numbers or Scientific Pitch Notation\n\t\t *                         to the url of that sample.\n\t\t * @example\n\t\t * var sampler = new Tone.Sampler({\n\t\t * \t\"C3\" : \"path/to/C3.mp3\",\n\t\t * \t\"D#3\" : \"path/to/Dsharp3.mp3\",\n\t\t * \t\"F#3\" : \"path/to/Fsharp3.mp3\",\n\t\t * \t\"A3\" : \"path/to/A3.mp3\",\n\t\t * }, function(){\n\t\t * \t//sampler will repitch the closest sample\n\t\t * \tsampler.triggerAttack(\"D3\")\n\t\t * })\n\t\t * @extends {Tone.Instrument}\n\t\t */\n\t    Tone.Sampler = function (urls) {\n\t        // shift arguments over one. Those are the remainder of the options\n\t        var args = Array.prototype.slice.call(arguments);\n\t        args.shift();\n\t        var options = Tone.defaults(args, [\n\t            'onload',\n\t            'baseUrl'\n\t        ], Tone.Sampler);\n\t        Tone.Instrument.call(this, options);\n\t        var urlMap = {};\n\t        for (var note in urls) {\n\t            if (Tone.isNote(note)) {\n\t                //convert the note name to MIDI\n\t                var mid = Tone.Frequency(note).toMidi();\n\t                urlMap[mid] = urls[note];\n\t            } else if (!isNaN(parseFloat(note))) {\n\t                //otherwise if it's numbers assume it's midi\n\t                urlMap[note] = urls[note];\n\t            } else {\n\t                throw new Error('Tone.Sampler: url keys must be the note\\'s pitch');\n\t            }\n\t        }\n\t        /**\n\t\t\t * The stored and loaded buffers\n\t\t\t * @type {Tone.Buffers}\n\t\t\t * @private\n\t\t\t */\n\t        this._buffers = new Tone.Buffers(urlMap, options.onload, options.baseUrl);\n\t        /**\n\t\t\t * The object of all currently playing BufferSources\n\t\t\t * @type {Object}\n\t\t\t * @private\n\t\t\t */\n\t        this._activeSources = {};\n\t        /**\n\t\t\t * The envelope applied to the beginning of the sample.\n\t\t\t * @type {Time}\n\t\t\t */\n\t        this.attack = options.attack;\n\t        /**\n\t\t\t * The envelope applied to the end of the envelope.\n\t\t\t * @type {Time}\n\t\t\t */\n\t        this.release = options.release;\n\t    };\n\t    Tone.extend(Tone.Sampler, Tone.Instrument);\n\t    /**\n\t\t * The defaults\n\t\t * @const\n\t\t * @type {Object}\n\t\t */\n\t    Tone.Sampler.defaults = {\n\t        attack: 0,\n\t        release: 0.1,\n\t        onload: Tone.noOp,\n\t        baseUrl: ''\n\t    };\n\t    /**\n\t\t * Returns the difference in steps between the given midi note at the closets sample.\n\t\t * @param  {Midi} midi\n\t\t * @return {Interval}\n\t\t * @private\n\t\t */\n\t    Tone.Sampler.prototype._findClosest = function (midi) {\n\t        var MAX_INTERVAL = 24;\n\t        var interval = 0;\n\t        while (interval < MAX_INTERVAL) {\n\t            // check above and below\n\t            if (this._buffers.has(midi + interval)) {\n\t                return -interval;\n\t            } else if (this._buffers.has(midi - interval)) {\n\t                return interval;\n\t            }\n\t            interval++;\n\t        }\n\t        return null;\n\t    };\n\t    /**\n\t\t * @param  {Frequency} note     The note to play\n\t\t * @param  {Time=} time     When to play the note\n\t\t * @param  {NormalRange=} velocity The velocity to play the sample back.\n\t\t * @return {Tone.Sampler}          this\n\t\t */\n\t    Tone.Sampler.prototype.triggerAttack = function (note, time, velocity) {\n\t        var midi = Tone.Frequency(note).toMidi();\n\t        // find the closest note pitch\n\t        var difference = this._findClosest(midi);\n\t        if (difference !== null) {\n\t            var closestNote = midi - difference;\n\t            var buffer = this._buffers.get(closestNote);\n\t            // play that note\n\t            var source = new Tone.BufferSource({\n\t                'buffer': buffer,\n\t                'playbackRate': Tone.intervalToFrequencyRatio(difference),\n\t                'fadeIn': this.attack,\n\t                'fadeOut': this.release,\n\t                'curve': 'exponential'\n\t            }).connect(this.output);\n\t            source.start(time, 0, buffer.duration, velocity);\n\t            // add it to the active sources\n\t            if (!Tone.isArray(this._activeSources[midi])) {\n\t                this._activeSources[midi] = [];\n\t            }\n\t            this._activeSources[midi].push({\n\t                note: midi,\n\t                source: source\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * @param  {Frequency} note     The note to release.\n\t\t * @param  {Time=} time     \tWhen to release the note.\n\t\t * @return {Tone.Sampler}\tthis\n\t\t */\n\t    Tone.Sampler.prototype.triggerRelease = function (note, time) {\n\t        var midi = Tone.Frequency(note).toMidi();\n\t        // find the note\n\t        if (this._activeSources[midi] && this._activeSources[midi].length) {\n\t            var source = this._activeSources[midi].shift().source;\n\t            time = this.toSeconds(time);\n\t            source.stop(time + this.release, this.release);\n\t        }\n\t    };\n\t    /**\n\t\t * Invoke the attack phase, then after the duration, invoke the release.\n\t\t * @param  {Frequency} note     The note to play\n\t\t * @param  {Time} duration The time the note should be held\n\t\t * @param  {Time=} time     When to start the attack\n\t\t * @param  {NormalRange} [velocity=1] The velocity of the attack\n\t\t * @return {Tone.Sampler}          this\n\t\t */\n\t    Tone.Sampler.prototype.triggerAttackRelease = function (note, duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(note, time, velocity);\n\t        this.triggerRelease(note, time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add a note to the sampler.\n\t\t *  @param  {Note|Midi}   note      The buffer's pitch.\n\t\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,\n\t\t *                                                 or a buffer which will be added\n\t\t *                                                 with the given name.\n\t\t *  @param  {Function=}  callback  The callback to invoke\n\t\t *                                 when the url is loaded.\n\t\t */\n\t    Tone.Sampler.prototype.add = function (note, url, callback) {\n\t        if (Tone.isNote(note)) {\n\t            //convert the note name to MIDI\n\t            var mid = Tone.Frequency(note).toMidi();\n\t            this._buffers.add(mid, url, callback);\n\t        } else if (!isNaN(parseFloat(note))) {\n\t            //otherwise if it's numbers assume it's midi\n\t            this._buffers.add(note, url, callback);\n\t        } else {\n\t            throw new Error('Tone.Sampler: note must be the note\\'s pitch. Instead got ' + note);\n\t        }\n\t    };\n\t    /**\n\t\t * If the buffers are loaded or not\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'loaded', {\n\t        get: function () {\n\t            return this._buffers.loaded;\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up\n\t\t * @return {Tone.Sampler} this\n\t\t */\n\t    Tone.Sampler.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._buffers.dispose();\n\t        this._buffers = null;\n\t        for (var midi in this._activeSources) {\n\t            this._activeSources[midi].forEach(function (event) {\n\t                event.source.dispose();\n\t            });\n\t        }\n\t        this._activeSources = null;\n\t        return this;\n\t    };\n\t    return Tone.Sampler;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. \n\t\t *         See also Tone.AudioToGain. \n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t * var g2a = new Tone.GainToAudio();\n\t\t */\n\t    Tone.GainToAudio = function () {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t            return Math.abs(x) * 2 - 1;\n\t        });\n\t    };\n\t    Tone.extend(Tone.GainToAudio, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.GainToAudio} this\n\t\t */\n\t    Tone.GainToAudio.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._norm.dispose();\n\t        this._norm = null;\n\t        return this;\n\t    };\n\t    return Tone.GainToAudio;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Normalize takes an input min and max and maps it linearly to NormalRange [0,1]\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {number} inputMin the min input value\n\t\t *  @param {number} inputMax the max input value\n\t\t *  @example\n\t\t * var norm = new Tone.Normalize(2, 4);\n\t\t * var sig = new Tone.Signal(3).connect(norm);\n\t\t * //output of norm is 0.5. \n\t\t */\n\t    Tone.Normalize = function (inputMin, inputMax) {\n\t        Tone.SignalBase.call(this);\n\t        /**\n\t\t\t *  the min input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputMin = Tone.defaultArg(inputMin, 0);\n\t        /**\n\t\t\t *  the max input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputMax = Tone.defaultArg(inputMax, 1);\n\t        /**\n\t\t\t *  subtract the min from the input\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sub = this.input = new Tone.Add(0);\n\t        /**\n\t\t\t *  divide by the difference between the input and output\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._div = this.output = new Tone.Multiply(1);\n\t        this._sub.connect(this._div);\n\t        this._setRange();\n\t    };\n\t    Tone.extend(Tone.Normalize, Tone.SignalBase);\n\t    /**\n\t\t * The minimum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.Normalize.prototype, 'min', {\n\t        get: function () {\n\t            return this._inputMin;\n\t        },\n\t        set: function (min) {\n\t            this._inputMin = min;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.Normalize.prototype, 'max', {\n\t        get: function () {\n\t            return this._inputMax;\n\t        },\n\t        set: function (max) {\n\t            this._inputMax = max;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t    Tone.Normalize.prototype._setRange = function () {\n\t        this._sub.value = -this._inputMin;\n\t        this._div.value = 1 / (this._inputMax - this._inputMin);\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Normalize} this\n\t\t */\n\t    Tone.Normalize.prototype.dispose = function () {\n\t        Tone.SignalBase.prototype.dispose.call(this);\n\t        this._sub.dispose();\n\t        this._sub = null;\n\t        this._div.dispose();\n\t        this._div = null;\n\t        return this;\n\t    };\n\t    return Tone.Normalize;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * @class Tone.TransportTimelineSignal extends Tone.TimelineSignal, but adds the ability to synchronize the signal to the signal to the Tone.Transport\n\t\t * @extends {Tone.TimelineSignal}\n\t\t */\n\t    Tone.TransportTimelineSignal = function () {\n\t        Tone.TimelineSignal.apply(this, arguments);\n\t        /**\n\t\t\t * The real signal output\n\t\t\t * @type {Tone.Signal}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this._outputSig = new Tone.Signal(this._initial);\n\t        /**\n\t\t\t * Keep track of the last value. (small optimization)\n\t\t\t * @private\n\t\t\t * @type {Number}\n\t\t\t */\n\t        this._lastVal = this.value;\n\t        /**\n\t\t\t * The event id of the tick update loop\n\t\t\t * @private\n\t\t\t * @type {Number}\n\t\t\t */\n\t        this._synced = Tone.Transport.scheduleRepeat(this._onTick.bind(this), '1i');\n\t        /**\n\t\t\t * A bound version of the anchor value methods\n\t\t\t * @type {Function}\n\t\t\t * @private\n\t\t\t */\n\t        this._bindAnchorValue = this._anchorValue.bind(this);\n\t        Tone.Transport.on('start stop pause', this._bindAnchorValue);\n\t        this._events.memory = Infinity;\n\t    };\n\t    Tone.extend(Tone.TransportTimelineSignal, Tone.TimelineSignal);\n\t    /**\n\t\t * Callback which is invoked every tick.\n\t\t * @private\n\t\t * @param  {Number} time\n\t\t * @return {Tone.TransportTimelineSignal}      this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype._onTick = function (time) {\n\t        var val = this.getValueAtTime(Tone.Transport.seconds);\n\t        if (this._lastVal !== val) {\n\t            this._lastVal = val;\n\t            //approximate ramp curves with linear ramps\n\t            this._outputSig.linearRampToValueAtTime(val, time);\n\t        }\n\t    };\n\t    /**\n\t\t * Anchor the value at the start and stop of the Transport\n\t\t * @param  {Number} time The time of the event\n\t\t * @return {Tone.TransportTimelineSignal}      this\n\t\t * @private\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype._anchorValue = function (time) {\n\t        var val = this.getValueAtTime(Tone.Transport.ticks);\n\t        this._lastVal = val;\n\t        this._outputSig.cancelScheduledValues(time);\n\t        this._outputSig.setValueAtTime(val, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {TransportTime}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.getValueAtTime = function (time) {\n\t        time = this.toTicks(time);\n\t        return Tone.TimelineSignal.prototype.getValueAtTime.call(this, time);\n\t    };\n\t    /**\n\t\t * Set the output of the signal at the given time\n\t\t * @param  {Number} value The value to change to at the given time\n\t\t * @param  {TransportTime} time  The time to change the signal\n\t\t * @return {Tone.TransportTimelineSignal}       this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.setValueAtTime = function (value, time) {\n\t        time = this.toTicks(time);\n\t        Tone.TimelineSignal.prototype.setValueAtTime.call(this, value, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Linear ramp to the given value from the previous scheduled point to the given value\n\t\t * @param  {Number} value The value to change to at the given time\n\t\t * @param  {TransportTime} time  The time to change the signal\n\t\t * @return {Tone.TransportTimelineSignal}       this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.linearRampToValueAtTime = function (value, time) {\n\t        time = this.toTicks(time);\n\t        Tone.TimelineSignal.prototype.linearRampToValueAtTime.call(this, value, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Exponential ramp to the given value from the previous scheduled point to the given value\n\t\t * @param  {Number} value The value to change to at the given time\n\t\t * @param  {TransportTime} time  The time to change the signal\n\t\t * @return {Tone.TransportTimelineSignal}       this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.exponentialRampToValueAtTime = function (value, time) {\n\t        time = this.toTicks(time);\n\t        Tone.TimelineSignal.prototype.exponentialRampToValueAtTime.call(this, value, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value\n\t\t *  @param {TransportTime} startTime\n\t\t *  @param {number} timeConstant\n\t\t * @return {Tone.TransportTimelineSignal}       this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        startTime = this.toTicks(startTime);\n\t        Tone.TimelineSignal.prototype.setTargetAtTime.call(this, value, startTime, timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or\n\t\t *  equal to startTime.\n\t\t *  @param  {TransportTime} startTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.cancelScheduledValues = function (startTime) {\n\t        startTime = this.toTicks(startTime);\n\t        Tone.TimelineSignal.prototype.cancelScheduledValues.call(this, startTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set an array of arbitrary values starting at the given time for the given duration.\n\t\t *  @param {Float32Array} values\n\t\t *  @param {Time} startTime\n\t\t *  @param {Time} duration\n\t\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {\n\t        startTime = this.toTicks(startTime);\n\t        duration = this.toTicks(duration);\n\t        Tone.TimelineSignal.prototype.setValueCurveAtTime.call(this, values, startTime, duration, scaling);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Dispose and disconnect\n\t\t * @return {Tone.TransportTimelineSignal} this\n\t\t */\n\t    Tone.TransportTimelineSignal.prototype.dispose = function () {\n\t        Tone.Transport.clear(this._synced);\n\t        Tone.Transport.off('start stop pause', this._syncedCallback);\n\t        this._events.cancel(0);\n\t        Tone.TimelineSignal.prototype.dispose.call(this);\n\t        this._outputSig.dispose();\n\t        this._outputSig = null;\n\t    };\n\t    return Tone.TransportTimelineSignal;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * @class Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n\t\t *        Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n\t\t *        amount of time each small chunk of audio is played for and the overlap is the\n\t\t *        amount of crossfading transition time between successive grains.\n\t\t * @extends {Tone.Source}\n\t\t * @param {String|Tone.Buffer} url\tThe url to load, or the Tone.Buffer to play.\n\t\t * @param {Function=} callback The callback to invoke after the url is loaded.\n\t\t */\n\t    Tone.GrainPlayer = function () {\n\t        var options = Tone.defaults(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.GrainPlayer);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The audio buffer belonging to the player.\n\t\t\t *  @type  {Tone.Buffer}\n\t\t\t */\n\t        this.buffer = new Tone.Buffer(options.url, options.onload);\n\t        /**\n\t\t\t *  Create a repeating tick to schedule\n\t\t\t *  the grains.\n\t\t\t *  @type  {Tone.Clock}\n\t\t\t *  @private\n\t\t\t */\n\t        this._clock = new Tone.Clock(this._tick.bind(this), options.grainSize);\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = 0;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = 0;\n\t        /**\n\t\t\t * All of the currently playing BufferSources\n\t\t\t * @type {Array}\n\t\t\t * @private\n\t\t\t */\n\t        this._activeSources = [];\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._grainSize = options.grainSize;\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Number}\n\t\t\t */\n\t        this._overlap = options.overlap;\n\t        /**\n\t\t\t *  Adjust the pitch independently of the playbackRate.\n\t\t\t *  @type  {Cents}\n\t\t\t */\n\t        this.detune = options.detune;\n\t        //setup\n\t        this.overlap = options.overlap;\n\t        this.loop = options.loop;\n\t        this.playbackRate = options.playbackRate;\n\t        this.grainSize = options.grainSize;\n\t        this.loopStart = options.loopStart;\n\t        this.loopEnd = options.loopEnd;\n\t        this.reverse = options.reverse;\n\t        this._clock.on('stop', this._onstop.bind(this));\n\t    };\n\t    Tone.extend(Tone.GrainPlayer, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.GrainPlayer.defaults = {\n\t        'onload': Tone.noOp,\n\t        'overlap': 0.1,\n\t        'grainSize': 0.2,\n\t        'playbackRate': 1,\n\t        'detune': 0,\n\t        'loop': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t *  and/or duration which will play the buffer from a position\n\t\t *  within the buffer for the given duration.\n\t\t *\n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at.\n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length\n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.GrainPlayer} this\n\t\t *  @memberOf Tone.GrainPlayer#\n\t\t *  @method start\n\t\t *  @name start\n\t\t */\n\t    /**\n\t\t *  Internal start method\n\t\t *  @param {Time} time\n\t\t *  @param {Time} offset\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._start = function (time, offset, duration) {\n\t        offset = Tone.defaultArg(offset, 0);\n\t        offset = this.toSeconds(offset);\n\t        time = this.toSeconds(time);\n\t        this._offset = offset;\n\t        this._clock.start(time);\n\t        if (duration) {\n\t            this.stop(time + this.toSeconds(duration));\n\t        }\n\t    };\n\t    /**\n\t\t *  Internal start method\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._stop = function (time) {\n\t        this._clock.stop(time);\n\t    };\n\t    /**\n\t\t * Invoked when the clock is stopped\n\t\t * @param  {Number} time\n\t\t * @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._onstop = function (time) {\n\t        //stop the players\n\t        this._activeSources.forEach(function (source) {\n\t            source.stop(time, 0);\n\t        });\n\t    };\n\t    /**\n\t\t *  Invoked on each clock tick. scheduled a new\n\t\t *  grain at this time.\n\t\t *  @param  {Time}  time\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._tick = function (time) {\n\t        var fadeIn = this._offset < this._overlap ? 0 : this._overlap;\n\t        var source = new Tone.BufferSource({\n\t            'buffer': this.buffer,\n\t            'fadeIn': fadeIn,\n\t            'fadeOut': this._overlap,\n\t            'loop': this.loop,\n\t            'loopStart': this._loopStart,\n\t            'loopEnd': this._loopEnd,\n\t            'playbackRate': Tone.intervalToFrequencyRatio(this.detune / 100)\n\t        }).connect(this.output);\n\t        source.start(time, this._offset);\n\t        this._offset += this.grainSize;\n\t        source.stop(time + this.grainSize);\n\t        //add it to the active sources\n\t        this._activeSources.push(source);\n\t        //remove it when it's done\n\t        source.onended = function () {\n\t            var index = this._activeSources.indexOf(source);\n\t            if (index !== -1) {\n\t                this._activeSources.splice(index, 1);\n\t            }\n\t        }.bind(this);\n\t    };\n\t    /**\n\t\t *  Jump to a specific time and play it.\n\t\t *  @param  {Time}  offset  The offset to jump to.\n\t\t *  @param {Time=} time When to make the jump.\n\t\t *  @return  {Tone.GrainPlayer}  this\n\t\t */\n\t    Tone.GrainPlayer.prototype.seek = function (offset, time) {\n\t        this._offset = this.toSeconds(offset);\n\t        this._tick(this.toSeconds(time));\n\t        return this;\n\t    };\n\t    /**\n\t\t * The playback rate of the sample\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Positive}\n\t\t * @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this.grainSize = this._grainSize;\n\t        }\n\t    });\n\t    /**\n\t\t * The loop start time.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._loopStart;\n\t        },\n\t        set: function (time) {\n\t            this._loopStart = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * The loop end time.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._loopEnd;\n\t        },\n\t        set: function (time) {\n\t            this._loopEnd = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'reverse', {\n\t        get: function () {\n\t            return this.buffer.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this.buffer.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t * The size of each chunk of audio that the\n\t\t * buffer is chopped into and played back at.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name grainSize\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'grainSize', {\n\t        get: function () {\n\t            return this._grainSize;\n\t        },\n\t        set: function (size) {\n\t            this._grainSize = this.toSeconds(size);\n\t            this._clock.frequency.value = this._playbackRate / this._grainSize;\n\t        }\n\t    });\n\t    /**\n\t\t * This is the duration of the cross-fade between\n\t\t * sucessive grains.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name overlap\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'overlap', {\n\t        get: function () {\n\t            return this._overlap;\n\t        },\n\t        set: function (time) {\n\t            this._overlap = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up\n\t\t * @return {Tone.GrainPlayer} this\n\t\t */\n\t    Tone.GrainPlayer.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this.buffer.dispose();\n\t        this.buffer = null;\n\t        this._clock.dispose();\n\t        this._clock = null;\n\t        this._activeSources.forEach(function (source) {\n\t            source.dispose();\n\t        });\n\t        this._activeSources = null;\n\t        return this;\n\t    };\n\t    return Tone.GrainPlayer;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Player is an audio file player with start, loop, and stop functions.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Source} \n\t\t *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from\n\t\t *                                  which to load the AudioBuffer\n\t\t *  @param {function=} onload The function to invoke when the buffer is loaded. \n\t\t *                            Recommended to use Tone.Buffer.on('load') instead.\n\t\t *  @example\n\t\t * var player = new Tone.Player(\"./path/to/sample.mp3\").toMaster();\n\t\t * //play as soon as the buffer is loaded\n\t\t * player.autostart = true;\n\t\t */\n\t    Tone.Player = function (url) {\n\t        var options;\n\t        if (url instanceof Tone.Buffer) {\n\t            url = url.get();\n\t            options = Tone.Player.defaults;\n\t        } else {\n\t            options = Tone.defaults(arguments, [\n\t                'url',\n\t                'onload'\n\t            ], Tone.Player);\n\t        }\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t        this._source = null;\n\t        /**\n\t\t\t *  If the file should play as soon\n\t\t\t *  as the buffer is loaded. \n\t\t\t *  @type {boolean}\n\t\t\t *  @example\n\t\t\t * //will play as soon as it's loaded\n\t\t\t * var player = new Tone.Player({\n\t\t\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t\t\t * \t\"autostart\" : true,\n\t\t\t * }).toMaster();\n\t\t\t */\n\t        this.autostart = options.autostart;\n\t        /**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t */\n\t        this._buffer = new Tone.Buffer({\n\t            'url': options.url,\n\t            'onload': this._onload.bind(this, options.onload),\n\t            'reverse': options.reverse\n\t        });\n\t        if (url instanceof AudioBuffer) {\n\t            this._buffer.set(url);\n\t        }\n\t        /**\n\t\t\t *  if the buffer should loop once it's over\n\t\t\t *  @type {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  if 'loop' is true, the loop will start at this position\n\t\t\t *  @type {Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = options.loopStart;\n\t        /**\n\t\t\t *  if 'loop' is true, the loop will end at this position\n\t\t\t *  @type {Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = options.loopEnd;\n\t        /**\n\t\t\t *  the playback rate\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  Enabling retrigger will allow a player to be restarted\n\t\t\t *  before the the previous 'start' is done playing. Otherwise, \n\t\t\t *  successive calls to Tone.Player.start will only start\n\t\t\t *  the sample if it had played all the way through. \n\t\t\t *  @type {boolean}\n\t\t\t */\n\t        this.retrigger = options.retrigger;\n\t        /**\n\t\t\t *  The fadeIn time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeIn = options.fadeIn;\n\t        /**\n\t\t\t *  The fadeOut time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeOut = options.fadeOut;\n\t    };\n\t    Tone.extend(Tone.Player, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Player.defaults = {\n\t        'onload': Tone.noOp,\n\t        'playbackRate': 1,\n\t        'loop': false,\n\t        'autostart': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'retrigger': false,\n\t        'reverse': false,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0\n\t    };\n\t    /**\n\t\t *  Load the audio file as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads. \n\t\t *  Note: this does not need to be called if a url\n\t\t *  was passed in to the constructor. Only use this\n\t\t *  if you want to manually load a new url. \n\t\t * @param {string} url The url of the buffer to load.\n\t\t *                     Filetype support depends on the\n\t\t *                     browser.\n\t\t *  @param  {function=} callback The function to invoke once\n\t\t *                               the sample is loaded.\n\t\t *  @returns {Promise}\n\t\t */\n\t    Tone.Player.prototype.load = function (url, callback) {\n\t        return this._buffer.load(url, this._onload.bind(this, callback));\n\t    };\n\t    /**\n\t\t * Internal callback when the buffer is loaded.\n\t\t * @private\n\t\t */\n\t    Tone.Player.prototype._onload = function (callback) {\n\t        callback = Tone.defaultArg(callback, Tone.noOp);\n\t        callback(this);\n\t        if (this.autostart) {\n\t            this.start();\n\t        }\n\t    };\n\t    /**\n\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t *  and/or duration which will play the buffer from a position\n\t\t *  within the buffer for the given duration. \n\t\t *  \n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.Player} this\n\t\t *  @memberOf Tone.Player#\n\t\t *  @method start\n\t\t *  @name start\n\t\t */\n\t    /**\n\t\t *  Internal start method\n\t\t *  @private\n\t\t */\n\t    Tone.Player.prototype._start = function (startTime, offset, duration) {\n\t        //if it's a loop the default offset is the loopstart point\n\t        if (this._loop) {\n\t            offset = Tone.defaultArg(offset, this._loopStart);\n\t        } else {\n\t            //otherwise the default offset is 0\n\t            offset = Tone.defaultArg(offset, 0);\n\t        }\n\t        //compute the values in seconds\n\t        offset = this.toSeconds(offset);\n\t        duration = Tone.defaultArg(duration, Math.max(this._buffer.duration - offset, 0));\n\t        duration = this.toSeconds(duration);\n\t        startTime = this.toSeconds(startTime);\n\t        // //make the source\n\t        this._source = new Tone.BufferSource({\n\t            'buffer': this._buffer,\n\t            'loop': this._loop,\n\t            'loopStart': this._loopStart,\n\t            'loopEnd': this._loopEnd,\n\t            'playbackRate': this._playbackRate,\n\t            'fadeIn': this.fadeIn,\n\t            'fadeOut': this.fadeOut\n\t        }).connect(this.output);\n\t        //set the looping properties\n\t        if (!this._loop && !this._synced) {\n\t            //if it's not looping, set the state change at the end of the sample\n\t            this._state.setStateAtTime(Tone.State.Stopped, startTime + duration);\n\t        }\n\t        //start it\n\t        if (this._loop) {\n\t            this._source.start(startTime, offset);\n\t        } else {\n\t            this._source.start(startTime, offset, duration);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop playback.\n\t\t *  @private\n\t\t *  @param  {Time} [time=now]\n\t\t *  @returns {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype._stop = function (time) {\n\t        if (this._source) {\n\t            this._source.stop(this.toSeconds(time));\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Seek to a specific time in the player's buffer. If the \n\t\t *  source is no longer playing at that time, it will stop.\n\t\t *  If you seek to a time that \n\t\t *  @param {Time} offset The time to seek to.\n\t\t *  @param {Time=} time The time for the seek event to occur.\n\t\t *  @return {Tone.Player} this\n\t\t *  @example\n\t\t * source.start(0.2);\n\t\t * source.stop(0.4);\n\t\t */\n\t    Tone.Player.prototype.seek = function (offset, time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            offset = this.toSeconds(offset);\n\t            // if it's currently playing, stop it\n\t            this._stop(time);\n\t            //restart it at the given time\n\t            this._start(time, offset);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the loop start and end. Will only loop if loop is \n\t\t *  set to true. \n\t\t *  @param {Time} loopStart The loop end time\n\t\t *  @param {Time} loopEnd The loop end time\n\t\t *  @returns {Tone.Player} this\n\t\t *  @example\n\t\t * //loop 0.1 seconds of the file. \n\t\t * player.setLoopPoints(0.2, 0.3);\n\t\t * player.loop = true;\n\t\t */\n\t    Tone.Player.prototype.setLoopPoints = function (loopStart, loopEnd) {\n\t        this.loopStart = loopStart;\n\t        this.loopEnd = loopEnd;\n\t        return this;\n\t    };\n\t    /**\n\t\t * If loop is true, the loop will start at this position. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._loopStart;\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = loopStart;\n\t            if (this._source) {\n\t                this._source.loopStart = this.toSeconds(loopStart);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * If loop is true, the loop will end at this position.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._loopEnd;\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = loopEnd;\n\t            if (this._source) {\n\t                this._source.loopEnd = this.toSeconds(loopEnd);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The audio buffer belonging to the player. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {Tone.Buffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer;\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t        }\n\t    });\n\t    /**\n\t\t * If the buffer should loop once it's over. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {boolean}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            if (this._source) {\n\t                this._source.loop = loop;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The playback speed. 1 is normal speed. This is not a signal because\n\t\t * Safari and iOS currently don't support playbackRate as a signal.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {number}\n\t\t * @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            if (this._source) {\n\t                this._source.playbackRate.value = rate;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.Player#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'reverse', {\n\t        get: function () {\n\t            return this._buffer.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this._buffer.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t * If all the buffer is loaded\n\t\t * @memberOf Tone.Player#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loaded', {\n\t        get: function () {\n\t            return this._buffer.loaded;\n\t        }\n\t    });\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._source !== null) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    return Tone.Player;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Players combines multiple [Tone.Player](Player) objects.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Object} urls An object mapping a name to a url.\n\t\t *  @param {function=} onload The function to invoke when the buffer is loaded.\n\t\t */\n\t    Tone.Players = function (urls) {\n\t        var args = Array.prototype.slice.call(arguments);\n\t        args.shift();\n\t        var options = Tone.defaults(args, ['onload'], Tone.Players);\n\t        Tone.call(this);\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        //make the output explicitly stereo\n\t        this._volume.output.output.channelCount = 2;\n\t        this._volume.output.output.channelCountMode = 'explicit';\n\t        //mute initially\n\t        this.mute = options.mute;\n\t        /**\n\t\t\t * The container of all of the players\n\t\t\t * @type {Object}\n\t\t\t * @private\n\t\t\t */\n\t        this._players = {};\n\t        /**\n\t\t\t * The loading count\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._loadingCount = 0;\n\t        /**\n\t\t\t * private holder of the fadeIn time\n\t\t\t * @type {Time}\n\t\t\t * @private\n\t\t\t */\n\t        this._fadeIn = options.fadeIn;\n\t        /**\n\t\t\t * private holder of the fadeOut time\n\t\t\t * @type {Time}\n\t\t\t * @private\n\t\t\t */\n\t        this._fadeOut = options.fadeOut;\n\t        //add all of the players\n\t        for (var name in urls) {\n\t            this._loadingCount++;\n\t            this.add(name, urls[name], this._bufferLoaded.bind(this, options.onload));\n\t        }\n\t    };\n\t    Tone.extend(Tone.Players, Tone.AudioNode);\n\t    /**\n\t\t * The default values\n\t\t * @type {Object}\n\t\t */\n\t    Tone.Players.defaults = {\n\t        'volume': 0,\n\t        'mute': false,\n\t        'onload': Tone.noOp,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0\n\t    };\n\t    /**\n\t\t *  A buffer was loaded. decrement the counter.\n\t\t *  @param  {Function}  callback\n\t\t *  @private\n\t\t */\n\t    Tone.Players.prototype._bufferLoaded = function (callback) {\n\t        this._loadingCount--;\n\t        if (this._loadingCount === 0 && callback) {\n\t            callback(this);\n\t        }\n\t    };\n\t    /**\n\t\t * Mute the output.\n\t\t * @memberOf Tone.Source#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * source.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Players.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t * The fadeIn time of the amplitude envelope.\n\t\t * @memberOf Tone.Source#\n\t\t * @type {Time}\n\t\t * @name fadeIn\n\t\t */\n\t    Object.defineProperty(Tone.Players.prototype, 'fadeIn', {\n\t        get: function () {\n\t            return this._fadeIn;\n\t        },\n\t        set: function (fadeIn) {\n\t            this._fadeIn = fadeIn;\n\t            this._forEach(function (player) {\n\t                player.fadeIn = fadeIn;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The fadeOut time of the amplitude envelope.\n\t\t * @memberOf Tone.Source#\n\t\t * @type {Time}\n\t\t * @name fadeOut\n\t\t */\n\t    Object.defineProperty(Tone.Players.prototype, 'fadeOut', {\n\t        get: function () {\n\t            return this._fadeOut;\n\t        },\n\t        set: function (fadeOut) {\n\t            this._fadeOut = fadeOut;\n\t            this._forEach(function (player) {\n\t                player.fadeOut = fadeOut;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The state of the players object. Returns \"started\" if any of the players are playing.\n\t\t * @memberOf Tone.Players#\n\t\t * @type {String}\n\t\t * @name state\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Players.prototype, 'state', {\n\t        get: function () {\n\t            var playing = false;\n\t            this._forEach(function (player) {\n\t                playing = playing || player.state === Tone.State.Started;\n\t            });\n\t            return playing ? Tone.State.Started : Tone.State.Stopped;\n\t        }\n\t    });\n\t    /**\n\t\t *  True if the buffers object has a buffer by that name.\n\t\t *  @param  {String|Number}  name  The key or index of the\n\t\t *                                 buffer.\n\t\t *  @return  {Boolean}\n\t\t */\n\t    Tone.Players.prototype.has = function (name) {\n\t        return this._players.hasOwnProperty(name);\n\t    };\n\t    /**\n\t\t *  Get a player by name.\n\t\t *  @param  {String}  name  The players name as defined in\n\t\t *                          the constructor object or `add` method.\n\t\t *  @return  {Tone.Player}\n\t\t */\n\t    Tone.Players.prototype.get = function (name) {\n\t        if (this.has(name)) {\n\t            return this._players[name];\n\t        } else {\n\t            throw new Error('Tone.Players: no player named ' + name);\n\t        }\n\t    };\n\t    /**\n\t\t * Iterate over all of the players\n\t\t * @param  {Function} callback\n\t\t * @return {Tone.Players}            this\n\t\t * @private\n\t\t */\n\t    Tone.Players.prototype._forEach = function (callback) {\n\t        for (var playerName in this._players) {\n\t            callback(this._players[playerName], playerName);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * If all the buffers are loaded or not\n\t\t * @memberOf Tone.Players#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Players.prototype, 'loaded', {\n\t        get: function () {\n\t            var isLoaded = true;\n\t            this._forEach(function (player) {\n\t                isLoaded = isLoaded && player.loaded;\n\t            });\n\t            return isLoaded;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a player by name and url to the Players\n\t\t *  @param  {String}    name      A unique name to give the player\n\t\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,\n\t\t *                                                 or a buffer which will be added\n\t\t *                                                 with the given name.\n\t\t *  @param  {Function=}  callback  The callback to invoke\n\t\t *                                 when the url is loaded.\n\t\t */\n\t    Tone.Players.prototype.add = function (name, url, callback) {\n\t        this._players[name] = new Tone.Player(url, callback).connect(this.output);\n\t        this._players[name].fadeIn = this._fadeIn;\n\t        this._players[name].fadeOut = this._fadeOut;\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop all of the players at the given time\n\t\t * @param {Time} time The time to stop all of the players.\n\t\t * @return {Tone.Players} this\n\t\t */\n\t    Tone.Players.prototype.stopAll = function (time) {\n\t        this._forEach(function (player) {\n\t            player.stop(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Players} this\n\t\t */\n\t    Tone.Players.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this._writable('volume');\n\t        this.volume = null;\n\t        this.output = null;\n\t        this._forEach(function (player) {\n\t            player.dispose();\n\t        });\n\t        this._players = null;\n\t        return this;\n\t    };\n\t    return Tone.Players;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.UserMedia uses MediaDevices.getUserMedia to open up\n\t\t *          and external microphone or audio input. Check\n\t\t *          [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n\t\t *          to see which browsers are supported. Access to an external input\n\t\t *          is limited to secure (HTTPS) connections.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.AudioNode}\n\t\t *  @param {Decibels=} volume The level of the input\n\t\t *  @example\n\t\t * //list the inputs and open the third one\n\t\t * var motu = new Tone.UserMedia();\n\t\t *\n\t\t * //opening the input asks the user to activate their mic\n\t\t * motu.open().then(function(){\n\t\t * \t//opening is activates the microphone\n\t\t * \t//starting lets audio through\n\t\t * \tmotu.start(10);\n\t\t * });\n\t\t */\n\t    Tone.UserMedia = function () {\n\t        var options = Tone.defaults(arguments, ['volume'], Tone.UserMedia);\n\t        Tone.AudioNode.call(this);\n\t        /**\n\t\t\t *  The MediaStreamNode\n\t\t\t *  @type {MediaStreamAudioSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mediaStream = null;\n\t        /**\n\t\t\t *  The media stream created by getUserMedia.\n\t\t\t *  @type {LocalMediaStream}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stream = null;\n\t        /**\n\t\t\t *  The open device\n\t\t\t *  @type  {MediaDeviceInfo}\n\t\t\t *  @private\n\t\t\t */\n\t        this._device = null;\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * input.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.UserMedia, Tone.AudioNode);\n\t    /**\n\t\t * the default parameters\n\t\t * @type {Object}\n\t\t */\n\t    Tone.UserMedia.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Open the media stream. If a string is passed in, it is assumed\n\t\t *  to be the label or id of the stream, if a number is passed in,\n\t\t *  it is the input number of the stream.\n\t\t *  @param  {String|Number} [labelOrId=\"default\"] The label or id of the audio input media device.\n\t\t *                                                With no argument, the default stream is opened.\n\t\t *  @return {Promise} The promise is resolved when the stream is open.\n\t\t */\n\t    Tone.UserMedia.prototype.open = function (labelOrId) {\n\t        labelOrId = Tone.defaultArg(labelOrId, 'default');\n\t        return Tone.UserMedia.enumerateDevices().then(function (devices) {\n\t            var device;\n\t            if (Tone.isNumber(labelOrId)) {\n\t                device = devices[labelOrId];\n\t            } else {\n\t                device = devices.find(function (device) {\n\t                    return device.label === labelOrId || device.deviceId === labelOrId;\n\t                });\n\t                //didn't find a matching device\n\t                if (!device) {\n\t                    throw new Error('Tone.UserMedia: no matching device: ' + labelOrId);\n\t                }\n\t            }\n\t            this._device = device;\n\t            //do getUserMedia\n\t            var constraints = {\n\t                audio: {\n\t                    'deviceId': device.deviceId,\n\t                    'echoCancellation': false,\n\t                    'sampleRate': this.context.sampleRate\n\t                }\n\t            };\n\t            return navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n\t                //start a new source only if the previous one is closed\n\t                if (!this._stream) {\n\t                    this._stream = stream;\n\t                    //Wrap a MediaStreamSourceNode around the live input stream.\n\t                    this._mediaStream = this.context.createMediaStreamSource(stream);\n\t                    //Connect the MediaStreamSourceNode to a gate gain node\n\t                    this._mediaStream.connect(this.output);\n\t                }\n\t                return this;\n\t            }.bind(this));\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Close the media stream\n\t\t *  @return {Tone.UserMedia} this\n\t\t */\n\t    Tone.UserMedia.prototype.close = function () {\n\t        if (this._stream) {\n\t            this._stream.getAudioTracks().forEach(function (track) {\n\t                track.stop();\n\t            });\n\t            this._stream = null;\n\t            //remove the old media stream\n\t            this._mediaStream.disconnect();\n\t            this._mediaStream = null;\n\t        }\n\t        this._device = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns a promise which resolves with the list of audio input devices available.\n\t\t *  @return {Promise} The promise that is resolved with the devices\n\t\t *  @static\n\t\t *  @example\n\t\t * Tone.UserMedia.enumerateDevices().then(function(devices){\n\t\t * \tconsole.log(devices)\n\t\t * })\n\t\t */\n\t    Tone.UserMedia.enumerateDevices = function () {\n\t        return navigator.mediaDevices.enumerateDevices().then(function (devices) {\n\t            return devices.filter(function (device) {\n\t                return device.kind === 'audioinput';\n\t            });\n\t        });\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, \"started\" when the microphone is open\n\t\t *  and \"stopped\" when the mic is closed.\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'state', {\n\t        get: function () {\n\t            return this._stream && this._stream.active ? Tone.State.Started : Tone.State.Stopped;\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns an identifier for the represented device that is\n\t\t * \tpersisted across sessions. It is un-guessable by other applications and\n\t\t * \tunique to the origin of the calling application. It is reset when the\n\t\t * \tuser clears cookies (for Private Browsing, a different identifier is\n\t\t * \tused that is not persisted across sessions). Returns undefined when the\n\t\t * \tdevice is not open.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name deviceId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'deviceId', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.deviceId;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns a group identifier. Two devices have the\n\t\t * \tsame group identifier if they belong to the same physical device.\n\t\t * \tReturns undefined when the device is not open.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name groupId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'groupId', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.groupId;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns a label describing this device (for example \"Built-in Microphone\").\n\t\t * \tReturns undefined when the device is not open or label is not available\n\t\t * \tbecause of permissions.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name groupId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'label', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.label;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output.\n\t\t * @memberOf Tone.UserMedia#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * userMedia.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up.\n\t\t * @return {Tone.UserMedia} this\n\t\t */\n\t    Tone.UserMedia.prototype.dispose = function () {\n\t        Tone.AudioNode.prototype.dispose.call(this);\n\t        this.close();\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  If getUserMedia is supported by the browser.\n\t\t *  @type  {Boolean}\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name supported\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia, 'supported', {\n\t        get: function () {\n\t            return !Tone.isUndef(navigator.mediaDevices) && Tone.isFunction(navigator.mediaDevices.getUserMedia);\n\t        }\n\t    });\n\t    return Tone.UserMedia;\n\t});\n\t\n\treturn Tone;\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tone/build/Tone.js\n// module id = 22\n// module chunks = 0","// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict';\n\nif (typeof Promise === 'undefined') {\n  // Rejection tracking prevents a common issue where React gets into an\n  // inconsistent state due to an error, but it gets swallowed by a Promise,\n  // and the user has no idea what causes React's erratic future behavior.\n  require('promise/lib/rejection-tracking').enable();\n  window.Promise = require('promise/lib/es6-extensions.js');\n}\n\n// fetch() polyfill for making API calls.\nrequire('whatwg-fetch');\n\n// Object.assign() is commonly used with React.\n// It will use the native implementation if it's present and isn't buggy.\nObject.assign = require('object-assign');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/react-scripts/config/polyfills.js\n// module id = 24\n// module chunks = 0","'use strict';\n\nvar Promise = require('./core');\n\nvar DEFAULT_WHITELIST = [\n  ReferenceError,\n  TypeError,\n  RangeError\n];\n\nvar enabled = false;\nexports.disable = disable;\nfunction disable() {\n  enabled = false;\n  Promise._47 = null;\n  Promise._71 = null;\n}\n\nexports.enable = enable;\nfunction enable(options) {\n  options = options || {};\n  if (enabled) disable();\n  enabled = true;\n  var id = 0;\n  var displayId = 0;\n  var rejections = {};\n  Promise._47 = function (promise) {\n    if (\n      promise._83 === 2 && // IS REJECTED\n      rejections[promise._56]\n    ) {\n      if (rejections[promise._56].logged) {\n        onHandled(promise._56);\n      } else {\n        clearTimeout(rejections[promise._56].timeout);\n      }\n      delete rejections[promise._56];\n    }\n  };\n  Promise._71 = function (promise, err) {\n    if (promise._75 === 0) { // not yet handled\n      promise._56 = id++;\n      rejections[promise._56] = {\n        displayId: null,\n        error: err,\n        timeout: setTimeout(\n          onUnhandled.bind(null, promise._56),\n          // For reference errors and type errors, this almost always\n          // means the programmer made a mistake, so log them after just\n          // 100ms\n          // otherwise, wait 2 seconds to see if they get handled\n          matchWhitelist(err, DEFAULT_WHITELIST)\n            ? 100\n            : 2000\n        ),\n        logged: false\n      };\n    }\n  };\n  function onUnhandled(id) {\n    if (\n      options.allRejections ||\n      matchWhitelist(\n        rejections[id].error,\n        options.whitelist || DEFAULT_WHITELIST\n      )\n    ) {\n      rejections[id].displayId = displayId++;\n      if (options.onUnhandled) {\n        rejections[id].logged = true;\n        options.onUnhandled(\n          rejections[id].displayId,\n          rejections[id].error\n        );\n      } else {\n        rejections[id].logged = true;\n        logError(\n          rejections[id].displayId,\n          rejections[id].error\n        );\n      }\n    }\n  }\n  function onHandled(id) {\n    if (rejections[id].logged) {\n      if (options.onHandled) {\n        options.onHandled(rejections[id].displayId, rejections[id].error);\n      } else if (!rejections[id].onUnhandled) {\n        console.warn(\n          'Promise Rejection Handled (id: ' + rejections[id].displayId + '):'\n        );\n        console.warn(\n          '  This means you can ignore any previous messages of the form \"Possible Unhandled Promise Rejection\" with id ' +\n          rejections[id].displayId + '.'\n        );\n      }\n    }\n  }\n}\n\nfunction logError(id, error) {\n  console.warn('Possible Unhandled Promise Rejection (id: ' + id + '):');\n  var errStr = (error && (error.stack || error)) + '';\n  errStr.split('\\n').forEach(function (line) {\n    console.warn('  ' + line);\n  });\n}\n\nfunction matchWhitelist(error, list) {\n  return list.some(function (cls) {\n    return error instanceof cls;\n  });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/promise/lib/rejection-tracking.js\n// module id = 25\n// module chunks = 0","\"use strict\";\n\n// Use the fastest means possible to execute a task in its own turn, with\n// priority over other events including IO, animation, reflow, and redraw\n// events in browsers.\n//\n// An exception thrown by a task will permanently interrupt the processing of\n// subsequent tasks. The higher level `asap` function ensures that if an\n// exception is thrown by a task, that the task queue will continue flushing as\n// soon as possible, but if you use `rawAsap` directly, you are responsible to\n// either ensure that no exceptions are thrown from your task, or to manually\n// call `rawAsap.requestFlush` if an exception is thrown.\nmodule.exports = rawAsap;\nfunction rawAsap(task) {\n    if (!queue.length) {\n        requestFlush();\n        flushing = true;\n    }\n    // Equivalent to push, but avoids a function call.\n    queue[queue.length] = task;\n}\n\nvar queue = [];\n// Once a flush has been requested, no further calls to `requestFlush` are\n// necessary until the next `flush` completes.\nvar flushing = false;\n// `requestFlush` is an implementation-specific method that attempts to kick\n// off a `flush` event as quickly as possible. `flush` will attempt to exhaust\n// the event queue before yielding to the browser's own event loop.\nvar requestFlush;\n// The position of the next task to execute in the task queue. This is\n// preserved between calls to `flush` so that it can be resumed if\n// a task throws an exception.\nvar index = 0;\n// If a task schedules additional tasks recursively, the task queue can grow\n// unbounded. To prevent memory exhaustion, the task queue will periodically\n// truncate already-completed tasks.\nvar capacity = 1024;\n\n// The flush function processes all tasks that have been scheduled with\n// `rawAsap` unless and until one of those tasks throws an exception.\n// If a task throws an exception, `flush` ensures that its state will remain\n// consistent and will resume where it left off when called again.\n// However, `flush` does not make any arrangements to be called again if an\n// exception is thrown.\nfunction flush() {\n    while (index < queue.length) {\n        var currentIndex = index;\n        // Advance the index before calling the task. This ensures that we will\n        // begin flushing on the next task the task throws an error.\n        index = index + 1;\n        queue[currentIndex].call();\n        // Prevent leaking memory for long chains of recursive calls to `asap`.\n        // If we call `asap` within tasks scheduled by `asap`, the queue will\n        // grow, but to avoid an O(n) walk for every task we execute, we don't\n        // shift tasks off the queue after they have been executed.\n        // Instead, we periodically shift 1024 tasks off the queue.\n        if (index > capacity) {\n            // Manually shift all values starting at the index back to the\n            // beginning of the queue.\n            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {\n                queue[scan] = queue[scan + index];\n            }\n            queue.length -= index;\n            index = 0;\n        }\n    }\n    queue.length = 0;\n    index = 0;\n    flushing = false;\n}\n\n// `requestFlush` is implemented using a strategy based on data collected from\n// every available SauceLabs Selenium web driver worker at time of writing.\n// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593\n\n// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that\n// have WebKitMutationObserver but not un-prefixed MutationObserver.\n// Must use `global` or `self` instead of `window` to work in both frames and web\n// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.\n\n/* globals self */\nvar scope = typeof global !== \"undefined\" ? global : self;\nvar BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;\n\n// MutationObservers are desirable because they have high priority and work\n// reliably everywhere they are implemented.\n// They are implemented in all modern browsers.\n//\n// - Android 4-4.3\n// - Chrome 26-34\n// - Firefox 14-29\n// - Internet Explorer 11\n// - iPad Safari 6-7.1\n// - iPhone Safari 7-7.1\n// - Safari 6-7\nif (typeof BrowserMutationObserver === \"function\") {\n    requestFlush = makeRequestCallFromMutationObserver(flush);\n\n// MessageChannels are desirable because they give direct access to the HTML\n// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera\n// 11-12, and in web workers in many engines.\n// Although message channels yield to any queued rendering and IO tasks, they\n// would be better than imposing the 4ms delay of timers.\n// However, they do not work reliably in Internet Explorer or Safari.\n\n// Internet Explorer 10 is the only browser that has setImmediate but does\n// not have MutationObservers.\n// Although setImmediate yields to the browser's renderer, it would be\n// preferrable to falling back to setTimeout since it does not have\n// the minimum 4ms penalty.\n// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and\n// Desktop to a lesser extent) that renders both setImmediate and\n// MessageChannel useless for the purposes of ASAP.\n// https://github.com/kriskowal/q/issues/396\n\n// Timers are implemented universally.\n// We fall back to timers in workers in most engines, and in foreground\n// contexts in the following browsers.\n// However, note that even this simple case requires nuances to operate in a\n// broad spectrum of browsers.\n//\n// - Firefox 3-13\n// - Internet Explorer 6-9\n// - iPad Safari 4.3\n// - Lynx 2.8.7\n} else {\n    requestFlush = makeRequestCallFromTimer(flush);\n}\n\n// `requestFlush` requests that the high priority event queue be flushed as\n// soon as possible.\n// This is useful to prevent an error thrown in a task from stalling the event\n// queue if the exception handled by Node.jsâs\n// `process.on(\"uncaughtException\")` or by a domain.\nrawAsap.requestFlush = requestFlush;\n\n// To request a high priority event, we induce a mutation observer by toggling\n// the text of a text node between \"1\" and \"-1\".\nfunction makeRequestCallFromMutationObserver(callback) {\n    var toggle = 1;\n    var observer = new BrowserMutationObserver(callback);\n    var node = document.createTextNode(\"\");\n    observer.observe(node, {characterData: true});\n    return function requestCall() {\n        toggle = -toggle;\n        node.data = toggle;\n    };\n}\n\n// The message channel technique was discovered by Malte Ubl and was the\n// original foundation for this library.\n// http://www.nonblocking.io/2011/06/windownexttick.html\n\n// Safari 6.0.5 (at least) intermittently fails to create message ports on a\n// page's first load. Thankfully, this version of Safari supports\n// MutationObservers, so we don't need to fall back in that case.\n\n// function makeRequestCallFromMessageChannel(callback) {\n//     var channel = new MessageChannel();\n//     channel.port1.onmessage = callback;\n//     return function requestCall() {\n//         channel.port2.postMessage(0);\n//     };\n// }\n\n// For reasons explained above, we are also unable to use `setImmediate`\n// under any circumstances.\n// Even if we were, there is another bug in Internet Explorer 10.\n// It is not sufficient to assign `setImmediate` to `requestFlush` because\n// `setImmediate` must be called *by name* and therefore must be wrapped in a\n// closure.\n// Never forget.\n\n// function makeRequestCallFromSetImmediate(callback) {\n//     return function requestCall() {\n//         setImmediate(callback);\n//     };\n// }\n\n// Safari 6.0 has a problem where timers will get lost while the user is\n// scrolling. This problem does not impact ASAP because Safari 6.0 supports\n// mutation observers, so that implementation is used instead.\n// However, if we ever elect to use timers in Safari, the prevalent work-around\n// is to add a scroll event listener that calls for a flush.\n\n// `setTimeout` does not call the passed callback if the delay is less than\n// approximately 7 in web workers in Firefox 8 through 18, and sometimes not\n// even then.\n\nfunction makeRequestCallFromTimer(callback) {\n    return function requestCall() {\n        // We dispatch a timeout with a specified delay of 0 for engines that\n        // can reliably accommodate that request. This will usually be snapped\n        // to a 4 milisecond delay, but once we're flushing, there's no delay\n        // between events.\n        var timeoutHandle = setTimeout(handleTimer, 0);\n        // However, since this timer gets frequently dropped in Firefox\n        // workers, we enlist an interval handle that will try to fire\n        // an event 20 times per second until it succeeds.\n        var intervalHandle = setInterval(handleTimer, 50);\n\n        function handleTimer() {\n            // Whichever timer succeeds will cancel both timers and\n            // execute the callback.\n            clearTimeout(timeoutHandle);\n            clearInterval(intervalHandle);\n            callback();\n        }\n    };\n}\n\n// This is for `asap.js` only.\n// Its name will be periodically randomized to break any code that depends on\n// its existence.\nrawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;\n\n// ASAP was originally a nextTick shim included in Q. This was factored out\n// into this ASAP package. It was later adapted to RSVP which made further\n// amendments. These decisions, particularly to marginalize MessageChannel and\n// to capture the MutationObserver implementation in a closure, were integrated\n// back into ASAP proper.\n// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/asap/browser-raw.js\n// module id = 26\n// module chunks = 0","'use strict';\n\n//This file contains the ES6 extensions to the core Promises/A+ API\n\nvar Promise = require('./core.js');\n\nmodule.exports = Promise;\n\n/* Static Functions */\n\nvar TRUE = valuePromise(true);\nvar FALSE = valuePromise(false);\nvar NULL = valuePromise(null);\nvar UNDEFINED = valuePromise(undefined);\nvar ZERO = valuePromise(0);\nvar EMPTYSTRING = valuePromise('');\n\nfunction valuePromise(value) {\n  var p = new Promise(Promise._44);\n  p._83 = 1;\n  p._18 = value;\n  return p;\n}\nPromise.resolve = function (value) {\n  if (value instanceof Promise) return value;\n\n  if (value === null) return NULL;\n  if (value === undefined) return UNDEFINED;\n  if (value === true) return TRUE;\n  if (value === false) return FALSE;\n  if (value === 0) return ZERO;\n  if (value === '') return EMPTYSTRING;\n\n  if (typeof value === 'object' || typeof value === 'function') {\n    try {\n      var then = value.then;\n      if (typeof then === 'function') {\n        return new Promise(then.bind(value));\n      }\n    } catch (ex) {\n      return new Promise(function (resolve, reject) {\n        reject(ex);\n      });\n    }\n  }\n  return valuePromise(value);\n};\n\nPromise.all = function (arr) {\n  var args = Array.prototype.slice.call(arr);\n\n  return new Promise(function (resolve, reject) {\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n    function res(i, val) {\n      if (val && (typeof val === 'object' || typeof val === 'function')) {\n        if (val instanceof Promise && val.then === Promise.prototype.then) {\n          while (val._83 === 3) {\n            val = val._18;\n          }\n          if (val._83 === 1) return res(i, val._18);\n          if (val._83 === 2) reject(val._18);\n          val.then(function (val) {\n            res(i, val);\n          }, reject);\n          return;\n        } else {\n          var then = val.then;\n          if (typeof then === 'function') {\n            var p = new Promise(then.bind(val));\n            p.then(function (val) {\n              res(i, val);\n            }, reject);\n            return;\n          }\n        }\n      }\n      args[i] = val;\n      if (--remaining === 0) {\n        resolve(args);\n      }\n    }\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.reject = function (value) {\n  return new Promise(function (resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function (values) {\n  return new Promise(function (resolve, reject) {\n    values.forEach(function(value){\n      Promise.resolve(value).then(resolve, reject);\n    });\n  });\n};\n\n/* Prototype Methods */\n\nPromise.prototype['catch'] = function (onRejected) {\n  return this.then(null, onRejected);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/promise/lib/es6-extensions.js\n// module id = 27\n// module chunks = 0","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/whatwg-fetch/fetch.js\n// module id = 28\n// module chunks = 0","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/*\n React v16.0.0\n react.production.min.js\n\n Copyright (c) 2013-present, Facebook, Inc.\n\n This source code is licensed under the MIT license found in the\n LICENSE file in the root directory of this source tree.\n*/\n'use strict';var f=require(\"object-assign\"),p=require(\"fbjs/lib/emptyObject\");require(\"fbjs/lib/invariant\");var r=require(\"fbjs/lib/emptyFunction\");\nfunction t(a){for(var b=arguments.length-1,d=\"Minified React error #\"+a+\"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\\x3d\"+a,e=0;e<b;e++)d+=\"\\x26args[]\\x3d\"+encodeURIComponent(arguments[e+1]);b=Error(d+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\");b.name=\"Invariant Violation\";b.framesToPop=1;throw b;}\nvar u={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function v(a,b,d){this.props=a;this.context=b;this.refs=p;this.updater=d||u}v.prototype.isReactComponent={};v.prototype.setState=function(a,b){\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a?t(\"85\"):void 0;this.updater.enqueueSetState(this,a,b,\"setState\")};v.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};\nfunction w(a,b,d){this.props=a;this.context=b;this.refs=p;this.updater=d||u}function x(){}x.prototype=v.prototype;var y=w.prototype=new x;y.constructor=w;f(y,v.prototype);y.isPureReactComponent=!0;function z(a,b,d){this.props=a;this.context=b;this.refs=p;this.updater=d||u}var A=z.prototype=new x;A.constructor=z;f(A,v.prototype);A.unstable_isAsyncReactComponent=!0;A.render=function(){return this.props.children};\nvar B={Component:v,PureComponent:w,AsyncComponent:z},C={current:null},D=Object.prototype.hasOwnProperty,E=\"function\"===typeof Symbol&&Symbol[\"for\"]&&Symbol[\"for\"](\"react.element\")||60103,F={key:!0,ref:!0,__self:!0,__source:!0};function G(a,b,d,e,c,g,k){return{$$typeof:E,type:a,key:b,ref:d,props:k,_owner:g}}\nG.createElement=function(a,b,d){var e,c={},g=null,k=null,m=null,q=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=\"\"+b.key),m=void 0===b.__self?null:b.__self,q=void 0===b.__source?null:b.__source,b)D.call(b,e)&&!F.hasOwnProperty(e)&&(c[e]=b[e]);var l=arguments.length-2;if(1===l)c.children=d;else if(1<l){for(var h=Array(l),n=0;n<l;n++)h[n]=arguments[n+2];c.children=h}if(a&&a.defaultProps)for(e in l=a.defaultProps,l)void 0===c[e]&&(c[e]=l[e]);return G(a,g,k,m,q,C.current,c)};\nG.createFactory=function(a){var b=G.createElement.bind(null,a);b.type=a;return b};G.cloneAndReplaceKey=function(a,b){return G(a.type,b,a.ref,a._self,a._source,a._owner,a.props)};\nG.cloneElement=function(a,b,d){var e=f({},a.props),c=a.key,g=a.ref,k=a._self,m=a._source,q=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,q=C.current);void 0!==b.key&&(c=\"\"+b.key);if(a.type&&a.type.defaultProps)var l=a.type.defaultProps;for(h in b)D.call(b,h)&&!F.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==l?l[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=d;else if(1<h){l=Array(h);for(var n=0;n<h;n++)l[n]=arguments[n+2];e.children=l}return G(a.type,c,g,k,m,q,e)};\nG.isValidElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===E};var H=\"function\"===typeof Symbol&&Symbol.iterator,I=\"function\"===typeof Symbol&&Symbol[\"for\"]&&Symbol[\"for\"](\"react.element\")||60103;function escape(a){var b={\"\\x3d\":\"\\x3d0\",\":\":\"\\x3d2\"};return\"$\"+(\"\"+a).replace(/[=:]/g,function(a){return b[a]})}var J=/\\/+/g,K=[];\nfunction L(a,b,d,e){if(K.length){var c=K.pop();c.result=a;c.keyPrefix=b;c.func=d;c.context=e;c.count=0;return c}return{result:a,keyPrefix:b,func:d,context:e,count:0}}function M(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>K.length&&K.push(a)}\nfunction N(a,b,d,e){var c=typeof a;if(\"undefined\"===c||\"boolean\"===c)a=null;if(null===a||\"string\"===c||\"number\"===c||\"object\"===c&&a.$$typeof===I)return d(e,a,\"\"===b?\".\"+O(a,0):b),1;var g=0;b=\"\"===b?\".\":b+\":\";if(Array.isArray(a))for(var k=0;k<a.length;k++){c=a[k];var m=b+O(c,k);g+=N(c,m,d,e)}else if(m=H&&a[H]||a[\"@@iterator\"],\"function\"===typeof m)for(a=m.call(a),k=0;!(c=a.next()).done;)c=c.value,m=b+O(c,k++),g+=N(c,m,d,e);else\"object\"===c&&(d=\"\"+a,t(\"31\",\"[object Object]\"===d?\"object with keys {\"+\nObject.keys(a).join(\", \")+\"}\":d,\"\"));return g}function O(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function P(a,b){a.func.call(a.context,b,a.count++)}function Q(a,b,d){var e=a.result,c=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?R(a,e,d,r.thatReturnsArgument):null!=a&&(G.isValidElement(a)&&(a=G.cloneAndReplaceKey(a,c+(!a.key||b&&b.key===a.key?\"\":(\"\"+a.key).replace(J,\"$\\x26/\")+\"/\")+d)),e.push(a))}\nfunction R(a,b,d,e,c){var g=\"\";null!=d&&(g=(\"\"+d).replace(J,\"$\\x26/\")+\"/\");b=L(b,g,e,c);null==a||N(a,\"\",Q,b);M(b)}var S={forEach:function(a,b,d){if(null==a)return a;b=L(null,null,b,d);null==a||N(a,\"\",P,b);M(b)},map:function(a,b,d){if(null==a)return a;var e=[];R(a,e,null,b,d);return e},count:function(a){return null==a?0:N(a,\"\",r.thatReturnsNull,null)},toArray:function(a){var b=[];R(a,b,null,r.thatReturnsArgument);return b}};\nmodule.exports={Children:{map:S.map,forEach:S.forEach,count:S.count,toArray:S.toArray,only:function(a){G.isValidElement(a)?void 0:t(\"143\");return a}},Component:B.Component,PureComponent:B.PureComponent,unstable_AsyncComponent:B.AsyncComponent,createElement:G.createElement,cloneElement:G.cloneElement,isValidElement:G.isValidElement,createFactory:G.createFactory,version:\"16.0.0\",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:C,assign:f}};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/react/cjs/react.production.min.js\n// module id = 30\n// module chunks = 0","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/react-dom/index.js\n// module id = 31\n// module chunks = 0","/*\n React v16.0.0\n react-dom.production.min.js\n\n Copyright (c) 2013-present, Facebook, Inc.\n\n This source code is licensed under the MIT license found in the\n LICENSE file in the root directory of this source tree.\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';var aa=require(\"react\");require(\"fbjs/lib/invariant\");var l=require(\"fbjs/lib/ExecutionEnvironment\"),n=require(\"object-assign\"),ba=require(\"fbjs/lib/EventListener\"),ca=require(\"fbjs/lib/emptyFunction\"),da=require(\"fbjs/lib/emptyObject\"),ea=require(\"fbjs/lib/shallowEqual\"),fa=require(\"fbjs/lib/containsNode\"),ha=require(\"fbjs/lib/focusNode\"),ia=require(\"fbjs/lib/getActiveElement\");\nfunction w(a){for(var b=arguments.length-1,c=\"Minified React error #\"+a+\"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant\\x3d\"+a,d=0;d<b;d++)c+=\"\\x26args[]\\x3d\"+encodeURIComponent(arguments[d+1]);b=Error(c+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\");b.name=\"Invariant Violation\";b.framesToPop=1;throw b;}aa?void 0:w(\"227\");\nfunction ja(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}\nvar ka={Namespaces:{html:\"http://www.w3.org/1999/xhtml\",mathml:\"http://www.w3.org/1998/Math/MathML\",svg:\"http://www.w3.org/2000/svg\"},getIntrinsicNamespace:ja,getChildNamespace:function(a,b){return null==a||\"http://www.w3.org/1999/xhtml\"===a?ja(b):\"http://www.w3.org/2000/svg\"===a&&\"foreignObject\"===b?\"http://www.w3.org/1999/xhtml\":a}},la=null,oa={};\nfunction pa(){if(la)for(var a in oa){var b=oa[a],c=la.indexOf(a);-1<c?void 0:w(\"96\",a);if(!qa.plugins[c]){b.extractEvents?void 0:w(\"97\",a);qa.plugins[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;qa.eventNameDispatchConfigs.hasOwnProperty(h)?w(\"99\",h):void 0;qa.eventNameDispatchConfigs[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&ra(k[e],g,h);e=!0}else f.registrationName?(ra(f.registrationName,g,h),e=!0):e=!1;e?void 0:w(\"98\",d,a)}}}}\nfunction ra(a,b,c){qa.registrationNameModules[a]?w(\"100\",a):void 0;qa.registrationNameModules[a]=b;qa.registrationNameDependencies[a]=b.eventTypes[c].dependencies}\nvar qa={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},possibleRegistrationNames:null,injectEventPluginOrder:function(a){la?w(\"101\"):void 0;la=Array.prototype.slice.call(a);pa()},injectEventPluginsByName:function(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];oa.hasOwnProperty(c)&&oa[c]===d||(oa[c]?w(\"102\",c):void 0,oa[c]=d,b=!0)}b&&pa()}},sa=qa,ta={children:!0,dangerouslySetInnerHTML:!0,autoFocus:!0,defaultValue:!0,defaultChecked:!0,\ninnerHTML:!0,suppressContentEditableWarning:!0,style:!0};function ua(a,b){return(a&b)===b}\nvar wa={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,HAS_STRING_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(a){var b=wa,c=a.Properties||{},d=a.DOMAttributeNamespaces||{},e=a.DOMAttributeNames||{};a=a.DOMMutationMethods||{};for(var f in c){xa.properties.hasOwnProperty(f)?w(\"48\",f):void 0;var g=f.toLowerCase(),h=c[f];g={attributeName:g,attributeNamespace:null,propertyName:f,mutationMethod:null,mustUseProperty:ua(h,b.MUST_USE_PROPERTY),\nhasBooleanValue:ua(h,b.HAS_BOOLEAN_VALUE),hasNumericValue:ua(h,b.HAS_NUMERIC_VALUE),hasPositiveNumericValue:ua(h,b.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:ua(h,b.HAS_OVERLOADED_BOOLEAN_VALUE),hasStringBooleanValue:ua(h,b.HAS_STRING_BOOLEAN_VALUE)};1>=g.hasBooleanValue+g.hasNumericValue+g.hasOverloadedBooleanValue?void 0:w(\"50\",f);e.hasOwnProperty(f)&&(g.attributeName=e[f]);d.hasOwnProperty(f)&&(g.attributeNamespace=d[f]);a.hasOwnProperty(f)&&(g.mutationMethod=a[f]);xa.properties[f]=\ng}}},xa={ID_ATTRIBUTE_NAME:\"data-reactid\",ROOT_ATTRIBUTE_NAME:\"data-reactroot\",ATTRIBUTE_NAME_START_CHAR:\":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\",ATTRIBUTE_NAME_CHAR:\":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\",\nproperties:{},shouldSetAttribute:function(a,b){if(xa.isReservedProp(a)||!(\"o\"!==a[0]&&\"O\"!==a[0]||\"n\"!==a[1]&&\"N\"!==a[1]))return!1;if(null===b)return!0;switch(typeof b){case \"boolean\":return xa.shouldAttributeAcceptBooleanValue(a);case \"undefined\":case \"number\":case \"string\":case \"object\":return!0;default:return!1}},getPropertyInfo:function(a){return xa.properties.hasOwnProperty(a)?xa.properties[a]:null},shouldAttributeAcceptBooleanValue:function(a){if(xa.isReservedProp(a))return!0;var b=xa.getPropertyInfo(a);\nif(b)return b.hasBooleanValue||b.hasStringBooleanValue||b.hasOverloadedBooleanValue;a=a.toLowerCase().slice(0,5);return\"data-\"===a||\"aria-\"===a},isReservedProp:function(a){return ta.hasOwnProperty(a)},injection:wa},A=xa,E={IndeterminateComponent:0,FunctionalComponent:1,ClassComponent:2,HostRoot:3,HostPortal:4,HostComponent:5,HostText:6,CoroutineComponent:7,CoroutineHandlerPhase:8,YieldComponent:9,Fragment:10},F={ELEMENT_NODE:1,TEXT_NODE:3,COMMENT_NODE:8,DOCUMENT_NODE:9,DOCUMENT_FRAGMENT_NODE:11},\nya=E.HostComponent,za=E.HostText,Aa=F.ELEMENT_NODE,Ba=F.COMMENT_NODE,Ea=A.ID_ATTRIBUTE_NAME,Fa={hasCachedChildNodes:1},Ga=Math.random().toString(36).slice(2),Ha=\"__reactInternalInstance$\"+Ga,Ia=\"__reactEventHandlers$\"+Ga;function La(a){for(var b;b=a._renderedComponent;)a=b;return a}function Ma(a,b){a=La(a);a._hostNode=b;b[Ha]=a}\nfunction Na(a,b){if(!(a._flags&Fa.hasCachedChildNodes)){var c=a._renderedChildren;b=b.firstChild;var d;a:for(d in c)if(c.hasOwnProperty(d)){var e=c[d],f=La(e)._domID;if(0!==f){for(;null!==b;b=b.nextSibling){var g=b,h=f;if(g.nodeType===Aa&&g.getAttribute(Ea)===\"\"+h||g.nodeType===Ba&&g.nodeValue===\" react-text: \"+h+\" \"||g.nodeType===Ba&&g.nodeValue===\" react-empty: \"+h+\" \"){Ma(e,b);continue a}}w(\"32\",f)}}a._flags|=Fa.hasCachedChildNodes}}\nfunction Oa(a){if(a[Ha])return a[Ha];for(var b=[];!a[Ha];)if(b.push(a),a.parentNode)a=a.parentNode;else return null;var c=a[Ha];if(c.tag===ya||c.tag===za)return c;for(;a&&(c=a[Ha]);a=b.pop()){var d=c;b.length&&Na(c,a)}return d}\nvar G={getClosestInstanceFromNode:Oa,getInstanceFromNode:function(a){var b=a[Ha];if(b)return b.tag===ya||b.tag===za?b:b._hostNode===a?b:null;b=Oa(a);return null!=b&&b._hostNode===a?b:null},getNodeFromInstance:function(a){if(a.tag===ya||a.tag===za)return a.stateNode;void 0===a._hostNode?w(\"33\"):void 0;if(a._hostNode)return a._hostNode;for(var b=[];!a._hostNode;)b.push(a),a._hostParent?void 0:w(\"34\"),a=a._hostParent;for(;b.length;a=b.pop())Na(a,a._hostNode);return a._hostNode},precacheChildNodes:Na,\nprecacheNode:Ma,uncacheNode:function(a){var b=a._hostNode;b&&(delete b[Ha],a._hostNode=null)},precacheFiberNode:function(a,b){b[Ha]=a},getFiberCurrentPropsFromNode:function(a){return a[Ia]||null},updateFiberProps:function(a,b){a[Ia]=b}},Pa={remove:function(a){a._reactInternalFiber=void 0},get:function(a){return a._reactInternalFiber},has:function(a){return void 0!==a._reactInternalFiber},set:function(a,b){a._reactInternalFiber=b}},Qa={ReactCurrentOwner:aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner};\nfunction Ra(a){if(\"function\"===typeof a.getName)return a.getName();if(\"number\"===typeof a.tag){a=a.type;if(\"string\"===typeof a)return a;if(\"function\"===typeof a)return a.displayName||a.name}return null}var J={NoEffect:0,PerformedWork:1,Placement:2,Update:4,PlacementAndUpdate:6,Deletion:8,ContentReset:16,Callback:32,Err:64,Ref:128},Sa=E.HostComponent,Ta=E.HostRoot,Ua=E.HostPortal,Va=E.HostText,Wa=J.NoEffect,Xa=J.Placement;\nfunction Za(a){var b=a;if(a.alternate)for(;b[\"return\"];)b=b[\"return\"];else{if((b.effectTag&Xa)!==Wa)return 1;for(;b[\"return\"];)if(b=b[\"return\"],(b.effectTag&Xa)!==Wa)return 1}return b.tag===Ta?2:3}function $a(a){2!==Za(a)?w(\"188\"):void 0}\nfunction ab(a){var b=a.alternate;if(!b)return b=Za(a),3===b?w(\"188\"):void 0,1===b?null:a;for(var c=a,d=b;;){var e=c[\"return\"],f=e?e.alternate:null;if(!e||!f)break;if(e.child===f.child){for(var g=e.child;g;){if(g===c)return $a(e),a;if(g===d)return $a(e),b;g=g.sibling}w(\"188\")}if(c[\"return\"]!==d[\"return\"])c=e,d=f;else{g=!1;for(var h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}g?\nvoid 0:w(\"189\")}}c.alternate!==d?w(\"190\"):void 0}c.tag!==Ta?w(\"188\"):void 0;return c.stateNode.current===c?a:b}\nvar bb={isFiberMounted:function(a){return 2===Za(a)},isMounted:function(a){return(a=Pa.get(a))?2===Za(a):!1},findCurrentFiberUsingSlowPath:ab,findCurrentHostFiber:function(a){a=ab(a);if(!a)return null;for(var b=a;;){if(b.tag===Sa||b.tag===Va)return b;if(b.child)b.child[\"return\"]=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b[\"return\"]||b[\"return\"]===a)return null;b=b[\"return\"]}b.sibling[\"return\"]=b[\"return\"];b=b.sibling}}return null},findCurrentHostFiberWithNoPortals:function(a){a=ab(a);\nif(!a)return null;for(var b=a;;){if(b.tag===Sa||b.tag===Va)return b;if(b.child&&b.tag!==Ua)b.child[\"return\"]=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b[\"return\"]||b[\"return\"]===a)return null;b=b[\"return\"]}b.sibling[\"return\"]=b[\"return\"];b=b.sibling}}return null}},K={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,injection:{injectErrorUtils:function(a){\"function\"!==typeof a.invokeGuardedCallback?w(\"197\"):void 0;cb=a.invokeGuardedCallback}},invokeGuardedCallback:function(a,\nb,c,d,e,f,g,h,k){cb.apply(K,arguments)},invokeGuardedCallbackAndCatchFirstError:function(a,b,c,d,e,f,g,h,k){K.invokeGuardedCallback.apply(this,arguments);if(K.hasCaughtError()){var p=K.clearCaughtError();K._hasRethrowError||(K._hasRethrowError=!0,K._rethrowError=p)}},rethrowCaughtError:function(){return db.apply(K,arguments)},hasCaughtError:function(){return K._hasCaughtError},clearCaughtError:function(){if(K._hasCaughtError){var a=K._caughtError;K._caughtError=null;K._hasCaughtError=!1;return a}w(\"198\")}};\nfunction cb(a,b,c,d,e,f,g,h,k){K._hasCaughtError=!1;K._caughtError=null;var p=Array.prototype.slice.call(arguments,3);try{b.apply(c,p)}catch(x){K._caughtError=x,K._hasCaughtError=!0}}function db(){if(K._hasRethrowError){var a=K._rethrowError;K._rethrowError=null;K._hasRethrowError=!1;throw a;}}var eb=K,fb;function gb(a,b,c,d){b=a.type||\"unknown-event\";a.currentTarget=hb.getNodeFromInstance(d);eb.invokeGuardedCallbackAndCatchFirstError(b,c,void 0,a);a.currentTarget=null}\nvar hb={isEndish:function(a){return\"topMouseUp\"===a||\"topTouchEnd\"===a||\"topTouchCancel\"===a},isMoveish:function(a){return\"topMouseMove\"===a||\"topTouchMove\"===a},isStartish:function(a){return\"topMouseDown\"===a||\"topTouchStart\"===a},executeDirectDispatch:function(a){var b=a._dispatchListeners,c=a._dispatchInstances;Array.isArray(b)?w(\"103\"):void 0;a.currentTarget=b?hb.getNodeFromInstance(c):null;b=b?b(a):null;a.currentTarget=null;a._dispatchListeners=null;a._dispatchInstances=null;return b},executeDispatchesInOrder:function(a,\nb){var c=a._dispatchListeners,d=a._dispatchInstances;if(Array.isArray(c))for(var e=0;e<c.length&&!a.isPropagationStopped();e++)gb(a,b,c[e],d[e]);else c&&gb(a,b,c,d);a._dispatchListeners=null;a._dispatchInstances=null},executeDispatchesInOrderStopAtTrue:function(a){a:{var b=a._dispatchListeners;var c=a._dispatchInstances;if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++){if(b[d](a,c[d])){b=c[d];break a}}else if(b&&b(a,c)){b=c;break a}b=null}a._dispatchInstances=null;a._dispatchListeners=\nnull;return b},hasDispatches:function(a){return!!a._dispatchListeners},getFiberCurrentPropsFromNode:function(a){return fb.getFiberCurrentPropsFromNode(a)},getInstanceFromNode:function(a){return fb.getInstanceFromNode(a)},getNodeFromInstance:function(a){return fb.getNodeFromInstance(a)},injection:{injectComponentTree:function(a){fb=a}}},ib=hb,jb=null,kb=null,lb=null;\nfunction mb(a){if(a=ib.getInstanceFromNode(a))if(\"number\"===typeof a.tag){jb&&\"function\"===typeof jb.restoreControlledState?void 0:w(\"194\");var b=ib.getFiberCurrentPropsFromNode(a.stateNode);jb.restoreControlledState(a.stateNode,a.type,b)}else\"function\"!==typeof a.restoreControlledState?w(\"195\"):void 0,a.restoreControlledState()}\nvar nb={injection:{injectFiberControlledHostComponent:function(a){jb=a}},enqueueStateRestore:function(a){kb?lb?lb.push(a):lb=[a]:kb=a},restoreStateIfNeeded:function(){if(kb){var a=kb,b=lb;lb=kb=null;mb(a);if(b)for(a=0;a<b.length;a++)mb(b[a])}}};function ob(a,b,c,d,e,f){return a(b,c,d,e,f)}function pb(a,b){return a(b)}function qb(a,b){return pb(a,b)}\nvar rb=!1,sb={batchedUpdates:function(a,b){if(rb)return ob(qb,a,b);rb=!0;try{return ob(qb,a,b)}finally{rb=!1,nb.restoreStateIfNeeded()}},injection:{injectStackBatchedUpdates:function(a){ob=a},injectFiberBatchedUpdates:function(a){pb=a}}},tb=F.TEXT_NODE;function ub(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return a.nodeType===tb?a.parentNode:a}var vb=E.HostRoot,wb=[];\nfunction xb(a){var b=a.targetInst;do{if(!b){a.ancestors.push(b);break}var c=b;if(\"number\"===typeof c.tag){for(;c[\"return\"];)c=c[\"return\"];c=c.tag!==vb?null:c.stateNode.containerInfo}else{for(;c._hostParent;)c=c._hostParent;c=G.getNodeFromInstance(c).parentNode}if(!c)break;a.ancestors.push(b);b=G.getClosestInstanceFromNode(c)}while(b);for(c=0;c<a.ancestors.length;c++)b=a.ancestors[c],yb._handleTopLevel(a.topLevelType,b,a.nativeEvent,ub(a.nativeEvent))}\nvar yb={_enabled:!0,_handleTopLevel:null,setHandleTopLevel:function(a){yb._handleTopLevel=a},setEnabled:function(a){yb._enabled=!!a},isEnabled:function(){return yb._enabled},trapBubbledEvent:function(a,b,c){return c?ba.listen(c,b,yb.dispatchEvent.bind(null,a)):null},trapCapturedEvent:function(a,b,c){return c?ba.capture(c,b,yb.dispatchEvent.bind(null,a)):null},dispatchEvent:function(a,b){if(yb._enabled){var c=ub(b);c=G.getClosestInstanceFromNode(c);null===c||\"number\"!==typeof c.tag||bb.isFiberMounted(c)||\n(c=null);if(wb.length){var d=wb.pop();d.topLevelType=a;d.nativeEvent=b;d.targetInst=c;a=d}else a={topLevelType:a,nativeEvent:b,targetInst:c,ancestors:[]};try{sb.batchedUpdates(xb,a)}finally{a.topLevelType=null,a.nativeEvent=null,a.targetInst=null,a.ancestors.length=0,10>wb.length&&wb.push(a)}}}},L=yb;function Cb(a,b){null==b?w(\"30\"):void 0;if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}\nfunction Db(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var Eb=null;function Fb(a,b){a&&(ib.executeDispatchesInOrder(a,b),a.isPersistent()||a.constructor.release(a))}function Gb(a){return Fb(a,!0)}function Hb(a){return Fb(a,!1)}\nfunction Ib(a,b,c){switch(a){case \"onClick\":case \"onClickCapture\":case \"onDoubleClick\":case \"onDoubleClickCapture\":case \"onMouseDown\":case \"onMouseDownCapture\":case \"onMouseMove\":case \"onMouseMoveCapture\":case \"onMouseUp\":case \"onMouseUpCapture\":return!(!c.disabled||\"button\"!==b&&\"input\"!==b&&\"select\"!==b&&\"textarea\"!==b);default:return!1}}\nvar Jb={injection:{injectEventPluginOrder:sa.injectEventPluginOrder,injectEventPluginsByName:sa.injectEventPluginsByName},getListener:function(a,b){if(\"number\"===typeof a.tag){var c=a.stateNode;if(!c)return null;var d=ib.getFiberCurrentPropsFromNode(c);if(!d)return null;c=d[b];if(Ib(b,a.type,d))return null}else{d=a._currentElement;if(\"string\"===typeof d||\"number\"===typeof d||!a._rootNodeID)return null;a=d.props;c=a[b];if(Ib(b,d.type,a))return null}c&&\"function\"!==typeof c?w(\"231\",b,typeof c):void 0;\nreturn c},extractEvents:function(a,b,c,d){for(var e,f=sa.plugins,g=0;g<f.length;g++){var h=f[g];h&&(h=h.extractEvents(a,b,c,d))&&(e=Cb(e,h))}return e},enqueueEvents:function(a){a&&(Eb=Cb(Eb,a))},processEventQueue:function(a){var b=Eb;Eb=null;a?Db(b,Gb):Db(b,Hb);Eb?w(\"95\"):void 0;eb.rethrowCaughtError()}},Kb;l.canUseDOM&&(Kb=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature(\"\",\"\"));\nfunction Lb(a,b){if(!l.canUseDOM||b&&!(\"addEventListener\"in document))return!1;b=\"on\"+a;var c=b in document;c||(c=document.createElement(\"div\"),c.setAttribute(b,\"return;\"),c=\"function\"===typeof c[b]);!c&&Kb&&\"wheel\"===a&&(c=document.implementation.hasFeature(\"Events.wheel\",\"3.0\"));return c}function Mb(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c[\"Webkit\"+a]=\"webkit\"+b;c[\"Moz\"+a]=\"moz\"+b;c[\"ms\"+a]=\"MS\"+b;c[\"O\"+a]=\"o\"+b.toLowerCase();return c}\nvar Nb={animationend:Mb(\"Animation\",\"AnimationEnd\"),animationiteration:Mb(\"Animation\",\"AnimationIteration\"),animationstart:Mb(\"Animation\",\"AnimationStart\"),transitionend:Mb(\"Transition\",\"TransitionEnd\")},Ob={},Pb={};l.canUseDOM&&(Pb=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete Nb.animationend.animation,delete Nb.animationiteration.animation,delete Nb.animationstart.animation),\"TransitionEvent\"in window||delete Nb.transitionend.transition);\nfunction Qb(a){if(Ob[a])return Ob[a];if(!Nb[a])return a;var b=Nb[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Pb)return Ob[a]=b[c];return\"\"}\nvar Rb={topAbort:\"abort\",topAnimationEnd:Qb(\"animationend\")||\"animationend\",topAnimationIteration:Qb(\"animationiteration\")||\"animationiteration\",topAnimationStart:Qb(\"animationstart\")||\"animationstart\",topBlur:\"blur\",topCancel:\"cancel\",topCanPlay:\"canplay\",topCanPlayThrough:\"canplaythrough\",topChange:\"change\",topClick:\"click\",topClose:\"close\",topCompositionEnd:\"compositionend\",topCompositionStart:\"compositionstart\",topCompositionUpdate:\"compositionupdate\",topContextMenu:\"contextmenu\",topCopy:\"copy\",\ntopCut:\"cut\",topDoubleClick:\"dblclick\",topDrag:\"drag\",topDragEnd:\"dragend\",topDragEnter:\"dragenter\",topDragExit:\"dragexit\",topDragLeave:\"dragleave\",topDragOver:\"dragover\",topDragStart:\"dragstart\",topDrop:\"drop\",topDurationChange:\"durationchange\",topEmptied:\"emptied\",topEncrypted:\"encrypted\",topEnded:\"ended\",topError:\"error\",topFocus:\"focus\",topInput:\"input\",topKeyDown:\"keydown\",topKeyPress:\"keypress\",topKeyUp:\"keyup\",topLoadedData:\"loadeddata\",topLoad:\"load\",topLoadedMetadata:\"loadedmetadata\",topLoadStart:\"loadstart\",\ntopMouseDown:\"mousedown\",topMouseMove:\"mousemove\",topMouseOut:\"mouseout\",topMouseOver:\"mouseover\",topMouseUp:\"mouseup\",topPaste:\"paste\",topPause:\"pause\",topPlay:\"play\",topPlaying:\"playing\",topProgress:\"progress\",topRateChange:\"ratechange\",topScroll:\"scroll\",topSeeked:\"seeked\",topSeeking:\"seeking\",topSelectionChange:\"selectionchange\",topStalled:\"stalled\",topSuspend:\"suspend\",topTextInput:\"textInput\",topTimeUpdate:\"timeupdate\",topToggle:\"toggle\",topTouchCancel:\"touchcancel\",topTouchEnd:\"touchend\",topTouchMove:\"touchmove\",\ntopTouchStart:\"touchstart\",topTransitionEnd:Qb(\"transitionend\")||\"transitionend\",topVolumeChange:\"volumechange\",topWaiting:\"waiting\",topWheel:\"wheel\"},Sb={},Tb=0,Ub=\"_reactListenersID\"+(\"\"+Math.random()).slice(2);function Vb(a){Object.prototype.hasOwnProperty.call(a,Ub)||(a[Ub]=Tb++,Sb[a[Ub]]={});return Sb[a[Ub]]}\nvar M=n({},{handleTopLevel:function(a,b,c,d){a=Jb.extractEvents(a,b,c,d);Jb.enqueueEvents(a);Jb.processEventQueue(!1)}},{setEnabled:function(a){L&&L.setEnabled(a)},isEnabled:function(){return!(!L||!L.isEnabled())},listenTo:function(a,b){var c=Vb(b);a=sa.registrationNameDependencies[a];for(var d=0;d<a.length;d++){var e=a[d];c.hasOwnProperty(e)&&c[e]||(\"topWheel\"===e?Lb(\"wheel\")?L.trapBubbledEvent(\"topWheel\",\"wheel\",b):Lb(\"mousewheel\")?L.trapBubbledEvent(\"topWheel\",\"mousewheel\",b):L.trapBubbledEvent(\"topWheel\",\n\"DOMMouseScroll\",b):\"topScroll\"===e?L.trapCapturedEvent(\"topScroll\",\"scroll\",b):\"topFocus\"===e||\"topBlur\"===e?(L.trapCapturedEvent(\"topFocus\",\"focus\",b),L.trapCapturedEvent(\"topBlur\",\"blur\",b),c.topBlur=!0,c.topFocus=!0):\"topCancel\"===e?(Lb(\"cancel\",!0)&&L.trapCapturedEvent(\"topCancel\",\"cancel\",b),c.topCancel=!0):\"topClose\"===e?(Lb(\"close\",!0)&&L.trapCapturedEvent(\"topClose\",\"close\",b),c.topClose=!0):Rb.hasOwnProperty(e)&&L.trapBubbledEvent(e,Rb[e],b),c[e]=!0)}},isListeningToAllDependencies:function(a,\nb){b=Vb(b);a=sa.registrationNameDependencies[a];for(var c=0;c<a.length;c++){var d=a[c];if(!b.hasOwnProperty(d)||!b[d])return!1}return!0},trapBubbledEvent:function(a,b,c){return L.trapBubbledEvent(a,b,c)},trapCapturedEvent:function(a,b,c){return L.trapCapturedEvent(a,b,c)}}),Wb={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,\nflexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Xb=[\"Webkit\",\"ms\",\"Moz\",\"O\"];\nObject.keys(Wb).forEach(function(a){Xb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);Wb[b]=Wb[a]})});\nvar Yb={isUnitlessNumber:Wb,shorthandPropertyExpansions:{background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,\nborderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}}},Zb=Yb.isUnitlessNumber,$b=!1;if(l.canUseDOM){var ac=document.createElement(\"div\").style;try{ac.font=\"\"}catch(a){$b=!0}}\nvar bc={createDangerousStringForStyles:function(){},setValueForStyles:function(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf(\"--\");var e=c;var f=b[c];e=null==f||\"boolean\"===typeof f||\"\"===f?\"\":d||\"number\"!==typeof f||0===f||Zb.hasOwnProperty(e)&&Zb[e]?(\"\"+f).trim():f+\"px\";\"float\"===c&&(c=\"cssFloat\");if(d)a.setProperty(c,e);else if(e)a[c]=e;else if(d=$b&&Yb.shorthandPropertyExpansions[c])for(var g in d)a[g]=\"\";else a[c]=\"\"}}},cc=new RegExp(\"^[\"+A.ATTRIBUTE_NAME_START_CHAR+\n\"][\"+A.ATTRIBUTE_NAME_CHAR+\"]*$\"),dc={},ec={};function fc(a){if(ec.hasOwnProperty(a))return!0;if(dc.hasOwnProperty(a))return!1;if(cc.test(a))return ec[a]=!0;dc[a]=!0;return!1}\nvar gc={setAttributeForID:function(a,b){a.setAttribute(A.ID_ATTRIBUTE_NAME,b)},setAttributeForRoot:function(a){a.setAttribute(A.ROOT_ATTRIBUTE_NAME,\"\")},getValueForProperty:function(){},getValueForAttribute:function(){},setValueForProperty:function(a,b,c){var d=A.getPropertyInfo(b);if(d&&A.shouldSetAttribute(b,c)){var e=d.mutationMethod;e?e(a,c):null==c||d.hasBooleanValue&&!c||d.hasNumericValue&&isNaN(c)||d.hasPositiveNumericValue&&1>c||d.hasOverloadedBooleanValue&&!1===c?gc.deleteValueForProperty(a,\nb):d.mustUseProperty?a[d.propertyName]=c:(b=d.attributeName,(e=d.attributeNamespace)?a.setAttributeNS(e,b,\"\"+c):d.hasBooleanValue||d.hasOverloadedBooleanValue&&!0===c?a.setAttribute(b,\"\"):a.setAttribute(b,\"\"+c))}else gc.setValueForAttribute(a,b,A.shouldSetAttribute(b,c)?c:null)},setValueForAttribute:function(a,b,c){fc(b)&&(null==c?a.removeAttribute(b):a.setAttribute(b,\"\"+c))},deleteValueForAttribute:function(a,b){a.removeAttribute(b)},deleteValueForProperty:function(a,b){var c=A.getPropertyInfo(b);\nc?(b=c.mutationMethod)?b(a,void 0):c.mustUseProperty?a[c.propertyName]=c.hasBooleanValue?!1:\"\":a.removeAttribute(c.attributeName):a.removeAttribute(b)}},hc=gc,ic=Qa.ReactDebugCurrentFrame;function jc(){return null}\nvar kc={current:null,phase:null,resetCurrentFiber:function(){ic.getCurrentStack=null;kc.current=null;kc.phase=null},setCurrentFiber:function(a,b){ic.getCurrentStack=jc;kc.current=a;kc.phase=b},getCurrentFiberOwnerName:function(){return null},getCurrentFiberStackAddendum:jc},lc=kc,mc={getHostProps:function(a,b){var c=b.value,d=b.checked;return n({type:void 0,step:void 0,min:void 0,max:void 0},b,{defaultChecked:void 0,defaultValue:void 0,value:null!=c?c:a._wrapperState.initialValue,checked:null!=d?\nd:a._wrapperState.initialChecked})},initWrapperState:function(a,b){var c=b.defaultValue;a._wrapperState={initialChecked:null!=b.checked?b.checked:b.defaultChecked,initialValue:null!=b.value?b.value:c,controlled:\"checkbox\"===b.type||\"radio\"===b.type?null!=b.checked:null!=b.value}},updateWrapper:function(a,b){var c=b.checked;null!=c&&hc.setValueForProperty(a,\"checked\",c||!1);c=b.value;if(null!=c)if(0===c&&\"\"===a.value)a.value=\"0\";else if(\"number\"===b.type){if(b=parseFloat(a.value)||0,c!=b||c==b&&a.value!=\nc)a.value=\"\"+c}else a.value!==\"\"+c&&(a.value=\"\"+c);else null==b.value&&null!=b.defaultValue&&a.defaultValue!==\"\"+b.defaultValue&&(a.defaultValue=\"\"+b.defaultValue),null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)},postMountWrapper:function(a,b){switch(b.type){case \"submit\":case \"reset\":break;case \"color\":case \"date\":case \"datetime\":case \"datetime-local\":case \"month\":case \"time\":case \"week\":a.value=\"\";a.value=a.defaultValue;break;default:a.value=a.value}b=a.name;\"\"!==\nb&&(a.name=\"\");a.defaultChecked=!a.defaultChecked;a.defaultChecked=!a.defaultChecked;\"\"!==b&&(a.name=b)},restoreControlledState:function(a,b){mc.updateWrapper(a,b);var c=b.name;if(\"radio\"===b.type&&null!=c){for(b=a;b.parentNode;)b=b.parentNode;c=b.querySelectorAll(\"input[name\\x3d\"+JSON.stringify(\"\"+c)+'][type\\x3d\"radio\"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=G.getFiberCurrentPropsFromNode(d);e?void 0:w(\"90\");mc.updateWrapper(d,e)}}}}},qc=mc;\nfunction rc(a){var b=\"\";aa.Children.forEach(a,function(a){null==a||\"string\"!==typeof a&&\"number\"!==typeof a||(b+=a)});return b}var sc={validateProps:function(){},postMountWrapper:function(a,b){null!=b.value&&a.setAttribute(\"value\",b.value)},getHostProps:function(a,b){a=n({children:void 0},b);if(b=rc(b.children))a.children=b;return a}};\nfunction tc(a,b,c){a=a.options;if(b){b={};for(var d=0;d<c.length;d++)b[\"$\"+c[d]]=!0;for(c=0;c<a.length;c++)d=b.hasOwnProperty(\"$\"+a[c].value),a[c].selected!==d&&(a[c].selected=d)}else{c=\"\"+c;b=null;for(d=0;d<a.length;d++){if(a[d].value===c){a[d].selected=!0;return}null!==b||a[d].disabled||(b=a[d])}null!==b&&(b.selected=!0)}}\nvar uc={getHostProps:function(a,b){return n({},b,{value:void 0})},initWrapperState:function(a,b){var c=b.value;a._wrapperState={initialValue:null!=c?c:b.defaultValue,wasMultiple:!!b.multiple}},postMountWrapper:function(a,b){a.multiple=!!b.multiple;var c=b.value;null!=c?tc(a,!!b.multiple,c):null!=b.defaultValue&&tc(a,!!b.multiple,b.defaultValue)},postUpdateWrapper:function(a,b){a._wrapperState.initialValue=void 0;var c=a._wrapperState.wasMultiple;a._wrapperState.wasMultiple=!!b.multiple;var d=b.value;\nnull!=d?tc(a,!!b.multiple,d):c!==!!b.multiple&&(null!=b.defaultValue?tc(a,!!b.multiple,b.defaultValue):tc(a,!!b.multiple,b.multiple?[]:\"\"))},restoreControlledState:function(a,b){var c=b.value;null!=c&&tc(a,!!b.multiple,c)}},vc={getHostProps:function(a,b){null!=b.dangerouslySetInnerHTML?w(\"91\"):void 0;return n({},b,{value:void 0,defaultValue:void 0,children:\"\"+a._wrapperState.initialValue})},initWrapperState:function(a,b){var c=b.value,d=c;null==c&&(c=b.defaultValue,b=b.children,null!=b&&(null!=c?\nw(\"92\"):void 0,Array.isArray(b)&&(1>=b.length?void 0:w(\"93\"),b=b[0]),c=\"\"+b),null==c&&(c=\"\"),d=c);a._wrapperState={initialValue:\"\"+d}},updateWrapper:function(a,b){var c=b.value;null!=c&&(c=\"\"+c,c!==a.value&&(a.value=c),null==b.defaultValue&&(a.defaultValue=c));null!=b.defaultValue&&(a.defaultValue=b.defaultValue)},postMountWrapper:function(a){var b=a.textContent;b===a._wrapperState.initialValue&&(a.value=b)},restoreControlledState:function(a,b){vc.updateWrapper(a,b)}},wc=vc,xc=n({menuitem:!0},{area:!0,\nbase:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function yc(a,b){b&&(xc[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML?w(\"137\",a,\"\"):void 0),null!=b.dangerouslySetInnerHTML&&(null!=b.children?w(\"60\"):void 0,\"object\"===typeof b.dangerouslySetInnerHTML&&\"__html\"in b.dangerouslySetInnerHTML?void 0:w(\"61\")),null!=b.style&&\"object\"!==typeof b.style?w(\"62\",\"\"):void 0)}\nfunction zc(a){var b=a.type;return(a=a.nodeName)&&\"input\"===a.toLowerCase()&&(\"checkbox\"===b||\"radio\"===b)}\nfunction Ac(a){var b=zc(a)?\"checked\":\"value\",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=\"\"+a[b];if(!a.hasOwnProperty(b)&&\"function\"===typeof c.get&&\"function\"===typeof c.set)return Object.defineProperty(a,b,{enumerable:c.enumerable,configurable:!0,get:function(){return c.get.call(this)},set:function(a){d=\"\"+a;c.set.call(this,a)}}),{getValue:function(){return d},setValue:function(a){d=\"\"+a},stopTracking:function(){a._valueTracker=null;delete a[b]}}}\nvar Bc={_getTrackerFromNode:function(a){return a._valueTracker},track:function(a){a._valueTracker||(a._valueTracker=Ac(a))},updateValueIfChanged:function(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d=\"\";a&&(d=zc(a)?a.checked?\"true\":\"false\":a.value);a=d;return a!==c?(b.setValue(a),!0):!1},stopTracking:function(a){(a=a._valueTracker)&&a.stopTracking()}};\nfunction Cc(a,b){if(-1===a.indexOf(\"-\"))return\"string\"===typeof b.is;switch(a){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":return!1;default:return!0}}\nvar Dc=ka.Namespaces,Ec,Fc=function(a){return\"undefined\"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==Dc.svg||\"innerHTML\"in a)a.innerHTML=b;else for(Ec=Ec||document.createElement(\"div\"),Ec.innerHTML=\"\\x3csvg\\x3e\"+b+\"\\x3c/svg\\x3e\",b=Ec.firstChild;b.firstChild;)a.appendChild(b.firstChild)}),Gc=/[\"'&<>]/,Hc=F.TEXT_NODE;\nfunction Ic(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&c.nodeType===Hc){c.nodeValue=b;return}}a.textContent=b}\nl.canUseDOM&&(\"textContent\"in document.documentElement||(Ic=function(a,b){if(a.nodeType===Hc)a.nodeValue=b;else{if(\"boolean\"===typeof b||\"number\"===typeof b)b=\"\"+b;else{b=\"\"+b;var c=Gc.exec(b);if(c){var d=\"\",e,f=0;for(e=c.index;e<b.length;e++){switch(b.charCodeAt(e)){case 34:c=\"\\x26quot;\";break;case 38:c=\"\\x26amp;\";break;case 39:c=\"\\x26#x27;\";break;case 60:c=\"\\x26lt;\";break;case 62:c=\"\\x26gt;\";break;default:continue}f!==e&&(d+=b.substring(f,e));f=e+1;d+=c}b=f!==e?d+b.substring(f,e):d}}Fc(a,b)}}));\nvar Jc=Ic,Kc=lc.getCurrentFiberOwnerName,Lc=F.DOCUMENT_NODE,Mc=F.DOCUMENT_FRAGMENT_NODE,Nc=M.listenTo,Oc=sa.registrationNameModules,Pc=ka.Namespaces.html,Qc=ka.getIntrinsicNamespace;function Rc(a,b){Nc(b,a.nodeType===Lc||a.nodeType===Mc?a:a.ownerDocument)}\nvar Sc={topAbort:\"abort\",topCanPlay:\"canplay\",topCanPlayThrough:\"canplaythrough\",topDurationChange:\"durationchange\",topEmptied:\"emptied\",topEncrypted:\"encrypted\",topEnded:\"ended\",topError:\"error\",topLoadedData:\"loadeddata\",topLoadedMetadata:\"loadedmetadata\",topLoadStart:\"loadstart\",topPause:\"pause\",topPlay:\"play\",topPlaying:\"playing\",topProgress:\"progress\",topRateChange:\"ratechange\",topSeeked:\"seeked\",topSeeking:\"seeking\",topStalled:\"stalled\",topSuspend:\"suspend\",topTimeUpdate:\"timeupdate\",topVolumeChange:\"volumechange\",\ntopWaiting:\"waiting\"},N={createElement:function(a,b,c,d){c=c.nodeType===Lc?c:c.ownerDocument;d===Pc&&(d=Qc(a));d===Pc?\"script\"===a?(a=c.createElement(\"div\"),a.innerHTML=\"\\x3cscript\\x3e\\x3c/script\\x3e\",a=a.removeChild(a.firstChild)):a=\"string\"===typeof b.is?c.createElement(a,{is:b.is}):c.createElement(a):a=c.createElementNS(d,a);return a},createTextNode:function(a,b){return(b.nodeType===Lc?b:b.ownerDocument).createTextNode(a)},setInitialProperties:function(a,b,c,d){var e=Cc(b,c);switch(b){case \"iframe\":case \"object\":M.trapBubbledEvent(\"topLoad\",\n\"load\",a);var f=c;break;case \"video\":case \"audio\":for(f in Sc)Sc.hasOwnProperty(f)&&M.trapBubbledEvent(f,Sc[f],a);f=c;break;case \"source\":M.trapBubbledEvent(\"topError\",\"error\",a);f=c;break;case \"img\":case \"image\":M.trapBubbledEvent(\"topError\",\"error\",a);M.trapBubbledEvent(\"topLoad\",\"load\",a);f=c;break;case \"form\":M.trapBubbledEvent(\"topReset\",\"reset\",a);M.trapBubbledEvent(\"topSubmit\",\"submit\",a);f=c;break;case \"details\":M.trapBubbledEvent(\"topToggle\",\"toggle\",a);f=c;break;case \"input\":qc.initWrapperState(a,\nc);f=qc.getHostProps(a,c);M.trapBubbledEvent(\"topInvalid\",\"invalid\",a);Rc(d,\"onChange\");break;case \"option\":sc.validateProps(a,c);f=sc.getHostProps(a,c);break;case \"select\":uc.initWrapperState(a,c);f=uc.getHostProps(a,c);M.trapBubbledEvent(\"topInvalid\",\"invalid\",a);Rc(d,\"onChange\");break;case \"textarea\":wc.initWrapperState(a,c);f=wc.getHostProps(a,c);M.trapBubbledEvent(\"topInvalid\",\"invalid\",a);Rc(d,\"onChange\");break;default:f=c}yc(b,f,Kc);var g=f,h;for(h in g)if(g.hasOwnProperty(h)){var k=g[h];\"style\"===\nh?bc.setValueForStyles(a,k):\"dangerouslySetInnerHTML\"===h?(k=k?k.__html:void 0,null!=k&&Fc(a,k)):\"children\"===h?\"string\"===typeof k?Jc(a,k):\"number\"===typeof k&&Jc(a,\"\"+k):\"suppressContentEditableWarning\"!==h&&(Oc.hasOwnProperty(h)?null!=k&&Rc(d,h):e?hc.setValueForAttribute(a,h,k):null!=k&&hc.setValueForProperty(a,h,k))}switch(b){case \"input\":Bc.track(a);qc.postMountWrapper(a,c);break;case \"textarea\":Bc.track(a);wc.postMountWrapper(a,c);break;case \"option\":sc.postMountWrapper(a,c);break;case \"select\":uc.postMountWrapper(a,\nc);break;default:\"function\"===typeof f.onClick&&(a.onclick=ca)}},diffProperties:function(a,b,c,d,e){var f=null;switch(b){case \"input\":c=qc.getHostProps(a,c);d=qc.getHostProps(a,d);f=[];break;case \"option\":c=sc.getHostProps(a,c);d=sc.getHostProps(a,d);f=[];break;case \"select\":c=uc.getHostProps(a,c);d=uc.getHostProps(a,d);f=[];break;case \"textarea\":c=wc.getHostProps(a,c);d=wc.getHostProps(a,d);f=[];break;default:\"function\"!==typeof c.onClick&&\"function\"===typeof d.onClick&&(a.onclick=ca)}yc(b,d,Kc);\nvar g,h;a=null;for(g in c)if(!d.hasOwnProperty(g)&&c.hasOwnProperty(g)&&null!=c[g])if(\"style\"===g)for(h in b=c[g],b)b.hasOwnProperty(h)&&(a||(a={}),a[h]=\"\");else\"dangerouslySetInnerHTML\"!==g&&\"children\"!==g&&\"suppressContentEditableWarning\"!==g&&(Oc.hasOwnProperty(g)?f||(f=[]):(f=f||[]).push(g,null));for(g in d){var k=d[g];b=null!=c?c[g]:void 0;if(d.hasOwnProperty(g)&&k!==b&&(null!=k||null!=b))if(\"style\"===g)if(b){for(h in b)!b.hasOwnProperty(h)||k&&k.hasOwnProperty(h)||(a||(a={}),a[h]=\"\");for(h in k)k.hasOwnProperty(h)&&\nb[h]!==k[h]&&(a||(a={}),a[h]=k[h])}else a||(f||(f=[]),f.push(g,a)),a=k;else\"dangerouslySetInnerHTML\"===g?(k=k?k.__html:void 0,b=b?b.__html:void 0,null!=k&&b!==k&&(f=f||[]).push(g,\"\"+k)):\"children\"===g?b===k||\"string\"!==typeof k&&\"number\"!==typeof k||(f=f||[]).push(g,\"\"+k):\"suppressContentEditableWarning\"!==g&&(Oc.hasOwnProperty(g)?(null!=k&&Rc(e,g),f||b===k||(f=[])):(f=f||[]).push(g,k))}a&&(f=f||[]).push(\"style\",a);return f},updateProperties:function(a,b,c,d,e){Cc(c,d);d=Cc(c,e);for(var f=0;f<b.length;f+=\n2){var g=b[f],h=b[f+1];\"style\"===g?bc.setValueForStyles(a,h):\"dangerouslySetInnerHTML\"===g?Fc(a,h):\"children\"===g?Jc(a,h):d?null!=h?hc.setValueForAttribute(a,g,h):hc.deleteValueForAttribute(a,g):null!=h?hc.setValueForProperty(a,g,h):hc.deleteValueForProperty(a,g)}switch(c){case \"input\":qc.updateWrapper(a,e);Bc.updateValueIfChanged(a);break;case \"textarea\":wc.updateWrapper(a,e);break;case \"select\":uc.postUpdateWrapper(a,e)}},diffHydratedProperties:function(a,b,c,d,e){switch(b){case \"iframe\":case \"object\":M.trapBubbledEvent(\"topLoad\",\n\"load\",a);break;case \"video\":case \"audio\":for(var f in Sc)Sc.hasOwnProperty(f)&&M.trapBubbledEvent(f,Sc[f],a);break;case \"source\":M.trapBubbledEvent(\"topError\",\"error\",a);break;case \"img\":case \"image\":M.trapBubbledEvent(\"topError\",\"error\",a);M.trapBubbledEvent(\"topLoad\",\"load\",a);break;case \"form\":M.trapBubbledEvent(\"topReset\",\"reset\",a);M.trapBubbledEvent(\"topSubmit\",\"submit\",a);break;case \"details\":M.trapBubbledEvent(\"topToggle\",\"toggle\",a);break;case \"input\":qc.initWrapperState(a,c);M.trapBubbledEvent(\"topInvalid\",\n\"invalid\",a);Rc(e,\"onChange\");break;case \"option\":sc.validateProps(a,c);break;case \"select\":uc.initWrapperState(a,c);M.trapBubbledEvent(\"topInvalid\",\"invalid\",a);Rc(e,\"onChange\");break;case \"textarea\":wc.initWrapperState(a,c),M.trapBubbledEvent(\"topInvalid\",\"invalid\",a),Rc(e,\"onChange\")}yc(b,c,Kc);d=null;for(var g in c)c.hasOwnProperty(g)&&(f=c[g],\"children\"===g?\"string\"===typeof f?a.textContent!==f&&(d=[\"children\",f]):\"number\"===typeof f&&a.textContent!==\"\"+f&&(d=[\"children\",\"\"+f]):Oc.hasOwnProperty(g)&&\nnull!=f&&Rc(e,g));switch(b){case \"input\":Bc.track(a);qc.postMountWrapper(a,c);break;case \"textarea\":Bc.track(a);wc.postMountWrapper(a,c);break;case \"select\":case \"option\":break;default:\"function\"===typeof c.onClick&&(a.onclick=ca)}return d},diffHydratedText:function(a,b){return a.nodeValue!==b},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(a,\nb,c){switch(b){case \"input\":qc.restoreControlledState(a,c);break;case \"textarea\":wc.restoreControlledState(a,c);break;case \"select\":uc.restoreControlledState(a,c)}}},Tc=void 0;\nif(l.canUseDOM)if(\"function\"!==typeof requestIdleCallback){var Uc=null,Vc=null,Wc=!1,Xc=!1,Yc=0,Zc=33,$c=33,ad={timeRemaining:\"object\"===typeof performance&&\"function\"===typeof performance.now?function(){return Yc-performance.now()}:function(){return Yc-Date.now()}},bd=\"__reactIdleCallback$\"+Math.random().toString(36).slice(2);window.addEventListener(\"message\",function(a){a.source===window&&a.data===bd&&(Wc=!1,a=Vc,Vc=null,null!==a&&a(ad))},!1);var cd=function(a){Xc=!1;var b=a-Yc+$c;b<$c&&Zc<$c?(8>\nb&&(b=8),$c=b<Zc?Zc:b):Zc=b;Yc=a+$c;Wc||(Wc=!0,window.postMessage(bd,\"*\"));b=Uc;Uc=null;null!==b&&b(a)};Tc=function(a){Vc=a;Xc||(Xc=!0,requestAnimationFrame(cd));return 0}}else Tc=requestIdleCallback;else Tc=function(a){setTimeout(function(){a({timeRemaining:function(){return Infinity}})});return 0};\nvar dd={rIC:Tc},ed={enableAsyncSubtreeAPI:!0},Q={NoWork:0,SynchronousPriority:1,TaskPriority:2,HighPriority:3,LowPriority:4,OffscreenPriority:5},fd=J.Callback,gd=Q.NoWork,hd=Q.SynchronousPriority,id=Q.TaskPriority,jd=E.ClassComponent,kd=E.HostRoot,md=void 0,nd=void 0;function od(a,b){return a!==id&&a!==hd||b!==id&&b!==hd?a===gd&&b!==gd?-255:a!==gd&&b===gd?255:a-b:0}function pd(){return{first:null,last:null,hasForceUpdate:!1,callbackList:null}}\nfunction qd(a,b,c,d){null!==c?c.next=b:(b.next=a.first,a.first=b);null!==d?b.next=d:a.last=b}function rd(a,b){b=b.priorityLevel;var c=null;if(null!==a.last&&0>=od(a.last.priorityLevel,b))c=a.last;else for(a=a.first;null!==a&&0>=od(a.priorityLevel,b);)c=a,a=a.next;return c}\nfunction sd(a,b){var c=a.alternate,d=a.updateQueue;null===d&&(d=a.updateQueue=pd());null!==c?(a=c.updateQueue,null===a&&(a=c.updateQueue=pd())):a=null;md=d;nd=a!==d?a:null;var e=md;c=nd;var f=rd(e,b),g=null!==f?f.next:e.first;if(null===c)return qd(e,b,f,g),null;d=rd(c,b);a=null!==d?d.next:c.first;qd(e,b,f,g);if(g===a&&null!==g||f===d&&null!==f)return null===d&&(c.first=b),null===a&&(c.last=null),null;b={priorityLevel:b.priorityLevel,partialState:b.partialState,callback:b.callback,isReplace:b.isReplace,\nisForced:b.isForced,isTopLevelUnmount:b.isTopLevelUnmount,next:null};qd(c,b,d,a);return b}function td(a,b,c,d){a=a.partialState;return\"function\"===typeof a?a.call(b,c,d):a}\nvar ud={addUpdate:function(a,b,c,d){sd(a,{priorityLevel:d,partialState:b,callback:c,isReplace:!1,isForced:!1,isTopLevelUnmount:!1,next:null})},addReplaceUpdate:function(a,b,c,d){sd(a,{priorityLevel:d,partialState:b,callback:c,isReplace:!0,isForced:!1,isTopLevelUnmount:!1,next:null})},addForceUpdate:function(a,b,c){sd(a,{priorityLevel:c,partialState:null,callback:b,isReplace:!1,isForced:!0,isTopLevelUnmount:!1,next:null})},getUpdatePriority:function(a){var b=a.updateQueue;return null===b||a.tag!==\njd&&a.tag!==kd?gd:null!==b.first?b.first.priorityLevel:gd},addTopLevelUpdate:function(a,b,c,d){var e=null===b.element;b={priorityLevel:d,partialState:b,callback:c,isReplace:!1,isForced:!1,isTopLevelUnmount:e,next:null};a=sd(a,b);e&&(e=md,c=nd,null!==e&&null!==b.next&&(b.next=null,e.last=b),null!==c&&null!==a&&null!==a.next&&(a.next=null,c.last=b))},beginUpdateQueue:function(a,b,c,d,e,f,g){null!==a&&a.updateQueue===c&&(c=b.updateQueue={first:c.first,last:c.last,callbackList:null,hasForceUpdate:!1});\na=c.callbackList;for(var h=c.hasForceUpdate,k=!0,p=c.first;null!==p&&0>=od(p.priorityLevel,g);){c.first=p.next;null===c.first&&(c.last=null);var x;if(p.isReplace)e=td(p,d,e,f),k=!0;else if(x=td(p,d,e,f))e=k?n({},e,x):n(e,x),k=!1;p.isForced&&(h=!0);null===p.callback||p.isTopLevelUnmount&&null!==p.next||(a=null!==a?a:[],a.push(p.callback),b.effectTag|=fd);p=p.next}c.callbackList=a;c.hasForceUpdate=h;null!==c.first||null!==a||h||(b.updateQueue=null);return e},commitCallbacks:function(a,b,c){a=b.callbackList;\nif(null!==a)for(b.callbackList=null,b=0;b<a.length;b++){var d=a[b];\"function\"!==typeof d?w(\"191\",d):void 0;d.call(c)}}},vd=[],wd=-1,xd={createCursor:function(a){return{current:a}},isEmpty:function(){return-1===wd},pop:function(a){0>wd||(a.current=vd[wd],vd[wd]=null,wd--)},push:function(a,b){wd++;vd[wd]=a.current;a.current=b},reset:function(){for(;-1<wd;)vd[wd]=null,wd--}},yd=bb.isFiberMounted,zd=E.ClassComponent,Ad=E.HostRoot,Bd=xd.createCursor,Cd=xd.pop,Dd=xd.push,Ed=Bd(da),Fd=Bd(!1),Ld=da;\nfunction Md(a,b,c){a=a.stateNode;a.__reactInternalMemoizedUnmaskedChildContext=b;a.__reactInternalMemoizedMaskedChildContext=c}function Nd(a){return a.tag===zd&&null!=a.type.childContextTypes}function Od(a,b){var c=a.stateNode,d=a.type.childContextTypes;if(\"function\"!==typeof c.getChildContext)return b;c=c.getChildContext();for(var e in c)e in d?void 0:w(\"108\",Ra(a)||\"Unknown\",e);return n({},b,c)}\nvar R={getUnmaskedContext:function(a){return Nd(a)?Ld:Ed.current},cacheContext:Md,getMaskedContext:function(a,b){var c=a.type.contextTypes;if(!c)return da;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&Md(a,b,e);return e},hasContextChanged:function(){return Fd.current},isContextConsumer:function(a){return a.tag===zd&&null!=a.type.contextTypes},isContextProvider:Nd,popContextProvider:function(a){Nd(a)&&\n(Cd(Fd,a),Cd(Ed,a))},popTopLevelContextObject:function(a){Cd(Fd,a);Cd(Ed,a)},pushTopLevelContextObject:function(a,b,c){null!=Ed.cursor?w(\"168\"):void 0;Dd(Ed,b,a);Dd(Fd,c,a)},processChildContext:Od,pushContextProvider:function(a){if(!Nd(a))return!1;var b=a.stateNode;b=b&&b.__reactInternalMemoizedMergedChildContext||da;Ld=Ed.current;Dd(Ed,b,a);Dd(Fd,Fd.current,a);return!0},invalidateContextProvider:function(a,b){var c=a.stateNode;c?void 0:w(\"169\");if(b){var d=Od(a,Ld,!0);c.__reactInternalMemoizedMergedChildContext=\nd;Cd(Fd,a);Cd(Ed,a);Dd(Ed,d,a)}else Cd(Fd,a);Dd(Fd,b,a)},resetContext:function(){Ld=da;Ed.current=da;Fd.current=!1},findCurrentUnmaskedContext:function(a){for(yd(a)&&a.tag===zd?void 0:w(\"170\");a.tag!==Ad;){if(Nd(a))return a.stateNode.__reactInternalMemoizedMergedChildContext;(a=a[\"return\"])?void 0:w(\"171\")}return a.stateNode.context}},Pd={NoContext:0,AsyncUpdates:1},Qd=E.IndeterminateComponent,Rd=E.ClassComponent,Sd=E.HostRoot,Td=E.HostComponent,Ud=E.HostText,Vd=E.HostPortal,Wd=E.CoroutineComponent,\nXd=E.YieldComponent,Yd=E.Fragment,Zd=Q.NoWork,$d=Pd.NoContext,ae=J.NoEffect;function be(a,b,c){this.tag=a;this.key=b;this.stateNode=this.type=null;this.sibling=this.child=this[\"return\"]=null;this.index=0;this.memoizedState=this.updateQueue=this.memoizedProps=this.pendingProps=this.ref=null;this.internalContextTag=c;this.effectTag=ae;this.lastEffect=this.firstEffect=this.nextEffect=null;this.pendingWorkPriority=Zd;this.alternate=null}\nfunction ce(a,b,c){var d=void 0;\"function\"===typeof a?(d=a.prototype&&a.prototype.isReactComponent?new be(Rd,b,c):new be(Qd,b,c),d.type=a):\"string\"===typeof a?(d=new be(Td,b,c),d.type=a):\"object\"===typeof a&&null!==a&&\"number\"===typeof a.tag?d=a:w(\"130\",null==a?a:typeof a,\"\");return d}\nvar de={createWorkInProgress:function(a,b){var c=a.alternate;null===c?(c=new be(a.tag,a.key,a.internalContextTag),c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.effectTag=ae,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.pendingWorkPriority=b;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c},createHostRootFiber:function(){return new be(Sd,null,$d)},\ncreateFiberFromElement:function(a,b,c){b=ce(a.type,a.key,b,null);b.pendingProps=a.props;b.pendingWorkPriority=c;return b},createFiberFromFragment:function(a,b,c){b=new be(Yd,null,b);b.pendingProps=a;b.pendingWorkPriority=c;return b},createFiberFromText:function(a,b,c){b=new be(Ud,null,b);b.pendingProps=a;b.pendingWorkPriority=c;return b},createFiberFromElementType:ce,createFiberFromHostInstanceForDeletion:function(){var a=new be(Td,null,$d);a.type=\"DELETED\";return a},createFiberFromCoroutine:function(a,\nb,c){b=new be(Wd,a.key,b);b.type=a.handler;b.pendingProps=a;b.pendingWorkPriority=c;return b},createFiberFromYield:function(a,b){return new be(Xd,null,b)},createFiberFromPortal:function(a,b,c){b=new be(Vd,a.key,b);b.pendingProps=a.children||[];b.pendingWorkPriority=c;b.stateNode={containerInfo:a.containerInfo,implementation:a.implementation};return b},largerPriority:function(a,b){return a!==Zd&&(b===Zd||b>a)?a:b}},ee=de.createHostRootFiber,fe=E.IndeterminateComponent,ge=E.FunctionalComponent,he=E.ClassComponent,\nie=E.HostComponent,je,ke;\"function\"===typeof Symbol&&Symbol[\"for\"]?(je=Symbol[\"for\"](\"react.coroutine\"),ke=Symbol[\"for\"](\"react.yield\")):(je=60104,ke=60105);\nvar le={createCoroutine:function(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:je,key:null==d?null:\"\"+d,children:a,handler:b,props:c}},createYield:function(a){return{$$typeof:ke,value:a}},isCoroutine:function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===je},isYield:function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===ke},REACT_YIELD_TYPE:ke,REACT_COROUTINE_TYPE:je},me=\"function\"===typeof Symbol&&Symbol[\"for\"]&&Symbol[\"for\"](\"react.portal\")||\n60106,ne={createPortal:function(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:me,key:null==d?null:\"\"+d,children:a,containerInfo:b,implementation:c}},isPortal:function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===me},REACT_PORTAL_TYPE:me},oe=le.REACT_COROUTINE_TYPE,pe=le.REACT_YIELD_TYPE,qe=ne.REACT_PORTAL_TYPE,re=de.createWorkInProgress,se=de.createFiberFromElement,te=de.createFiberFromFragment,ue=de.createFiberFromText,ve=de.createFiberFromCoroutine,\nwe=de.createFiberFromYield,xe=de.createFiberFromPortal,ye=Array.isArray,ze=E.FunctionalComponent,Ae=E.ClassComponent,Be=E.HostText,Ce=E.HostPortal,De=E.CoroutineComponent,Ee=E.YieldComponent,Fe=E.Fragment,Ge=J.NoEffect,He=J.Placement,Ie=J.Deletion,Je=\"function\"===typeof Symbol&&Symbol.iterator,Ke=\"function\"===typeof Symbol&&Symbol[\"for\"]&&Symbol[\"for\"](\"react.element\")||60103;\nfunction Le(a){if(null===a||\"undefined\"===typeof a)return null;a=Je&&a[Je]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}\nfunction Me(a,b){var c=b.ref;if(null!==c&&\"function\"!==typeof c){if(b._owner){b=b._owner;var d=void 0;b&&(\"number\"===typeof b.tag?(b.tag!==Ae?w(\"110\"):void 0,d=b.stateNode):d=b.getPublicInstance());d?void 0:w(\"147\",c);var e=\"\"+c;if(null!==a&&null!==a.ref&&a.ref._stringRef===e)return a.ref;a=function(a){var b=d.refs===da?d.refs={}:d.refs;null===a?delete b[e]:b[e]=a};a._stringRef=e;return a}\"string\"!==typeof c?w(\"148\"):void 0;b._owner?void 0:w(\"149\",c)}return c}\nfunction Ne(a,b){\"textarea\"!==a.type&&w(\"31\",\"[object Object]\"===Object.prototype.toString.call(b)?\"object with keys {\"+Object.keys(b).join(\", \")+\"}\":b,\"\")}\nfunction Oe(a,b){function c(c,d){if(b){if(!a){if(null===d.alternate)return;d=d.alternate}var m=c.lastEffect;null!==m?(m.nextEffect=d,c.lastEffect=d):c.firstEffect=c.lastEffect=d;d.nextEffect=null;d.effectTag=Ie}}function d(a,d){if(!b)return null;for(;null!==d;)c(a,d),d=d.sibling;return null}function e(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function f(b,c){if(a)return b=re(b,c),b.index=0,b.sibling=null,b;b.pendingWorkPriority=c;b.effectTag=Ge;\nb.index=0;b.sibling=null;return b}function g(a,c,d){a.index=d;if(!b)return c;d=a.alternate;if(null!==d)return d=d.index,d<c?(a.effectTag=He,c):d;a.effectTag=He;return c}function h(a){b&&null===a.alternate&&(a.effectTag=He);return a}function k(a,b,c,d){if(null===b||b.tag!==Be)return c=ue(c,a.internalContextTag,d),c[\"return\"]=a,c;b=f(b,d);b.pendingProps=c;b[\"return\"]=a;return b}function p(a,b,c,d){if(null===b||b.type!==c.type)return d=se(c,a.internalContextTag,d),d.ref=Me(b,c),d[\"return\"]=a,d;d=f(b,\nd);d.ref=Me(b,c);d.pendingProps=c.props;d[\"return\"]=a;return d}function x(a,b,c,d){if(null===b||b.tag!==De)return c=ve(c,a.internalContextTag,d),c[\"return\"]=a,c;b=f(b,d);b.pendingProps=c;b[\"return\"]=a;return b}function S(a,b,c,d){if(null===b||b.tag!==Ee)return b=we(c,a.internalContextTag,d),b.type=c.value,b[\"return\"]=a,b;b=f(b,d);b.type=c.value;b[\"return\"]=a;return b}function D(a,b,c,d){if(null===b||b.tag!==Ce||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return c=\nxe(c,a.internalContextTag,d),c[\"return\"]=a,c;b=f(b,d);b.pendingProps=c.children||[];b[\"return\"]=a;return b}function y(a,b,c,d){if(null===b||b.tag!==Fe)return c=te(c,a.internalContextTag,d),c[\"return\"]=a,c;b=f(b,d);b.pendingProps=c;b[\"return\"]=a;return b}function B(a,b,c){if(\"string\"===typeof b||\"number\"===typeof b)return b=ue(\"\"+b,a.internalContextTag,c),b[\"return\"]=a,b;if(\"object\"===typeof b&&null!==b){switch(b.$$typeof){case Ke:return c=se(b,a.internalContextTag,c),c.ref=Me(null,b),c[\"return\"]=\na,c;case oe:return b=ve(b,a.internalContextTag,c),b[\"return\"]=a,b;case pe:return c=we(b,a.internalContextTag,c),c.type=b.value,c[\"return\"]=a,c;case qe:return b=xe(b,a.internalContextTag,c),b[\"return\"]=a,b}if(ye(b)||Le(b))return b=te(b,a.internalContextTag,c),b[\"return\"]=a,b;Ne(a,b)}return null}function H(a,b,c,d){var e=null!==b?b.key:null;if(\"string\"===typeof c||\"number\"===typeof c)return null!==e?null:k(a,b,\"\"+c,d);if(\"object\"===typeof c&&null!==c){switch(c.$$typeof){case Ke:return c.key===e?p(a,\nb,c,d):null;case oe:return c.key===e?x(a,b,c,d):null;case pe:return null===e?S(a,b,c,d):null;case qe:return c.key===e?D(a,b,c,d):null}if(ye(c)||Le(c))return null!==e?null:y(a,b,c,d);Ne(a,c)}return null}function C(a,b,c,d,e){if(\"string\"===typeof d||\"number\"===typeof d)return a=a.get(c)||null,k(b,a,\"\"+d,e);if(\"object\"===typeof d&&null!==d){switch(d.$$typeof){case Ke:return a=a.get(null===d.key?c:d.key)||null,p(b,a,d,e);case oe:return a=a.get(null===d.key?c:d.key)||null,x(b,a,d,e);case pe:return a=a.get(c)||\nnull,S(b,a,d,e);case qe:return a=a.get(null===d.key?c:d.key)||null,D(b,a,d,e)}if(ye(d)||Le(d))return a=a.get(c)||null,y(b,a,d,e);Ne(b,d)}return null}function Ca(a,f,h,k){for(var m=null,t=null,q=f,r=f=0,p=null;null!==q&&r<h.length;r++){q.index>r?(p=q,q=null):p=q.sibling;var v=H(a,q,h[r],k);if(null===v){null===q&&(q=p);break}b&&q&&null===v.alternate&&c(a,q);f=g(v,f,r);null===t?m=v:t.sibling=v;t=v;q=p}if(r===h.length)return d(a,q),m;if(null===q){for(;r<h.length;r++)if(q=B(a,h[r],k))f=g(q,f,r),null===\nt?m=q:t.sibling=q,t=q;return m}for(q=e(a,q);r<h.length;r++)if(p=C(q,a,r,h[r],k)){if(b&&null!==p.alternate)q[\"delete\"](null===p.key?r:p.key);f=g(p,f,r);null===t?m=p:t.sibling=p;t=p}b&&q.forEach(function(b){return c(a,b)});return m}function r(a,f,h,r){var m=Le(h);\"function\"!==typeof m?w(\"150\"):void 0;h=m.call(h);null==h?w(\"151\"):void 0;for(var t=m=null,q=f,k=f=0,p=null,v=h.next();null!==q&&!v.done;k++,v=h.next()){q.index>k?(p=q,q=null):p=q.sibling;var V=H(a,q,v.value,r);if(null===V){q||(q=p);break}b&&\nq&&null===V.alternate&&c(a,q);f=g(V,f,k);null===t?m=V:t.sibling=V;t=V;q=p}if(v.done)return d(a,q),m;if(null===q){for(;!v.done;k++,v=h.next())v=B(a,v.value,r),null!==v&&(f=g(v,f,k),null===t?m=v:t.sibling=v,t=v);return m}for(q=e(a,q);!v.done;k++,v=h.next())if(v=C(q,a,k,v.value,r),null!==v){if(b&&null!==v.alternate)q[\"delete\"](null===v.key?k:v.key);f=g(v,f,k);null===t?m=v:t.sibling=v;t=v}b&&q.forEach(function(b){return c(a,b)});return m}return function(a,b,e,g){var m=\"object\"===typeof e&&null!==e;if(m)switch(e.$$typeof){case Ke:a:{var C=\ne.key;for(m=b;null!==m;){if(m.key===C)if(m.type===e.type){d(a,m.sibling);b=f(m,g);b.ref=Me(m,e);b.pendingProps=e.props;b[\"return\"]=a;a=b;break a}else{d(a,m);break}else c(a,m);m=m.sibling}g=se(e,a.internalContextTag,g);g.ref=Me(b,e);g[\"return\"]=a;a=g}return h(a);case oe:a:{for(m=e.key;null!==b;){if(b.key===m)if(b.tag===De){d(a,b.sibling);b=f(b,g);b.pendingProps=e;b[\"return\"]=a;a=b;break a}else{d(a,b);break}else c(a,b);b=b.sibling}e=ve(e,a.internalContextTag,g);e[\"return\"]=a;a=e}return h(a);case pe:a:{if(null!==\nb)if(b.tag===Ee){d(a,b.sibling);b=f(b,g);b.type=e.value;b[\"return\"]=a;a=b;break a}else d(a,b);b=we(e,a.internalContextTag,g);b.type=e.value;b[\"return\"]=a;a=b}return h(a);case qe:a:{for(m=e.key;null!==b;){if(b.key===m)if(b.tag===Ce&&b.stateNode.containerInfo===e.containerInfo&&b.stateNode.implementation===e.implementation){d(a,b.sibling);b=f(b,g);b.pendingProps=e.children||[];b[\"return\"]=a;a=b;break a}else{d(a,b);break}else c(a,b);b=b.sibling}e=xe(e,a.internalContextTag,g);e[\"return\"]=a;a=e}return h(a)}if(\"string\"===\ntypeof e||\"number\"===typeof e)return e=\"\"+e,null!==b&&b.tag===Be?(d(a,b.sibling),b=f(b,g),b.pendingProps=e,b[\"return\"]=a,a=b):(d(a,b),e=ue(e,a.internalContextTag,g),e[\"return\"]=a,a=e),h(a);if(ye(e))return Ca(a,b,e,g);if(Le(e))return r(a,b,e,g);m&&Ne(a,e);if(\"undefined\"===typeof e)switch(a.tag){case Ae:case ze:e=a.type,w(\"152\",e.displayName||e.name||\"Component\")}return d(a,b)}}\nvar Pe=Oe(!0,!0),Qe=Oe(!1,!0),Re=Oe(!1,!1),Se={reconcileChildFibers:Pe,reconcileChildFibersInPlace:Qe,mountChildFibersInPlace:Re,cloneChildFibers:function(a,b){null!==a&&b.child!==a.child?w(\"153\"):void 0;if(null!==b.child){a=b.child;var c=re(a,a.pendingWorkPriority);c.pendingProps=a.pendingProps;b.child=c;for(c[\"return\"]=b;null!==a.sibling;)a=a.sibling,c=c.sibling=re(a,a.pendingWorkPriority),c.pendingProps=a.pendingProps,c[\"return\"]=b;c.sibling=null}}},Te=J.Update,Ue=Pd.AsyncUpdates,Ve=R.cacheContext,\nWe=R.getMaskedContext,Xe=R.getUnmaskedContext,Ye=R.isContextConsumer,Ze=ud.addUpdate,$e=ud.addReplaceUpdate,af=ud.addForceUpdate,bf=ud.beginUpdateQueue,cf=R.hasContextChanged,df=bb.isMounted;\nfunction ef(a,b,c,d){function e(a,b){b.updater=f;a.stateNode=b;Pa.set(b,a)}var f={isMounted:df,enqueueSetState:function(c,d,e){c=Pa.get(c);var f=b(c,!1);Ze(c,d,void 0===e?null:e,f);a(c,f)},enqueueReplaceState:function(c,d,e){c=Pa.get(c);var f=b(c,!1);$e(c,d,void 0===e?null:e,f);a(c,f)},enqueueForceUpdate:function(c,d){c=Pa.get(c);var e=b(c,!1);af(c,void 0===d?null:d,e);a(c,e)}};return{adoptClassInstance:e,constructClassInstance:function(a,b){var c=a.type,d=Xe(a),f=Ye(a),g=f?We(a,d):da;b=new c(b,g);\ne(a,b);f&&Ve(a,d,g);return b},mountClassInstance:function(a,b){var c=a.alternate,d=a.stateNode,e=d.state||null,g=a.pendingProps;g?void 0:w(\"158\");var h=Xe(a);d.props=g;d.state=e;d.refs=da;d.context=We(a,h);ed.enableAsyncSubtreeAPI&&null!=a.type&&null!=a.type.prototype&&!0===a.type.prototype.unstable_isAsyncReactComponent&&(a.internalContextTag|=Ue);\"function\"===typeof d.componentWillMount&&(h=d.state,d.componentWillMount(),h!==d.state&&f.enqueueReplaceState(d,d.state,null),h=a.updateQueue,null!==\nh&&(d.state=bf(c,a,h,d,e,g,b)));\"function\"===typeof d.componentDidMount&&(a.effectTag|=Te)},updateClassInstance:function(a,b,e){var g=b.stateNode;g.props=b.memoizedProps;g.state=b.memoizedState;var h=b.memoizedProps,k=b.pendingProps;k||(k=h,null==k?w(\"159\"):void 0);var D=g.context,y=Xe(b);y=We(b,y);\"function\"!==typeof g.componentWillReceiveProps||h===k&&D===y||(D=g.state,g.componentWillReceiveProps(k,y),g.state!==D&&f.enqueueReplaceState(g,g.state,null));D=b.memoizedState;e=null!==b.updateQueue?bf(a,\nb,b.updateQueue,g,D,k,e):D;if(!(h!==k||D!==e||cf()||null!==b.updateQueue&&b.updateQueue.hasForceUpdate))return\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&D===a.memoizedState||(b.effectTag|=Te),!1;var B=k;if(null===h||null!==b.updateQueue&&b.updateQueue.hasForceUpdate)B=!0;else{var H=b.stateNode,C=b.type;B=\"function\"===typeof H.shouldComponentUpdate?H.shouldComponentUpdate(B,e,y):C.prototype&&C.prototype.isPureReactComponent?!ea(h,B)||!ea(D,e):!0}B?(\"function\"===typeof g.componentWillUpdate&&\ng.componentWillUpdate(k,e,y),\"function\"===typeof g.componentDidUpdate&&(b.effectTag|=Te)):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&D===a.memoizedState||(b.effectTag|=Te),c(b,k),d(b,e));g.props=k;g.state=e;g.context=y;return B}}}\nvar ff=Se.mountChildFibersInPlace,gf=Se.reconcileChildFibers,hf=Se.reconcileChildFibersInPlace,jf=Se.cloneChildFibers,kf=ud.beginUpdateQueue,lf=R.getMaskedContext,mf=R.getUnmaskedContext,nf=R.hasContextChanged,of=R.pushContextProvider,pf=R.pushTopLevelContextObject,qf=R.invalidateContextProvider,rf=E.IndeterminateComponent,sf=E.FunctionalComponent,tf=E.ClassComponent,uf=E.HostRoot,wf=E.HostComponent,xf=E.HostText,yf=E.HostPortal,zf=E.CoroutineComponent,Af=E.CoroutineHandlerPhase,Bf=E.YieldComponent,\nCf=E.Fragment,Df=Q.NoWork,Ef=Q.OffscreenPriority,Ff=J.PerformedWork,Gf=J.Placement,Hf=J.ContentReset,If=J.Err,Jf=J.Ref,Kf=Qa.ReactCurrentOwner;\nfunction Lf(a,b,c,d,e){function f(a,b,c){g(a,b,c,b.pendingWorkPriority)}function g(a,b,c,d){b.child=null===a?ff(b,b.child,c,d):a.child===b.child?gf(b,b.child,c,d):hf(b,b.child,c,d)}function h(a,b){var c=b.ref;null===c||a&&a.ref===c||(b.effectTag|=Jf)}function k(a,b,c,d){h(a,b);if(!c)return d&&qf(b,!1),x(a,b);c=b.stateNode;Kf.current=b;var e=c.render();b.effectTag|=Ff;f(a,b,e);b.memoizedState=c.state;b.memoizedProps=c.props;d&&qf(b,!0);return b.child}function p(a){var b=a.stateNode;b.pendingContext?\npf(a,b.pendingContext,b.pendingContext!==b.context):b.context&&pf(a,b.context,!1);C(a,b.containerInfo)}function x(a,b){jf(a,b);return b.child}function S(a,b){switch(b.tag){case uf:p(b);break;case tf:of(b);break;case yf:C(b,b.stateNode.containerInfo)}return null}var D=a.shouldSetTextContent,y=a.useSyncScheduling,B=a.shouldDeprioritizeSubtree,H=b.pushHostContext,C=b.pushHostContainer,Ca=c.enterHydrationState,r=c.resetHydrationState,m=c.tryToClaimNextHydratableInstance;a=ef(d,e,function(a,b){a.memoizedProps=\nb},function(a,b){a.memoizedState=b});var t=a.adoptClassInstance,v=a.constructClassInstance,V=a.mountClassInstance,ld=a.updateClassInstance;return{beginWork:function(a,b,c){if(b.pendingWorkPriority===Df||b.pendingWorkPriority>c)return S(a,b);switch(b.tag){case rf:null!==a?w(\"155\"):void 0;var d=b.type,e=b.pendingProps,g=mf(b);g=lf(b,g);d=d(e,g);b.effectTag|=Ff;\"object\"===typeof d&&null!==d&&\"function\"===typeof d.render?(b.tag=tf,e=of(b),t(b,d),V(b,c),b=k(a,b,!0,e)):(b.tag=sf,f(a,b,d),b.memoizedProps=\ne,b=b.child);return b;case sf:a:{e=b.type;c=b.pendingProps;d=b.memoizedProps;if(nf())null===c&&(c=d);else if(null===c||d===c){b=x(a,b);break a}d=mf(b);d=lf(b,d);e=e(c,d);b.effectTag|=Ff;f(a,b,e);b.memoizedProps=c;b=b.child}return b;case tf:return e=of(b),d=void 0,null===a?b.stateNode?w(\"153\"):(v(b,b.pendingProps),V(b,c),d=!0):d=ld(a,b,c),k(a,b,d,e);case uf:return p(b),d=b.updateQueue,null!==d?(e=b.memoizedState,d=kf(a,b,d,null,e,null,c),e===d?(r(),b=x(a,b)):(e=d.element,null!==a&&null!==a.child||\n!Ca(b)?(r(),f(a,b,e)):(b.effectTag|=Gf,b.child=ff(b,b.child,e,c)),b.memoizedState=d,b=b.child)):(r(),b=x(a,b)),b;case wf:H(b);null===a&&m(b);e=b.type;var q=b.memoizedProps;d=b.pendingProps;null===d&&(d=q,null===d?w(\"154\"):void 0);g=null!==a?a.memoizedProps:null;nf()||null!==d&&q!==d?(q=d.children,D(e,d)?q=null:g&&D(e,g)&&(b.effectTag|=Hf),h(a,b),c!==Ef&&!y&&B(e,d)?(b.pendingWorkPriority=Ef,b=null):(f(a,b,q),b.memoizedProps=d,b=b.child)):b=x(a,b);return b;case xf:return null===a&&m(b),a=b.pendingProps,\nnull===a&&(a=b.memoizedProps),b.memoizedProps=a,null;case Af:b.tag=zf;case zf:c=b.pendingProps;if(nf())null===c&&(c=a&&a.memoizedProps,null===c?w(\"154\"):void 0);else if(null===c||b.memoizedProps===c)c=b.memoizedProps;e=c.children;d=b.pendingWorkPriority;b.stateNode=null===a?ff(b,b.stateNode,e,d):a.child===b.child?gf(b,b.stateNode,e,d):hf(b,b.stateNode,e,d);b.memoizedProps=c;return b.stateNode;case Bf:return null;case yf:a:{C(b,b.stateNode.containerInfo);c=b.pendingWorkPriority;e=b.pendingProps;if(nf())null===\ne&&(e=a&&a.memoizedProps,null==e?w(\"154\"):void 0);else if(null===e||b.memoizedProps===e){b=x(a,b);break a}null===a?b.child=hf(b,b.child,e,c):f(a,b,e);b.memoizedProps=e;b=b.child}return b;case Cf:a:{c=b.pendingProps;if(nf())null===c&&(c=b.memoizedProps);else if(null===c||b.memoizedProps===c){b=x(a,b);break a}f(a,b,c);b.memoizedProps=c;b=b.child}return b;default:w(\"156\")}},beginFailedWork:function(a,b,c){switch(b.tag){case tf:of(b);break;case uf:p(b);break;default:w(\"157\")}b.effectTag|=If;null===a?\nb.child=null:b.child!==a.child&&(b.child=a.child);if(b.pendingWorkPriority===Df||b.pendingWorkPriority>c)return S(a,b);b.firstEffect=null;b.lastEffect=null;g(a,b,null,c);b.tag===tf&&(a=b.stateNode,b.memoizedProps=a.props,b.memoizedState=a.state);return b.child}}}\nvar Mf=Se.reconcileChildFibers,Nf=R.popContextProvider,Of=R.popTopLevelContextObject,Pf=E.IndeterminateComponent,Qf=E.FunctionalComponent,Rf=E.ClassComponent,Sf=E.HostRoot,Tf=E.HostComponent,Uf=E.HostText,Vf=E.HostPortal,Wf=E.CoroutineComponent,Xf=E.CoroutineHandlerPhase,Yf=E.YieldComponent,Zf=E.Fragment,ag=J.Placement,bg=J.Ref,cg=J.Update,dg=Q.OffscreenPriority;\nfunction eg(a,b,c){var d=a.createInstance,e=a.createTextInstance,f=a.appendInitialChild,g=a.finalizeInitialChildren,h=a.prepareUpdate,k=b.getRootHostContainer,p=b.popHostContext,x=b.getHostContext,S=b.popHostContainer,D=c.prepareToHydrateHostInstance,y=c.prepareToHydrateHostTextInstance,B=c.popHydrationState;return{completeWork:function(a,b,c){var r=b.pendingProps;if(null===r)r=b.memoizedProps;else if(b.pendingWorkPriority!==dg||c===dg)b.pendingProps=null;switch(b.tag){case Qf:return null;case Rf:return Nf(b),\nnull;case Sf:S(b);Of(b);r=b.stateNode;r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null);if(null===a||null===a.child)B(b),b.effectTag&=~ag;return null;case Tf:p(b);c=k();var m=b.type;if(null!==a&&null!=b.stateNode){var t=a.memoizedProps,C=b.stateNode,V=x();r=h(C,m,t,r,c,V);if(b.updateQueue=r)b.effectTag|=cg;a.ref!==b.ref&&(b.effectTag|=bg)}else{if(!r)return null===b.stateNode?w(\"166\"):void 0,null;a=x();if(B(b))D(b,c,a)&&(b.effectTag|=cg);else{a=d(m,r,c,a,b);a:for(t=b.child;null!==\nt;){if(t.tag===Tf||t.tag===Uf)f(a,t.stateNode);else if(t.tag!==Vf&&null!==t.child){t=t.child;continue}if(t===b)break a;for(;null===t.sibling;){if(null===t[\"return\"]||t[\"return\"]===b)break a;t=t[\"return\"]}t=t.sibling}g(a,m,r,c)&&(b.effectTag|=cg);b.stateNode=a}null!==b.ref&&(b.effectTag|=bg)}return null;case Uf:if(a&&null!=b.stateNode)a.memoizedProps!==r&&(b.effectTag|=cg);else{if(\"string\"!==typeof r)return null===b.stateNode?w(\"166\"):void 0,null;a=k();c=x();B(b)?y(b)&&(b.effectTag|=cg):b.stateNode=\ne(r,a,c,b)}return null;case Wf:(r=b.memoizedProps)?void 0:w(\"165\");b.tag=Xf;c=[];a:for((m=b.stateNode)&&(m[\"return\"]=b);null!==m;){if(m.tag===Tf||m.tag===Uf||m.tag===Vf)w(\"164\");else if(m.tag===Yf)c.push(m.type);else if(null!==m.child){m.child[\"return\"]=m;m=m.child;continue}for(;null===m.sibling;){if(null===m[\"return\"]||m[\"return\"]===b)break a;m=m[\"return\"]}m.sibling[\"return\"]=m[\"return\"];m=m.sibling}m=r.handler;r=m(r.props,c);b.child=Mf(b,null!==a?a.child:null,r,b.pendingWorkPriority);return b.child;\ncase Xf:return b.tag=Wf,null;case Yf:return null;case Zf:return null;case Vf:return b.effectTag|=cg,S(b),null;case Pf:w(\"167\");default:w(\"156\")}}}}var fg=null,gg=null;function hg(a){return function(b){try{return a(b)}catch(c){}}}\nvar ig={injectInternals:function(a){if(\"undefined\"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!b.supportsFiber)return!0;try{var c=b.inject(a);fg=hg(function(a){return b.onCommitFiberRoot(c,a)});gg=hg(function(a){return b.onCommitFiberUnmount(c,a)})}catch(d){}return!0},onCommitRoot:function(a){\"function\"===typeof fg&&fg(a)},onCommitUnmount:function(a){\"function\"===typeof gg&&gg(a)}},jg=E.ClassComponent,kg=E.HostRoot,lg=E.HostComponent,mg=E.HostText,ng=\nE.HostPortal,og=E.CoroutineComponent,pg=ud.commitCallbacks,qg=ig.onCommitUnmount,rg=J.Placement,sg=J.Update,tg=J.Callback,ug=J.ContentReset;\nfunction vg(a,b){function c(a){var c=a.ref;if(null!==c)try{c(null)}catch(t){b(a,t)}}function d(a){return a.tag===lg||a.tag===kg||a.tag===ng}function e(a){for(var b=a;;)if(g(b),null!==b.child&&b.tag!==ng)b.child[\"return\"]=b,b=b.child;else{if(b===a)break;for(;null===b.sibling;){if(null===b[\"return\"]||b[\"return\"]===a)return;b=b[\"return\"]}b.sibling[\"return\"]=b[\"return\"];b=b.sibling}}function f(a){for(var b=a,c=!1,d=void 0,f=void 0;;){if(!c){c=b[\"return\"];a:for(;;){null===c?w(\"160\"):void 0;switch(c.tag){case lg:d=\nc.stateNode;f=!1;break a;case kg:d=c.stateNode.containerInfo;f=!0;break a;case ng:d=c.stateNode.containerInfo;f=!0;break a}c=c[\"return\"]}c=!0}if(b.tag===lg||b.tag===mg)e(b),f?C(d,b.stateNode):H(d,b.stateNode);else if(b.tag===ng?d=b.stateNode.containerInfo:g(b),null!==b.child){b.child[\"return\"]=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b[\"return\"]||b[\"return\"]===a)return;b=b[\"return\"];b.tag===ng&&(c=!1)}b.sibling[\"return\"]=b[\"return\"];b=b.sibling}}function g(a){\"function\"===\ntypeof qg&&qg(a);switch(a.tag){case jg:c(a);var d=a.stateNode;if(\"function\"===typeof d.componentWillUnmount)try{d.props=a.memoizedProps,d.state=a.memoizedState,d.componentWillUnmount()}catch(t){b(a,t)}break;case lg:c(a);break;case og:e(a.stateNode);break;case ng:f(a)}}var h=a.commitMount,k=a.commitUpdate,p=a.resetTextContent,x=a.commitTextUpdate,S=a.appendChild,D=a.appendChildToContainer,y=a.insertBefore,B=a.insertInContainerBefore,H=a.removeChild,C=a.removeChildFromContainer,Ca=a.getPublicInstance;\nreturn{commitPlacement:function(a){a:{for(var b=a[\"return\"];null!==b;){if(d(b)){var c=b;break a}b=b[\"return\"]}w(\"160\");c=void 0}var e=b=void 0;switch(c.tag){case lg:b=c.stateNode;e=!1;break;case kg:b=c.stateNode.containerInfo;e=!0;break;case ng:b=c.stateNode.containerInfo;e=!0;break;default:w(\"161\")}c.effectTag&ug&&(p(b),c.effectTag&=~ug);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c[\"return\"]||d(c[\"return\"])){c=null;break a}c=c[\"return\"]}c.sibling[\"return\"]=c[\"return\"];for(c=c.sibling;c.tag!==\nlg&&c.tag!==mg;){if(c.effectTag&rg)continue b;if(null===c.child||c.tag===ng)continue b;else c.child[\"return\"]=c,c=c.child}if(!(c.effectTag&rg)){c=c.stateNode;break a}}for(var f=a;;){if(f.tag===lg||f.tag===mg)c?e?B(b,f.stateNode,c):y(b,f.stateNode,c):e?D(b,f.stateNode):S(b,f.stateNode);else if(f.tag!==ng&&null!==f.child){f.child[\"return\"]=f;f=f.child;continue}if(f===a)break;for(;null===f.sibling;){if(null===f[\"return\"]||f[\"return\"]===a)return;f=f[\"return\"]}f.sibling[\"return\"]=f[\"return\"];f=f.sibling}},\ncommitDeletion:function(a){f(a);a[\"return\"]=null;a.child=null;a.alternate&&(a.alternate.child=null,a.alternate[\"return\"]=null)},commitWork:function(a,b){switch(b.tag){case jg:break;case lg:var c=b.stateNode;if(null!=c){var d=b.memoizedProps;a=null!==a?a.memoizedProps:d;var e=b.type,f=b.updateQueue;b.updateQueue=null;null!==f&&k(c,f,e,a,d,b)}break;case mg:null===b.stateNode?w(\"162\"):void 0;c=b.memoizedProps;x(b.stateNode,null!==a?a.memoizedProps:c,c);break;case kg:break;case ng:break;default:w(\"163\")}},\ncommitLifeCycles:function(a,b){switch(b.tag){case jg:var c=b.stateNode;if(b.effectTag&sg)if(null===a)c.props=b.memoizedProps,c.state=b.memoizedState,c.componentDidMount();else{var d=a.memoizedProps;a=a.memoizedState;c.props=b.memoizedProps;c.state=b.memoizedState;c.componentDidUpdate(d,a)}b.effectTag&tg&&null!==b.updateQueue&&pg(b,b.updateQueue,c);break;case kg:a=b.updateQueue;null!==a&&pg(b,a,b.child&&b.child.stateNode);break;case lg:c=b.stateNode;null===a&&b.effectTag&sg&&h(c,b.type,b.memoizedProps,\nb);break;case mg:break;case ng:break;default:w(\"163\")}},commitAttachRef:function(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case lg:b(Ca(c));break;default:b(c)}}},commitDetachRef:function(a){a=a.ref;null!==a&&a(null)}}}var wg=xd.createCursor,xg=xd.pop,yg=xd.push,zg={};\nfunction Ag(a){function b(a){a===zg?w(\"174\"):void 0;return a}var c=a.getChildHostContext,d=a.getRootHostContext,e=wg(zg),f=wg(zg),g=wg(zg);return{getHostContext:function(){return b(e.current)},getRootHostContainer:function(){return b(g.current)},popHostContainer:function(a){xg(e,a);xg(f,a);xg(g,a)},popHostContext:function(a){f.current===a&&(xg(e,a),xg(f,a))},pushHostContainer:function(a,b){yg(g,b,a);b=d(b);yg(f,a,a);yg(e,b,a)},pushHostContext:function(a){var d=b(g.current),h=b(e.current);d=c(h,a.type,\nd);h!==d&&(yg(f,a,a),yg(e,d,a))},resetHostContainer:function(){e.current=zg;g.current=zg}}}var Bg=E.HostComponent,Cg=E.HostText,Dg=E.HostRoot,Eg=J.Deletion,Fg=J.Placement,Gg=de.createFiberFromHostInstanceForDeletion;\nfunction Hg(a){function b(a,b){var c=Gg();c.stateNode=b;c[\"return\"]=a;c.effectTag=Eg;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}function c(a,b){switch(a.tag){case Bg:return f(b,a.type,a.pendingProps);case Cg:return g(b,a.pendingProps);default:return!1}}function d(a){for(a=a[\"return\"];null!==a&&a.tag!==Bg&&a.tag!==Dg;)a=a[\"return\"];y=a}var e=a.shouldSetTextContent,f=a.canHydrateInstance,g=a.canHydrateTextInstance,h=a.getNextHydratableSibling,k=a.getFirstHydratableChild,\np=a.hydrateInstance,x=a.hydrateTextInstance,S=a.didNotHydrateInstance,D=a.didNotFindHydratableInstance;a=a.didNotFindHydratableTextInstance;if(!(f&&g&&h&&k&&p&&x&&S&&D&&a))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){w(\"175\")},prepareToHydrateHostTextInstance:function(){w(\"176\")},popHydrationState:function(){return!1}};var y=null,B=null,H=!1;return{enterHydrationState:function(a){B=\nk(a.stateNode.containerInfo);y=a;return H=!0},resetHydrationState:function(){B=y=null;H=!1},tryToClaimNextHydratableInstance:function(a){if(H){var d=B;if(d){if(!c(a,d)){d=h(d);if(!d||!c(a,d)){a.effectTag|=Fg;H=!1;y=a;return}b(y,B)}a.stateNode=d;y=a;B=k(d)}else a.effectTag|=Fg,H=!1,y=a}},prepareToHydrateHostInstance:function(a,b,c){b=p(a.stateNode,a.type,a.memoizedProps,b,c,a);a.updateQueue=b;return null!==b?!0:!1},prepareToHydrateHostTextInstance:function(a){return x(a.stateNode,a.memoizedProps,a)},\npopHydrationState:function(a){if(a!==y)return!1;if(!H)return d(a),H=!0,!1;var c=a.type;if(a.tag!==Bg||\"head\"!==c&&\"body\"!==c&&!e(c,a.memoizedProps))for(c=B;c;)b(a,c),c=h(c);d(a);B=y?h(a.stateNode):null;return!0}}}\nvar Ig=R.popContextProvider,Jg=xd.reset,Kg=Qa.ReactCurrentOwner,Lg=de.createWorkInProgress,Mg=de.largerPriority,Ng=ig.onCommitRoot,T=Q.NoWork,Og=Q.SynchronousPriority,U=Q.TaskPriority,Pg=Q.HighPriority,Qg=Q.LowPriority,Rg=Q.OffscreenPriority,Sg=Pd.AsyncUpdates,Tg=J.PerformedWork,Ug=J.Placement,Vg=J.Update,Wg=J.PlacementAndUpdate,Xg=J.Deletion,Yg=J.ContentReset,Zg=J.Callback,$g=J.Err,ah=J.Ref,bh=E.HostRoot,ch=E.HostComponent,dh=E.HostPortal,eh=E.ClassComponent,fh=ud.getUpdatePriority,gh=R.resetContext;\nfunction hh(a){function b(){for(;null!==ma&&ma.current.pendingWorkPriority===T;){ma.isScheduled=!1;var a=ma.nextScheduledRoot;ma.nextScheduledRoot=null;if(ma===zb)return zb=ma=null,z=T,null;ma=a}a=ma;for(var b=null,c=T;null!==a;)a.current.pendingWorkPriority!==T&&(c===T||c>a.current.pendingWorkPriority)&&(c=a.current.pendingWorkPriority,b=a),a=a.nextScheduledRoot;null!==b?(z=c,Jg(),gh(),t(),I=Lg(b.current,c),b!==nc&&(oc=0,nc=b)):(z=T,nc=I=null)}function c(c){Hd=!0;na=null;var d=c.stateNode;d.current===\nc?w(\"177\"):void 0;z!==Og&&z!==U||oc++;Kg.current=null;if(c.effectTag>Tg)if(null!==c.lastEffect){c.lastEffect.nextEffect=c;var e=c.firstEffect}else e=c;else e=c.firstEffect;Ui();for(u=e;null!==u;){var f=!1,g=void 0;try{for(;null!==u;){var h=u.effectTag;h&Yg&&a.resetTextContent(u.stateNode);if(h&ah){var k=u.alternate;null!==k&&Ph(k)}switch(h&~(Zg|$g|Yg|ah|Tg)){case Ug:q(u);u.effectTag&=~Ug;break;case Wg:q(u);u.effectTag&=~Ug;vf(u.alternate,u);break;case Vg:vf(u.alternate,u);break;case Xg:Id=!0,Mh(u),\nId=!1}u=u.nextEffect}}catch(Jd){f=!0,g=Jd}f&&(null===u?w(\"178\"):void 0,x(u,g),null!==u&&(u=u.nextEffect))}Vi();d.current=c;for(u=e;null!==u;){d=!1;e=void 0;try{for(;null!==u;){var Gd=u.effectTag;Gd&(Vg|Zg)&&Nh(u.alternate,u);Gd&ah&&Oh(u);if(Gd&$g)switch(f=u,g=void 0,null!==P&&(g=P.get(f),P[\"delete\"](f),null==g&&null!==f.alternate&&(f=f.alternate,g=P.get(f),P[\"delete\"](f))),null==g?w(\"184\"):void 0,f.tag){case eh:f.stateNode.componentDidCatch(g.error,{componentStack:g.componentStack});break;case bh:null===\nJa&&(Ja=g.error);break;default:w(\"157\")}var m=u.nextEffect;u.nextEffect=null;u=m}}catch(Jd){d=!0,e=Jd}d&&(null===u?w(\"178\"):void 0,x(u,e),null!==u&&(u=u.nextEffect))}Hd=!1;\"function\"===typeof Ng&&Ng(c.stateNode);va&&(va.forEach(H),va=null);b()}function d(a){for(;;){var b=Lh(a.alternate,a,z),c=a[\"return\"],d=a.sibling;var e=a;if(!(e.pendingWorkPriority!==T&&e.pendingWorkPriority>z)){for(var f=fh(e),g=e.child;null!==g;)f=Mg(f,g.pendingWorkPriority),g=g.sibling;e.pendingWorkPriority=f}if(null!==b)return b;\nnull!==c&&(null===c.firstEffect&&(c.firstEffect=a.firstEffect),null!==a.lastEffect&&(null!==c.lastEffect&&(c.lastEffect.nextEffect=a.firstEffect),c.lastEffect=a.lastEffect),a.effectTag>Tg&&(null!==c.lastEffect?c.lastEffect.nextEffect=a:c.firstEffect=a,c.lastEffect=a));if(null!==d)return d;if(null!==c)a=c;else{na=a;break}}return null}function e(a){var b=V(a.alternate,a,z);null===b&&(b=d(a));Kg.current=null;return b}function f(a){var b=ld(a.alternate,a,z);null===b&&(b=d(a));Kg.current=null;return b}\nfunction g(a){p(Rg,a)}function h(){if(null!==P&&0<P.size&&z===U)for(;null!==I;){var a=I;I=null!==P&&(P.has(a)||null!==a.alternate&&P.has(a.alternate))?f(I):e(I);if(null===I&&(null===na?w(\"179\"):void 0,O=U,c(na),O=z,null===P||0===P.size||z!==U))break}}function k(a,d){null!==na?(O=U,c(na),h()):null===I&&b();if(!(z===T||z>a)){O=z;a:do{if(z<=U)for(;null!==I&&!(I=e(I),null===I&&(null===na?w(\"179\"):void 0,O=U,c(na),O=z,h(),z===T||z>a||z>U)););else if(null!==d)for(;null!==I&&!Ab;)if(1<d.timeRemaining()){if(I=\ne(I),null===I)if(null===na?w(\"179\"):void 0,1<d.timeRemaining()){if(O=U,c(na),O=z,h(),z===T||z>a||z<Pg)break}else Ab=!0}else Ab=!0;switch(z){case Og:case U:if(z<=a)continue a;break a;case Pg:case Qg:case Rg:if(null===d)break a;if(!Ab&&z<=a)continue a;break a;case T:break a;default:w(\"181\")}}while(1)}}function p(a,b){Da?w(\"182\"):void 0;Da=!0;var c=O,d=!1,e=null;try{k(a,b)}catch(Kd){d=!0,e=Kd}for(;d;){if(Ya){Ja=e;break}var h=I;if(null===h)Ya=!0;else{var p=x(h,e);null===p?w(\"183\"):void 0;if(!Ya){try{d=\np;e=a;p=b;for(var q=d;null!==h;){switch(h.tag){case eh:Ig(h);break;case ch:m(h);break;case bh:r(h);break;case dh:r(h)}if(h===q||h.alternate===q)break;h=h[\"return\"]}I=f(d);k(e,p)}catch(Kd){d=!0;e=Kd;continue}break}}}O=c;null!==b&&(Bb=!1);z>U&&!Bb&&($f(g),Bb=!0);a=Ja;Ya=Ab=Da=!1;nc=Ka=P=Ja=null;oc=0;if(null!==a)throw a;}function x(a,b){var c=Kg.current=null,d=!1,e=!1,f=null;if(a.tag===bh)c=a,S(a)&&(Ya=!0);else for(var g=a[\"return\"];null!==g&&null===c;){g.tag===eh?\"function\"===typeof g.stateNode.componentDidCatch&&\n(d=!0,f=Ra(g),c=g,e=!0):g.tag===bh&&(c=g);if(S(g)){if(Id||null!==va&&(va.has(g)||null!==g.alternate&&va.has(g.alternate)))return null;c=null;e=!1}g=g[\"return\"]}if(null!==c){null===Ka&&(Ka=new Set);Ka.add(c);var h=\"\";g=a;do{a:switch(g.tag){case fe:case ge:case he:case ie:var k=g._debugOwner,m=g._debugSource;var p=Ra(g);var q=null;k&&(q=Ra(k));k=m;p=\"\\n    in \"+(p||\"Unknown\")+(k?\" (at \"+k.fileName.replace(/^.*[\\\\\\/]/,\"\")+\":\"+k.lineNumber+\")\":q?\" (created by \"+q+\")\":\"\");break a;default:p=\"\"}h+=p;g=g[\"return\"]}while(g);\ng=h;a=Ra(a);null===P&&(P=new Map);b={componentName:a,componentStack:g,error:b,errorBoundary:d?c.stateNode:null,errorBoundaryFound:d,errorBoundaryName:f,willRetry:e};P.set(c,b);try{console.error(b.error)}catch(Wi){console.error(Wi)}Hd?(null===va&&(va=new Set),va.add(c)):H(c);return c}null===Ja&&(Ja=b);return null}function S(a){return null!==Ka&&(Ka.has(a)||null!==a.alternate&&Ka.has(a.alternate))}function D(a,b){return y(a,b,!1)}function y(a,b){oc>Xi&&(Ya=!0,w(\"185\"));!Da&&b<=z&&(I=null);for(var c=\n!0;null!==a&&c;){c=!1;if(a.pendingWorkPriority===T||a.pendingWorkPriority>b)c=!0,a.pendingWorkPriority=b;null!==a.alternate&&(a.alternate.pendingWorkPriority===T||a.alternate.pendingWorkPriority>b)&&(c=!0,a.alternate.pendingWorkPriority=b);if(null===a[\"return\"])if(a.tag===bh){var d=a.stateNode;b===T||d.isScheduled||(d.isScheduled=!0,zb?zb.nextScheduledRoot=d:ma=d,zb=d);if(!Da)switch(b){case Og:pc?p(Og,null):p(U,null);break;case U:W?void 0:w(\"186\");break;default:Bb||($f(g),Bb=!0)}}else break;a=a[\"return\"]}}\nfunction B(a,b){var c=O;c===T&&(c=!Yi||a.internalContextTag&Sg||b?Qg:Og);return c===Og&&(Da||W)?U:c}function H(a){y(a,U,!0)}var C=Ag(a),Ca=Hg(a),r=C.popHostContainer,m=C.popHostContext,t=C.resetHostContainer,v=Lf(a,C,Ca,D,B),V=v.beginWork,ld=v.beginFailedWork,Lh=eg(a,C,Ca).completeWork;C=vg(a,x);var q=C.commitPlacement,Mh=C.commitDeletion,vf=C.commitWork,Nh=C.commitLifeCycles,Oh=C.commitAttachRef,Ph=C.commitDetachRef,$f=a.scheduleDeferredCallback,Yi=a.useSyncScheduling,Ui=a.prepareForCommit,Vi=a.resetAfterCommit,\nO=T,Da=!1,Ab=!1,W=!1,pc=!1,I=null,z=T,u=null,na=null,ma=null,zb=null,Bb=!1,P=null,Ka=null,va=null,Ja=null,Ya=!1,Hd=!1,Id=!1,Xi=1E3,oc=0,nc=null;return{scheduleUpdate:D,getPriorityContext:B,batchedUpdates:function(a,b){var c=W;W=!0;try{return a(b)}finally{W=c,Da||W||p(U,null)}},unbatchedUpdates:function(a){var b=pc,c=W;pc=W;W=!1;try{return a()}finally{W=c,pc=b}},flushSync:function(a){var b=W,c=O;W=!0;O=Og;try{return a()}finally{W=b,O=c,Da?w(\"187\"):void 0,p(U,null)}},deferredUpdates:function(a){var b=\nO;O=Qg;try{return a()}finally{O=b}}}}function ih(){w(\"196\")}function jh(a){if(!a)return da;a=Pa.get(a);return\"number\"===typeof a.tag?ih(a):a._processChildContext(a._context)}jh._injectFiber=function(a){ih=a};var kh=ud.addTopLevelUpdate,lh=R.findCurrentUnmaskedContext,mh=R.isContextProvider,nh=R.processChildContext,oh=E.HostComponent,ph=bb.findCurrentHostFiber,qh=bb.findCurrentHostFiberWithNoPortals;jh._injectFiber(function(a){var b=lh(a);return mh(a)?nh(a,b,!1):b});var rh=F.TEXT_NODE;\nfunction sh(a){for(;a&&a.firstChild;)a=a.firstChild;return a}function th(a,b){var c=sh(a);a=0;for(var d;c;){if(c.nodeType===rh){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=sh(c)}}var uh=null;function vh(){!uh&&l.canUseDOM&&(uh=\"textContent\"in document.documentElement?\"textContent\":\"innerText\");return uh}\nvar wh={getOffsets:function(a){var b=window.getSelection&&window.getSelection();if(!b||0===b.rangeCount)return null;var c=b.anchorNode,d=b.anchorOffset,e=b.focusNode,f=b.focusOffset,g=b.getRangeAt(0);try{g.startContainer.nodeType,g.endContainer.nodeType}catch(k){return null}b=b.anchorNode===b.focusNode&&b.anchorOffset===b.focusOffset?0:g.toString().length;var h=g.cloneRange();h.selectNodeContents(a);h.setEnd(g.startContainer,g.startOffset);a=h.startContainer===h.endContainer&&h.startOffset===h.endOffset?\n0:h.toString().length;g=a+b;b=document.createRange();b.setStart(c,d);b.setEnd(e,f);c=b.collapsed;return{start:c?g:a,end:c?a:g}},setOffsets:function(a,b){if(window.getSelection){var c=window.getSelection(),d=a[vh()].length,e=Math.min(b.start,d);b=void 0===b.end?e:Math.min(b.end,d);!c.extend&&e>b&&(d=b,b=e,e=d);d=th(a,e);a=th(a,b);if(d&&a){var f=document.createRange();f.setStart(d.node,d.offset);c.removeAllRanges();e>b?(c.addRange(f),c.extend(a.node,a.offset)):(f.setEnd(a.node,a.offset),c.addRange(f))}}}},\nxh=F.ELEMENT_NODE,yh={hasSelectionCapabilities:function(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&(\"input\"===b&&\"text\"===a.type||\"textarea\"===b||\"true\"===a.contentEditable)},getSelectionInformation:function(){var a=ia();return{focusedElem:a,selectionRange:yh.hasSelectionCapabilities(a)?yh.getSelection(a):null}},restoreSelection:function(a){var b=ia(),c=a.focusedElem;a=a.selectionRange;if(b!==c&&fa(document.documentElement,c)){yh.hasSelectionCapabilities(c)&&yh.setSelection(c,a);b=\n[];for(a=c;a=a.parentNode;)a.nodeType===xh&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});ha(c);for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top}},getSelection:function(a){return(\"selectionStart\"in a?{start:a.selectionStart,end:a.selectionEnd}:wh.getOffsets(a))||{start:0,end:0}},setSelection:function(a,b){var c=b.start,d=b.end;void 0===d&&(d=c);\"selectionStart\"in a?(a.selectionStart=c,a.selectionEnd=Math.min(d,a.value.length)):wh.setOffsets(a,b)}},zh=yh,\nAh=F.ELEMENT_NODE;function Bh(){w(\"211\")}function Ch(){w(\"212\")}function Dh(a){if(null==a)return null;if(a.nodeType===Ah)return a;var b=Pa.get(a);if(b)return\"number\"===typeof b.tag?Bh(b):Ch(b);\"function\"===typeof a.render?w(\"188\"):w(\"213\",Object.keys(a))}Dh._injectFiber=function(a){Bh=a};Dh._injectStack=function(a){Ch=a};var Eh=E.HostComponent;function Fh(a){if(void 0!==a._hostParent)return a._hostParent;if(\"number\"===typeof a.tag){do a=a[\"return\"];while(a&&a.tag!==Eh);if(a)return a}return null}\nfunction Gh(a,b){for(var c=0,d=a;d;d=Fh(d))c++;d=0;for(var e=b;e;e=Fh(e))d++;for(;0<c-d;)a=Fh(a),c--;for(;0<d-c;)b=Fh(b),d--;for(;c--;){if(a===b||a===b.alternate)return a;a=Fh(a);b=Fh(b)}return null}\nvar Hh={isAncestor:function(a,b){for(;b;){if(a===b||a===b.alternate)return!0;b=Fh(b)}return!1},getLowestCommonAncestor:Gh,getParentInstance:function(a){return Fh(a)},traverseTwoPhase:function(a,b,c){for(var d=[];a;)d.push(a),a=Fh(a);for(a=d.length;0<a--;)b(d[a],\"captured\",c);for(a=0;a<d.length;a++)b(d[a],\"bubbled\",c)},traverseEnterLeave:function(a,b,c,d,e){for(var f=a&&b?Gh(a,b):null,g=[];a&&a!==f;)g.push(a),a=Fh(a);for(a=[];b&&b!==f;)a.push(b),b=Fh(b);for(b=0;b<g.length;b++)c(g[b],\"bubbled\",d);for(b=\na.length;0<b--;)c(a[b],\"captured\",e)}},Ih=Jb.getListener;function Jh(a,b,c){if(b=Ih(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=Cb(c._dispatchListeners,b),c._dispatchInstances=Cb(c._dispatchInstances,a)}function Kh(a){a&&a.dispatchConfig.phasedRegistrationNames&&Hh.traverseTwoPhase(a._targetInst,Jh,a)}function Qh(a){if(a&&a.dispatchConfig.phasedRegistrationNames){var b=a._targetInst;b=b?Hh.getParentInstance(b):null;Hh.traverseTwoPhase(b,Jh,a)}}\nfunction Rh(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Ih(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=Cb(c._dispatchListeners,b),c._dispatchInstances=Cb(c._dispatchInstances,a))}function Sh(a){a&&a.dispatchConfig.registrationName&&Rh(a._targetInst,null,a)}\nvar Th={accumulateTwoPhaseDispatches:function(a){Db(a,Kh)},accumulateTwoPhaseDispatchesSkipTarget:function(a){Db(a,Qh)},accumulateDirectDispatches:function(a){Db(a,Sh)},accumulateEnterLeaveDispatches:function(a,b,c,d){Hh.traverseEnterLeave(c,d,Rh,a,b)}},X={_root:null,_startText:null,_fallbackText:null},Uh={initialize:function(a){X._root=a;X._startText=Uh.getText();return!0},reset:function(){X._root=null;X._startText=null;X._fallbackText=null},getData:function(){if(X._fallbackText)return X._fallbackText;\nvar a,b=X._startText,c=b.length,d,e=Uh.getText(),f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);X._fallbackText=e.slice(a,1<d?1-d:void 0);return X._fallbackText},getText:function(){return\"value\"in X._root?X._root.value:X._root[vh()]}},Vh=Uh,Wh=\"dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances\".split(\" \"),Xh={type:null,target:null,currentTarget:ca.thatReturnsNull,eventPhase:null,bubbles:null,\ncancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};\nfunction Y(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):\"target\"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?ca.thatReturnsTrue:ca.thatReturnsFalse;this.isPropagationStopped=ca.thatReturnsFalse;return this}\nn(Y.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():\"unknown\"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=ca.thatReturnsTrue)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():\"unknown\"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=ca.thatReturnsTrue)},persist:function(){this.isPersistent=ca.thatReturnsTrue},isPersistent:ca.thatReturnsFalse,\ndestructor:function(){var a=this.constructor.Interface,b;for(b in a)this[b]=null;for(a=0;a<Wh.length;a++)this[Wh[a]]=null}});Y.Interface=Xh;Y.augmentClass=function(a,b){function c(){}c.prototype=this.prototype;var d=new c;n(d,a.prototype);a.prototype=d;a.prototype.constructor=a;a.Interface=n({},this.Interface,b);a.augmentClass=this.augmentClass;Yh(a)};Yh(Y);function Zh(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}\nfunction $h(a){a instanceof this?void 0:w(\"223\");a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function Yh(a){a.eventPool=[];a.getPooled=Zh;a.release=$h}function ai(a,b,c,d){return Y.call(this,a,b,c,d)}Y.augmentClass(ai,{data:null});function bi(a,b,c,d){return Y.call(this,a,b,c,d)}Y.augmentClass(bi,{data:null});var ci=[9,13,27,32],di=l.canUseDOM&&\"CompositionEvent\"in window,ei=null;l.canUseDOM&&\"documentMode\"in document&&(ei=document.documentMode);var fi;\nif(fi=l.canUseDOM&&\"TextEvent\"in window&&!ei){var gi=window.opera;fi=!(\"object\"===typeof gi&&\"function\"===typeof gi.version&&12>=parseInt(gi.version(),10))}\nvar hi=fi,ii=l.canUseDOM&&(!di||ei&&8<ei&&11>=ei),ji=String.fromCharCode(32),ki={beforeInput:{phasedRegistrationNames:{bubbled:\"onBeforeInput\",captured:\"onBeforeInputCapture\"},dependencies:[\"topCompositionEnd\",\"topKeyPress\",\"topTextInput\",\"topPaste\"]},compositionEnd:{phasedRegistrationNames:{bubbled:\"onCompositionEnd\",captured:\"onCompositionEndCapture\"},dependencies:\"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown\".split(\" \")},compositionStart:{phasedRegistrationNames:{bubbled:\"onCompositionStart\",\ncaptured:\"onCompositionStartCapture\"},dependencies:\"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown\".split(\" \")},compositionUpdate:{phasedRegistrationNames:{bubbled:\"onCompositionUpdate\",captured:\"onCompositionUpdateCapture\"},dependencies:\"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown\".split(\" \")}},li=!1;\nfunction mi(a,b){switch(a){case \"topKeyUp\":return-1!==ci.indexOf(b.keyCode);case \"topKeyDown\":return 229!==b.keyCode;case \"topKeyPress\":case \"topMouseDown\":case \"topBlur\":return!0;default:return!1}}function ni(a){a=a.detail;return\"object\"===typeof a&&\"data\"in a?a.data:null}var oi=!1;function pi(a,b){switch(a){case \"topCompositionEnd\":return ni(b);case \"topKeyPress\":if(32!==b.which)return null;li=!0;return ji;case \"topTextInput\":return a=b.data,a===ji&&li?null:a;default:return null}}\nfunction qi(a,b){if(oi)return\"topCompositionEnd\"===a||!di&&mi(a,b)?(a=Vh.getData(),Vh.reset(),oi=!1,a):null;switch(a){case \"topPaste\":return null;case \"topKeyPress\":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case \"topCompositionEnd\":return ii?null:b.data;default:return null}}\nvar ri={eventTypes:ki,extractEvents:function(a,b,c,d){var e;if(di)b:{switch(a){case \"topCompositionStart\":var f=ki.compositionStart;break b;case \"topCompositionEnd\":f=ki.compositionEnd;break b;case \"topCompositionUpdate\":f=ki.compositionUpdate;break b}f=void 0}else oi?mi(a,c)&&(f=ki.compositionEnd):\"topKeyDown\"===a&&229===c.keyCode&&(f=ki.compositionStart);f?(ii&&(oi||f!==ki.compositionStart?f===ki.compositionEnd&&oi&&(e=Vh.getData()):oi=Vh.initialize(d)),f=ai.getPooled(f,b,c,d),e?f.data=e:(e=ni(c),\nnull!==e&&(f.data=e)),Th.accumulateTwoPhaseDispatches(f),e=f):e=null;(a=hi?pi(a,c):qi(a,c))?(b=bi.getPooled(ki.beforeInput,b,c,d),b.data=a,Th.accumulateTwoPhaseDispatches(b)):b=null;return[e,b]}},si={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ti(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return\"input\"===b?!!si[a.type]:\"textarea\"===b?!0:!1}\nvar ui={change:{phasedRegistrationNames:{bubbled:\"onChange\",captured:\"onChangeCapture\"},dependencies:\"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange\".split(\" \")}};function vi(a,b,c){a=Y.getPooled(ui.change,a,b,c);a.type=\"change\";nb.enqueueStateRestore(c);Th.accumulateTwoPhaseDispatches(a);return a}var wi=null,xi=null;function yi(a){Jb.enqueueEvents(a);Jb.processEventQueue(!1)}\nfunction zi(a){var b=G.getNodeFromInstance(a);if(Bc.updateValueIfChanged(b))return a}function Ai(a,b){if(\"topChange\"===a)return b}var Bi=!1;l.canUseDOM&&(Bi=Lb(\"input\")&&(!document.documentMode||9<document.documentMode));function Ci(){wi&&(wi.detachEvent(\"onpropertychange\",Di),xi=wi=null)}function Di(a){\"value\"===a.propertyName&&zi(xi)&&(a=vi(xi,a,ub(a)),sb.batchedUpdates(yi,a))}function Ei(a,b,c){\"topFocus\"===a?(Ci(),wi=b,xi=c,wi.attachEvent(\"onpropertychange\",Di)):\"topBlur\"===a&&Ci()}\nfunction Fi(a){if(\"topSelectionChange\"===a||\"topKeyUp\"===a||\"topKeyDown\"===a)return zi(xi)}function Gi(a,b){if(\"topClick\"===a)return zi(b)}function Hi(a,b){if(\"topInput\"===a||\"topChange\"===a)return zi(b)}\nvar Ii={eventTypes:ui,_isInputEventSupported:Bi,extractEvents:function(a,b,c,d){var e=b?G.getNodeFromInstance(b):window,f=e.nodeName&&e.nodeName.toLowerCase();if(\"select\"===f||\"input\"===f&&\"file\"===e.type)var g=Ai;else if(ti(e))if(Bi)g=Hi;else{g=Fi;var h=Ei}else f=e.nodeName,!f||\"input\"!==f.toLowerCase()||\"checkbox\"!==e.type&&\"radio\"!==e.type||(g=Gi);if(g&&(g=g(a,b)))return vi(g,c,d);h&&h(a,e,b);\"topBlur\"===a&&null!=b&&(a=b._wrapperState||e._wrapperState)&&a.controlled&&\"number\"===e.type&&(a=\"\"+e.value,\ne.getAttribute(\"value\")!==a&&e.setAttribute(\"value\",a))}};function Ji(a,b,c,d){return Y.call(this,a,b,c,d)}Y.augmentClass(Ji,{view:function(a){if(a.view)return a.view;a=ub(a);return a.window===a?a:(a=a.ownerDocument)?a.defaultView||a.parentWindow:window},detail:function(a){return a.detail||0}});var Ki={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function Li(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Ki[a])?!!b[a]:!1}function Mi(){return Li}\nfunction Ni(a,b,c,d){return Y.call(this,a,b,c,d)}Ji.augmentClass(Ni,{screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Mi,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)}});\nvar Oi={mouseEnter:{registrationName:\"onMouseEnter\",dependencies:[\"topMouseOut\",\"topMouseOver\"]},mouseLeave:{registrationName:\"onMouseLeave\",dependencies:[\"topMouseOut\",\"topMouseOver\"]}},Pi={eventTypes:Oi,extractEvents:function(a,b,c,d){if(\"topMouseOver\"===a&&(c.relatedTarget||c.fromElement)||\"topMouseOut\"!==a&&\"topMouseOver\"!==a)return null;var e=d.window===d?d:(e=d.ownerDocument)?e.defaultView||e.parentWindow:window;\"topMouseOut\"===a?(a=b,b=(b=c.relatedTarget||c.toElement)?G.getClosestInstanceFromNode(b):\nnull):a=null;if(a===b)return null;var f=null==a?e:G.getNodeFromInstance(a);e=null==b?e:G.getNodeFromInstance(b);var g=Ni.getPooled(Oi.mouseLeave,a,c,d);g.type=\"mouseleave\";g.target=f;g.relatedTarget=e;c=Ni.getPooled(Oi.mouseEnter,b,c,d);c.type=\"mouseenter\";c.target=e;c.relatedTarget=f;Th.accumulateEnterLeaveDispatches(g,c,a,b);return[g,c]}},Qi=F.DOCUMENT_NODE,Ri=l.canUseDOM&&\"documentMode\"in document&&11>=document.documentMode,Si={select:{phasedRegistrationNames:{bubbled:\"onSelect\",captured:\"onSelectCapture\"},\ndependencies:\"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange\".split(\" \")}},Ti=null,Zi=null,$i=null,aj=!1,bj=M.isListeningToAllDependencies;\nfunction cj(a,b){if(aj||null==Ti||Ti!==ia())return null;var c=Ti;\"selectionStart\"in c&&zh.hasSelectionCapabilities(c)?c={start:c.selectionStart,end:c.selectionEnd}:window.getSelection?(c=window.getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset}):c=void 0;return $i&&ea($i,c)?null:($i=c,a=Y.getPooled(Si.select,Zi,a,b),a.type=\"select\",a.target=Ti,Th.accumulateTwoPhaseDispatches(a),a)}\nvar dj={eventTypes:Si,extractEvents:function(a,b,c,d){var e=d.window===d?d.document:d.nodeType===Qi?d:d.ownerDocument;if(!e||!bj(\"onSelect\",e))return null;e=b?G.getNodeFromInstance(b):window;switch(a){case \"topFocus\":if(ti(e)||\"true\"===e.contentEditable)Ti=e,Zi=b,$i=null;break;case \"topBlur\":$i=Zi=Ti=null;break;case \"topMouseDown\":aj=!0;break;case \"topContextMenu\":case \"topMouseUp\":return aj=!1,cj(c,d);case \"topSelectionChange\":if(Ri)break;case \"topKeyDown\":case \"topKeyUp\":return cj(c,d)}return null}};\nfunction ej(a,b,c,d){return Y.call(this,a,b,c,d)}Y.augmentClass(ej,{animationName:null,elapsedTime:null,pseudoElement:null});function fj(a,b,c,d){return Y.call(this,a,b,c,d)}Y.augmentClass(fj,{clipboardData:function(a){return\"clipboardData\"in a?a.clipboardData:window.clipboardData}});function gj(a,b,c,d){return Y.call(this,a,b,c,d)}Ji.augmentClass(gj,{relatedTarget:null});function hj(a){var b=a.keyCode;\"charCode\"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;return 32<=a||13===a?a:0}\nvar ij={Esc:\"Escape\",Spacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},jj={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",\n116:\"F5\",117:\"F6\",118:\"F7\",119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"};function kj(a,b,c,d){return Y.call(this,a,b,c,d)}\nJi.augmentClass(kj,{key:function(a){if(a.key){var b=ij[a.key]||a.key;if(\"Unidentified\"!==b)return b}return\"keypress\"===a.type?(a=hj(a),13===a?\"Enter\":String.fromCharCode(a)):\"keydown\"===a.type||\"keyup\"===a.type?jj[a.keyCode]||\"Unidentified\":\"\"},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Mi,charCode:function(a){return\"keypress\"===a.type?hj(a):0},keyCode:function(a){return\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0},which:function(a){return\"keypress\"===\na.type?hj(a):\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0}});function lj(a,b,c,d){return Y.call(this,a,b,c,d)}Ni.augmentClass(lj,{dataTransfer:null});function mj(a,b,c,d){return Y.call(this,a,b,c,d)}Ji.augmentClass(mj,{touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Mi});function nj(a,b,c,d){return Y.call(this,a,b,c,d)}Y.augmentClass(nj,{propertyName:null,elapsedTime:null,pseudoElement:null});\nfunction oj(a,b,c,d){return Y.call(this,a,b,c,d)}Ni.augmentClass(oj,{deltaX:function(a){return\"deltaX\"in a?a.deltaX:\"wheelDeltaX\"in a?-a.wheelDeltaX:0},deltaY:function(a){return\"deltaY\"in a?a.deltaY:\"wheelDeltaY\"in a?-a.wheelDeltaY:\"wheelDelta\"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null});var pj={},qj={};\n\"abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel\".split(\" \").forEach(function(a){var b=a[0].toUpperCase()+\na.slice(1),c=\"on\"+b;b=\"top\"+b;c={phasedRegistrationNames:{bubbled:c,captured:c+\"Capture\"},dependencies:[b]};pj[a]=c;qj[b]=c});\nvar rj={eventTypes:pj,extractEvents:function(a,b,c,d){var e=qj[a];if(!e)return null;switch(a){case \"topAbort\":case \"topCancel\":case \"topCanPlay\":case \"topCanPlayThrough\":case \"topClose\":case \"topDurationChange\":case \"topEmptied\":case \"topEncrypted\":case \"topEnded\":case \"topError\":case \"topInput\":case \"topInvalid\":case \"topLoad\":case \"topLoadedData\":case \"topLoadedMetadata\":case \"topLoadStart\":case \"topPause\":case \"topPlay\":case \"topPlaying\":case \"topProgress\":case \"topRateChange\":case \"topReset\":case \"topSeeked\":case \"topSeeking\":case \"topStalled\":case \"topSubmit\":case \"topSuspend\":case \"topTimeUpdate\":case \"topToggle\":case \"topVolumeChange\":case \"topWaiting\":var f=Y;\nbreak;case \"topKeyPress\":if(0===hj(c))return null;case \"topKeyDown\":case \"topKeyUp\":f=kj;break;case \"topBlur\":case \"topFocus\":f=gj;break;case \"topClick\":if(2===c.button)return null;case \"topDoubleClick\":case \"topMouseDown\":case \"topMouseMove\":case \"topMouseUp\":case \"topMouseOut\":case \"topMouseOver\":case \"topContextMenu\":f=Ni;break;case \"topDrag\":case \"topDragEnd\":case \"topDragEnter\":case \"topDragExit\":case \"topDragLeave\":case \"topDragOver\":case \"topDragStart\":case \"topDrop\":f=lj;break;case \"topTouchCancel\":case \"topTouchEnd\":case \"topTouchMove\":case \"topTouchStart\":f=\nmj;break;case \"topAnimationEnd\":case \"topAnimationIteration\":case \"topAnimationStart\":f=ej;break;case \"topTransitionEnd\":f=nj;break;case \"topScroll\":f=Ji;break;case \"topWheel\":f=oj;break;case \"topCopy\":case \"topCut\":case \"topPaste\":f=fj}f?void 0:w(\"86\",a);a=f.getPooled(e,b,c,d);Th.accumulateTwoPhaseDispatches(a);return a}};L.setHandleTopLevel(M.handleTopLevel);Jb.injection.injectEventPluginOrder(\"ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin\".split(\" \"));\nib.injection.injectComponentTree(G);Jb.injection.injectEventPluginsByName({SimpleEventPlugin:rj,EnterLeaveEventPlugin:Pi,ChangeEventPlugin:Ii,SelectEventPlugin:dj,BeforeInputEventPlugin:ri});\nvar sj=A.injection.MUST_USE_PROPERTY,Z=A.injection.HAS_BOOLEAN_VALUE,tj=A.injection.HAS_NUMERIC_VALUE,uj=A.injection.HAS_POSITIVE_NUMERIC_VALUE,vj=A.injection.HAS_STRING_BOOLEAN_VALUE,wj={Properties:{allowFullScreen:Z,allowTransparency:vj,async:Z,autoPlay:Z,capture:Z,checked:sj|Z,cols:uj,contentEditable:vj,controls:Z,\"default\":Z,defer:Z,disabled:Z,download:A.injection.HAS_OVERLOADED_BOOLEAN_VALUE,draggable:vj,formNoValidate:Z,hidden:Z,loop:Z,multiple:sj|Z,muted:sj|Z,noValidate:Z,open:Z,playsInline:Z,\nreadOnly:Z,required:Z,reversed:Z,rows:uj,rowSpan:tj,scoped:Z,seamless:Z,selected:sj|Z,size:uj,start:tj,span:uj,spellCheck:vj,style:0,itemScope:Z,acceptCharset:0,className:0,htmlFor:0,httpEquiv:0,value:vj},DOMAttributeNames:{acceptCharset:\"accept-charset\",className:\"class\",htmlFor:\"for\",httpEquiv:\"http-equiv\"},DOMMutationMethods:{value:function(a,b){if(null==b)return a.removeAttribute(\"value\");\"number\"!==a.type||!1===a.hasAttribute(\"value\")?a.setAttribute(\"value\",\"\"+b):a.validity&&!a.validity.badInput&&\na.ownerDocument.activeElement!==a&&a.setAttribute(\"value\",\"\"+b)}}},xj=A.injection.HAS_STRING_BOOLEAN_VALUE,yj={xlink:\"http://www.w3.org/1999/xlink\",xml:\"http://www.w3.org/XML/1998/namespace\"},zj={Properties:{autoReverse:xj,externalResourcesRequired:xj,preserveAlpha:xj},DOMAttributeNames:{autoReverse:\"autoReverse\",externalResourcesRequired:\"externalResourcesRequired\",preserveAlpha:\"preserveAlpha\"},DOMAttributeNamespaces:{xlinkActuate:yj.xlink,xlinkArcrole:yj.xlink,xlinkHref:yj.xlink,xlinkRole:yj.xlink,\nxlinkShow:yj.xlink,xlinkTitle:yj.xlink,xlinkType:yj.xlink,xmlBase:yj.xml,xmlLang:yj.xml,xmlSpace:yj.xml}},Aj=/[\\-\\:]([a-z])/g;function Bj(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space\".split(\" \").forEach(function(a){var b=a.replace(Aj,\nBj);zj.Properties[b]=0;zj.DOMAttributeNames[b]=a});A.injection.injectDOMPropertyConfig(wj);A.injection.injectDOMPropertyConfig(zj);\nvar Cj=ig.injectInternals,Dj=F.ELEMENT_NODE,Ej=F.TEXT_NODE,Fj=F.COMMENT_NODE,Gj=F.DOCUMENT_NODE,Hj=F.DOCUMENT_FRAGMENT_NODE,Ij=A.ROOT_ATTRIBUTE_NAME,Jj=ka.getChildNamespace,Kj=N.createElement,Lj=N.createTextNode,Mj=N.setInitialProperties,Nj=N.diffProperties,Oj=N.updateProperties,Pj=N.diffHydratedProperties,Qj=N.diffHydratedText,Rj=N.warnForDeletedHydratableElement,Sj=N.warnForDeletedHydratableText,Tj=N.warnForInsertedHydratedElement,Uj=N.warnForInsertedHydratedText,Vj=G.precacheFiberNode,Wj=G.updateFiberProps;\nnb.injection.injectFiberControlledHostComponent(N);Dh._injectFiber(function(a){return Xj.findHostInstance(a)});var Yj=null,Zj=null;function ak(a){return!(!a||a.nodeType!==Dj&&a.nodeType!==Gj&&a.nodeType!==Hj&&(a.nodeType!==Fj||\" react-mount-point-unstable \"!==a.nodeValue))}function bk(a){a=a?a.nodeType===Gj?a.documentElement:a.firstChild:null;return!(!a||a.nodeType!==Dj||!a.hasAttribute(Ij))}\nvar Xj=function(a){var b=a.getPublicInstance;a=hh(a);var c=a.scheduleUpdate,d=a.getPriorityContext;return{createContainer:function(a){var b=ee();a={current:b,containerInfo:a,isScheduled:!1,nextScheduledRoot:null,context:null,pendingContext:null};return b.stateNode=a},updateContainer:function(a,b,g,h){var e=b.current;g=jh(g);null===b.context?b.context=g:b.pendingContext=g;b=h;h=d(e,ed.enableAsyncSubtreeAPI&&null!=a&&null!=a.type&&null!=a.type.prototype&&!0===a.type.prototype.unstable_isAsyncReactComponent);\na={element:a};kh(e,a,void 0===b?null:b,h);c(e,h)},batchedUpdates:a.batchedUpdates,unbatchedUpdates:a.unbatchedUpdates,deferredUpdates:a.deferredUpdates,flushSync:a.flushSync,getPublicRootInstance:function(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case oh:return b(a.child.stateNode);default:return a.child.stateNode}},findHostInstance:function(a){a=ph(a);return null===a?null:a.stateNode},findHostInstanceWithNoPortals:function(a){a=qh(a);return null===a?null:a.stateNode}}}({getRootHostContext:function(a){if(a.nodeType===\nGj)a=(a=a.documentElement)?a.namespaceURI:Jj(null,\"\");else{var b=a.nodeType===Fj?a.parentNode:a;a=b.namespaceURI||null;b=b.tagName;a=Jj(a,b)}return a},getChildHostContext:function(a,b){return Jj(a,b)},getPublicInstance:function(a){return a},prepareForCommit:function(){Yj=M.isEnabled();Zj=zh.getSelectionInformation();M.setEnabled(!1)},resetAfterCommit:function(){zh.restoreSelection(Zj);Zj=null;M.setEnabled(Yj);Yj=null},createInstance:function(a,b,c,d,e){a=Kj(a,b,c,d);Vj(e,a);Wj(a,b);return a},appendInitialChild:function(a,\nb){a.appendChild(b)},finalizeInitialChildren:function(a,b,c,d){Mj(a,b,c,d);a:{switch(b){case \"button\":case \"input\":case \"select\":case \"textarea\":a=!!c.autoFocus;break a}a=!1}return a},prepareUpdate:function(a,b,c,d,e){return Nj(a,b,c,d,e)},commitMount:function(a){a.focus()},commitUpdate:function(a,b,c,d,e){Wj(a,e);Oj(a,b,c,d,e)},shouldSetTextContent:function(a,b){return\"textarea\"===a||\"string\"===typeof b.children||\"number\"===typeof b.children||\"object\"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&\n\"string\"===typeof b.dangerouslySetInnerHTML.__html},resetTextContent:function(a){a.textContent=\"\"},shouldDeprioritizeSubtree:function(a,b){return!!b.hidden},createTextInstance:function(a,b,c,d){a=Lj(a,b);Vj(d,a);return a},commitTextUpdate:function(a,b,c){a.nodeValue=c},appendChild:function(a,b){a.appendChild(b)},appendChildToContainer:function(a,b){a.nodeType===Fj?a.parentNode.insertBefore(b,a):a.appendChild(b)},insertBefore:function(a,b,c){a.insertBefore(b,c)},insertInContainerBefore:function(a,\nb,c){a.nodeType===Fj?a.parentNode.insertBefore(b,c):a.insertBefore(b,c)},removeChild:function(a,b){a.removeChild(b)},removeChildFromContainer:function(a,b){a.nodeType===Fj?a.parentNode.removeChild(b):a.removeChild(b)},canHydrateInstance:function(a,b){return a.nodeType===Dj&&b===a.nodeName.toLowerCase()},canHydrateTextInstance:function(a,b){return\"\"===b?!1:a.nodeType===Ej},getNextHydratableSibling:function(a){for(a=a.nextSibling;a&&a.nodeType!==Dj&&a.nodeType!==Ej;)a=a.nextSibling;return a},getFirstHydratableChild:function(a){for(a=\na.firstChild;a&&a.nodeType!==Dj&&a.nodeType!==Ej;)a=a.nextSibling;return a},hydrateInstance:function(a,b,c,d,e,f){Vj(f,a);Wj(a,c);return Pj(a,b,c,e,d)},hydrateTextInstance:function(a,b,c){Vj(c,a);return Qj(a,b)},didNotHydrateInstance:function(a,b){1===b.nodeType?Rj(a,b):Sj(a,b)},didNotFindHydratableInstance:function(a,b,c){Tj(a,b,c)},didNotFindHydratableTextInstance:function(a,b){Uj(a,b)},scheduleDeferredCallback:dd.rIC,useSyncScheduling:!0});sb.injection.injectFiberBatchedUpdates(Xj.batchedUpdates);\nfunction ck(a,b,c,d,e){ak(c)?void 0:w(\"200\");var f=c._reactRootContainer;if(f)Xj.updateContainer(b,f,a,e);else{if(!d&&!bk(c))for(d=void 0;d=c.lastChild;)c.removeChild(d);var g=Xj.createContainer(c);f=c._reactRootContainer=g;Xj.unbatchedUpdates(function(){Xj.updateContainer(b,g,a,e)})}return Xj.getPublicRootInstance(f)}function dk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;ak(b)?void 0:w(\"200\");return ne.createPortal(a,b,null,c)}\nvar ek={createPortal:dk,hydrate:function(a,b,c){return ck(null,a,b,!0,c)},render:function(a,b,c){return ck(null,a,b,!1,c)},unstable_renderSubtreeIntoContainer:function(a,b,c,d){null!=a&&Pa.has(a)?void 0:w(\"38\");return ck(a,b,c,!1,d)},unmountComponentAtNode:function(a){ak(a)?void 0:w(\"40\");return a._reactRootContainer?(Xj.unbatchedUpdates(function(){ck(null,null,a,!1,function(){a._reactRootContainer=null})}),!0):!1},findDOMNode:Dh,unstable_createPortal:dk,unstable_batchedUpdates:sb.batchedUpdates,\nunstable_deferredUpdates:Xj.deferredUpdates,flushSync:Xj.flushSync,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:Jb,EventPluginRegistry:sa,EventPropagators:Th,ReactControlledComponent:nb,ReactDOMComponentTree:G,ReactDOMEventListener:L}};Cj({findFiberByHostInstance:G.getClosestInstanceFromNode,findHostInstanceByFiber:Xj.findHostInstance,bundleType:0,version:\"16.0.0\",rendererPackageName:\"react-dom\"});module.exports=ek;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/react-dom/cjs/react-dom.production.min.js\n// module id = 32\n// module chunks = 0","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n\n/**\n * Simple, lightweight module assisting with the detection and context of\n * Worker. Helps avoid circular dependencies and allows code to reason about\n * whether or not they are in a Worker, even if they never include the main\n * `ReactWorker` dependency.\n */\nvar ExecutionEnvironment = {\n\n  canUseDOM: canUseDOM,\n\n  canUseWorkers: typeof Worker !== 'undefined',\n\n  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),\n\n  canUseViewport: canUseDOM && !!window.screen,\n\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.\n\n};\n\nmodule.exports = ExecutionEnvironment;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/ExecutionEnvironment.js\n// module id = 33\n// module chunks = 0","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Upstream version of event listener. Does not take into account specific\n * nature of platform.\n */\nvar EventListener = {\n  /**\n   * Listen to DOM events during the bubble phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  listen: function listen(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function remove() {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent('on' + eventType, callback);\n      return {\n        remove: function remove() {\n          target.detachEvent('on' + eventType, callback);\n        }\n      };\n    }\n  },\n\n  /**\n   * Listen to DOM events during the capture phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  capture: function capture(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, true);\n      return {\n        remove: function remove() {\n          target.removeEventListener(eventType, callback, true);\n        }\n      };\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');\n      }\n      return {\n        remove: emptyFunction\n      };\n    }\n  },\n\n  registerDefault: function registerDefault() {}\n};\n\nmodule.exports = EventListener;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/EventListener.js\n// module id = 34\n// module chunks = 0","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n * \n */\n\n/*eslint-disable no-self-compare */\n\n'use strict';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Added the nonzero y check to make Flow happy, but it is redundant\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n  }\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA, objB) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = shallowEqual;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/shallowEqual.js\n// module id = 35\n// module chunks = 0","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar isTextNode = require('./isTextNode');\n\n/*eslint-disable no-bitwise */\n\n/**\n * Checks if a given DOM node contains or is another DOM node.\n */\nfunction containsNode(outerNode, innerNode) {\n  if (!outerNode || !innerNode) {\n    return false;\n  } else if (outerNode === innerNode) {\n    return true;\n  } else if (isTextNode(outerNode)) {\n    return false;\n  } else if (isTextNode(innerNode)) {\n    return containsNode(outerNode, innerNode.parentNode);\n  } else if ('contains' in outerNode) {\n    return outerNode.contains(innerNode);\n  } else if (outerNode.compareDocumentPosition) {\n    return !!(outerNode.compareDocumentPosition(innerNode) & 16);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = containsNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/containsNode.js\n// module id = 36\n// module chunks = 0","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar isNode = require('./isNode');\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM text node.\n */\nfunction isTextNode(object) {\n  return isNode(object) && object.nodeType == 3;\n}\n\nmodule.exports = isTextNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/isTextNode.js\n// module id = 37\n// module chunks = 0","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM node.\n */\nfunction isNode(object) {\n  var doc = object ? object.ownerDocument || object : document;\n  var defaultView = doc.defaultView || window;\n  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));\n}\n\nmodule.exports = isNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/isNode.js\n// module id = 38\n// module chunks = 0","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * @param {DOMElement} node input/textarea to focus\n */\n\nfunction focusNode(node) {\n  // IE8 can throw \"Can't move focus to the control because it is invisible,\n  // not enabled, or of a type that does not accept the focus.\" for all kinds of\n  // reasons that are too expensive and fragile to test.\n  try {\n    node.focus();\n  } catch (e) {}\n}\n\nmodule.exports = focusNode;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/focusNode.js\n// module id = 39\n// module chunks = 0","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n/* eslint-disable fb-www/typeof-undefined */\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?DOMDocument} doc Defaults to current document.\n * @return {?DOMElement}\n */\nfunction getActiveElement(doc) /*?DOMElement*/{\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\nmodule.exports = getActiveElement;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fbjs/lib/getActiveElement.js\n// module id = 40\n// module chunks = 0","import React, { Component } from 'react';\nimport './App.css';\nimport jazz from './Jazz';\nconst PolySynth = require('tone').PolySynth;\nconst polySynth = new PolySynth().toMaster();\nconst Transport = require('tone').Transport;\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        let sheet = jazz.getJazz();\n        this.preparePlaybackForSheet(sheet);\n        this.state = {\n            playing: false,\n            sheet\n        };\n        this.togglePlayback = this.togglePlayback.bind(this);\n    }\n\n    preparePlaybackForSheet(sheet) {\n        sheet.chords.map((chord, index) => {\n            let notes = chord.notes().map(note => note.toString());\n            Transport.scheduleRepeat(\n                time => {\n                    polySynth.triggerAttackRelease(notes, '1n', time); // Repeat a 1n = whole note long chord\n                },\n                '4m', // every 4 measures\n                index + 'm' // at offset index measures\n            );\n            return notes;\n        });\n    }\n    togglePlayback() {\n        this.setState(\n            { ...this.state, playing: !this.state.playing },\n            callback => {\n                this.state.playing ? Transport.start() : Transport.stop(); // TODO: stop immediately\n            }\n        );\n    }\n    newSheet() {\n        // TODO: proper state change\n        window.location.reload();\n    }\n    render() {\n        const writeSheet = data => {\n            //TODO: flexbox approach?\n            let prettyPrint = '<div id=\"info\">';\n            prettyPrint += 'Key: ' + data.key;\n            prettyPrint +=\n                '<br>Scale: ' +\n                data.scale\n                    .simple()\n                    .map(name => (name = name[0].toUpperCase() + name.slice(1)))\n                    .join(', ');\n            prettyPrint += '</div>';\n\n            prettyPrint += '<div id=\"chords\">';\n            data.chords.map(\n                chord =>\n                    (prettyPrint +=\n                        \"<span class='chord'>\" +\n                        chord.root.name().toUpperCase() +\n                        chord.root.accidental() +\n                        '<sup>' +\n                        chord.symbol +\n                        '</sup>' +\n                        '</span>')\n            );\n            prettyPrint += '</div>';\n            return { __html: prettyPrint };\n        };\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1 className=\"App-title\">Jazzy</h1>\n                    <button id=\"playback\" onClick={e => this.togglePlayback()}>\n                        Play / Pause\n                    </button>\n                    <button id=\"new\" onClick={e => this.newSheet()}>\n                        New Jazz\n                    </button>\n                </header>\n                <div dangerouslySetInnerHTML={writeSheet(this.state.sheet)} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n\n\n// WEBPACK FOOTER //\n// ./src/App.js","const teoria = require('teoria');\nconst sample = require('lodash/sample');\nconst progressions = require('./progressions');\n\nconst getRoot = () =>\n    // TODO: sane root options\n    sample(['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B']);\n\nconst getScale = (root, scaleType) => teoria.note(root).scale(scaleType);\n\nconst getProgression = () => sample(progressions.getAll());\n\nconst getChords = scale => {\n    // TODO: refactor with getProgression\n    let progression = getProgression();\n    let notes = scale.notes();\n    let chords = progression.map(({ degree, type }) => {\n        return teoria.chord(notes[degree - 1], type);\n    });\n    return chords;\n};\n\nconst prepareSheet = () => {\n    let root = getRoot();\n    let absoluteRoot = root + '3';\n    let scaleType = 'major';\n    let key = root + ' ' + scaleType;\n    let scale = getScale(absoluteRoot, scaleType);\n    let chords = getChords(scale);\n\n    let sheet = {\n        key,\n        scale,\n        chords\n    };\n\n    return sheet;\n};\n\nmodule.exports = {\n    getJazz: prepareSheet\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/Jazz.js","var Note = require('./lib/note');\nvar Interval = require('./lib/interval');\nvar Chord = require('./lib/chord');\nvar Scale = require('./lib/scale');\n\nvar teoria;\n\n// never thought I would write this, but: Legacy support\nfunction intervalConstructor(from, to) {\n  // Construct a Interval object from string representation\n  if (typeof from === 'string')\n    return Interval.toCoord(from);\n\n  if (typeof to === 'string' && from instanceof Note)\n    return Interval.from(from, Interval.toCoord(to));\n\n  if (to instanceof Interval && from instanceof Note)\n    return Interval.from(from, to);\n\n  if (to instanceof Note && from instanceof Note)\n    return Interval.between(from, to);\n\n  throw new Error('Invalid parameters');\n}\n\nintervalConstructor.toCoord = Interval.toCoord;\nintervalConstructor.from = Interval.from;\nintervalConstructor.between = Interval.between;\nintervalConstructor.invert = Interval.invert;\n\nfunction noteConstructor(name, duration) {\n  if (typeof name === 'string')\n    return Note.fromString(name, duration);\n  else\n    return new Note(name, duration);\n}\n\nnoteConstructor.fromString = Note.fromString;\nnoteConstructor.fromKey = Note.fromKey;\nnoteConstructor.fromFrequency = Note.fromFrequency;\nnoteConstructor.fromMIDI = Note.fromMIDI;\n\nfunction chordConstructor(name, symbol) {\n  if (typeof name === 'string') {\n    var root, octave;\n    root = name.match(/^([a-h])(x|#|bb|b?)/i);\n    if (root && root[0]) {\n      octave = typeof symbol === 'number' ? symbol.toString(10) : '4';\n      return new Chord(Note.fromString(root[0].toLowerCase() + octave),\n                            name.substr(root[0].length));\n    }\n  } else if (name instanceof Note)\n    return new Chord(name, symbol);\n\n  throw new Error('Invalid Chord. Couldn\\'t find note name');\n}\n\nfunction scaleConstructor(tonic, scale) {\n  tonic = (tonic instanceof Note) ? tonic : teoria.note(tonic);\n  return new Scale(tonic, scale);\n}\n\nteoria = {\n  note: noteConstructor,\n\n  chord: chordConstructor,\n\n  interval: intervalConstructor,\n\n  scale: scaleConstructor,\n\n  Note: Note,\n  Chord: Chord,\n  Scale: Scale,\n  Interval: Interval\n};\n\n\nrequire('./lib/sugar')(teoria);\nexports = module.exports = teoria;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/teoria/index.js\n// module id = 45\n// module chunks = 0","var coords = require('notecoord');\nvar accval = require('accidental-value');\n\nmodule.exports = function scientific(name) {\n  var format = /^([a-h])(x|#|bb|b?)(-?\\d*)/i;\n\n  var parser = name.match(format);\n  if (!(parser && name === parser[0] && parser[3].length)) return;\n\n  var noteName = parser[1];\n  var octave = +parser[3];\n  var accidental = parser[2].length ? parser[2].toLowerCase() : '';\n\n  var accidentalValue = accval.interval(accidental);\n  var coord = coords(noteName.toLowerCase());\n\n  coord[0] += octave;\n  coord[0] += accidentalValue[0] - coords.A4[0];\n  coord[1] += accidentalValue[1] - coords.A4[1];\n\n  return coord;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/scientific-notation/index.js\n// module id = 46\n// module chunks = 0","var coords = require('notecoord');\nvar accval = require('accidental-value');\n\nmodule.exports = function helmholtz(name) {\n  var name = name.replace(/\\u2032/g, \"'\").replace(/\\u0375/g, ',');\n  var parts = name.match(/^(,*)([a-h])(x|#|bb|b?)([,\\']*)$/i);\n\n  if (!parts || name !== parts[0])\n    throw new Error('Invalid formatting');\n\n  var note = parts[2];\n  var octaveFirst = parts[1];\n  var octaveLast = parts[4];\n  var lower = note === note.toLowerCase();\n  var octave;\n\n  if (octaveFirst) {\n    if (lower)\n      throw new Error('Invalid formatting - found commas before lowercase note');\n\n    octave = 2 - octaveFirst.length;\n  } else if (octaveLast) {\n    if (octaveLast.match(/^'+$/) && lower)\n      octave = 3 + octaveLast.length;\n    else if (octaveLast.match(/^,+$/) && !lower)\n      octave = 2 - octaveLast.length;\n    else\n      throw new Error('Invalid formatting - mismatch between octave ' +\n        'indicator and letter case')\n  } else\n    octave = lower ? 3 : 2;\n\n  var accidentalValue = accval.interval(parts[3].toLowerCase());\n  var coord = coords(note.toLowerCase());\n\n  coord[0] += octave;\n  coord[0] += accidentalValue[0] - coords.A4[0];\n  coord[1] += accidentalValue[1] - coords.A4[1];\n\n  return coord;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/helmholtz/index.js\n// module id = 47\n// module chunks = 0","module.exports = function(coord, stdPitch) {\n  if (typeof coord === 'number') {\n    stdPitch = coord;\n    return function(coord) {\n      return stdPitch * Math.pow(2, (coord[0] * 12 + coord[1] * 7) / 12);\n    }\n  }\n\n  stdPitch = stdPitch || 440;\n  return stdPitch * Math.pow(2, (coord[0] * 12 + coord[1] * 7) / 12);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/pitch-fq/index.js\n// module id = 48\n// module chunks = 0","var pattern = /^(AA|A|P|M|m|d|dd)(-?\\d+)$/;\n\n// The interval it takes to raise a note a semitone\nvar sharp = [-4, 7];\n\nvar pAlts = ['dd', 'd', 'P', 'A', 'AA'];\nvar mAlts = ['dd', 'd', 'm', 'M', 'A', 'AA'];\n\nvar baseIntervals = [\n  [0, 0],\n  [3, -5],\n  [2, -3],\n  [1, -1],\n  [0, 1],\n  [3, -4],\n  [2, -2],\n  [1, 0]\n];\n\nmodule.exports = function(simple) {\n  var parser = simple.match(pattern);\n  if (!parser) return null;\n\n  var quality = parser[1];\n  var number = +parser[2];\n  var sign = number < 0 ? -1 : 1;\n\n  number = sign < 0 ? -number : number;\n\n  var lower = number > 8 ? (number % 7 || 7) : number;\n  var octaves = (number - lower) / 7;\n\n  var base = baseIntervals[lower - 1];\n  var alts = base[0] <= 1 ? pAlts : mAlts;\n  var alt = alts.indexOf(quality) - 2;\n\n  // this happens, if the alteration wasn't suitable for this type\n  // of interval, such as P2 or M5 (no \"perfect second\" or \"major fifth\")\n  if (alt === -3) return null;\n\n  return [\n    sign * (base[0] + octaves + sharp[0] * alt),\n    sign * (base[1] + sharp[1] * alt)\n  ];\n}\n\n// Copy to avoid overwriting internal base intervals\nmodule.exports.coords = baseIntervals.slice(0);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/interval-coords/index.js\n// module id = 49\n// module chunks = 0","var daccord = require('daccord');\nvar knowledge = require('./knowledge');\nvar Note = require('./note');\nvar Interval = require('./interval');\n\nfunction Chord(root, name) {\n  if (!(this instanceof Chord)) return new Chord(root, name);\n  name = name || '';\n  this.name = root.name().toUpperCase() + root.accidental() + name;\n  this.symbol = name;\n  this.root = root;\n  this.intervals = [];\n  this._voicing = [];\n\n  var bass = name.split('/');\n  if (bass.length === 2 && bass[1].trim() !== '9') {\n    name = bass[0];\n    bass = bass[1].trim();\n  } else {\n    bass = null;\n  }\n\n  this.intervals = daccord(name).map(Interval.toCoord);\n  this._voicing = this.intervals.slice();\n\n  if (bass) {\n    var intervals = this.intervals, bassInterval, note;\n    // Make sure the bass is atop of the root note\n    note = Note.fromString(bass + (root.octave() + 1)); // crude\n\n    bassInterval = Interval.between(root, note);\n    bass = bassInterval.simple();\n    bassInterval = bassInterval.invert().direction('down');\n\n    this._voicing = [bassInterval];\n    for (var i = 0, length = intervals.length;  i < length; i++) {\n      if (!intervals[i].simple().equal(bass))\n        this._voicing.push(intervals[i]);\n    }\n  }\n}\n\nChord.prototype = {\n  notes: function() {\n    var root = this.root;\n    return this.voicing().map(function(interval) {\n      return root.interval(interval);\n    });\n  },\n\n  simple: function() {\n    return this.notes().map(function(n) { return n.toString(true); });\n  },\n\n  bass: function() {\n    return this.root.interval(this._voicing[0]);\n  },\n\n  voicing: function(voicing) {\n    // Get the voicing\n    if (!voicing) {\n      return this._voicing;\n    }\n\n    // Set the voicing\n    this._voicing = [];\n    for (var i = 0, length = voicing.length; i < length; i++) {\n      this._voicing[i] = Interval.toCoord(voicing[i]);\n    }\n\n    return this;\n  },\n\n  resetVoicing: function() {\n    this._voicing = this.intervals;\n  },\n\n  dominant: function(additional) {\n    additional = additional || '';\n    return new Chord(this.root.interval('P5'), additional);\n  },\n\n  subdominant: function(additional) {\n    additional = additional || '';\n    return new Chord(this.root.interval('P4'), additional);\n  },\n\n  parallel: function(additional) {\n    additional = additional || '';\n    var quality = this.quality();\n\n    if (this.chordType() !== 'triad' || quality === 'diminished' ||\n        quality === 'augmented') {\n      throw new Error('Only major/minor triads have parallel chords');\n    }\n\n    if (quality === 'major') {\n      return new Chord(this.root.interval('m3', 'down'), 'm');\n    } else {\n      return new Chord(this.root.interval('m3', 'up'));\n    }\n  },\n\n  quality: function() {\n    var third, fifth, seventh, intervals = this.intervals;\n\n    for (var i = 0, length = intervals.length; i < length; i++) {\n      if (intervals[i].number() === 3) {\n        third = intervals[i];\n      } else if (intervals[i].number() === 5) {\n        fifth = intervals[i];\n      } else if (intervals[i].number() === 7) {\n        seventh = intervals[i];\n      }\n    }\n\n    if (!third) {\n      return;\n    }\n\n    third = (third.direction() === 'down') ? third.invert() : third;\n    third = third.simple().toString();\n\n    if (fifth) {\n      fifth = (fifth.direction === 'down') ? fifth.invert() : fifth;\n      fifth = fifth.simple().toString();\n    }\n\n    if (seventh) {\n      seventh = (seventh.direction === 'down') ? seventh.invert() : seventh;\n      seventh = seventh.simple().toString();\n    }\n\n    if (third === 'M3') {\n      if (fifth === 'A5') {\n        return 'augmented';\n      } else if (fifth === 'P5') {\n        return (seventh === 'm7') ? 'dominant' : 'major';\n      }\n\n      return 'major';\n    } else if (third === 'm3') {\n      if (fifth === 'P5') {\n        return 'minor';\n      } else if (fifth === 'd5') {\n        return (seventh === 'm7') ? 'half-diminished' : 'diminished';\n      }\n\n      return 'minor';\n    }\n  },\n\n  chordType: function() { // In need of better name\n    var length = this.intervals.length, interval, has, invert, i, name;\n\n    if (length === 2) {\n      return 'dyad';\n    } else if (length === 3) {\n      has = {unison: false, third: false, fifth: false};\n      for (i = 0; i < length; i++) {\n        interval = this.intervals[i];\n        invert = interval.invert();\n        if (interval.base() in has) {\n          has[interval.base()] = true;\n        } else if (invert.base() in has) {\n          has[invert.base()] = true;\n        }\n      }\n\n      name = (has.unison && has.third && has.fifth) ? 'triad' : 'trichord';\n    } else if (length === 4) {\n      has = {unison: false, third: false, fifth: false, seventh: false};\n      for (i = 0; i < length; i++) {\n        interval = this.intervals[i];\n        invert = interval.invert();\n        if (interval.base() in has) {\n          has[interval.base()] = true;\n        } else if (invert.base() in has) {\n          has[invert.base()] = true;\n        }\n      }\n\n      if (has.unison && has.third && has.fifth && has.seventh) {\n        name = 'tetrad';\n      }\n    }\n\n    return name || 'unknown';\n  },\n\n  get: function(interval) {\n    if (typeof interval === 'string' && interval in knowledge.stepNumber) {\n      var intervals = this.intervals, i, length;\n\n      interval = knowledge.stepNumber[interval];\n      for (i = 0, length = intervals.length; i < length; i++) {\n        if (intervals[i].number() === interval) {\n          return this.root.interval(intervals[i]);\n        }\n      }\n\n      return null;\n    } else {\n      throw new Error('Invalid interval name');\n    }\n  },\n\n  interval: function(interval) {\n    return new Chord(this.root.interval(interval), this.symbol);\n  },\n\n  transpose: function(interval) {\n    this.root.transpose(interval);\n    this.name = this.root.name().toUpperCase() +\n                this.root.accidental() + this.symbol;\n\n    return this;\n  },\n\n  toString: function() {\n    return this.name;\n  }\n};\n\nmodule.exports = Chord;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/teoria/lib/chord.js\n// module id = 50\n// module chunks = 0","var SYMBOLS = {\n  'm': ['m3', 'P5'],\n  'mi': ['m3', 'P5'],\n  'min': ['m3', 'P5'],\n  '-': ['m3', 'P5'],\n\n  'M': ['M3', 'P5'],\n  'ma': ['M3', 'P5'],\n  '': ['M3', 'P5'],\n\n  '+': ['M3', 'A5'],\n  'aug': ['M3', 'A5'],\n\n  'dim': ['m3', 'd5'],\n  'o': ['m3', 'd5'],\n\n  'maj': ['M3', 'P5', 'M7'],\n  'dom': ['M3', 'P5', 'm7'],\n  'Ã¸': ['m3', 'd5', 'm7'],\n\n  '5': ['P5'],\n\n  '6/9': ['M3', 'P5', 'M6', 'M9']\n};\n\nmodule.exports = function(symbol) {\n  var c, parsing = 'quality', additionals = [], name, chordLength = 2\n  var notes = ['P1', 'M3', 'P5', 'm7', 'M9', 'P11', 'M13'];\n  var explicitMajor = false;\n\n  function setChord(name) {\n    var intervals = SYMBOLS[name];\n    for (var i = 0, len = intervals.length; i < len; i++) {\n      notes[i + 1] = intervals[i];\n    }\n\n    chordLength = intervals.length;\n  }\n\n  // Remove whitespace, commas and parentheses\n  symbol = symbol.replace(/[,\\s\\(\\)]/g, '');\n  for (var i = 0, len = symbol.length; i < len; i++) {\n    if (!(c = symbol[i]))\n      return;\n\n    if (parsing === 'quality') {\n      var sub3 = (i + 2) < len ? symbol.substr(i, 3).toLowerCase() : null;\n      var sub2 = (i + 1) < len ? symbol.substr(i, 2).toLowerCase() : null;\n      if (sub3 in SYMBOLS)\n        name = sub3;\n      else if (sub2 in SYMBOLS)\n        name = sub2;\n      else if (c in SYMBOLS)\n        name = c;\n      else\n        name = '';\n\n      if (name)\n        setChord(name);\n\n      if (name === 'M' || name === 'ma' || name === 'maj')\n        explicitMajor = true;\n\n\n      i += name.length - 1;\n      parsing = 'extension';\n    } else if (parsing === 'extension') {\n      c = (c === '1' && symbol[i + 1]) ? +symbol.substr(i, 2) : +c;\n\n      if (!isNaN(c) && c !== 6) {\n        chordLength = (c - 1) / 2;\n\n        if (chordLength !== Math.round(chordLength))\n          return new Error('Invalid interval extension: ' + c.toString(10));\n\n        if (name === 'o' || name === 'dim')\n          notes[3] = 'd7';\n        else if (explicitMajor)\n          notes[3] = 'M7';\n\n        i += c >= 10 ? 1 : 0;\n      } else if (c === 6) {\n        notes[3] = 'M6';\n        chordLength = Math.max(3, chordLength);\n      } else\n        i -= 1;\n\n      parsing = 'alterations';\n    } else if (parsing === 'alterations') {\n      var alterations = symbol.substr(i).split(/(#|b|add|maj|sus|M)/i),\n          next, flat = false, sharp = false;\n\n      if (alterations.length === 1)\n        return new Error('Invalid alteration');\n      else if (alterations[0].length !== 0)\n        return new Error('Invalid token: \\'' + alterations[0] + '\\'');\n\n      var ignore = false;\n      alterations.forEach(function(alt, i, arr) {\n        if (ignore || !alt.length)\n          return ignore = false;\n\n        var next = arr[i + 1], lower = alt.toLowerCase();\n        if (alt === 'M' || lower === 'maj') {\n          if (next === '7')\n            ignore = true;\n\n          chordLength = Math.max(3, chordLength);\n          notes[3] = 'M7';\n        } else if (lower === 'sus') {\n          var type = 'P4';\n          if (next === '2' || next === '4') {\n            ignore = true;\n\n            if (next === '2')\n              type = 'M2';\n          }\n\n          notes[1] = type; // Replace third with M2 or P4\n        } else if (lower === 'add') {\n          if (next === '9')\n            additionals.push('M9');\n          else if (next === '11')\n            additionals.push('P11');\n          else if (next === '13')\n            additionals.push('M13');\n\n          ignore = true\n        } else if (lower === 'b') {\n          flat = true;\n        } else if (lower === '#') {\n          sharp = true;\n        } else {\n          var token = +alt, quality, intPos;\n          if (isNaN(token) || String(token).length !== alt.length)\n            return new Error('Invalid token: \\'' + alt + '\\'');\n\n          if (token === 6) {\n            if (sharp)\n              notes[3] = 'A6';\n            else if (flat)\n              notes[3] = 'm6';\n            else\n              notes[3] = 'M6';\n\n            chordLength = Math.max(3, chordLength);\n            return;\n          }\n\n          // Calculate the position in the 'note' array\n          intPos = (token - 1) / 2;\n          if (chordLength < intPos)\n            chordLength = intPos;\n\n          if (token < 5 || token === 7 || intPos !== Math.round(intPos))\n            return new Error('Invalid interval alteration: ' + token);\n\n          quality = notes[intPos][0];\n\n          // Alterate the quality of the interval according the accidentals\n          if (sharp) {\n            if (quality === 'd')\n              quality = 'm';\n            else if (quality === 'm')\n              quality = 'M';\n            else if (quality === 'M' || quality === 'P')\n              quality = 'A';\n          } else if (flat) {\n            if (quality === 'A')\n              quality = 'M';\n            else if (quality === 'M')\n              quality = 'm';\n            else if (quality === 'm' || quality === 'P')\n              quality = 'd';\n          }\n\n          sharp = flat = false;\n          notes[intPos] = quality + token;\n        }\n      });\n      parsing = 'ended';\n    } else if (parsing === 'ended') {\n      break;\n    }\n  }\n\n  return notes.slice(0, chordLength + 1).concat(additionals);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/daccord/index.js\n// module id = 51\n// module chunks = 0","var knowledge = require('./knowledge');\nvar Interval = require('./interval');\n\nvar scales = {\n  aeolian: ['P1', 'M2', 'm3', 'P4', 'P5', 'm6', 'm7'],\n  blues: ['P1', 'm3', 'P4', 'd5', 'P5', 'm7'],\n  chromatic: ['P1', 'm2', 'M2', 'm3', 'M3', 'P4',\n    'A4', 'P5', 'm6', 'M6', 'm7', 'M7'],\n  dorian: ['P1', 'M2', 'm3', 'P4', 'P5', 'M6', 'm7'],\n  doubleharmonic: ['P1', 'm2', 'M3', 'P4', 'P5', 'm6', 'M7'],\n  harmonicminor: ['P1', 'M2', 'm3', 'P4', 'P5', 'm6', 'M7'],\n  ionian: ['P1', 'M2', 'M3', 'P4', 'P5', 'M6', 'M7'],\n  locrian: ['P1', 'm2', 'm3', 'P4', 'd5', 'm6', 'm7'],\n  lydian: ['P1', 'M2', 'M3', 'A4', 'P5', 'M6', 'M7'],\n  majorpentatonic: ['P1', 'M2', 'M3', 'P5', 'M6'],\n  melodicminor: ['P1', 'M2', 'm3', 'P4', 'P5', 'M6', 'M7'],\n  minorpentatonic: ['P1', 'm3', 'P4', 'P5', 'm7'],\n  mixolydian: ['P1', 'M2', 'M3', 'P4', 'P5', 'M6', 'm7'],\n  phrygian: ['P1', 'm2', 'm3', 'P4', 'P5', 'm6', 'm7'],\n  wholetone: ['P1', 'M2', 'M3', 'A4', 'A5', 'A6']\n};\n\n// synonyms\nscales.harmonicchromatic = scales.chromatic;\nscales.minor = scales.aeolian;\nscales.major = scales.ionian;\nscales.flamenco = scales.doubleharmonic;\n\nfunction Scale(tonic, scale) {\n  if (!(this instanceof Scale)) return new Scale(tonic, scale);\n  var scaleName, i;\n  if (!('coord' in tonic)) {\n    throw new Error('Invalid Tonic');\n  }\n\n  if (typeof scale === 'string') {\n    scaleName = scale;\n    scale = scales[scale];\n    if (!scale)\n      throw new Error('Invalid Scale');\n  } else {\n    for (i in scales) {\n      if (scales.hasOwnProperty(i)) {\n        if (scales[i].toString() === scale.toString()) {\n          scaleName = i;\n          break;\n        }\n      }\n    }\n  }\n\n  this.name = scaleName;\n  this.tonic = tonic;\n  this.scale = scale;\n}\n\nScale.prototype = {\n  notes: function() {\n    var notes = [];\n\n    for (var i = 0, length = this.scale.length; i < length; i++) {\n      notes.push(this.tonic.interval(this.scale[i]));\n    }\n\n    return notes;\n  },\n\n  simple: function() {\n    return this.notes().map(function(n) { return n.toString(true); });\n  },\n\n  type: function() {\n    var length = this.scale.length - 2;\n    if (length < 8) {\n      return ['di', 'tri', 'tetra', 'penta', 'hexa', 'hepta', 'octa'][length] +\n        'tonic';\n    }\n  },\n\n  get: function(i) {\n    var isStepStr = typeof i === 'string' && i in knowledge.stepNumber;\n    i = isStepStr ? knowledge.stepNumber[i] : i;\n    var len = this.scale.length;\n    var interval, octaves;\n\n    if (i < 0) {\n      interval = this.scale[i % len + len - 1];\n      octaves = Math.floor((i - 1) / len);\n    } else if (i % len === 0) {\n      interval = this.scale[len - 1];\n      octaves = (i / len) - 1;\n    } else {\n      interval = this.scale[i % len - 1];\n      octaves = Math.floor(i / len);\n    }\n\n    return this.tonic.interval(interval).interval(new Interval([octaves, 0]));\n  },\n\n  solfege: function(index, showOctaves) {\n    if (index)\n      return this.get(index).solfege(this, showOctaves);\n\n    return this.notes().map(function(n) {\n      return n.solfege(this, showOctaves);\n    });\n  },\n\n  interval: function(interval) {\n    interval = (typeof interval === 'string') ?\n      Interval.toCoord(interval) : interval;\n    return new Scale(this.tonic.interval(interval), this.scale);\n  },\n\n  transpose: function(interval) {\n    var scale = this.interval(interval);\n    this.scale = scale.scale;\n    this.tonic = scale.tonic;\n\n    return this;\n  }\n};\nScale.KNOWN_SCALES = Object.keys(scales);\n\nmodule.exports = Scale;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/teoria/lib/scale.js\n// module id = 52\n// module chunks = 0","var knowledge = require('./knowledge');\n\nmodule.exports = function(teoria) {\n  var Note = teoria.Note;\n  var Chord = teoria.Chord;\n  var Scale = teoria.Scale;\n\n  Note.prototype.chord = function(chord) {\n    var isShortChord = chord in knowledge.chordShort;\n    chord = isShortChord ? knowledge.chordShort[chord] : chord;\n\n    return new Chord(this, chord);\n  };\n\n  Note.prototype.scale = function(scale) {\n    return new Scale(this, scale);\n  };\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/teoria/lib/sugar.js\n// module id = 53\n// module chunks = 0","var arraySample = require('./_arraySample'),\n    baseSample = require('./_baseSample'),\n    isArray = require('./isArray');\n\n/**\n * Gets a random element from `collection`.\n *\n * @static\n * @memberOf _\n * @since 2.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to sample.\n * @returns {*} Returns the random element.\n * @example\n *\n * _.sample([1, 2, 3, 4]);\n * // => 2\n */\nfunction sample(collection) {\n  var func = isArray(collection) ? arraySample : baseSample;\n  return func(collection);\n}\n\nmodule.exports = sample;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/sample.js\n// module id = 54\n// module chunks = 0","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_baseRandom.js\n// module id = 55\n// module chunks = 0","var arraySample = require('./_arraySample'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.sample`.\n *\n * @private\n * @param {Array|Object} collection The collection to sample.\n * @returns {*} Returns the random element.\n */\nfunction baseSample(collection) {\n  return arraySample(values(collection));\n}\n\nmodule.exports = baseSample;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_baseSample.js\n// module id = 56\n// module chunks = 0","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/values.js\n// module id = 57\n// module chunks = 0","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_baseValues.js\n// module id = 58\n// module chunks = 0","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_arrayMap.js\n// module id = 59\n// module chunks = 0","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeys = require('./_baseKeys'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = keys;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/keys.js\n// module id = 60\n// module chunks = 0","var baseTimes = require('./_baseTimes'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isIndex = require('./_isIndex'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_arrayLikeKeys.js\n// module id = 61\n// module chunks = 0","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_baseTimes.js\n// module id = 62\n// module chunks = 0","var baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/isArguments.js\n// module id = 63\n// module chunks = 0","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_baseIsArguments.js\n// module id = 64\n// module chunks = 0","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_getRawTag.js\n// module id = 65\n// module chunks = 0","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_objectToString.js\n// module id = 66\n// module chunks = 0","var root = require('./_root'),\n    stubFalse = require('./stubFalse');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/isBuffer.js\n// module id = 67\n// module chunks = 0","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/stubFalse.js\n// module id = 68\n// module chunks = 0","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_isIndex.js\n// module id = 69\n// module chunks = 0","var baseIsTypedArray = require('./_baseIsTypedArray'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/isTypedArray.js\n// module id = 70\n// module chunks = 0","var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_baseIsTypedArray.js\n// module id = 71\n// module chunks = 0","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_baseUnary.js\n// module id = 72\n// module chunks = 0","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_nodeUtil.js\n// module id = 73\n// module chunks = 0","var isPrototype = require('./_isPrototype'),\n    nativeKeys = require('./_nativeKeys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeys;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_baseKeys.js\n// module id = 74\n// module chunks = 0","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_isPrototype.js\n// module id = 75\n// module chunks = 0","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_nativeKeys.js\n// module id = 76\n// module chunks = 0","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/_overArg.js\n// module id = 77\n// module chunks = 0","var isFunction = require('./isFunction'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/isArrayLike.js\n// module id = 78\n// module chunks = 0","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/isFunction.js\n// module id = 79\n// module chunks = 0","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lodash/isObject.js\n// module id = 80\n// module chunks = 0","const progressions = [\n    // These assume major scale\n    // Also, doesn't allow stuff like bII7\n    // TODO: Convert to using something more versatile\n    [\n        // ii V7 I I\n        {\n            degree: 2,\n            type: 'm7'\n        },\n        {\n            degree: 5,\n            type: '7'\n        },\n        {\n            degree: 1,\n            type: 'maj7'\n        },\n        {\n            degree: 1,\n            type: 'maj7'\n        }\n    ],\n    [\n        // I-vi-ii-V7\n        {\n            degree: 1,\n            type: 'maj7'\n        },\n        {\n            degree: 6,\n            type: 'm7'\n        },\n        {\n            degree: 2,\n            type: 'm7'\n        },\n        {\n            degree: 5,\n            type: '7'\n        }\n    ]\n];\n\nmodule.exports = {\n    getAll: () => progressions\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/progressions.js","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/registerServiceWorker.js"],"sourceRoot":""}